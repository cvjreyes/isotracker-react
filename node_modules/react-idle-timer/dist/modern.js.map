{"version":3,"file":"modern.js","sources":["../src/utils.js","../src/MessageChannel/methods/broadcastChannel.js","../src/MessageChannel/ObliviousSet.js","../src/MessageChannel/methods/localStorage.js","../src/MessageChannel/methods/simulate.js","../src/MessageChannel/methodChooser.js","../src/MessageChannel/MessageChannel.js","../src/MessageChannel/leaderElection.js","../src/TabManager.js","../src/IdleTimer.js","../src/useIdleTimer.js"],"sourcesContent":["/**\n * Determine if we are in a browser\n * or a server environment\n * @type {Boolean}\n * @private\n */\nexport const IS_BROWSER =\n  (typeof window === 'undefined' ? 'undefined' : typeof window) === 'object'\n\n/**\n * Default element to listen for events on\n * @type {Object}\n * @private\n */\nexport const DEFAULT_ELEMENT = IS_BROWSER ? document : {}\n\n/**\n * The default events to determine activity\n * @type {Array}\n * @private\n */\nexport const DEFAULT_EVENTS = [\n  'mousemove',\n  'keydown',\n  'wheel',\n  'DOMMouseScroll',\n  'mousewheel',\n  'mousedown',\n  'touchstart',\n  'touchmove',\n  'MSPointerDown',\n  'MSPointerMove',\n  'visibilitychange'\n]\n\n/**\n * Creates a debounced function that delays invoking func until\n * after delay milliseconds has elapsed since the last time the\n * debounced function was invoked.\n * @name debounced\n * @param  {Function} fn   Function to debounce\n * @param  {Number} delay  How long to wait\n * @return {Function}      Executed Function\n * @private\n **/\nexport function debounced (fn, delay) {\n  let timerId\n  function result (...args) {\n    if (timerId) {\n      clearTimeout(timerId)\n    }\n    timerId = setTimeout(() => {\n      fn(...args)\n      timerId = null\n    }, delay)\n  }\n\n  result.cancel = function () {\n    clearTimeout(timerId)\n  }\n\n  return result\n}\n\n/**\n * Creates a throttled function that only invokes func at most\n * once per every wait milliseconds.\n * @name throttled\n * @param  {Function} fn   Function to debounce\n * @param  {Number} delay  How long to wait\n * @return {Function}      Executed Function\n * @private\n **/\nexport function throttled (fn, delay) {\n  let lastCall = 0\n  return function (...args) {\n    const now = new Date().getTime()\n    if (now - lastCall < delay) {\n      return\n    }\n    lastCall = now\n    return fn(...args)\n  }\n}\n\nlet lastMs = 0\nlet additional = 0\n\n/**\n * Returns current time in microseconds.\n *\n * @returns {Number} current time in microseconds\n * @private\n */\nexport function microSeconds () {\n  const ms = new Date().getTime()\n  if (ms === lastMs) {\n    additional++\n    return ms * 1000 + additional\n  } else {\n    lastMs = ms\n    additional = 0\n    return ms * 1000\n  }\n}\n\n/**\n * Generate and return a random token.\n *\n * @returns {String} Random token.\n * @private\n */\nexport function randomToken () {\n  return Math.random().toString(36).substring(2)\n}\n\n/**\n * Checks if a js object is a promise.\n *\n * @param {*} obj  Any javascript object.\n * @returns {Boolean} Wether or not this object is a promise.\n */\nexport function isPromise (obj) {\n  if (obj && typeof obj.then === 'function') {\n    /* istanbul ignore next */\n    return true\n  } else {\n    return false\n  }\n}\n\n/**\n * Sleeps for x amount of milliseconds.\n *\n * @param {Number} time   Amount of time in milliseconds.\n * @returns {Promise}\n * @private\n */\nexport function sleep (time = 0) {\n  return new Promise(resolve => setTimeout(resolve, time))\n}\n\n/**\n * Get the current timestamp.\n *\n * @returns {Number}\n * @private\n */\nexport function now () {\n  return new Date().getTime()\n}\n\n/**\n * Waits until the given function returns true\n * @param  {function}  fn\n * @return {Promise}\n */\nexport function waitUntil (fn, timeout = 0, interval = 20) {\n  let timedOut = false\n  let ok = false\n\n  /* istanbul ignore next */\n  if (timeout !== 0) {\n    sleep(timeout).then(() => {\n      timedOut = true\n    })\n  }\n\n  return new Promise((resolve, reject) => {\n    const runLoop = () => {\n      if (ok) {\n        resolve()\n        return\n      }\n      /* istanbul ignore next */\n      if (timedOut) {\n        reject(new Error(`❌ waitUntil reached timeout of ${timeout}ms`))\n        return\n      }\n      sleep(interval).then(() => {\n        ok = fn()\n        runLoop()\n      })\n    }\n    runLoop()\n  })\n}\n","/* eslint-env browser */\nimport { microSeconds } from '../../utils'\n\nexport const type = 'broadcastChannel'\n\nexport function create (channelName) {\n  const state = {\n    messagesCallback: null,\n    bc: new BroadcastChannel(channelName)\n  }\n\n  state.bc.onmessage = msg => {\n    if (state.messagesCallback) {\n      state.messagesCallback(msg.data)\n    }\n  }\n\n  return state\n}\n\nexport function close (channelState) {\n  channelState.bc.close()\n}\n\nexport function postMessage (channelState, messageJson) {\n  try {\n    channelState.bc.postMessage(messageJson, false)\n    return Promise.resolve()\n  } catch (err) {\n    /* istanbul ignore next */\n    return Promise.reject(err)\n  }\n}\n\nexport function onMessage (channelState, fn) {\n  channelState.messagesCallback = fn\n}\n\nexport function canBeUsed () {\n  if (typeof BroadcastChannel === 'function') {\n    return true\n  } else {\n    /* istanbul ignore next */\n    return false\n  }\n}\n\nexport function averageResponseTime () {\n  return 150\n}\n\nexport default {\n  create,\n  close,\n  onMessage,\n  postMessage,\n  canBeUsed,\n  type,\n  averageResponseTime,\n  microSeconds\n}\n","import { now } from '../utils'\n\nexport default class ObliviousSet {\n  constructor (ttl = 1000 * 60) {\n    this.ttl = ttl\n    this.set = new Set()\n    this.timeMap = new Map()\n  }\n\n  has (value) {\n    return this.set.has(value)\n  }\n\n  add (value) {\n    this.timeMap.set(value, now())\n    this.set.add(value)\n    this._removeTooOldValues()\n  }\n\n  clear () {\n    this.set.clear()\n    this.timeMap.clear()\n  }\n\n  _removeTooOldValues () {\n    const olderThen = now() - this.ttl\n    const iterator = this.set[Symbol.iterator]()\n\n    while (true) {\n      const value = iterator.next().value\n      if (!value) return // no more elements\n      const time = this.timeMap.get(value)\n      if (time < olderThen) {\n        this.timeMap.delete(value)\n        this.set.delete(value)\n      } else {\n        // We reached a value that is not old enough\n        return\n      }\n    }\n  }\n}\n","import ObliviousSet from '../ObliviousSet'\n\nimport {\n  randomToken,\n  microSeconds\n} from '../../utils'\n\nexport const type = 'localStorage'\n\n/**\n * Returns local storage instance\n */\nexport function getLocalStorage () {\n  let localStorage\n  if (typeof window === 'undefined') return null\n  try {\n    localStorage = window.localStorage\n    localStorage = window['ie8-eventlistener/storage'] || window.localStorage\n  } catch (e) {\n    // New versions of Firefox throw a Security exception\n    // if cookies are disabled. See\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1028153\n  }\n  return localStorage\n}\n\nexport function storageKey (channelName) {\n  return channelName\n}\n\n/**\n* writes the new message to the storage\n* and fires the storage-event so other readers can find it\n*/\nexport function postMessage (channelState, messageJson) {\n  return new Promise(resolve => {\n    const key = storageKey(channelState.channelName)\n    const writeObj = {\n      token: randomToken(),\n      time: new Date().getTime(),\n      data: messageJson,\n      uuid: channelState.uuid\n    }\n    const value = JSON.stringify(writeObj)\n    getLocalStorage().setItem(key, value)\n\n    /**\n       * StorageEvent does not fire the 'storage' event\n       * in the window that changes the state of the local storage.\n       * So we fire it manually\n       */\n    const ev = document.createEvent('Event')\n    ev.initEvent('storage', true, true)\n    ev.key = key\n    ev.newValue = value\n    window.dispatchEvent(ev)\n\n    resolve()\n  })\n}\n\nexport function addStorageEventListener (channelName, fn) {\n  const key = storageKey(channelName)\n  const listener = ev => {\n    if (ev.key === key) {\n      fn(JSON.parse(ev.newValue))\n    }\n  }\n  window.addEventListener('storage', listener)\n  return listener\n}\nexport function removeStorageEventListener (listener) {\n  window.removeEventListener('storage', listener)\n}\n\nexport function create (channelName, options = {}) {\n  if (!canBeUsed()) {\n    /* istanbul ignore next */\n    throw new Error('❌ localStorage cannot be used.')\n  }\n\n  const uuid = randomToken()\n\n  /**\n     * eMIs\n     * contains all messages that have been emitted before\n     * @type {ObliviousSet}\n     */\n  const eMIs = new ObliviousSet(options.removeTimeout)\n\n  const state = {\n    channelName,\n    uuid,\n    eMIs // emittedMessagesIds\n  }\n\n  state.listener = addStorageEventListener(\n    channelName,\n    (msgObj) => {\n      if (!state.messagesCallback) return // no listener\n      if (msgObj.uuid === uuid) return // own message\n      if (!msgObj.token || eMIs.has(msgObj.token)) return // already emitted\n      if (msgObj.data.time && msgObj.data.time < state.messagesCallbackTime) return // too old\n\n      eMIs.add(msgObj.token)\n      state.messagesCallback(msgObj.data)\n    }\n  )\n\n  return state\n}\n\nexport function close (channelState) {\n  removeStorageEventListener(channelState.listener)\n}\n\nexport function onMessage (channelState, fn, time) {\n  channelState.messagesCallbackTime = time\n  channelState.messagesCallback = fn\n}\n\nexport function canBeUsed () {\n  const ls = getLocalStorage()\n\n  if (!ls) return false\n\n  try {\n    const key = '__check'\n    ls.setItem(key, 'works')\n    ls.removeItem(key)\n  } catch (e) {\n    // Safari 10 in private mode will not allow write access to local\n    // storage and fail with a QuotaExceededError. See\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API#Private_Browsing_Incognito_modes\n\n    /* istanbul ignore next */\n    return false\n  }\n\n  return true\n}\n\n/* istanbul ignore next */\nexport function averageResponseTime () {\n  const defaultTime = 120\n  const userAgent = navigator.userAgent.toLowerCase()\n  if (userAgent.includes('safari') && !userAgent.includes('chrome')) {\n    // safari is much slower so this time is higher\n    return defaultTime * 2\n  }\n  return defaultTime\n}\n\nexport default {\n  create,\n  close,\n  onMessage,\n  postMessage,\n  canBeUsed,\n  type,\n  averageResponseTime,\n  microSeconds\n}\n","import { microSeconds } from '../../utils'\n\nexport const type = 'simulate'\n\nconst SIMULATE_CHANNELS = new Set()\n\nexport function create (channelName) {\n  const state = {\n    name: channelName,\n    messagesCallback: null\n  }\n  SIMULATE_CHANNELS.add(state)\n\n  return state\n}\n\nexport function close (channelState) {\n  SIMULATE_CHANNELS.delete(channelState)\n}\n\nexport function postMessage (channelState, messageJson) {\n  return new Promise(resolve => setTimeout(() => {\n    const channelArray = Array.from(SIMULATE_CHANNELS)\n    channelArray\n      .filter(channel => channel.name === channelState.name)\n      .filter(channel => channel !== channelState)\n      .filter(channel => !!channel.messagesCallback)\n      .forEach(channel => channel.messagesCallback(messageJson))\n    resolve()\n  }, 5))\n}\n\nexport function onMessage (channelState, fn) {\n  channelState.messagesCallback = fn\n}\n\n/* istanbul ignore next */\nexport function canBeUsed () {\n  return true\n}\n\n/* istanbul ignore next */\nexport function averageResponseTime () {\n  return 5\n}\n\nexport default {\n  create,\n  close,\n  onMessage,\n  postMessage,\n  canBeUsed,\n  type,\n  averageResponseTime,\n  microSeconds\n}\n","import BroadcastChannelMethod from './methods/broadcastChannel'\nimport LocalStorageMethod from './methods/localStorage'\nimport SimulateMethod from './methods/simulate'\n\n// Order is important\nconst METHODS = [\n  BroadcastChannelMethod,\n  LocalStorageMethod\n]\n\nexport function chooseMethod (options = {}) {\n  if (options.type) {\n    // For testing\n    if (options.type === 'simulate') {\n      return SimulateMethod\n    }\n\n    // Chosen type\n    const method = METHODS.find(m => m.type === options.type)\n    if (!method) throw new Error(`❌ Method ${options.type} is not supported.`)\n    else return method\n  }\n\n  const useMethod = METHODS.find(method => method.canBeUsed())\n\n  /* istanbul ignore next */\n  if (!useMethod) {\n    throw new Error(`❌ No method found ${JSON.stringify(METHODS.map(m => m.type))}`)\n  }\n  return useMethod\n}\n","import { chooseMethod } from './methodChooser'\nimport { isPromise } from '../utils'\n\nexport class MessageChannel {\n  constructor (name, options = {}) {\n    this.name = name\n    this.options = options\n    this.method = chooseMethod(this.options)\n    this.closed = false\n\n    // isListening\n    this._isListening = false\n\n    /**\n     * _onMessageListener\n     * setting onmessage twice,\n     * will overwrite the first listener\n     */\n    this._onMessageListener = null\n\n    /**\n     * _addEventListeners\n     */\n    this._addEventListeners = {\n      message: [],\n      internal: []\n    }\n\n    /**\n     * Un send message promises\n     * where the sending is still in progress\n     * @type {Set<Promise>}\n     */\n    this._unSendMessagePromises = new Set()\n\n    /**\n     * _beforeClose\n     * array of promises that will be awaited\n     * before the channel is closed\n     */\n    this._beforeClose = []\n\n    /**\n     * _preparePromise\n     */\n    this._preparePromises = null\n    _prepareChannel(this)\n  }\n\n  postMessage (msg) {\n    if (this.closed) {\n      throw new Error(\n        '❌ Cannot post message after channel has closed'\n      )\n    }\n    return _post(this, 'message', msg)\n  }\n\n  postInternal (msg) {\n    return _post(this, 'internal', msg)\n  }\n\n  set onmessage (fn) {\n    const time = this.method.microSeconds()\n    const listenObj = {\n      time,\n      fn\n    }\n    _removeListenerObject(this, 'message', this._onMessageListener)\n    if (fn && typeof fn === 'function') {\n      this._onMessageListener = listenObj\n      _addListenerObject(this, 'message', listenObj)\n    } else {\n      /* istanbul ignore next */\n      this._onMessageListener = null\n    }\n  }\n\n  /* istanbul ignore next */\n  get onmessage () {\n    return this._onMessageListener\n  }\n\n  addEventListener (type, fn) {\n    const time = this.method.microSeconds()\n    const listenObj = {\n      time,\n      fn\n    }\n    _addListenerObject(this, type, listenObj)\n  }\n\n  removeEventListener (type, fn) {\n    const obj = this._addEventListeners[type].find(obj => obj.fn === fn)\n    _removeListenerObject(this, type, obj)\n  }\n\n  close () {\n    if (this.closed) {\n      return\n    }\n    this.closed = true\n    const awaitPrepare = this._preparePromises ? this._preparePromises : Promise.resolve()\n\n    this._onMessageListener = null\n    this._addEventListeners.message = []\n\n    return awaitPrepare\n      // Wait until all current sending are processed\n      .then(() => Promise.all(Array.from(this._unSendMessagePromises)))\n      // Run before-close hooks\n      .then(() => Promise.all(this._beforeClose.map(fn => fn())))\n      // Close the channel\n      .then(() => this.method.close(this._state))\n  }\n\n  get type () {\n    return this.method.type\n  }\n\n  isClosed () {\n    return this.closed\n  }\n}\n\nfunction _post (messageChannel, type, msg) {\n  const time = messageChannel.method.microSeconds()\n  const msgObj = {\n    time,\n    type,\n    data: msg\n  }\n\n  const awaitPrepare = messageChannel._preparePromises ? messageChannel._preparePromises : Promise.resolve()\n  return awaitPrepare.then(() => {\n    const sendPromise = messageChannel.method.postMessage(\n      messageChannel._state,\n      msgObj\n    )\n\n    // add/remove to un-send messages list\n    messageChannel._unSendMessagePromises.add(sendPromise)\n    sendPromise\n      .catch()\n      .then(() => messageChannel._unSendMessagePromises.delete(sendPromise))\n\n    return sendPromise\n  })\n}\n\nfunction _prepareChannel (channel) {\n  const maybePromise = channel.method.create(channel.name, channel.options)\n  /* istanbul ignore next */\n  if (isPromise(maybePromise)) {\n    channel._preparePromises = maybePromise\n    maybePromise.then(s => {\n      channel._state = s\n    })\n  } else {\n    channel._state = maybePromise\n  }\n}\n\nfunction _hasMessageListeners (channel) {\n  if (channel._addEventListeners.message.length > 0) return true\n  if (channel._addEventListeners.internal.length > 0) return true\n  return false\n}\n\nfunction _addListenerObject (channel, type, obj) {\n  channel._addEventListeners[type].push(obj)\n  _startListening(channel)\n}\n\nfunction _removeListenerObject (channel, type, obj) {\n  channel._addEventListeners[type] = channel._addEventListeners[type].filter(o => o !== obj)\n  _stopListening(channel)\n}\n\nfunction _startListening (channel) {\n  if (!channel._isListening && _hasMessageListeners(channel)) {\n    // someone is listening, start subscribing\n\n    const listenerFn = msgObj => {\n      channel._addEventListeners[msgObj.type].forEach(obj => {\n        if (msgObj.time >= obj.time) {\n          obj.fn(msgObj.data)\n        }\n      })\n    }\n\n    const time = channel.method.microSeconds()\n    if (channel._preparePromises) {\n      /* istanbul ignore next */\n      channel._preparePromises.then(() => {\n        channel._isListening = true\n        channel.method.onMessage(\n          channel._state,\n          listenerFn,\n          time\n        )\n      })\n    } else {\n      channel._isListening = true\n      channel.method.onMessage(\n        channel._state,\n        listenerFn,\n        time\n      )\n    }\n  }\n}\n\nfunction _stopListening (channel) {\n  if (channel._isListening && !_hasMessageListeners(channel)) {\n    // no one is listening, stop subscribing\n    channel._isListening = false\n    const time = channel.method.microSeconds()\n    channel.method.onMessage(\n      channel._state,\n      null,\n      time\n    )\n  }\n}\n","import { IS_BROWSER, sleep, randomToken } from '../utils'\n\nclass LeaderElection {\n  constructor (channel, options) {\n    this._channel = channel\n    this._options = options\n\n    this.isLeader = false\n    this.isDead = false\n    this.token = randomToken()\n\n    this._isApplying = false\n    this._reApply = false\n\n    // things to clean up\n    this._unloadFns = []\n    this._listeners = []\n    this._intervals = []\n    this._duplicateListeners = () => { }\n    this._duplicateCalled = false\n    this._onBeforeDie = async () => {}\n\n    const unloadFn = async () => this.die()\n\n    if (IS_BROWSER) {\n      window.addEventListener('beforeUnload', unloadFn)\n      window.addEventListener('unload', unloadFn)\n\n      this._unloadFns.push(['beforeUnload', unloadFn])\n      this._unloadFns.push(['unload', unloadFn])\n    }\n  }\n\n  applyOnce () {\n    if (this.isLeader) return Promise.resolve(false)\n    if (this.isDead) return Promise.resolve(false)\n\n    // do nothing if already running\n    if (this._isApplying) {\n      this._reApply = true\n      return Promise.resolve(false)\n    }\n    this._isApplying = true\n\n    let stopCriteria = false\n    const received = []\n\n    const handleMessage = (msg) => {\n      if (msg.context === 'leader' && msg.token !== this.token) {\n        received.push(msg)\n\n        if (msg.action === 'apply') {\n          // Other is applying\n          if (msg.token > this.token) {\n            // Other has higher token, stop applying\n            stopCriteria = true\n          }\n        }\n\n        if (msg.action === 'tell') {\n          // Other is already leader\n          stopCriteria = true\n        }\n      }\n    }\n    this._channel.addEventListener('internal', handleMessage)\n\n    return _sendMessage(this, 'apply') // send out that this one is applying\n      .then(() => sleep(this._options.responseTime)) // let others time to respond\n      .then(() => {\n        if (stopCriteria) return Promise.reject(new Error())\n        else return _sendMessage(this, 'apply')\n      })\n      .then(() => sleep(this._options.responseTime)) // let others time to respond\n      .then(() => {\n        if (stopCriteria) return Promise.reject(new Error())\n        else return _sendMessage(this)\n      })\n      .then(() => beLeader(this)) // no one disagreed -> this one is now leader\n      .then(() => true)\n      .catch(() => false) // apply not successful\n      .then(success => {\n        this._channel.removeEventListener('internal', handleMessage)\n        this._isApplying = false\n        if (!success && this._reApply) {\n          this._reApply = false\n          return this.applyOnce()\n        } else return success\n      })\n  }\n\n  awaitLeadership () {\n    if (\n      !this._awaitLeadershipPromise\n    ) {\n      this._awaitLeadershipPromise = _awaitLeadershipOnce(this)\n    }\n    return this._awaitLeadershipPromise\n  }\n\n  set onDuplicate (fn) {\n    this._duplicateListeners = fn\n  }\n\n  /* istanbul ignore next */\n  get onDuplicate () {\n    return this._duplicateListeners\n  }\n\n  set onBeforeDie (fn) {\n    this._onBeforeDie = fn\n  }\n\n  /* istanbul ignore next */\n  get onBeforeDie () {\n    return this._onBeforeDie\n  }\n\n  async die () {\n    if (this.isDead) return\n    this.isDead = true\n\n    await this.onBeforeDie()\n    this._listeners.forEach(listener => this._channel.removeEventListener('internal', listener))\n    this._intervals.forEach(interval => clearInterval(interval))\n    this._unloadFns.forEach(uFn => {\n      if (IS_BROWSER) {\n        window.removeEventListener(uFn[0], uFn[1])\n      }\n    })\n    return _sendMessage(this, 'death')\n  }\n}\n\nfunction _awaitLeadershipOnce (leaderElector) {\n  if (leaderElector.isLeader) return Promise.resolve()\n\n  return new Promise(resolve => {\n    let resolved = false\n\n    function finish () {\n      /* istanbul ignore next */\n      if (resolved) {\n        return\n      }\n      resolved = true\n      clearInterval(interval)\n      leaderElector._channel.removeEventListener('internal', whenDeathListener)\n      resolve(true)\n    }\n\n    // try once now\n    leaderElector.applyOnce().then(() => {\n      if (leaderElector.isLeader) {\n        finish()\n      }\n    })\n\n    // try on fallbackInterval\n    const interval = setInterval(() => {\n      /* istanbul ignore next */\n      leaderElector.applyOnce().then(() => {\n        if (leaderElector.isLeader) {\n          finish()\n        }\n      })\n    }, leaderElector._options.fallbackInterval)\n    leaderElector._intervals.push(interval)\n\n    // try when other leader dies\n    const whenDeathListener = msg => {\n      if (msg.context === 'leader' && msg.action === 'death') {\n        leaderElector.applyOnce().then(() => {\n          if (leaderElector.isLeader) finish()\n        })\n      }\n    }\n    leaderElector._channel.addEventListener('internal', whenDeathListener)\n    leaderElector._listeners.push(whenDeathListener)\n  })\n}\n\n/**\n * Sends and internal message over the broadcast-channel\n */\nfunction _sendMessage (leaderElector, action) {\n  const msgJson = {\n    context: 'leader',\n    action,\n    token: leaderElector.token\n  }\n  return leaderElector._channel.postInternal(msgJson)\n}\n\nexport function beLeader (leaderElector) {\n  leaderElector.isLeader = true\n\n  const isLeaderListener = msg => {\n    if (msg.context === 'leader' && msg.action === 'apply') {\n      _sendMessage(leaderElector, 'tell')\n    }\n\n    if (msg.context === 'leader' && msg.action === 'tell' && !leaderElector._duplicateCalled) {\n      /**\n       * Another instance is also leader!\n       * This can happen on rare events\n       * like when the CPU is at 100% for long time\n       * or the tabs are open very long and the browser throttles them.\n       */\n      leaderElector._duplicateCalled = true\n      leaderElector._duplicateListeners() // message the lib user so the app can handle the problem\n      _sendMessage(leaderElector, 'tell') // ensure other leader also knows the problem\n    }\n  }\n  leaderElector._channel.addEventListener('internal', isLeaderListener)\n  leaderElector._listeners.push(isLeaderListener)\n  return _sendMessage(leaderElector, 'tell')\n}\n\nexport function createLeaderElection (channel, options) {\n  if (channel._leaderElector) {\n    throw new Error('❌ MessageChannel already has a leader-elector')\n  }\n\n  const elector = new LeaderElection(channel, options)\n  channel._beforeClose.push(async () => elector.die())\n\n  channel._leaderElector = elector\n  return elector\n}\n","import { MessageChannel, createLeaderElection } from './MessageChannel'\nexport const TabManager = ({\n  type,\n  channelName,\n  fallbackInterval,\n  responseTime,\n  emitOnAllTabs,\n  callbacks,\n  start,\n  reset,\n  pause,\n  resume\n}) => {\n  const channel = new MessageChannel(channelName, { type })\n  const elector = createLeaderElection(channel, { fallbackInterval, responseTime })\n  const registry = {}\n\n  // Register self\n  registry[elector.token] = false\n\n  let leader = false\n  let allIdle = true\n\n  const isLeader = () => leader\n\n  elector.awaitLeadership().then(() => {\n    leader = true\n  })\n\n  channel.addEventListener('message', ([type, id]) => {\n    switch (type) {\n      case 'register':\n        registry[id] = false\n        break\n      case 'deregister':\n        delete registry[id]\n        break\n      case 'idle':\n        idle(id)\n        break\n      case 'active':\n        active(id)\n        break\n      case 'emitIdle':\n        callbacks.onIdle()\n        break\n      case 'emitActive':\n        callbacks.onActive()\n        break\n      case 'start':\n        start(true)\n        break\n      case 'reset':\n        reset(true)\n        break\n      case 'pause':\n        pause(true)\n        break\n      case 'resume':\n        resume(true)\n        break\n      default:\n        // no op\n    }\n  })\n\n  const setAllIdle = bool => {\n    allIdle = bool\n  }\n\n  const isAllIdle = () => allIdle\n\n  const idle = (id = elector.token) => {\n    registry[id] = true\n    const isIdle = Object.values(registry).every(v => v)\n    if (!allIdle && isIdle) {\n      allIdle = true\n      if (isLeader()) {\n        callbacks.onIdle()\n        if (emitOnAllTabs) send('emitIdle')\n      } else {\n        send('idle')\n      }\n    }\n  }\n\n  const active = (id = elector.token) => {\n    registry[id] = false\n    const isActive = Object.values(registry).some(v => !v)\n    if (allIdle && isActive) {\n      allIdle = false\n      if (isLeader()) {\n        callbacks.onActive()\n        if (emitOnAllTabs) send('emitActive')\n      } else {\n        send('active')\n      }\n    }\n  }\n\n  /* istanbul ignore next */\n  elector.onDuplicate = async () => await elector.die()\n  elector.onBeforeDie = async () => await send('deregister')\n\n  const send = async message => channel.postMessage([message, elector.token])\n\n  const close = async () => {\n    await elector.die()\n    await channel.close()\n  }\n\n  // Register self with remote tabs\n  send('register')\n\n  return { close, send, isLeader, idle, active, isAllIdle, setAllIdle }\n}\n","/**\n *  ___    _ _     _____ _\n * |_ _|__| | | __|_   _(_)_ __ ___   ___ _ __\n *  | |/ _` | |/ _ \\| | | | '_ ` _ \\ / _ \\ '__|\n *  | | (_| | |  __/| | | | | | | | |  __/ |\n * |___\\__,_|_|\\___||_| |_|_| |_| |_|\\___|_|\n *\n * @name IdleTimer\n * @author Randy Lebeau\n * @private\n */\n\nimport { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { TabManager } from './TabManager'\nimport { IS_BROWSER, DEFAULT_ELEMENT, DEFAULT_EVENTS, debounced, throttled } from './utils'\n\n/**\n * Detects when your user is idle\n * @class IdleTimer\n * @private\n */\nclass IdleTimer extends Component {\n  /**\n   * Creates an instance of IdleTimer\n   * bind all of our internal events here\n   * for best performance\n   * @param {Object} props\n   * @return {IdleTimer}\n   * @private\n   */\n  constructor (props) {\n    super(props)\n\n    /**\n     * Sets initial component state\n     * @type {Object}\n     * @private\n     */\n    this.state = {\n      idle: false,\n      oldDate: +new Date(),\n      lastActive: +new Date(),\n      lastIdle: null,\n      idleTime: 0,\n      remaining: null,\n      pageX: null,\n      pageY: null\n    }\n\n    /**\n     * The timer instance\n     * @type {Timeout}\n     * @private\n     */\n    this.tId = null\n\n    /**\n     * Wether or not events are bound\n     * @type {boolean}\n     * @private\n     */\n    this.eventsBound = false\n\n    this.callbackRefs = {}\n\n    // Debounce and throttle can't both be set\n    if (props.debounce > 0 && props.throttle > 0) {\n      throw new Error('onAction can either be throttled or debounced (not both)')\n    }\n\n    // Create debounced action if applicable\n    if (props.debounce > 0) {\n      this._onAction = debounced(props.onAction, props.debounce)\n\n    // Create throttled action if applicable\n    } else if (props.throttle > 0) {\n      this._onAction = throttled(props.onAction, props.throttle)\n\n    // Set custom onAction\n    } else {\n      this._onAction = props.onAction\n    }\n\n    // Create a throttle event handler if applicable\n    if (props.eventsThrottle > 0) {\n      this.handleEvent = throttled(this._handleEvent.bind(this), props.eventsThrottle)\n    } else {\n      this.handleEvent = this._handleEvent.bind(this)\n    }\n\n    // If startOnMount is set, idle state defaults to true\n    if (!props.startOnMount || props.startManually) {\n      this.state.idle = true\n    }\n\n    // Bind all events to component scope, built for speed 🚀\n    this._toggleIdleState = this._toggleIdleState.bind(this)\n    this.start = this.start.bind(this)\n    this.reset = this.reset.bind(this)\n    this.pause = this.pause.bind(this)\n    this.resume = this.resume.bind(this)\n    this.isIdle = this.isIdle.bind(this)\n    this.getRemainingTime = this.getRemainingTime.bind(this)\n    this.getElapsedTime = this.getElapsedTime.bind(this)\n    this.getLastActiveTime = this.getLastActiveTime.bind(this)\n    this.getLastIdleTime = this.getLastIdleTime.bind(this)\n    this.getTotalIdleTime = this.getTotalIdleTime.bind(this)\n    this.getTotalActiveTime = this.getTotalActiveTime.bind(this)\n  }\n\n  /**\n   * Runs once the component has mounted\n   * here we handle automatically starting\n   * the idletimer\n   * @private\n   */\n  componentDidMount () {\n    const { startOnMount, startManually } = this.props\n\n    // Set up cross tab\n    this._setupTabManager()\n\n    if (startManually) return\n    if (startOnMount) {\n      this.start()\n    } else {\n      this._bindEvents()\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    // Update debounce function\n    if ((prevProps.debounce !== this.props.debounce) && this.props.debounce > 0) {\n      if (this._onAction.cancel) this._onAction.cancel()\n      this._onAction = debounced(this.props.onAction, this.props.debounce)\n    } else\n    // Update throttle function\n    if ((prevProps.throttle !== this.props.throttle) && this.props.throttle > 0) {\n      if (this._onAction.cancel) this._onAction.cancel()\n      this._onAction = throttled(this.props.onAction, this.props.throttle)\n    } else\n    // Remove throttle or debounce\n    if (\n      (prevProps.throttle && this.props.throttle === 0) ||\n      (prevProps.debounce && this.props.debounce === 0)\n    ) {\n      if (this._onAction.cancel) this._onAction.cancel()\n      this._onAction = this.props.onAction\n    }\n\n    // Update event throttle function\n    if (prevProps.eventsThrottle !== this.props.eventsThrottle) {\n      this._unbindEvents()\n      this.handleEvent = throttled(this._handleEvent.bind(this), this.props.eventsThrottle)\n      this._bindEvents()\n    }\n    // Update timeout value\n    if (prevProps.timeout !== this.props.timeout) {\n      if (this.state.idle) this.reset()\n    }\n\n    // Update callback refs\n    if (prevProps.onActive !== this.props.onActive) this.callbackRefs.onActive = this.props.onActive\n    if (prevProps.onIdle !== this.props.onIdle) this.callbackRefs.onIdle = this.props.onIdle\n  }\n\n  /**\n   * Called before the component un-mounts\n   * here we clear the timer and remove\n   * all the event listeners\n   * @private\n   */\n  componentWillUnmount () {\n    // Clear timeout to prevent delayed state changes\n    clearTimeout(this.tId)\n    this._unbindEvents(true)\n    // Cancel any debounced onAction handlers\n    if (this._onAction.cancel) this._onAction.cancel()\n    /* istanbul ignore next */\n    if (this.manager) {\n      this.manager.close().catch(console.error)\n    }\n  }\n\n  /**\n   * Render children if IdleTimer is used as a wrapper\n   * @return {Component} children\n   * @private\n   */\n  render () {\n    const { children } = this.props\n    return children || null\n  }\n\n  /**\n   * Setup the Tab Manager.\n   * @private\n   */\n  _setupTabManager () {\n    const { crossTab, onIdle, onActive } = this.props\n    this.callbackRefs = { onIdle, onActive }\n\n    /* istanbul ignore next */\n    if (crossTab) {\n      const {\n        type,\n        channelName,\n        fallbackInterval,\n        responseTime,\n        emitOnAllTabs\n      } = Object.assign({\n        channelName: 'idle-timer',\n        fallbackInterval: 2000,\n        responseTime: 100,\n        removeTimeout: 1000 * 60,\n        emitOnAllTabs: false\n      }, crossTab === true ? {} : crossTab)\n\n      this.manager = TabManager({\n        type,\n        channelName,\n        fallbackInterval,\n        responseTime,\n        emitOnAllTabs,\n        callbacks: this.callbackRefs,\n        start: this.start,\n        reset: this.reset,\n        pause: this.pause,\n        resume: this.resume\n      })\n    }\n  }\n\n  /**\n   * Binds the specified events\n   * @private\n   */\n  _bindEvents () {\n    // Don't bind events if\n    // we are not in a browser\n    if (!IS_BROWSER) return\n    // Otherwise we bind all the events\n    // to the supplied element\n    const { element, events, passive, capture } = this.props\n    if (!this.eventsBound) {\n      events.forEach(e => {\n        element.addEventListener(e, this.handleEvent, {\n          capture,\n          passive\n        })\n      })\n      this.eventsBound = true\n    }\n  }\n\n  /**\n   * Unbinds all the bound events\n   * @private\n   */\n  _unbindEvents (force = false) {\n    // If we are not in a browser\n    // we don't need to unbind events\n    if (!IS_BROWSER) return\n    // Unbind all events\n    const { element, events, passive, capture } = this.props\n    if (this.eventsBound || force) {\n      events.forEach(e => {\n        element.removeEventListener(e, this.handleEvent, {\n          capture,\n          passive\n        })\n      })\n      this.eventsBound = false\n    }\n  }\n\n  /**\n   * Toggles the idle state and calls\n   * the correct action function\n   * @private\n   */\n  _toggleIdleState (e) {\n    // Fire the appropriate action\n    // and pass the event through\n    // Toggle the idle state\n    this.setState((prevState) => ({\n      idle: !prevState.idle,\n      lastIdle: !prevState.idle ? (+new Date()) - this.props.timeout : prevState.lastIdle,\n      idleTime: prevState.idle ? prevState.idleTime + (+new Date()) - prevState.lastIdle : prevState.idleTime\n    }), () => {\n      const { onActive, onIdle, stopOnIdle } = this.props\n      const { idle } = this.state\n      if (idle) {\n        if (stopOnIdle) {\n          // Clear any existing timeout\n          clearTimeout(this.tId)\n          this.tId = null\n          // Unbind events\n          this._unbindEvents()\n        }\n\n        if (this.manager) {\n          /* istanbul ignore next */\n          this.manager.idle()\n        } else {\n          onIdle(e)\n        }\n      } else {\n        this._bindEvents()\n        if (this.manager) {\n          /* istanbul ignore next */\n          this.manager.active()\n        } else {\n          onActive(e)\n        }\n      }\n    })\n  }\n\n  /**\n   * Event handler for supported event types\n   * @param  {Object} e event object\n   * @private\n   */\n  _handleEvent (e) {\n    const { remaining, pageX, pageY, idle } = this.state\n    const { timeout, stopOnIdle } = this.props\n\n    // Fire onAction event\n    this._onAction(e)\n\n    // Already active, ignore events\n    if (remaining) return\n\n    // Mousemove event\n    if (e.type === 'mousemove') {\n      // If coords are same, it didn't move\n      /* istanbul ignore next */\n      if (e.pageX === pageX && e.pageY === pageY) {\n        return\n      }\n      // If coords don't exist how could it move\n      if (typeof e.pageX === 'undefined' && typeof e.pageY === 'undefined') {\n        return\n      }\n      // Under 200 ms is hard to do\n      // continuous activity will bypass this\n      /* istanbul ignore next */\n      const elapsed = this.getElapsedTime()\n      /* istanbul ignore next */\n      if (elapsed < 200) {\n        return\n      }\n    }\n\n    // Clear any existing timeout\n    clearTimeout(this.tId)\n    this.tId = null\n\n    // Determine last time User was active, as can't rely on setTimeout ticking at the correct interval\n    const elapsedTimeSinceLastActive = +new Date() - this.getLastActiveTime()\n\n    // If the user is idle or last active time is more than timeout, flip the idle state\n    if ((idle && !stopOnIdle) || (!idle && elapsedTimeSinceLastActive > timeout)) {\n      this._toggleIdleState(e)\n    }\n\n    // Store when the user was last active\n    // and update the mouse coordinates\n    this.setState({\n      lastActive: +new Date(),\n      pageX: e.pageX,\n      pageY: e.pageY\n    })\n\n    // If the user is idle and stopOnIdle flag is not set\n    // set a new timeout\n    if (idle) {\n      if (!stopOnIdle) {\n        this.tId = setTimeout(this._toggleIdleState, timeout)\n      }\n    } else {\n      this.tId = setTimeout(this._toggleIdleState, timeout)\n    }\n  }\n\n  /**\n   * Set initial state and start timer\n   * @name start\n   */\n  start (remote = true) {\n    // Clear timeout\n    clearTimeout(this.tId)\n    this.tId = null\n\n    // Bind the events\n    this._bindEvents()\n\n    // Reset state\n    this.setState({\n      idle: false,\n      oldDate: +new Date(),\n      lastActive: +new Date(),\n      remaining: null\n    })\n\n    if (this.manager) {\n      /* istanbul ignore next */\n      this.manager.setAllIdle(false)\n      /* istanbul ignore next */\n      if (!remote && this.props.crossTab.emitOnAllTabs) {\n        this.manager.send('start')\n      }\n    }\n\n    // Set new timeout\n    const { timeout } = this.props\n    this.tId = setTimeout(this._toggleIdleState, timeout)\n  }\n\n  /**\n   * Restore initial state and restart timer, calling onActive\n   * @name reset\n   */\n  reset (remote = false) {\n    // Clear timeout\n    clearTimeout(this.tId)\n    this.tId = null\n\n    // Bind the events\n    this._bindEvents()\n\n    if (this.state.idle) {\n      if (this.manager) {\n        /* istanbul ignore next */\n        this.manager.active()\n      } else {\n        this.props.onActive()\n      }\n    }\n\n    if (this.manager) {\n      /* istanbul ignore next */\n      this.manager.setAllIdle(false)\n      /* istanbul ignore next */\n      if (!remote && this.props.crossTab.emitOnAllTabs) {\n        this.manager.send('reset')\n      }\n    }\n\n    // Reset state\n    this.setState({\n      idle: false,\n      oldDate: +new Date(),\n      lastActive: +new Date(),\n      remaining: null\n    })\n\n    // Set new timeout\n    const { timeout } = this.props\n    this.tId = setTimeout(this._toggleIdleState, timeout)\n  }\n\n  /**\n   * Store remaining time and stop timer\n   * @name pause\n   */\n  pause (remote = false) {\n    // Timer is already paused\n    const { remaining } = this.state\n    if (remaining !== null) return\n\n    // Unbind events\n    this._unbindEvents()\n\n    // Clear existing timeout\n    clearTimeout(this.tId)\n    this.tId = null\n\n    // Send event to other tabs\n    if (this.manager) {\n      /* istanbul ignore next */\n      if (!remote && this.props.crossTab.emitOnAllTabs) {\n        this.manager.send('pause')\n      }\n    }\n\n    // Define how much is left on the timer\n    this.setState({\n      remaining: this.getRemainingTime()\n    })\n  }\n\n  /**\n   * Resumes a paused timer\n   * @name resume\n   */\n  resume (remote = false) {\n    // Timer is not paused\n    const { remaining, idle } = this.state\n    if (remaining === null) return\n\n    // Bind events\n    this._bindEvents()\n\n    // Send event to other tabs\n    if (this.manager) {\n      /* istanbul ignore next */\n      if (!remote && this.props.crossTab.emitOnAllTabs) {\n        this.manager.send('resume')\n      }\n    }\n\n    // Start timer and clear remaining\n    // if we are in the active state\n    if (!idle) {\n      // Set a new timeout\n      this.tId = setTimeout(this._toggleIdleState, remaining)\n      // Set new state\n      this.setState({ remaining: null, lastActive: +new Date() })\n    }\n  }\n\n  /**\n   * Time remaining before idle\n   * @name getRemainingTime\n   * @return {number} Milliseconds remaining\n   */\n  getRemainingTime () {\n    const { remaining, lastActive } = this.state\n    const { timeout } = this.props\n\n    // If idle there is no time remaining\n    if (remaining !== null) {\n      return remaining < 0 ? 0 : remaining\n    }\n\n    // Determine remaining, if negative idle didn't finish flipping, just return 0\n    const timeLeft = timeout - ((+new Date()) - lastActive)\n    return timeLeft < 0 ? 0 : timeLeft\n  }\n\n  /**\n   * How much time has elapsed\n   * @name getElapsedTime\n   * @return {Timestamp}\n   */\n  getElapsedTime () {\n    const { oldDate } = this.state\n    return (+new Date()) - oldDate\n  }\n\n  /**\n   * Last time the user was idle\n   * @name getLastIdleTime\n   * @return {Timestamp}\n   */\n  getLastIdleTime () {\n    const { lastIdle } = this.state\n    return lastIdle\n  }\n\n  /**\n   * Total time the user was idle\n   * @name getTotalIdleTime\n   * @return {number}\n   */\n  getTotalIdleTime () {\n    const { idle, lastIdle, idleTime } = this.state\n    if (idle) {\n      return ((+new Date()) - lastIdle) + idleTime\n    } else {\n      return idleTime\n    }\n  }\n\n  /**\n   * Last time the user was active\n   * @name getLastActiveTime\n   * @return {Timestamp}\n   */\n  getLastActiveTime () {\n    const { lastActive } = this.state\n    return lastActive\n  }\n\n  /**\n   * Total time the user was active\n   * @name getTotalActiveTime\n   * @return {number}\n   */\n  getTotalActiveTime () {\n    return this.getElapsedTime() - this.getTotalIdleTime()\n  }\n\n  /**\n   * Returns wether or not the user is idle\n   * @name isIdle\n   * @return {boolean}\n   */\n  isIdle () {\n    const { idle } = this.state\n    return idle\n  }\n\n  /**\n   * Returns wether or not this is the leader tab\n   * @name isLeader\n   * @return {boolean}\n   */\n  isLeader () {\n    return this.manager ? this.manager.isLeader() : true\n  }\n}\n\n/**\n * Type checks for every property\n * @type {Object}\n * @private\n */\nIdleTimer.propTypes = {\n  /**\n   * Activity Timeout in milliseconds\n   * default: 1200000\n   * @type {Number}\n   */\n  timeout: PropTypes.number,\n  /**\n   * DOM events to listen to\n   * default: see [default events](https://github.com/SupremeTechnopriest/react-idle-timer#default-events)\n   * @type {Array}\n   */\n  events: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Function to call when user is idle\n   * default: () => {}\n   * @type {Function}\n   */\n  onIdle: PropTypes.func,\n  /**\n   * Function to call when user becomes active\n   * default: () => {}\n   * @type {Function}\n   */\n  onActive: PropTypes.func,\n  /**\n   * Function to call on user actions\n   * default: () => {}\n   * @type {Function}\n   */\n  onAction: PropTypes.func,\n  /**\n   * Debounce the onAction function by setting delay in milliseconds\n   * default: 0\n   * @type {Number}\n   */\n  debounce: PropTypes.number,\n  /**\n   * Throttle the onAction function by setting delay in milliseconds\n   * default: 0\n   * @type {Number}\n   */\n  throttle: PropTypes.number,\n  /**\n   * Throttle the event handler function by setting delay in milliseconds\n   * default: 200\n   * @type {Number}\n   */\n  eventsThrottle: PropTypes.number,\n  /**\n   * Element reference to bind activity listeners to\n   * default: document\n   * @type {Object}\n   */\n  element: PropTypes.oneOfType([PropTypes.object, PropTypes.element]),\n  /**\n   * Start the timer on mount\n   * default: true\n   * @type {Boolean}\n   */\n  startOnMount: PropTypes.bool,\n  /**\n   * Require the timer to be started manually.\n   * default: false\n   * @type {Boolean}\n   */\n  startManually: PropTypes.bool,\n  /**\n   * Once the user goes idle the IdleTimer will not\n   * reset on user input instead, reset() must be\n   * called manually to restart the timer\n   * default: false\n   * @type {Boolean}\n   */\n  stopOnIdle: PropTypes.bool,\n  /**\n   * Bind events passively\n   * default: true\n   * @type {Boolean}\n   */\n  passive: PropTypes.bool,\n  /**\n   * Capture events\n   * default: true\n   * @type {Boolean}\n   */\n  capture: PropTypes.bool,\n  /**\n   * Cross Tab functionality.\n   * default: false\n   * @type {Boolean|Object}\n   */\n  crossTab: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.shape({\n      type: PropTypes.oneOf(['broadcastChannel', 'localStorage', 'simulate']),\n      channelName: PropTypes.string,\n      fallbackInterval: PropTypes.number,\n      responseTime: PropTypes.number,\n      removeTimeout: PropTypes.number,\n      emitOnAllTabs: PropTypes.bool\n    })\n  ])\n}\n\n/**\n * Sets default property values\n * @type {Object}\n * @private\n */\nIdleTimer.defaultProps = {\n  timeout: 1000 * 60 * 20,\n  element: DEFAULT_ELEMENT,\n  events: DEFAULT_EVENTS,\n  onIdle: () => { },\n  onActive: () => { },\n  onAction: () => { },\n  debounce: 0,\n  throttle: 0,\n  eventsThrottle: 200,\n  startOnMount: true,\n  startManually: false,\n  stopOnIdle: false,\n  capture: true,\n  passive: true,\n  crossTab: false\n}\n\nexport default IdleTimer\n","/**\n *  ___    _ _     _____ _\n * |_ _|__| | | __|_   _(_)_ __ ___   ___ _ __\n *  | |/ _` | |/ _ \\| | | | '_ ` _ \\ / _ \\ '__|\n *  | | (_| | |  __/| | | | | | | | |  __/ |\n * |___\\__,_|_|\\___||_| |_|_| |_| |_|\\___|_|\n *\n * @name useIdleTimer\n * @author Randy Lebeau\n * @private\n */\n\nimport { useEffect, useRef, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { TabManager } from './TabManager'\nimport { IS_BROWSER, DEFAULT_ELEMENT, DEFAULT_EVENTS, debounced, throttled } from './utils'\n\n/**\n * Detects when your user is idle\n * @function useIdleTimer\n * @private\n */\nfunction useIdleTimer ({\n  timeout = 1000 * 60 * 20,\n  element = DEFAULT_ELEMENT,\n  events = DEFAULT_EVENTS,\n  onIdle = () => { },\n  onActive = () => { },\n  onAction = () => { },\n  debounce = 0,\n  throttle = 0,\n  eventsThrottle = 200,\n  startOnMount = true,\n  startManually = false,\n  stopOnIdle = false,\n  capture = true,\n  passive = true,\n  crossTab = false\n} = {}) {\n  const eventsBound = useRef(false)\n  const idle = useRef(true)\n  const oldDate = useRef(+new Date())\n  const remaining = useRef(null)\n  const pageX = useRef(null)\n  const pageY = useRef(null)\n  const tId = useRef(null)\n  const lastActive = useRef(null)\n  const lastIdle = useRef(null)\n  const idleTime = useRef(0)\n  const firstLoad = useRef(true)\n  const _timeout = useRef(timeout)\n  const manager = useRef(null)\n\n  /* istanbul ignore next */\n  if (crossTab) {\n    if (crossTab === true) crossTab = {}\n    crossTab = Object.assign({\n      channelName: 'idle-timer',\n      fallbackInterval: 2000,\n      responseTime: 100,\n      removeTimeout: 1000 * 60,\n      emitOnAllTabs: false\n    }, crossTab)\n  }\n\n  // Event emitters\n  const emitOnIdle = useRef(onIdle)\n  const emitOnActive = useRef(onActive)\n  const emitOnAction = useRef(onAction)\n\n  useEffect(() => {\n    emitOnIdle.current = onIdle\n  }, [onIdle])\n\n  useEffect(() => {\n    emitOnActive.current = onActive\n  }, [onActive])\n\n  useEffect(() => {\n    emitOnAction.current = onAction\n  }, [onAction])\n\n  const intermediateOnAction = useMemo(() => {\n    function callOnAction (e) {\n      emitOnAction.current(e)\n    }\n\n    // Cancel any existing debounce timeouts\n    if (callOnAction.cancel) callOnAction.cancel()\n\n    // Create debounced action if applicable\n    if (debounce > 0) {\n      return debounced(callOnAction, debounce)\n\n      // Create throttled action if applicable\n    } else if (throttle > 0) {\n      return throttled(callOnAction, throttle)\n\n      // No throttle or debounce\n    } else {\n      return callOnAction\n    }\n  }, [throttle, debounce])\n\n  /**\n   * Toggles the idle state and calls\n   * the correct action function\n   * @private\n   */\n  const _toggleIdleState = e => {\n    const nextIdle = !idle.current\n    idle.current = nextIdle\n    if (nextIdle) {\n      if (stopOnIdle) {\n        // Clear any existing timeout\n        clearTimeout(tId.current)\n        tId.current = null\n        // Unbind events\n        _unbindEvents()\n      }\n      lastIdle.current = (+new Date()) - _timeout.current\n      if (manager.current) {\n        /* istanbul ignore next */\n        manager.current.idle()\n      } else {\n        emitOnIdle.current(e)\n      }\n    } else {\n      idleTime.current += (+new Date()) - lastIdle.current\n      _bindEvents()\n      if (manager.current) {\n        /* istanbul ignore next */\n        manager.current.active()\n      } else {\n        emitOnActive.current(e)\n      }\n    }\n  }\n\n  /**\n   * Event handler\n   * @param {Event} e\n   */\n  const _handleEvent = e => {\n    // Fire onAction event\n    intermediateOnAction(e)\n\n    // Already active, ignore events\n    if (remaining.current) return\n\n    // Mousemove event\n    /* istanbul ignore next */\n    if (e.type === 'mousemove') {\n      // If coords are same, it didn't move\n      if (e.pageX === pageX && e.pageY === pageY) {\n        return\n      }\n      // If coords don't exist how could it move\n      if (typeof e.pageX === 'undefined' && typeof e.pageY === 'undefined') {\n        return\n      }\n      // Under 200 ms is hard to do\n      // continuous activity will bypass this\n      const elapsed = getElapsedTime()\n      if (elapsed < 200) {\n        return\n      }\n    }\n\n    // Clear any existing timeout\n    clearTimeout(tId.current)\n    tId.current = null\n\n    // Determine last time User was active, as can't rely on setTimeout ticking at the correct interval\n    const elapsedTimeSinceLastActive = +new Date() - getLastActiveTime()\n\n    // If the user is idle or last active time is more than timeout, flip the idle state\n    if (\n      (idle.current && !stopOnIdle) ||\n      (!idle.current && elapsedTimeSinceLastActive > _timeout.current)\n    ) {\n      _toggleIdleState(e)\n    }\n\n    // Store when the user was last active\n    // and update the mouse coordinates\n    lastActive.current = +new Date()\n    pageX.current = e.pageX\n    pageY.current = e.pageY\n\n    // If the user is active, set a new timeout\n    if (!idle.current) {\n      tId.current = setTimeout(_toggleIdleState, _timeout.current)\n    }\n  }\n\n  /**\n   * Reference to current handleEvent function.\n   * @private\n   */\n  const handleEvent = useRef(_handleEvent)\n\n  /**\n   * Binds the specified events\n   * @private\n   */\n  const _bindEvents = () => {\n    // Don't bind events if\n    // we are not in a browser\n    if (!IS_BROWSER) return\n    // Otherwise we bind all the events\n    // to the supplied element\n    if (!eventsBound.current) {\n      events.forEach(e => {\n        element.addEventListener(e, handleEvent.current, {\n          capture,\n          passive\n        })\n      })\n      eventsBound.current = true\n    }\n  }\n\n  /**\n   * Unbinds all the bound events\n   * @private\n   */\n  const _unbindEvents = (force = false) => {\n    // If we are not in a browser\n    // we don't need to unbind events\n    if (!IS_BROWSER) return\n    // Unbind all events\n    if (eventsBound.current || force) {\n      events.forEach(e => {\n        element.removeEventListener(e, handleEvent.current, {\n          capture,\n          passive\n        })\n      })\n      eventsBound.current = false\n    }\n  }\n\n  /**\n   * Time remaining before idle\n   * @name getRemainingTime\n   * @return {number} Milliseconds remaining\n   */\n  const getRemainingTime = () => {\n    // If idle there is no time remaining\n    if (remaining.current !== null) {\n      return remaining.current < 0 ? 0 : remaining.current\n    }\n\n    // Determine remaining, if negative idle didn't finish flipping, just return 0\n    const timeLeft = _timeout.current - ((+new Date()) - lastActive.current)\n    return timeLeft < 0 ? 0 : timeLeft\n  }\n\n  /**\n   * How much time has elapsed\n   * @name getElapsedTime\n   * @return {Timestamp}\n   */\n  const getElapsedTime = () => (+new Date()) - oldDate.current\n\n  /**\n   * Last time the user was idle\n   * @name getLastIdleTime\n   * @return {Timestamp}\n   */\n  const getLastIdleTime = () => lastIdle.current\n\n  /**\n   * Get the total time user is idle\n   * @name getTotalIdleTime\n   * @return {number} Milliseconds idle\n   */\n  const getTotalIdleTime = () => {\n    if (idle.current) {\n      return ((+new Date()) - lastIdle.current) + idleTime.current\n    } else {\n      return idleTime.current\n    }\n  }\n\n  /**\n   * Last time the user was active\n   * @name getLastActiveTime\n   * @return {Timestamp}\n   */\n  const getLastActiveTime = () => lastActive.current\n\n  /**\n   * Get the total time user is active\n   * @name getTotalActiveTime\n   * @return {number} Milliseconds active\n   */\n  const getTotalActiveTime = () => getElapsedTime() - getTotalIdleTime()\n\n  /**\n   * Returns wether or not the user is idle\n   * @name isIdle\n   * @return {Boolean}\n   */\n  const isIdle = () => idle.current\n\n  /**\n   * Returns wether or not this is the leader tab\n   * @returns {Boolean}\n   */\n  const isLeader = () => manager.current ? manager.current.isLeader() : true\n\n  /**\n  * Set initial state and start timer\n  * @name reset\n  */\n  const start = (remote = false) => {\n    // Clear timeout\n    clearTimeout(tId.current)\n    tId.current = null\n\n    // Bind the events\n    _bindEvents()\n\n    // Set state\n    idle.current = false\n    oldDate.current = +new Date()\n    lastActive.current = +new Date()\n    remaining.current = null\n\n    if (manager.current) {\n      /* istanbul ignore next */\n      manager.current.setAllIdle(false)\n      /* istanbul ignore next */\n      if (!remote && crossTab.emitOnAllTabs) {\n        manager.current.send('start')\n      }\n    }\n\n    // Set new timeout\n    tId.current = setTimeout(_toggleIdleState, _timeout.current)\n  }\n\n  /**\n  * Restore initial state and restart timer, calling onActive\n  * @name reset\n  */\n  const reset = (remote = false) => {\n    // Clear timeout\n    clearTimeout(tId.current)\n    tId.current = null\n\n    // Bind the events\n    _bindEvents()\n\n    // Emit active\n    if (idle.current) {\n      if (manager.current) {\n        /* istanbul ignore next */\n        manager.current.active()\n      } else {\n        emitOnActive.current()\n      }\n    }\n\n    // Reset state\n    idle.current = false\n    oldDate.current = +new Date()\n    lastActive.current = +new Date()\n    remaining.current = null\n\n    if (manager.current) {\n      /* istanbul ignore next */\n      manager.current.setAllIdle(false)\n      /* istanbul ignore next */\n      if (!remote && crossTab.emitOnAllTabs) {\n        manager.current.send('reset')\n      }\n    }\n\n    // Set new timeout\n    tId.current = setTimeout(_toggleIdleState, _timeout.current)\n  }\n\n  /**\n   * Store remaining time and stop timer\n   * @name pause\n   */\n  const pause = (remote = false) => {\n    // Timer is already paused\n    if (remaining.current !== null) return\n\n    // Unbind events\n    _unbindEvents()\n\n    // Clear existing timeout\n    clearTimeout(tId.current)\n    tId.current = null\n\n    // Define how much is left on the timer\n    remaining.current = getRemainingTime()\n\n    if (manager.current) {\n      /* istanbul ignore next */\n      if (!remote && crossTab.emitOnAllTabs) {\n        manager.current.send('pause')\n      }\n    }\n  }\n\n  /**\n   * Resumes a paused timer\n   * @name resume\n   */\n  const resume = (remote = false) => {\n    // Timer is not paused\n    if (remaining.current === null) return\n\n    // Bind events\n    _bindEvents()\n\n    // Start timer and clear remaining\n    // if we are in the idle state\n    if (!idle.current) {\n      // Set a new timeout\n      tId.current = setTimeout(_toggleIdleState, remaining.current)\n      // Set states\n      remaining.current = null\n      lastActive.current = +new Date()\n    }\n\n    if (manager.current) {\n      /* istanbul ignore next */\n      if (!remote && crossTab.emitOnAllTabs) {\n        manager.current.send('resume')\n      }\n    }\n  }\n\n  /**\n   * Hook lifecycle\n   */\n  useEffect(() => {\n    // Debounce and throttle can't both be set\n    if (debounce > 0 && throttle > 0) {\n      throw new Error('onAction can either be throttled or debounced (not both)')\n    }\n\n    // Set up cross tab\n    /* istanbul ignore next */\n    if (crossTab) {\n      manager.current = TabManager({\n        type: crossTab.type,\n        channelName: crossTab.channelName,\n        fallbackInterval: crossTab.fallbackInterval,\n        responseTime: crossTab.responseTime,\n        emitOnAllTabs: crossTab.emitOnAllTabs,\n        callbacks: {\n          onIdle: emitOnIdle.current,\n          onActive: emitOnActive.current\n        },\n        start,\n        reset,\n        pause,\n        resume\n      })\n    }\n\n    // If startOnMount is enabled, start the timer\n    if (startManually) {\n      return async () => {\n        clearTimeout(tId.current)\n        _unbindEvents(true)\n        if (crossTab) await manager.current.close()\n      }\n    }\n\n    if (startOnMount) {\n      start()\n    } else {\n      _bindEvents()\n    }\n\n    // Clear and unbind on unmount\n    return async () => {\n      clearTimeout(tId.current)\n      _unbindEvents(true)\n      if (intermediateOnAction.cancel) intermediateOnAction.cancel()\n      if (crossTab) await manager.current.close()\n    }\n  }, [])\n\n  useEffect(() => {\n    const eventsWereBound = eventsBound.current\n    if (eventsWereBound) _unbindEvents()\n    if (eventsThrottle > 0) {\n      handleEvent.current = throttled(_handleEvent, eventsThrottle)\n    } else {\n      handleEvent.current = _handleEvent\n    }\n    if (eventsWereBound) _bindEvents()\n  }, [eventsThrottle])\n\n  useEffect(() => {\n    _timeout.current = timeout\n    if (!firstLoad.current && idle.current) {\n      reset()\n    }\n    firstLoad.current = false\n  }, [timeout])\n\n  return {\n    isIdle,\n    isLeader,\n    start,\n    pause,\n    reset,\n    resume,\n    getLastIdleTime,\n    getTotalIdleTime,\n    getLastActiveTime,\n    getTotalActiveTime,\n    getElapsedTime,\n    getRemainingTime\n  }\n}\n\n/**\n * Type checks for every property\n * @type {Object}\n * @private\n */\nuseIdleTimer.propTypes = {\n  /**\n   * Activity Timeout in milliseconds\n   * default: 1200000\n   * @type {number}\n   */\n  timeout: PropTypes.number,\n  /**\n   * DOM events to listen to\n   * default: see [default events](https://github.com/SupremeTechnopriest/react-idle-timer#default-events)\n   * @type {Array}\n   */\n  events: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Function to call when user is idle.\n   * default: () => {}\n   * @type {Function}\n   */\n  onIdle: PropTypes.func,\n  /**\n   * Function to call when user becomes active.\n   * default: () => {}\n   * @type {Function}\n   */\n  onActive: PropTypes.func,\n  /**\n   * Function to call on user actions.\n   * default: () => {}\n   * @type {Function}\n   */\n  onAction: PropTypes.func,\n  /**\n   * Debounce the onAction function by setting delay in milliseconds.\n   * default: 0\n   * @type {number}\n   */\n  debounce: PropTypes.number,\n  /**\n   * Throttle the onAction function by setting delay in milliseconds.\n   * default: 0\n   * @type {number}\n   */\n  throttle: PropTypes.number,\n  /**\n   * Throttle the event handler function by setting delay in milliseconds.\n   * default: 200\n   * @type {number}\n   */\n  eventsThrottle: PropTypes.number,\n  /**\n   * Element reference to bind activity listeners to.\n   * default: document\n   * @type {Object}\n   */\n  element: PropTypes.oneOfType([PropTypes.object, PropTypes.element]),\n  /**\n   * Start the timer on mount.\n   * default: true\n   * @type {Boolean}\n   */\n  startOnMount: PropTypes.bool,\n  /**\n   * Require the timer to be started manually.\n   * default: false\n   * @type {Boolean}\n   */\n  startManually: PropTypes.bool,\n  /**\n   * Once the user goes idle the IdleTimer will not\n   * reset on user input instead, start() or reset() must be\n   * called manually to restart the timer.\n   * default: false\n   * @type {Boolean}\n   */\n  stopOnIdle: PropTypes.bool,\n  /**\n   * Bind events passively.\n   * default: true\n   * @type {Boolean}\n   */\n  passive: PropTypes.bool,\n  /**\n   * Capture events.\n   * default: true\n   * @type {Boolean}\n   */\n  capture: PropTypes.bool,\n  /**\n   * Cross Tab functionality.\n   * default: false\n   * @type {Boolean|Object}\n   */\n  crossTab: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.shape({\n      type: PropTypes.oneOf(['broadcastChannel', 'localStorage', 'simulate']),\n      channelName: PropTypes.string,\n      fallbackInterval: PropTypes.number,\n      responseTime: PropTypes.number,\n      removeTimeout: PropTypes.number,\n      emitOnAllTabs: PropTypes.bool\n    })\n  ])\n}\n\n/**\n * Sets default property values\n * @type {Object}\n * @private\n */\nuseIdleTimer.defaultProps = {\n  timeout: 1000 * 60 * 20,\n  element: DEFAULT_ELEMENT,\n  events: DEFAULT_EVENTS,\n  onIdle: () => { },\n  onActive: () => { },\n  onAction: () => { },\n  debounce: 0,\n  throttle: 0,\n  eventsThrottle: 200,\n  startOnMount: true,\n  startManually: false,\n  stopOnIdle: false,\n  capture: true,\n  passive: true,\n  crossTab: false\n}\n\nexport default useIdleTimer\n"],"names":["IS_BROWSER","window","DEFAULT_ELEMENT","document","DEFAULT_EVENTS","debounced","fn","delay","timerId","result","args","clearTimeout","setTimeout","cancel","throttled","lastCall","now","Date","getTime","lastMs","additional","microSeconds","ms","randomToken","Math","random","toString","substring","sleep","time","Promise","resolve","channelName","state","messagesCallback","bc","BroadcastChannel","onmessage","msg","data","channelState","close","messageJson","postMessage","err","reject","ObliviousSet","[object Object]","ttl","this","set","Set","timeMap","Map","value","has","add","_removeTooOldValues","clear","olderThen","iterator","Symbol","next","get","delete","getLocalStorage","localStorage","e","canBeUsed","ls","key","setItem","removeItem","options","Error","uuid","eMIs","removeTimeout","listener","ev","JSON","parse","newValue","addEventListener","addStorageEventListener","msgObj","token","messagesCallbackTime","removeEventListener","writeObj","stringify","createEvent","initEvent","dispatchEvent","userAgent","navigator","toLowerCase","includes","defaultTime","SIMULATE_CHANNELS","create","name","onMessage","Array","from","filter","channel","forEach","type","averageResponseTime","METHODS","BroadcastChannelMethod","LocalStorageMethod","MessageChannel","method","SimulateMethod","find","m","useMethod","map","chooseMethod","closed","_isListening","_onMessageListener","_addEventListeners","message","internal","_unSendMessagePromises","_beforeClose","_preparePromises","maybePromise","obj","then","s","_state","_prepareChannel","_post","listenObj","_removeListenerObject","_addListenerObject","awaitPrepare","all","messageChannel","sendPromise","catch","_hasMessageListeners","length","push","listenerFn","_startListening","o","_stopListening","LeaderElection","_channel","_options","isLeader","isDead","_isApplying","_reApply","_unloadFns","_listeners","_intervals","_duplicateListeners","_duplicateCalled","_onBeforeDie","async","unloadFn","die","stopCriteria","handleMessage","context","action","_sendMessage","responseTime","leaderElector","isLeaderListener","beLeader","success","applyOnce","_awaitLeadershipPromise","resolved","finish","clearInterval","interval","whenDeathListener","setInterval","fallbackInterval","onDuplicate","onBeforeDie","uFn","msgJson","postInternal","TabManager","emitOnAllTabs","callbacks","start","reset","pause","resume","elector","_leaderElector","createLeaderElection","registry","leader","allIdle","awaitLeadership","id","idle","active","onIdle","onActive","isIdle","Object","values","every","v","send","isActive","some","isAllIdle","setAllIdle","bool","IdleTimer","Component","props","super","oldDate","lastActive","lastIdle","idleTime","remaining","pageX","pageY","tId","eventsBound","callbackRefs","debounce","throttle","_onAction","onAction","eventsThrottle","handleEvent","_handleEvent","bind","startOnMount","startManually","_toggleIdleState","getRemainingTime","getElapsedTime","getLastActiveTime","getLastIdleTime","getTotalIdleTime","getTotalActiveTime","_setupTabManager","_bindEvents","prevProps","_unbindEvents","timeout","manager","console","error","children","crossTab","assign","element","events","passive","capture","force","setState","prevState","stopOnIdle","elapsedTimeSinceLastActive","remote","timeLeft","useIdleTimer","useRef","firstLoad","_timeout","emitOnIdle","emitOnActive","emitOnAction","useEffect","current","intermediateOnAction","useMemo","callOnAction","nextIdle","eventsWereBound","propTypes","PropTypes","number","arrayOf","string","func","oneOfType","object","shape","oneOf","defaultProps"],"mappings":"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"}