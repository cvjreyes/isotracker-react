[{"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\index.js":"1","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\reportWebVitals.js":"2","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\App.js":"3","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\civil\\civil.js":"4","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\isoCtrl\\isoCtrl.js":"5","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\changePassword\\changePassword.js":"6","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\home\\home.js":"7","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\electrical\\electrical.js":"8","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\instrumentation\\instrumentation.js":"9","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\progressCurve\\progressCurve.js":"10","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\equipments\\equipments.js":"11","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\piping\\piping.js":"12","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\navis\\navis.js":"13","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\sptracker\\sptracker.js":"14","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\pitrequests\\pitrequests.js":"15","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\welcomeLoginF\\welcomeLoginF.js":"16","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\pitRequestView\\pitRequestView.js":"17","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\isoCtrlF\\isoCtrlF.js":"18","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\register\\register.js":"19","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\pipingProduction\\pipingProduction.js":"20","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotCivils\\progressPlotCivils.js":"21","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navBar\\navBar.js":"22","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\EquipmentsNavBtns\\equipmentsNavBtns.js":"23","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\roleDropDown\\roleDropDown.js":"24","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilModelledDataTable\\civilModelledDataTable.js":"25","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navBtns\\navBtns.js":"26","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilExcel\\civilExcel.js":"27","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilTypesDataTable\\civilTypesDataTable.js":"28","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\alert\\alert.js":"29","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilExcelEdit\\civilExcelEdit.js":"30","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\datatable\\datatable.js":"31","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\actionBtns\\actionBtns.js":"32","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilEstimatedDataTable\\civilEstimatedDataTable.js":"33","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\dragAndDrop\\dragAndDrop.js":"34","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportBtns\\reportBtns.js":"35","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\myTrayBtn\\myTrayBtn.js":"36","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\binBtn\\binBtn.js":"37","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\selectPag\\selectPag.js":"38","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\stateTable\\stateTable.js":"39","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportBoxBtns\\reportBoxBtns.js":"40","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\myTrayTable\\myTrayTable.js":"41","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\statusDataTable\\statusDataTable.js":"42","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\checkInTable\\checkInTable.js":"43","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\binTable\\binTable.js":"44","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\onHoldBtn\\onHoldBtn.js":"45","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportsBtn\\reportsBtn.js":"46","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\issuedBtn\\issuedBtn.js":"47","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\historyDataTable\\historyDataTable.js":"48","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\procInsBtn\\procInsBtn.js":"49","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\modelledBtn\\modelledBtn.js":"50","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\modelledDataTable\\modelledDataTable.js":"51","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressBtn\\progressBtn.js":"52","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlot\\progressPlot.js":"53","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\menuList\\menuList.js":"54","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\procInstTable\\procInstTable.js":"55","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\usersDataTable\\usersDataTable.js":"56","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\onHoldTable\\onHoldTable.js":"57","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\byPassDataTable\\byPassDataTable.js":"58","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\estimatedPipesExcel\\estimatedPipesExcel.js":"59","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\productionUserTabs\\productionUserTabs.js":"60","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navBarProdCurve\\navBarProdCurve.js":"61","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\holdsPopUp\\holdsPopUp.js":"62","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\commentPopUp\\commentPopUp.js":"63","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\manageRolesPopUp\\manageRolesPopUp.js":"64","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\deleteUserConfPopUp\\deleteUserConfPopUp.js":"65","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\revisionPopUp\\revisionPopUp.js":"66","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadProcInst\\uploadProcInst.js":"67","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadPopUp\\uploadPopUp.js":"68","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\byPassPopUp\\byPassPopUp.js":"69","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadElectricalModelledPopUp\\uploadElectricalModelledPopUp.js":"70","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateBOMPopUp\\updateBOMPopUp.js":"71","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadPipesEstimatedPopUp\\uploadPipesEstimatedPopUp.js":"72","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadElectricalEstimatedPopUp\\uploadElectricalEstimatedPopUp.js":"73","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadCivilModelledPopUp\\uploadCivilModelledPopUp.js":"74","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadInstrumentationEstimatedPopUp\\uploadInstrumentationEstimatedPopUp.js":"75","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadCivilEstimtedPopUp\\uploadCivilEstimtedPopUp.js":"76","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadInstrumentationModelledPopUp\\uploadInstrumentationModelledPopUp.js":"77","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\byPassRejNACommentPopUp\\byPassRejNACommentPopUp.js":"78","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\deleteByPassPopUp\\deleteByPassPopUp.js":"79","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\editByPassPopUp\\editByPassPopUp.js":"80","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\acceptByPassPopUp\\acceptByPassPopUp.js":"81","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadReportPopUp\\uploadReportPopUp.js":"82","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadEquisEstimatedPopUp\\uploadEquisEstimatedPopUp.js":"83","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadEquisModelledPopUp\\uploadEquisModelledPopUp.js":"84","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\newRevPopUp\\newRevPopUp.js":"85","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\holdComment\\holdComment.js":"86","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\addUserPopUp\\addUserPopUp.js":"87","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateMassivePopUp\\updateMassivePopUp.js":"88","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\cancelIso\\cancelIso.js":"89","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\actionExtra\\actionExtra.js":"90","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\forceClaimPopUp\\forceClaimPopUp.js":"91","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\cancelRevPopUp\\cancelRevPopUp.js":"92","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateMassive\\updateMassive.js":"93","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\productionUserTab\\productionUserTab.js":"94","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\renamePopUp\\renamePopUp.js":"95","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadBomIsocontrolPopUp\\uploadBomIsocontrolPopUp.js":"96","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlGroupLineIdDataTable\\isoControlGroupLineIdDataTable.js":"97","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\loadingScreen\\loadingScreen.js":"98","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlNotModelledDataTable\\isoControlNotModelledDataTable.js":"99","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlModelledDataTable\\isoControlModelledDataTable.js":"100","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlFullDataTable\\isoControlFullDataTable.js":"101","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\timeTrackDataTable\\timeTrackDataTable.js":"102","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerViewDataTable\\qtrackerViewDataTable.js":"103","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerKeyParams\\csptrackerKeyParams.js":"104","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\menuListPit\\menuListPit.js":"105","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerRequestsDataTable\\csptrackerRequestsDataTable.js":"106","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingMyTrayTable\\pipingMyTrayTable.js":"107","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingBinTable\\pipingBinTable.js":"108","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlHoldsDataTable\\isoControlHoldsDataTable.js":"109","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingDataTable\\pipingDataTable.js":"110","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingNavBtns\\pipingNavBtns.js":"111","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerDataTable\\csptrackerDataTable.js":"112","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingTypesDataTable\\pipingTypesDataTable.js":"113","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navisTable\\navisTable.js":"114","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingExcel\\pipingExcel.js":"115","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingExcelEdit\\pipingExcelEdit.js":"116","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipExcelEdit\\equipExcelEdit.js":"117","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingEstimatedDataTable\\pipingEstimatedDataTable.js":"118","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotPiping\\progressPlotPiping.js":"119","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotEquipments\\progressPlotEquipments.js":"120","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipExcel\\equipExcel.js":"121","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipModelledDataTable\\equipModelledDataTable.js":"122","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotCurve\\progressPlotCurve.js":"123","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipTypesDataTable\\equipTypesDataTable.js":"124","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerRequestPopUp\\csptrackerRequestPopUp.js":"125","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipEstimatedDataTable\\equipEstimatedDataTable.js":"126","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instrumentationTypesDataTable\\instrumentationTypesDataTable.js":"127","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instExcelEdit\\instExcelEdit.js":"128","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instrumentationEstimatedDataTable\\instrumentationEstimatedDataTable.js":"129","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotInstrumentation\\progressPlotInstrumentation.js":"130","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instExcel\\instExcel.js":"131","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instrumentationModelledDataTable\\instrumentationModelledDataTable.js":"132","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\elecExcelEdit\\elecExcelEdit.js":"133","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\elecExcel\\elecExcel.js":"134","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\elecTypesDataTable\\elecTypesDataTable.js":"135","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progresPlotElecs\\progressPlotElecs.js":"136","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\electricalEstimatedDataTable\\electricalEstimatedDataTable.js":"137","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\electricalModelledDataTable\\electricalModelledDataTable.js":"138","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\loadingScreen3D\\loadingScreen3D.js":"139","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\menuListPitList\\menuListPitList.js":"140","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerRPSpecPopUp\\qtrackerRPSpecPopUp.js":"141","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRIDSSpecPopUp\\qtrackerNRIDSSpecPopUp.js":"142","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRBSpecPopUp\\qtrackerNRBSpecPopUp.js":"143","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNWCSpecPopUp\\qtrackerNWCSpecPopUp.js":"144","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRISpecPopUp\\qtrackerNRISpecPopUp.js":"145","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNVNSpecPopUp\\qtrackerNVNSpecPopUp.js":"146","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateDrawingPopUp\\updateDrawingPopUp.js":"147","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadDrawingPopUp\\uploadDrawingPopUp.js":"148","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlHoldsPopUp\\isoControlHoldsPopUp.js":"149","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRBPopUp\\qtrackerNRBPopUp.js":"150","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRIPopUp\\qtrackerNRIPopUp.js":"151","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNWCPopUp\\qtrackerNWCPopUp.js":"152","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerRRPopUp\\qtrackerRRPopUp.js":"153","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNVNPopUp\\qtrackerNVNPopUp.js":"154","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRIDSPopUp\\qtrackerNRIDSPopUp.js":"155","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\pipingProgress\\pipingProgress.js":"156"},{"size":756,"mtime":1658133420952,"results":"157","hashOfConfig":"158"},{"size":375,"mtime":1620977886757,"results":"159","hashOfConfig":"158"},{"size":3296,"mtime":1658300475236,"results":"160","hashOfConfig":"158"},{"size":12851,"mtime":1658237980749,"results":"161","hashOfConfig":"158"},{"size":71984,"mtime":1649773984879,"results":"162","hashOfConfig":"158"},{"size":8394,"mtime":1658237980714,"results":"163","hashOfConfig":"158"},{"size":3894,"mtime":1658237980733,"results":"164","hashOfConfig":"158"},{"size":12908,"mtime":1658237980720,"results":"165","hashOfConfig":"158"},{"size":13186,"mtime":1658237980732,"results":"166","hashOfConfig":"158"},{"size":4755,"mtime":1658237980759,"results":"167","hashOfConfig":"158"},{"size":12905,"mtime":1658237980734,"results":"168","hashOfConfig":"158"},{"size":28137,"mtime":1658237980752,"results":"169","hashOfConfig":"158"},{"size":2685,"mtime":1658237980745,"results":"170","hashOfConfig":"158"},{"size":28138,"mtime":1658237980757,"results":"171","hashOfConfig":"158"},{"size":3904,"mtime":1658237980756,"results":"172","hashOfConfig":"158"},{"size":6028,"mtime":1658237980761,"results":"173","hashOfConfig":"158"},{"size":23666,"mtime":1658237980753,"results":"174","hashOfConfig":"158"},{"size":102228,"mtime":1658237980736,"results":"175","hashOfConfig":"158"},{"size":3627,"mtime":1621337132858,"results":"176","hashOfConfig":"158"},{"size":149001,"mtime":1658299658915,"results":"177","hashOfConfig":"158"},{"size":1528,"mtime":1633691732329,"results":"178","hashOfConfig":"158"},{"size":32347,"mtime":1658237980547,"results":"179","hashOfConfig":"158"},{"size":7059,"mtime":1634288017224,"results":"180","hashOfConfig":"158"},{"size":3135,"mtime":1658237980691,"results":"181","hashOfConfig":"158"},{"size":6730,"mtime":1658237980251,"results":"182","hashOfConfig":"158"},{"size":6393,"mtime":1649773639497,"results":"183","hashOfConfig":"158"},{"size":8156,"mtime":1658237980249,"results":"184","hashOfConfig":"158"},{"size":5307,"mtime":1658237980252,"results":"185","hashOfConfig":"158"},{"size":6385,"mtime":1658237980198,"results":"186","hashOfConfig":"158"},{"size":4494,"mtime":1638432294740,"results":"187","hashOfConfig":"158"},{"size":65765,"mtime":1658237980271,"results":"188","hashOfConfig":"158"},{"size":16458,"mtime":1658237980184,"results":"189","hashOfConfig":"158"},{"size":7304,"mtime":1658237980235,"results":"190","hashOfConfig":"158"},{"size":12457,"mtime":1658237980273,"results":"191","hashOfConfig":"158"},{"size":1969,"mtime":1633691732500,"results":"192","hashOfConfig":"158"},{"size":1417,"mtime":1633691732209,"results":"193","hashOfConfig":"158"},{"size":1206,"mtime":1633691731293,"results":"194","hashOfConfig":"158"},{"size":1960,"mtime":1633691732548,"results":"195","hashOfConfig":"158"},{"size":19284,"mtime":1658237980676,"results":"196","hashOfConfig":"158"},{"size":5513,"mtime":1649773951989,"results":"197","hashOfConfig":"158"},{"size":56635,"mtime":1658237980548,"results":"198","hashOfConfig":"158"},{"size":14343,"mtime":1658237980676,"results":"199","hashOfConfig":"158"},{"size":5869,"mtime":1633691731296,"results":"200","hashOfConfig":"158"},{"size":14651,"mtime":1658237980237,"results":"201","hashOfConfig":"158"},{"size":1191,"mtime":1620977886735,"results":"202","hashOfConfig":"158"},{"size":1208,"mtime":1620977886735,"results":"203","hashOfConfig":"158"},{"size":1195,"mtime":1623664277542,"results":"204","hashOfConfig":"158"},{"size":11242,"mtime":1658237980338,"results":"205","hashOfConfig":"158"},{"size":1846,"mtime":1620977886735,"results":"206","hashOfConfig":"158"},{"size":1191,"mtime":1623664277544,"results":"207","hashOfConfig":"158"},{"size":8063,"mtime":1658237980384,"results":"208","hashOfConfig":"158"},{"size":1201,"mtime":1623664277576,"results":"209","hashOfConfig":"158"},{"size":1521,"mtime":1633691732388,"results":"210","hashOfConfig":"158"},{"size":16241,"mtime":1644824949463,"results":"211","hashOfConfig":"158"},{"size":18610,"mtime":1658237980564,"results":"212","hashOfConfig":"158"},{"size":18908,"mtime":1658237980708,"results":"213","hashOfConfig":"158"},{"size":25449,"mtime":1658237980550,"results":"214","hashOfConfig":"158"},{"size":16466,"mtime":1658237980243,"results":"215","hashOfConfig":"158"},{"size":13848,"mtime":1658237980342,"results":"216","hashOfConfig":"158"},{"size":1528,"mtime":1658237980567,"results":"217","hashOfConfig":"158"},{"size":32352,"mtime":1658237980548,"results":"218","hashOfConfig":"158"},{"size":3355,"mtime":1658237980339,"results":"219","hashOfConfig":"158"},{"size":2047,"mtime":1634217883637,"results":"220","hashOfConfig":"158"},{"size":17972,"mtime":1658237980352,"results":"221","hashOfConfig":"158"},{"size":1905,"mtime":1658237980259,"results":"222","hashOfConfig":"158"},{"size":13665,"mtime":1658237980675,"results":"223","hashOfConfig":"158"},{"size":9926,"mtime":1638432295021,"results":"224","hashOfConfig":"158"},{"size":2379,"mtime":1657703165180,"results":"225","hashOfConfig":"158"},{"size":3793,"mtime":1657703164857,"results":"226","hashOfConfig":"158"},{"size":4206,"mtime":1627026148295,"results":"227","hashOfConfig":"158"},{"size":3104,"mtime":1638432295021,"results":"228","hashOfConfig":"158"},{"size":4202,"mtime":1627026148376,"results":"229","hashOfConfig":"158"},{"size":4210,"mtime":1627026148308,"results":"230","hashOfConfig":"158"},{"size":4195,"mtime":1627026148238,"results":"231","hashOfConfig":"158"},{"size":4219,"mtime":1627026148308,"results":"232","hashOfConfig":"158"},{"size":4199,"mtime":1627026148267,"results":"233","hashOfConfig":"158"},{"size":4248,"mtime":1627376032138,"results":"234","hashOfConfig":"158"},{"size":2901,"mtime":1657703164805,"results":"235","hashOfConfig":"158"},{"size":1862,"mtime":1657703164905,"results":"236","hashOfConfig":"158"},{"size":3644,"mtime":1657703164906,"results":"237","hashOfConfig":"158"},{"size":3000,"mtime":1657703164774,"results":"238","hashOfConfig":"158"},{"size":3773,"mtime":1627026148377,"results":"239","hashOfConfig":"158"},{"size":4194,"mtime":1627026148307,"results":"240","hashOfConfig":"158"},{"size":4279,"mtime":1627026148294,"results":"241","hashOfConfig":"158"},{"size":2092,"mtime":1658237980551,"results":"242","hashOfConfig":"158"},{"size":1569,"mtime":1633691731968,"results":"243","hashOfConfig":"158"},{"size":13021,"mtime":1658237980196,"results":"244","hashOfConfig":"158"},{"size":2261,"mtime":1658237980709,"results":"245","hashOfConfig":"158"},{"size":3526,"mtime":1658237980240,"results":"246","hashOfConfig":"158"},{"size":5494,"mtime":1658237980186,"results":"247","hashOfConfig":"158"},{"size":6983,"mtime":1658237980304,"results":"248","hashOfConfig":"158"},{"size":1888,"mtime":1657703164806,"results":"249","hashOfConfig":"158"},{"size":7187,"mtime":1647530355456,"results":"250","hashOfConfig":"158"},{"size":907,"mtime":1658237980568,"results":"251","hashOfConfig":"158"},{"size":1966,"mtime":1638432404896,"results":"252","hashOfConfig":"158"},{"size":3106,"mtime":1638432295019,"results":"253","hashOfConfig":"158"},{"size":5709,"mtime":1658237980340,"results":"254","hashOfConfig":"158"},{"size":797,"mtime":1633691732053,"results":"255","hashOfConfig":"158"},{"size":10520,"mtime":1658237980348,"results":"256","hashOfConfig":"158"},{"size":11655,"mtime":1658237980346,"results":"257","hashOfConfig":"158"},{"size":16627,"mtime":1658237980337,"results":"258","hashOfConfig":"158"},{"size":6962,"mtime":1658237980693,"results":"259","hashOfConfig":"158"},{"size":86829,"mtime":1658237980678,"results":"260","hashOfConfig":"158"},{"size":15129,"mtime":1651654704638,"results":"261","hashOfConfig":"158"},{"size":812,"mtime":1658237980370,"results":"262","hashOfConfig":"158"},{"size":15156,"mtime":1658237980252,"results":"263","hashOfConfig":"158"},{"size":27042,"mtime":1658237980561,"results":"264","hashOfConfig":"158"},{"size":8481,"mtime":1658237980555,"results":"265","hashOfConfig":"158"},{"size":7297,"mtime":1658237980353,"results":"266","hashOfConfig":"158"},{"size":16200,"mtime":1658237980558,"results":"267","hashOfConfig":"158"},{"size":6298,"mtime":1658300583320,"results":"268","hashOfConfig":"158"},{"size":54119,"mtime":1658237980255,"results":"269","hashOfConfig":"158"},{"size":5311,"mtime":1658237980562,"results":"270","hashOfConfig":"158"},{"size":7332,"mtime":1634217883718,"results":"271","hashOfConfig":"158"},{"size":3730,"mtime":1644832367307,"results":"272","hashOfConfig":"158"},{"size":4492,"mtime":1638432294912,"results":"273","hashOfConfig":"158"},{"size":4555,"mtime":1649072775130,"results":"274","hashOfConfig":"158"},{"size":5500,"mtime":1658237980558,"results":"275","hashOfConfig":"158"},{"size":1527,"mtime":1633691732448,"results":"276","hashOfConfig":"158"},{"size":1532,"mtime":1657615842334,"results":"277","hashOfConfig":"158"},{"size":8201,"mtime":1658237980299,"results":"278","hashOfConfig":"158"},{"size":6752,"mtime":1658237980501,"results":"279","hashOfConfig":"158"},{"size":5608,"mtime":1628690074585,"results":"280","hashOfConfig":"158"},{"size":5327,"mtime":1658237980308,"results":"281","hashOfConfig":"158"},{"size":5844,"mtime":1638432294757,"results":"282","hashOfConfig":"158"},{"size":7240,"mtime":1658237980299,"results":"283","hashOfConfig":"158"},{"size":5338,"mtime":1658237980334,"results":"284","hashOfConfig":"158"},{"size":4507,"mtime":1638432294829,"results":"285","hashOfConfig":"158"},{"size":7226,"mtime":1658237980332,"results":"286","hashOfConfig":"158"},{"size":1536,"mtime":1633691732397,"results":"287","hashOfConfig":"158"},{"size":8194,"mtime":1658237980316,"results":"288","hashOfConfig":"158"},{"size":6741,"mtime":1658237980344,"results":"289","hashOfConfig":"158"},{"size":4499,"mtime":1638432294822,"results":"290","hashOfConfig":"158"},{"size":8175,"mtime":1658237980274,"results":"291","hashOfConfig":"158"},{"size":5309,"mtime":1658237980276,"results":"292","hashOfConfig":"158"},{"size":1526,"mtime":1633691732374,"results":"293","hashOfConfig":"158"},{"size":7203,"mtime":1658237980274,"results":"294","hashOfConfig":"158"},{"size":6762,"mtime":1658237980278,"results":"295","hashOfConfig":"158"},{"size":748,"mtime":1633691732051,"results":"296","hashOfConfig":"158"},{"size":5847,"mtime":1658237980371,"results":"297","hashOfConfig":"158"},{"size":4465,"mtime":1638432294985,"results":"298","hashOfConfig":"158"},{"size":3340,"mtime":1638432294973,"results":"299","hashOfConfig":"158"},{"size":5786,"mtime":1638432294962,"results":"300","hashOfConfig":"158"},{"size":5825,"mtime":1645445924126,"results":"301","hashOfConfig":"158"},{"size":5786,"mtime":1638432295010,"results":"302","hashOfConfig":"158"},{"size":5786,"mtime":1638432295010,"results":"303","hashOfConfig":"158"},{"size":4706,"mtime":1634217883726,"results":"304","hashOfConfig":"158"},{"size":3916,"mtime":1658237980713,"results":"305","hashOfConfig":"158"},{"size":15922,"mtime":1658237980347,"results":"306","hashOfConfig":"158"},{"size":8901,"mtime":1658237980569,"results":"307","hashOfConfig":"158"},{"size":9072,"mtime":1658237980583,"results":"308","hashOfConfig":"158"},{"size":9332,"mtime":1658237980706,"results":"309","hashOfConfig":"158"},{"size":8334,"mtime":1658237980658,"results":"310","hashOfConfig":"158"},{"size":9010,"mtime":1658237980581,"results":"311","hashOfConfig":"158"},{"size":7233,"mtime":1658237980586,"results":"312","hashOfConfig":"158"},{"size":21301,"mtime":1658313757503,"results":"313","hashOfConfig":"158"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1eahr2m",{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"320","messages":"321","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"322","messages":"323","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"326","messages":"327","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"328","messages":"329","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"330","messages":"331","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"332","messages":"333","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"334","messages":"335","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"336","messages":"337","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"338","messages":"339","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"340","messages":"341","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"342","messages":"343","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"348","messages":"349","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"352","messages":"353","errorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"355"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"358","messages":"359","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"392","messages":"393","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"355"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"355"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"471","messages":"472","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"473","messages":"474","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"477","messages":"478","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"355"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"521","messages":"522","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"525","messages":"526","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"533","messages":"534","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"569","messages":"570","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"571","messages":"572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"579","messages":"580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"583","messages":"584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"587","messages":"588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"591","messages":"592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"593","messages":"594","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"595","messages":"596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"597","messages":"598","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"599","messages":"600","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"601","messages":"602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"625","messages":"626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"627","messages":"628","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\index.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\App.js",["629"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\civil\\civil.js",["630","631","632"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\isoCtrl\\isoCtrl.js",["633","634","635","636","637"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\changePassword\\changePassword.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\home\\home.js",["638","639"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\electrical\\electrical.js",["640","641","642"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\instrumentation\\instrumentation.js",["643","644","645"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\progressCurve\\progressCurve.js",["646","647","648"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\equipments\\equipments.js",["649","650","651"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\piping\\piping.js",["652","653","654","655","656","657","658"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\navis\\navis.js",["659"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\sptracker\\sptracker.js",["660","661","662","663","664"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\pitrequests\\pitrequests.js",["665","666"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\welcomeLoginF\\welcomeLoginF.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\pitRequestView\\pitRequestView.js",["667","668","669","670","671"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\isoCtrlF\\isoCtrlF.js",["672","673","674","675","676","677","678","679","680","681","682","683","684"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\register\\register.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\pipingProduction\\pipingProduction.js",["685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714","715","716","717","718","719","720","721","722","723"],"\r\nimport React, { useState , useEffect} from 'react'\r\nimport { HotTable } from '@handsontable/react';\r\nimport IdleTimer from 'react-idle-timer'\r\nimport {useHistory} from \"react-router\";\r\nimport BackIcon from \"../../assets/images/back.svg\"\r\nimport Reports from \"../../assets/images/Notepad.png\"\r\nimport Graph from \"../../assets/images/ChartBar.png\"\r\nimport GraphImage from \"../../assets/images/ChartBarGraph.svg\"\r\nimport ExportImage from \"../../assets/images/ShareNetwork.svg\"\r\nimport IsometricsImage from \"../../assets/images/CodesandboxLogo.svg\"\r\nimport WeightImage from \"../../assets/images/Barbell.svg\"\r\nimport ArrowImage from \"../../assets/images/ArrowLeft.svg\"\r\nimport ArrowDownImage from \"../../assets/images/Vector.svg\"\r\nimport AtomImage from \"../../assets/images/Atom.svg\"\r\nimport AlertF from \"../../components/alert/alert\"\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse'\r\nimport { saveAs } from 'file-saver';\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx-js-style\";\r\nimport SaveIcon2 from \"../../assets/images/SaveIcon2.svg\"\r\nimport './pipingProduction.css'\r\nimport SaveIcon from \"../../assets/images/save.svg\"\r\nimport { Line } from 'react-chartjs-2';\r\nimport Chart from 'chart.js/auto';\r\nimport NavBarProdCurve from '../../components/navBarProdCurve/navBarProdCurve';\r\nimport ProductionUserTabs from \"../../components/productionUserTabs/productionUserTabs\";\r\n\r\nimport html2canvas from 'html2canvas';\r\nimport jsPDF from 'jspdf';\r\n\r\nconst PITRequests = () =>{\r\n\r\n    const history = useHistory();\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    const [tab, setTab] = useState(\"prod\")\r\n    const [tabBtns, setTabBtns] = useState(null)\r\n    const [usersType, setUsersType] = useState(\"iso\")\r\n    const [usersData, setUsersData] = useState(null)\r\n    const [userEffTitle, setUserEffTitle] = useState(<h4 style={{fontSize:\"22px\", fontWeight:\"bold\", color:\"gray\", marginTop:\"30px\", marginLeft:\"690px\"}}>USER ISOMETRICS EFFICIENCY</h4>)\r\n\r\n    const [updateData, setUpdateData] = useState(false)\r\n    const [updateRows, setUpdateRows] = useState(false)\r\n    const [tables, setTables] = useState([])\r\n    const [materials, setMaterials] = useState([])\r\n    const [materialsList, setMaterialsList] = useState([])\r\n    const [materialsIDList, setMaterialsIDList] = useState([])\r\n    const [piping, setPiping] = useState([])\r\n    const [management, setManagement] = useState([])\r\n\r\n    const [estimatedData, setEstimatedData] = useState({})\r\n    const [forecastData, setForecastData] = useState({})\r\n    const [realData, setRealData] = useState({})\r\n    const [estimatedProgressData, setEstimatedProgressData] = useState({})\r\n    const [realProgressData, setRealProgressData] = useState({})\r\n    const [estimatedMaterialData, setEstimatedMaterialData] = useState({})\r\n    const [overallTable, setOverallTable] = useState()\r\n\r\n    const[estimatedWeightData, setEstimatedWeightData] = useState({})\r\n    const[forecastWeightData, setForecastWeightData] = useState({})\r\n    const[realWeightData, setRealWeightData] = useState({})\r\n    const[estimatedProgressWeightData, setEstimatedProgressWeightData] = useState({})\r\n    const[realProgressWeightData, setRealProgressWeightData] = useState({})\r\n\r\n    const[realWeightMatData, setRealWeightMatData] = useState({})\r\n    const[realProgressWeightMatData, setRealProgressWeightMatData] = useState({})\r\n\r\n    const [success, setSuccess] = useState(false)\r\n    const [spanAlert, setSpanAlert] = useState(false)\r\n    const [pipingAlert, setPipingAlert] = useState(false)\r\n    const [materialsAlert, setMaterialsAlert] = useState(false)\r\n\r\n    const [weeksYDiff, setWeeksYDiff] = useState()\r\n\r\n    const [lineChart, setLineChart] = useState()\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const [estimatedOverall, setEstimatedOverall] = useState([])\r\n    const [realOverall, setRealOverall] = useState([])\r\n    const [estimatedProgressOverall, setEstimatedProgressOverall] = useState([])\r\n    const [realProgressOverall, setRealProgressOverall] = useState([])\r\n    const colors = [\"#4169E1\", \"#B0E0E6\", \"#00BFFF\", \"#008000\", \"#7CFC00\", \"#98FB98\", \"#FF8C00\", \"#FFD700\", \"#FF0000\", \"#FF1493\", \"#FF69B4\", \"#FFC0CB\", \"#708090\", \"#A9A9A9\", \"#DCDCDC\", \"#20B2AA\", \"#00CED1\", \"#AFEEEE\"]\r\n\r\n    \r\n    document.body.style.zoom = 1\r\n    \r\n    //menu desplegable\r\n    const [menu, setMenu ] = useState( false )\r\n    const toggleMenu = () => {\r\n        setMenu ( !menu )\r\n    }\r\n\r\n    //menu desplegable users\r\n    const [menuUsers, setMenuUsers ] = useState( false )\r\n    const toggleMenuUsers = () => {\r\n        setMenuUsers ( !menuUsers )\r\n    }\r\n\r\n    //menu desplegable production\r\n    const [menuProduction, setMenuProduction ] = useState( false )\r\n    const toggleMenuProduction = () => {\r\n        setMenuProduction ( !menuProduction )\r\n    }\r\n    \r\n    function handleOnIdle(){\r\n        const body = {\r\n            user: secureStorage.getItem(\"user\"),\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n        secureStorage.clear()\r\n        history.push(\"/\" + process.env.REACT_APP_PROJECT)\r\n    }\r\n\r\n    useEffect(async() =>{   \r\n        const table_class = [\"mat1-table\", \"mat2-table\", \"mat3-table\", \"mat4-table\", \"mat5-table\", \"mat6-table\"]\r\n        const weight_table_class = [\"wmat1-table\", \"wmat2-table\", \"wmat3-table\", \"wmat4-table\", \"wmat5-table\", \"wmat6-table\"]\r\n        \r\n        await setLoading(true)\r\n\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getMaterialsPipingClass\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                const materials = json.materials                        \r\n                let piping = []\r\n                for(let i = 0; i < materials.length; i++){\r\n                    piping.push({\"id\": materials[i].piping_id, \"PipingClass\": materials[i].piping, \"Material\": materials[i].material})\r\n                }\r\n                \r\n                await setPiping(piping)\r\n        })\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getProjectSpan\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                const span = json.span\r\n                if(span.length > 0){\r\n                    await setManagement({\"Starting date\": span[0].starting_date.toString().substring(8,10) + \"/\" + span[0].starting_date.toString().substring(5,7) + \"/\" + span[0].starting_date.toString().substring(0,4), \"Finishing date\": span[0].finishing_date.toString().substring(8,10) + \"/\" + span[0].finishing_date.toString().substring(5,7) + \"/\" + span[0].finishing_date.toString().substring(0,4)})\r\n                }else{\r\n                    await setManagement({\"Starting date\": \"\", \"Finishing date\": \"\"})\r\n                }\r\n                \r\n            })\r\n\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getEstimatedByMaterial\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                let est = estimatedMaterialData\r\n                for(let i = 0; i < json.estimated.length; i++){\r\n                    est[json.estimated[i].id] = json.estimated[i].estimated\r\n                }\r\n                await setEstimatedMaterialData(est)\r\n            })\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getMaterials\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                const materials = json.materials\r\n                let mat = []\r\n                let matList = []\r\n                let matIDList = []\r\n                for(let i = 0; i < materials.length; i++){\r\n                    mat.push({\"id\": materials[i].id, \"Material\": materials[i].name})\r\n                    matList.push(materials[i].name)\r\n                    matIDList.push(materials[i].id)\r\n                }\r\n                await setMaterialsIDList(matIDList)\r\n                await setMaterials(mat)\r\n                await setMaterialsList(matList)\r\n\r\n                if(tab === \"prod\"){\r\n                    setTabBtns(<div style={{width: \"140px\"}}>\r\n                        <button className=\"reporting__tab__button\" style={{backgroundColor:\"#338DF1\"}}>P</button>\r\n                        <button className=\"reporting__tab__button\" style={{marginTop:\"10px\"}} onClick={async() => await setTab(\"weight\")}>W</button>\r\n                        <button className=\"reporting__tab__button\" style={{marginTop:\"10px\"}} onClick={async() => await setTab(\"users\")}>U</button>\r\n                    </div>)\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getIssuedByMatWeek\", options)\r\n                    .then(response => response.json())\r\n                    .then(async json => {\r\n                        const issued = json.issued\r\n                        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getEstimatedMatWeek\", options)\r\n                            .then(response => response.json())\r\n                            .then(async json => {\r\n\r\n                                const estimated = json.estimated\r\n                                await setWeeksYDiff(estimated[0].weekY - 1)\r\n                                const weekYdiff = estimated[0].weekY - 1\r\n                                if(estimated.length > 0){\r\n                                fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getForecastMatWeek\", options)\r\n                                    .then(response => response.json())\r\n                                    .then(async json => {\r\n                                        const forecast = json.forecast\r\n                                        let tables = []\r\n                                        let material = estimated[0].material_id\r\n                                        const settings = {\r\n                                            licenseKey: 'non-commercial-and-evaluation',\r\n                                            colWidths: 40,\r\n                                            rowHeaderWidth: 190\r\n                                            //... other options\r\n                                        }\r\n\r\n                                        let weeks = []                                        \r\n                                        let graphData = []\r\n                                        let est = {}\r\n                                        let sumEst = {}\r\n                                        let sumReal = {}\r\n                                        let sumForc = {}\r\n                                        let sumEstGraph = []\r\n                                        let sumRealGraph = []\r\n                                        let sumForcGraph = []\r\n                                        let countEst = 0\r\n                                        let countReal = 0\r\n                                        let countForc = 0\r\n                                        let forc = {}\r\n                                        let col = []\r\n                                        let sumEstCells = []\r\n\r\n                                        for(let i = 0; i < estimated.length; i++){\r\n                                            if(estimated[i].material_id === material){\r\n                                                weeks.push(estimated[i].week.toString())\r\n                                                est[estimated[i].week.toString()] = estimated[i].estimated\r\n                                                forc[forecast[i].week.toString()] = forecast[i].estimated\r\n                                                countForc += forecast[i].estimated\r\n                                                countEst += estimated[i].estimated\r\n                                                sumEst[estimated[i].week.toString()] = countEst\r\n                                                if(issued[material]){\r\n                                                    if(issued[material][estimated[i].week]){\r\n                                                        countReal += issued[material][estimated[i].week]\r\n                                                    }\r\n                                                }\r\n                                                sumReal[estimated[i].week.toString()] = countReal\r\n                                                sumForc[estimated[i].week.toString()] = countForc\r\n                                                col.push({ data: estimated[i].week.toString(), type: \"numeric\"})\r\n                                                sumEstCells.push({row: 1, col: i, readOnly:true})\r\n                                                sumEstCells.push({row: 3, col: i, readOnly:true})\r\n                                                sumEstCells.push({row: 4, col: i, readOnly:true})\r\n                                            }else{\r\n                                                let estData = estimatedData\r\n                                                estData[material] = est\r\n                                                await setEstimatedData(estData)\r\n                                                let forcData = forecastData\r\n                                                forcData[material] = forc\r\n                                                await setForecastData(forcData)\r\n                                                let rData = realData\r\n                                                rData[material] = issued[material]\r\n                                                await setRealData(rData)\r\n                                                let sumEstData = estimatedProgressData\r\n                                                sumEstData[material] = sumEst\r\n                                                await setEstimatedProgressData(sumEstData)\r\n                                                let sumRealData = realProgressData\r\n                                                sumRealData[material] = sumReal\r\n                                                await setRealProgressData(sumRealData)\r\n                                                let totalEst = estimatedMaterialData[estimated[i-1].material_id]\r\n                                                if(!totalEst){\r\n                                                    totalEst = 0\r\n                                                }\r\n                                                let diff = countEst - totalEst\r\n                                                let warning = null\r\n                                                if(totalEst < countEst){\r\n                                                    warning = <text className=\"warning__text\">*Estimated exceeded by {diff}!</text>\r\n                                                }\r\n                                                if(!totalEst){\r\n                                                    totalEst = \"(0 estimated)\"\r\n                                                }else{\r\n                                                    totalEst = \"(\" + totalEst.toString() + \" estimated)\"\r\n                                                }\r\n\r\n                                                let t_class = table_class[matIDList.indexOf(material)]\r\n                                                await tables.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"30px\", marginTop:\"20px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{estimated[i-1].name.toUpperCase()} Isometrics <text style={{fontSize:\"17px\"}}>{totalEst}</text> {warning}</text><button className=\"save__button\" onClick={()=> submitEstimatedForecast(estimated[i-1].material_id)}><img src={SaveIcon} alt=\"save\" className=\"save__icon\"></img></button></div>\r\n                                                <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                data={[est, issued[material], forc, sumEst, sumReal]}\r\n                                                colHeaders={weeks}\r\n                                                rowHeaders={[\"Estimated\", \"Real\", \"Forecast\", \"Estimated progress\", \"Real progress\"]}\r\n                                                width=\"1750\"\r\n                                                height=\"160\"\r\n                                                settings={settings} \r\n                                                manualColumnResize={true}\r\n                                                manualRowResize={true}\r\n                                                columns= {col}\r\n                                                filters={true}\r\n                                                cell = {sumEstCells}\r\n                                                className={t_class}\r\n                                            /></div></div>)\r\n\r\n                                            Object.keys(sumEst).map(function(key, index) {\r\n                                                sumEstGraph.push(sumEst[key])\r\n                                            });\r\n\r\n                                            Object.keys(sumReal).map(function(key, index) {\r\n                                                sumRealGraph.push(sumReal[key])\r\n                                            });\r\n\r\n                                            Object.keys(sumForc).map(function(key, index) {\r\n                                                sumForcGraph.push(sumForc[key])\r\n                                            });\r\n\r\n                                            let color_index = ((matIDList.indexOf(material)) * 3)\r\n                                            \r\n                                            graphData.push({\r\n                                                label: 'Estimated ' + estimated[i-1].name,\r\n                                                fill: false,\r\n                                                lineTension: 0.2,\r\n                                                backgroundColor: colors[color_index],\r\n                                                borderColor: colors[color_index],\r\n                                                borderWidth: 1,\r\n                                                data: sumEstGraph\r\n                                            })\r\n\r\n                                            graphData.push({\r\n                                                label: 'Forecast ' + estimated[i-1].name,\r\n                                                fill: false,\r\n                                                lineTension: 0.2,\r\n                                                backgroundColor: colors[color_index + 2],\r\n                                                borderColor: colors[color_index + 2],\r\n                                                borderWidth: 1,\r\n                                                data: sumForcGraph\r\n                                            })\r\n\r\n                                            graphData.push({\r\n                                                label: 'Real ' + estimated[i-1].name,\r\n                                                fill: false,\r\n                                                lineTension: 0.2,\r\n                                                backgroundColor: colors[color_index + 1],\r\n                                                borderColor: colors[color_index + 1],\r\n                                                borderWidth: 1,\r\n                                                data: sumRealGraph\r\n                                            })\r\n                \r\n                                            weeks = [estimated[i].week.toString()]\r\n                                            est = {}\r\n                                            forc = {}\r\n                                            sumEst = {}\r\n                                            sumReal = {}\r\n                                            sumForc = {}\r\n                                            sumEstGraph = []\r\n                                            sumRealGraph = []\r\n                                            sumForcGraph = []\r\n                                            est[estimated[i].week.toString()] = estimated[i].estimated\r\n                                            forc[forecast[i].week.toString()] = forecast[i].estimated\r\n                                            if(issued[estimated[i].material_id]){\r\n                                                if(issued[estimated[i].material_id][\"1\"]){\r\n                                                    countReal = issued[estimated[i].material_id][estimated[i].week]\r\n                                                }else{\r\n                                                    countReal = 0\r\n                                                }\r\n                                            }else{\r\n                                                countReal = 0\r\n                                            }\r\n                                            sumReal[estimated[i].week.toString()] = countReal\r\n\r\n                                            if(estimated[i].estimated){\r\n                                                countEst = estimated[i].estimated\r\n                                            }else{\r\n                                                countEst = 0\r\n                                            }\r\n\r\n                                            if(forecast[i].estimated){\r\n                                                countForc = forecast[i].estimated\r\n                                            }else{\r\n                                                countForc = 0\r\n                                            }\r\n                                            sumForc[forecast[i].week.toString()] = countForc\r\n                                            sumEst[estimated[i].week.toString()] = countEst\r\n                                            \r\n                                            col = [{ data: estimated[i].week.toString(), type: \"numeric\"}]\r\n                                            material = estimated[i].material_id\r\n                                            }\r\n                                        }\r\n                                        let estData = estimatedData\r\n                                        estData[material] = est\r\n                                        await setEstimatedData(estData)\r\n                                        let forcData = forecastData\r\n                                        forcData[material] = forc\r\n                                        await setForecastData(forcData)\r\n                                        let rData = realData\r\n                                        rData[material] = issued[material]\r\n                                        await setRealData(rData)\r\n                                        let sumEstData = estimatedProgressData\r\n                                        sumEstData[material] = sumEst\r\n                                        await setEstimatedProgressData(sumEstData)\r\n                                        let sumRealData = realProgressData\r\n                                        sumRealData[material] = sumReal\r\n                                        await setRealProgressData(sumRealData)\r\n                                        let totalEst = estimatedMaterialData[material]\r\n                                        if(!totalEst){\r\n                                            totalEst = 0\r\n                                        }\r\n                                        let diff = countEst - totalEst\r\n                                        let warning = null\r\n                                        if(totalEst < countEst){\r\n                                            warning = <text className=\"warning__text\">*Estimated exceeded by {diff}!</text>\r\n                                        }\r\n                                        if(!totalEst){\r\n                                            totalEst = \"(0 estimated)\"\r\n                                        }else{\r\n                                            totalEst = \"(\" + totalEst.toString() + \" estimated)\"\r\n                                        }\r\n\r\n                                        let t_class = table_class[matIDList.indexOf(material)]\r\n\r\n                                        await tables.push(<div id=\"hot-app\" style={{width:\"1750px\", paddingBottom:\"30px\", marginTop:\"20px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{estimated[estimated.length-1].name.toUpperCase()} Isometrics <text style={{fontSize:\"17px\"}}>{totalEst}</text> {warning}</text><button className=\"save__button\" onClick={()=> submitEstimatedForecast(material)}><img src={SaveIcon} alt=\"save\" className=\"save__icon\"></img></button></div>\r\n                                        <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                data={[est, issued[material], forc, sumEst, sumReal]}\r\n                                                colHeaders={weeks}\r\n                                                rowHeaders={[\"Estimated\", \"Real\", \"Forecast\", \"Estimated progress\", \"Real progress\"]}\r\n                                                width=\"1750\"\r\n                                                height=\"160\"\r\n                                                settings={settings} \r\n                                                manualColumnResize={true}\r\n                                                manualRowResize={true}\r\n                                                columns= {col}\r\n                                                filters={true}\r\n                                                cell = {sumEstCells}\r\n                                                className={t_class}\r\n                                            /></div></div>)\r\n\r\n                                        await setTables([])\r\n                                        await setTables(tables)\r\n\r\n                                        Object.keys(sumEst).map(function(key, index) {\r\n                                            sumEstGraph.push(sumEst[key])\r\n                                        });\r\n\r\n                                        Object.keys(sumReal).map(function(key, index) {\r\n                                            sumRealGraph.push(sumReal[key])\r\n                                        });\r\n                                        Object.keys(sumForc).map(function(key, index) {\r\n                                            sumForcGraph.push(sumForc[key])\r\n                                        });\r\n\r\n                                        let color_index = (matIDList.indexOf(material)) * 3\r\n                                        \r\n                                        graphData.push({\r\n                                            label: 'Estimated ' + estimated[estimated.length-1].name,\r\n                                            fill: false,\r\n                                            lineTension: 0.2,\r\n                                            backgroundColor: colors[color_index],\r\n                                            borderColor: colors[color_index],\r\n                                            borderWidth: 1,\r\n                                            data: sumEstGraph\r\n                                        })\r\n\r\n                                        graphData.push({\r\n                                            label: 'Forecast ' + estimated[estimated.length-1].name,\r\n                                            fill: false,\r\n                                            lineTension: 0.2,\r\n                                            backgroundColor: colors[color_index + 2],\r\n                                            borderColor: colors[color_index + 2],\r\n                                            borderWidth: 1,\r\n                                            data: sumForcGraph\r\n                                        })\r\n\r\n                                        graphData.push({\r\n                                            label: 'Real ' + estimated[estimated.length-1].name,\r\n                                            fill: false,\r\n                                            lineTension: 0.2,\r\n                                            backgroundColor: colors[color_index + 1],\r\n                                            borderColor: colors[color_index + 1],\r\n                                            borderWidth: 1,\r\n                                            data: sumRealGraph\r\n                                        })\r\n\r\n                                    \r\n                                        let overallTable = []\r\n                                        let totalEstimated = 0\r\n\r\n                                        let estimatedOverall = {}\r\n                                        let esimatedOverallSum = {}\r\n                                        let estimatedOverallCount = 0\r\n                                        let estimatedOverallGraph = []\r\n\r\n                                        let realOverall = {}\r\n                                        let realOverallSum = {}\r\n                                        let realOverallCount = 0\r\n                                        let realOverallGraph = []\r\n\r\n                                        Object.keys(estimatedMaterialData).map(function(key, index) {\r\n                                            totalEstimated += estimatedMaterialData[key]\r\n                                        });\r\n\r\n                                        Object.keys(issued).map(function(key, index) {\r\n                                            Object.keys(issued[key]).map(function(k, index) {\r\n                                                if(realOverall[k]){\r\n                                                    realOverall[k] += issued[key][k]\r\n                                                }else{\r\n                                                    realOverall[k] = issued[key][k]\r\n                                                }\r\n                                            })\r\n                                        });\r\n\r\n                                        Object.keys(estimated).map(function(key, index) {\r\n                                            if(estimatedOverall[estimated[key].week]){\r\n                                                estimatedOverall[estimated[key].week] += estimated[key].estimated\r\n                                            }else{\r\n                                                estimatedOverall[estimated[key].week] = estimated[key].estimated\r\n                                            }\r\n                                        });\r\n\r\n                                        let labels = []\r\n                                        let overallCells = []\r\n                                        console.log(estimatedOverall)\r\n                                        await Object.keys(estimatedOverall).map(function(key, index) {\r\n                                            if(realOverall[key]){\r\n                                                realOverallCount += realOverall[key]\r\n                                            }\r\n                                            realOverallSum[key] = realOverallCount\r\n                                            estimatedOverallCount += estimatedOverall[key]\r\n                                            esimatedOverallSum[key] = estimatedOverallCount\r\n                                            estimatedOverallGraph.push(estimatedOverallCount)\r\n                                            realOverallGraph.push(realOverallCount)\r\n\r\n                                            overallCells.push({row: 2, col: index, className: \"overallCell__estSum\"})\r\n                                            overallCells.push({row: 3, col: index, className: \"overallCell__realSum\"})\r\n\r\n                                            labels.push(\"w\" + key.toString() + \" / w\" + (parseInt(key) + weekYdiff))\r\n                                        });\r\n\r\n                                        graphData.push({\r\n                                            label: 'Estimated Overall',\r\n                                            fill: false,\r\n                                            lineTension: 0.2,\r\n                                            backgroundColor: 'rgb(147,112,219)',\r\n                                            borderColor: 'rgb(147,112,219)',\r\n                                            borderWidth: 1,\r\n                                            data: estimatedOverallGraph\r\n                                        })\r\n\r\n                                        graphData.push({\r\n                                            label: 'Real Overall',\r\n                                            fill: false,\r\n                                            lineTension: 0.2,\r\n                                            backgroundColor: 'rgb(255,80,80)',\r\n                                            borderColor: 'rgb(255,80,80)',\r\n                                            borderWidth: 1,\r\n                                            data: realOverallGraph\r\n                                        })\r\n\r\n                                        warning = null\r\n                                        if(totalEstimated < estimatedOverallCount){\r\n                                            warning = <text className=\"warning__text\">*Estimated exceeded by {estimatedOverallCount-totalEstimated}!</text>\r\n                                        }\r\n                                        await overallTable.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", borderTop:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"30px\", paddingTop:\"30px\", marginTop:\"20px\"}}><text className=\"materials__title\">OVERALL Isometrics <text style={{fontSize:\"17px\"}}>({totalEstimated} estimated)</text> {warning}</text>\r\n                                        <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                data={[estimatedOverall, realOverall, esimatedOverallSum, realOverallSum]}\r\n                                                colHeaders={weeks}\r\n                                                rowHeaders={[\"Estimated\", \"Real\", \"Estimated progress\", \"Real progress\"]}\r\n                                                width=\"1750\"\r\n                                                height=\"138\"\r\n                                                settings={settings} \r\n                                                manualColumnResize={true}\r\n                                                manualRowResize={true}\r\n                                                columns= {col}\r\n                                                filters={true}\r\n                                                readOnly= {true}\r\n                                                className='overall-table'\r\n                                                \r\n                                            /></div></div>)\r\n\r\n                                        await setEstimatedOverall(estimatedOverall)\r\n                                        await setRealOverall(realOverall)\r\n                                        await setEstimatedProgressOverall(esimatedOverallSum)\r\n                                        await setRealProgressOverall(realOverallSum)\r\n                                        await setOverallTable()\r\n                                        await setOverallTable(overallTable)\r\n                                        await setLineChart(<Line\r\n                                            data={{\r\n                                                labels: labels,\r\n                                                datasets: graphData\r\n                                            }}\r\n                                            options={{\r\n                                                hover: {\r\n                                                    mode: 'new mode'\r\n                                                },\r\n                                                maintainAspectRatio: false,\r\n                                                plugins: {\r\n                                                    title: {\r\n                                                        display: true,\r\n                                                        text: \"PRODUCTION CURVES\",\r\n                                                        font: {size: \"22px\", family:\"Quicksand\"}\r\n                                                    },\r\n                                                    legend: {\r\n                                                        display: true,\r\n                                                        position: \"left\",\r\n                                                        labels: {\r\n                                                            filter: function (legendItem, chartData) {\r\n                                                                    chartData.datasets[legendItem.datasetIndex].hidden = true\r\n                                                                return true\r\n                                                            },\r\n                                                        },\r\n                                                    },\r\n                                                    \r\n                                                },\r\n                                                \r\n                                                \r\n                                            }}\r\n                                        />)\r\n\r\n                                    })\r\n                                }\r\n                            })\r\n                    })  \r\n                }else if(tab === \"weight\"){\r\n                    setTabBtns(<div style={{width: \"140px\"}}>\r\n                        <button className=\"reporting__tab__button\" onClick={() => setTab(\"prod\")}>P</button>\r\n                        <button className=\"reporting__tab__button\" style={{marginTop:\"10px\",backgroundColor:\"#338DF1\"}}>W</button>\r\n                        <button className=\"reporting__tab__button\" style={{marginTop:\"10px\"}} onClick={async() => await setTab(\"users\")}>U</button>\r\n                    </div>)\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getIssuedWeightByMatWeek\", options)\r\n                    .then(response => response.json())\r\n                    .then(async json => {\r\n                        const issued = json.issued\r\n                        await setRealWeightMatData(issued)\r\n                        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getEstimatedForecastWeight\", options)\r\n                            .then(response => response.json())\r\n                            .then(async json => {\r\n\r\n                                const estimated = json.estimated\r\n                                if(estimated.length > 0){  \r\n                                        let tables = []\r\n                                        const weightSettings = {\r\n                                            licenseKey: 'non-commercial-and-evaluation',\r\n                                            colWidths: 55,\r\n                                            rowHeaderWidth: 190\r\n                                            //... other options\r\n                                        }\r\n\r\n                                        let weeks = []\r\n                                        let graphData = []\r\n                                        let est = {}\r\n                                        let forc = {}\r\n                                        let sumEst = {}\r\n                                        \r\n                                        let sumForc = {}\r\n                                        let countEst = 0\r\n                                        let countForc = 0\r\n                                        let col = []\r\n                                        let sumEstCells = []\r\n\r\n                                        let realOverallCount = 0\r\n                                        let realOverallSum = {}\r\n                                        let realOverallGraph = []\r\n                                        let realOverall = {}\r\n\r\n                                        for(let i = 0; i < estimated.length; i++){\r\n                                            weeks.push(estimated[i].week.toString())\r\n                                            est[estimated[i].week] = estimated[i].estimated\r\n                                            forc[estimated[i].week] = estimated[i].forecast\r\n                                            countEst += estimated[i].estimated\r\n                                            countForc += estimated[i].forecast\r\n                                            sumEst[estimated[i].week] = countEst\r\n                                            sumForc[estimated[i].week] = countForc\r\n\r\n                                            col.push({ data: estimated[i].week.toString(), type: \"numeric\"})\r\n                                        }\r\n                                        Object.keys(issued).map(async function(key, index) {\r\n                                            let countReal = 0\r\n                                            let sumReal = {}\r\n                                            let sumRealGraph = []\r\n                                            Object.keys(est).map(async function(w, index) {\r\n                                                if(issued[key][w]){\r\n                                                    countReal += issued[key][w]\r\n                                                    sumReal[w] = countReal\r\n                                                }else{\r\n                                                    sumReal[w] = countReal\r\n                                                }\r\n                                                if(realOverall[w]){\r\n                                                    realOverall[w] += issued[key][w]\r\n                                                }else{\r\n                                                    realOverall[w] = issued[key][w]\r\n                                                }\r\n                                                \r\n                                            })\r\n\r\n                                            let t_class = weight_table_class[matIDList.indexOf(parseInt(key))]\r\n                                            await tables.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"30px\", marginTop:\"20px\"}}><text className=\"materials__title\">{materialsList[matIDList.indexOf(parseInt(key))].toUpperCase()} Weight (kg)</text>\r\n                                                <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                data={[issued[key], sumReal]}\r\n                                                colHeaders={weeks}\r\n                                                rowHeaders={[\"Real\", \"Real progress\"]}\r\n                                                width=\"1750\"\r\n                                                height=\"95\"\r\n                                                settings={weightSettings} \r\n                                                manualColumnResize={true}\r\n                                                manualRowResize={true}\r\n                                                columns= {col}\r\n                                                filters={true}\r\n                                                readOnly= {true}\r\n                                                cell = {sumEstCells}\r\n                                                className={t_class}\r\n                                            /></div></div>)\r\n                                                \r\n                                            Object.keys(sumReal).map(function(key, index) {\r\n                                                sumRealGraph.push(sumReal[key])\r\n                                            });\r\n\r\n                                            let color_index = ((matIDList.indexOf(parseInt(key))) * 3)\r\n\r\n                                            graphData.push({\r\n                                                label: 'Real ' + materialsList[matIDList.indexOf(parseInt(key))],\r\n                                                fill: false,\r\n                                                lineTension: 0.2,\r\n                                                backgroundColor: colors[color_index + 1],\r\n                                                borderColor: colors[color_index + 1],\r\n                                                borderWidth: 1,\r\n                                                data: sumRealGraph\r\n                                            })\r\n\r\n                                            let realProgressWeight = realProgressWeightMatData\r\n                                            realProgressWeight[key] = sumReal\r\n                                            await setRealProgressWeightMatData(realProgressWeight)\r\n                                        })\r\n                                        \r\n                                        await setTables([])\r\n                                        await setTables(tables)\r\n                                      \r\n                                        let overallTable = []\r\n                                        let totalEstimated = 0\r\n\r\n                                        let estimatedOverall = {}\r\n                                        let esimatedOverallSum = {}\r\n                                        let estimatedOverallCount = 0\r\n                                        let estimatedOverallGraph = []\r\n\r\n                                        let forecastOverall = {}\r\n                                        let forecastOverallSum = {}\r\n                                        let forecastOverallCount = 0\r\n                                        let forecastOverallGraph = []\r\n\r\n                                        for(let i = 0; i < estimated.length; i++){\r\n                                            totalEstimated += estimated[i][\"estimated\"]\r\n                                        };\r\n                                        \r\n                                        Object.keys(est).map(function(key, index) {\r\n                                            if(estimatedOverall[key]){\r\n                                                estimatedOverall[key] += est[key]\r\n                                            }else{\r\n                                                estimatedOverall[key] = est[key]\r\n                                            }\r\n                                        });\r\n\r\n                                        Object.keys(forc).map(function(key, index) {\r\n                                            if(forecastOverall[key]){\r\n                                                forecastOverall[key] += forc[key]\r\n                                            }else{\r\n                                                forecastOverall[key] = forc[key]\r\n                                            }\r\n                                        });\r\n\r\n                                        await setEstimatedWeightData(estimatedOverall)\r\n                                        await setForecastWeightData(forecastOverall)\r\n\r\n                                        let labels = []\r\n                                        let overallCells = []\r\n                                        await Object.keys(estimatedOverall).map(function(key, index) {\r\n                                            if(realOverall[key]){\r\n                                                realOverallCount += realOverall[key]\r\n                                            }\r\n                                            realOverallSum[key] = realOverallCount\r\n                                            estimatedOverallCount += estimatedOverall[key]\r\n                                            esimatedOverallSum[key] = estimatedOverallCount\r\n                                            estimatedOverallGraph.push(estimatedOverallCount)\r\n                                            realOverallGraph.push(realOverallCount)\r\n\r\n                                            forecastOverallCount += forecastOverall[key]\r\n                                            forecastOverallSum[key] = forecastOverallCount\r\n                                            forecastOverallGraph.push(forecastOverallCount)\r\n\r\n                                            overallCells.push({row: 1, col: index, readOnly: true})\r\n                                            overallCells.push({row: 3, col: index, className: \"overallCell__estSum\", readOnly: true})\r\n                                            overallCells.push({row: 4, col: index, className: \"overallCell__realSum\", readOnly: true})\r\n\r\n\r\n                                            labels.push(\"w\" + key.toString() + \" / w\" + (parseInt(key) + weeksYDiff))\r\n                                        });\r\n\r\n                                        \r\n                                        graphData.push({\r\n                                            label: 'Estimated Overall',\r\n                                            fill: false,\r\n                                            lineTension: 0.2,\r\n                                            backgroundColor: 'rgb(147,112,219)',\r\n                                            borderColor: 'rgb(147,112,219)',\r\n                                            borderWidth: 1,\r\n                                            data: estimatedOverallGraph\r\n                                        })\r\n\r\n                                        graphData.push({\r\n                                            label: 'Forecast Overall',\r\n                                            fill: false,\r\n                                            lineTension: 0.2,\r\n                                            backgroundColor: 'rgb(60,179,113)',\r\n                                            borderColor: 'rgb(60,179,113)',\r\n                                            borderWidth: 1,\r\n                                            data: forecastOverallGraph\r\n                                        })\r\n\r\n                                        graphData.push({\r\n                                            label: 'Real Overall',\r\n                                            fill: false,\r\n                                            lineTension: 0.2,\r\n                                            backgroundColor: 'rgb(255,80,80)',\r\n                                            borderColor: 'rgb(255,80,80)',\r\n                                            borderWidth: 1,\r\n                                            data: realOverallGraph\r\n                                        })\r\n\r\n                                        await overallTable.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", borderTop:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"30px\", paddingTop:\"30px\", marginTop:\"20px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">OVERALL Weight (kg) <text style={{fontSize:\"17px\"}}></text></text><button className=\"save__button\" onClick={()=> submitWeight(estimatedOverall, forecastOverall)}><img src={SaveIcon} alt=\"save\" className=\"save__icon\"></img></button></div>\r\n                                        <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                data={[estimatedOverall, realOverall, forecastOverall, esimatedOverallSum, realOverallSum]}\r\n                                                colHeaders={weeks}\r\n                                                rowHeaders={[\"Estimated\", \"Real\", \"Forecast\", \"Estimated progress\", \"Real progress\"]}\r\n                                                width=\"1750\"\r\n                                                height=\"165\"\r\n                                                settings={weightSettings} \r\n                                                manualColumnResize={true}\r\n                                                manualRowResize={true}\r\n                                                columns= {col}\r\n                                                filters={true}\r\n                                                className='overallWeight-table'\r\n                                                cell={overallCells}\r\n                                                \r\n                                            /></div></div>)\r\n                                            \r\n                                        await setEstimatedWeightData(estimatedOverall)\r\n                                        await setRealWeightData(realOverall)\r\n                                        await setForecastWeightData(forecastOverall)\r\n                                        await setEstimatedProgressWeightData(esimatedOverallSum)\r\n                                        await setRealProgressWeightData(realOverallSum)\r\n                                        await setOverallTable()\r\n                                        await setOverallTable(overallTable)\r\n                                        await setLineChart(<Line\r\n                                            data={{\r\n                                                labels: labels,\r\n                                                datasets: graphData\r\n                                            }}\r\n                                            options={{\r\n                                                hover: {\r\n                                                    mode: 'new mode'\r\n                                                },\r\n                                                plugins: {\r\n                                                    title: {\r\n                                                        display: true,\r\n                                                        text: \"WEIGHT CURVES\",\r\n                                                        font: {size: \"22px\", family:\"Quicksand\"},\r\n                                                    \r\n                                                    },\r\n                                                    legend: {\r\n                                                        display: true,\r\n                                                        position: \"left\",\r\n                                                        labels: {\r\n                                                            filter: function (legendItem, chartData) {\r\n                                                                    chartData.datasets[legendItem.datasetIndex].hidden = true\r\n                                                                return true\r\n                                                            },\r\n                                                        },\r\n                                                    },\r\n                                                    \r\n                                                },\r\n                                                \r\n                                                \r\n                                            }}\r\n                                        />)\r\n\r\n                                    \r\n                                }\r\n                            })\r\n                    })  \r\n                }else if(tab === \"users\"){\r\n                    if(usersType === \"iso\"){\r\n                        await setUserEffTitle(<h4 style={{fontSize:\"22px\", fontWeight:\"bold\", color:\"gray\", marginTop:\"30px\", marginLeft:\"690px\"}}>USER ISOMETRICS EFFICIENCY</h4>)\r\n                        await setTabBtns(<div style={{width: \"90px\"}}>\r\n                        <button className=\"reporting__tab__button\" onClick={() => setTab(\"prod\")}>P</button>\r\n                        <button className=\"reporting__tab__button\" style={{marginTop:\"10px\"}} onClick={async() => await setTab(\"weight\")}>W</button>\r\n                        <button className=\"reporting__tab__button\" style={{marginTop:\"10px\", backgroundColor:\"#338DF1\"}}>U</button>\r\n                        <button className=\"reporting__tab__button\" style={{marginTop:\"10px\", backgroundColor:\"#338DF1\"}}>I</button>\r\n                        <button className=\"reporting__tab__button\" style={{marginTop:\"10px\"}} onClick={async() => await setUsersType(\"weight\")}>W</button>\r\n                        </div>)\r\n                    }else if(usersType === \"weight\"){\r\n                        await setUserEffTitle(<h4 style={{fontSize:\"22px\", fontWeight:\"bold\", color:\"gray\", marginTop:\"30px\", marginLeft:\"700px\"}}>USER WEIGHT EFFICIENCY</h4>)\r\n                        await setTabBtns(<div style={{width: \"90px\"}}>\r\n                        <button className=\"reporting__tab__button\" onClick={() => setTab(\"prod\")}>P</button>\r\n                        <button className=\"reporting__tab__button\" style={{marginTop:\"10px\"}} onClick={async() => await setTab(\"weight\")}>W</button>\r\n                        <button className=\"reporting__tab__button\" style={{marginTop:\"10px\", backgroundColor:\"#338DF1\"}}>U</button>\r\n                        <button className=\"reporting__tab__button\" style={{marginTop:\"10px\"}} onClick={async() => await setUsersType(\"iso\")}>I</button>\r\n                        <button className=\"reporting__tab__button\" style={{marginTop:\"10px\", backgroundColor:\"#338DF1\"}}>W</button>\r\n                        </div>)\r\n                    }\r\n                   \r\n\r\n                    await setTables([])\r\n                    await setLineChart(null)\r\n                    await setOverallTable([])\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getEstimatedForecastWeight\", options)\r\n                    .then(response => response.json())\r\n                    .then(async json => {\r\n                        const estimated = json.estimated\r\n                        const usersSettings = {\r\n                            licenseKey: 'non-commercial-and-evaluation',\r\n                            colWidths: 40,\r\n                            rowHeaderWidth: 190\r\n                            //... other options\r\n                        }\r\n                        let weeks = []\r\n                        let col = []\r\n                        if(estimated.length > 0){\r\n                            for(let i = 0; i < estimated.length; i++){\r\n                                weeks.push(estimated[i].week.toString())\r\n                                col.push({ data: estimated[i].week.toString(), type: \"numeric\"})\r\n                            }\r\n                            if(usersType === \"iso\"){\r\n                                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/trayCount\", options)\r\n                                .then(response => response.json())\r\n                                .then(async json => {\r\n                                    const trayCount = json.isoCount\r\n\r\n                                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getIsosByUserWeekDesign\", options)\r\n                                    .then(response => response.json())\r\n                                    .then(async json => {\r\n                                        const design_isos = json.design_isos\r\n                                        await setUsersData(design_isos)\r\n                                        console.log(design_isos)\r\n                                        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getIsosByUserWeek\", options)\r\n                                        .then(response => response.json())\r\n                                        .then(async json => {\r\n                                            const user_isos = json.user_isos\r\n                                            let design = []\r\n                                            let designLead = []\r\n                                            let stress = []\r\n                                            let stressLead = []\r\n                                            let supports = []\r\n                                            let supportsLead = []\r\n                                            let materials = []\r\n                                            let issuer = []\r\n\r\n                                            if(design_isos){\r\n                                                console.log(design_isos)\r\n                                                Object.keys(design_isos).map(async function(user, index) {\r\n                                                    await design.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                    <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                            data={[design_isos[user][\"assigned\"], design_isos[user][\"sent\"], design_isos[user][\"returned\"], design_isos[user][\"remaining\"]]}\r\n                                                            colHeaders={weeks}\r\n                                                            rowHeaders={[\"Assigned\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                            width=\"1750\"\r\n                                                            height=\"145\"\r\n                                                            settings={usersSettings} \r\n                                                            manualColumnResize={true}\r\n                                                            manualRowResize={true}\r\n                                                            columns= {col}\r\n                                                            filters={true}\r\n                                                            className='users-table'\r\n                                                            readOnly={true}\r\n                                                            \r\n                                                    /></div></div>)\r\n                                                });\r\n                                            }\r\n                                            if(user_isos[\"DesignLead\"]){\r\n                                                Object.keys(user_isos[\"DesignLead\"]).map(async function(user, index) {\r\n                                                    await designLead.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                    <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                            data={[user_isos[\"DesignLead\"][user][\"claimed\"], user_isos[\"DesignLead\"][user][\"sent\"], user_isos[\"DesignLead\"][user][\"returned\"], user_isos[\"DesignLead\"][user][\"remaining\"]]}\r\n                                                            colHeaders={weeks}\r\n                                                            rowHeaders={[\"Claimed\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                            width=\"1750\"\r\n                                                            height=\"145\"\r\n                                                            settings={usersSettings} \r\n                                                            manualColumnResize={true}\r\n                                                            manualRowResize={true}\r\n                                                            columns= {col}\r\n                                                            filters={true}\r\n                                                            className='users-table'\r\n                                                            readOnly={true}\r\n                                                            \r\n                                                    /></div></div>)\r\n                                                });\r\n                                            }\r\n                                            if(user_isos[\"Stress\"]){\r\n                                                Object.keys(user_isos[\"Stress\"]).map(async function(user, index) {\r\n                                                    await stress.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                    <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                            data={[user_isos[\"Stress\"][user][\"claimed\"], user_isos[\"Stress\"][user][\"sent\"], user_isos[\"Stress\"][user][\"returned\"], user_isos[\"Stress\"][user][\"remaining\"]]}\r\n                                                            colHeaders={weeks}\r\n                                                            rowHeaders={[\"Claimed\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                            width=\"1750\"\r\n                                                            height=\"145\"\r\n                                                            settings={usersSettings} \r\n                                                            manualColumnResize={true}\r\n                                                            manualRowResize={true}\r\n                                                            columns= {col}\r\n                                                            filters={true}\r\n                                                            className='users-table'\r\n                                                            readOnly={true}\r\n                                                            \r\n                                                    /></div></div>)\r\n                                                });\r\n                                            }\r\n                                            if(user_isos[\"StressLead\"]){\r\n                                                Object.keys(user_isos[\"StressLead\"]).map(async function(user, index) {\r\n                                                    await stressLead.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                    <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                            data={[user_isos[\"StressLead\"][user][\"claimed\"], user_isos[\"StressLead\"][user][\"sent\"], user_isos[\"StressLead\"][user][\"returned\"], user_isos[\"StressLead\"][user][\"remaining\"]]}\r\n                                                            colHeaders={weeks}\r\n                                                            rowHeaders={[\"Claimed\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                            width=\"1750\"\r\n                                                            height=\"145\"\r\n                                                            settings={usersSettings} \r\n                                                            manualColumnResize={true}\r\n                                                            manualRowResize={true}\r\n                                                            columns= {col}\r\n                                                            filters={true}\r\n                                                            className='users-table'\r\n                                                            readOnly={true}\r\n                                                            \r\n                                                    /></div></div>)\r\n                                                });\r\n                                            }\r\n                                            if(user_isos[\"Supports\"]){\r\n                                                Object.keys(user_isos[\"Supports\"]).map(async function(user, index) {\r\n                                                    await supports.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                    <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                            data={[user_isos[\"Supports\"][user][\"claimed\"], user_isos[\"Supports\"][user][\"sent\"], user_isos[\"Supports\"][user][\"returned\"], user_isos[\"Supports\"][user][\"remaining\"]]}\r\n                                                            colHeaders={weeks}\r\n                                                            rowHeaders={[\"Claimed\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                            width=\"1750\"\r\n                                                            height=\"145\"\r\n                                                            settings={usersSettings} \r\n                                                            manualColumnResize={true}\r\n                                                            manualRowResize={true}\r\n                                                            columns= {col}\r\n                                                            filters={true}\r\n                                                            className='users-table'\r\n                                                            readOnly={true}\r\n                                                            \r\n                                                    /></div></div>)\r\n                                                });\r\n                                            }\r\n                                            if(user_isos[\"SupportsLead\"]){\r\n                                                Object.keys(user_isos[\"SupportsLead\"]).map(async function(user, index) {\r\n                                                    await supportsLead.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                    <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                            data={[user_isos[\"SupportsLead\"][user][\"claimed\"], user_isos[\"SupportsLead\"][user][\"sent\"], user_isos[\"SupportsLead\"][user][\"returned\"], user_isos[\"SupportsLead\"][user][\"remaining\"]]}\r\n                                                            colHeaders={weeks}\r\n                                                            rowHeaders={[\"Claimed\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                            width=\"1750\"\r\n                                                            height=\"145\"\r\n                                                            settings={usersSettings} \r\n                                                            manualColumnResize={true}\r\n                                                            manualRowResize={true}\r\n                                                            columns= {col}\r\n                                                            filters={true}\r\n                                                            className='users-table'\r\n                                                            readOnly={true}\r\n                                                            \r\n                                                    /></div></div>)\r\n                                                });\r\n                                            }\r\n                                            if(user_isos[\"Materials\"]){\r\n                                                Object.keys(user_isos[\"Materials\"]).map(async function(user, index) {\r\n                                                    await materials.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                    <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                            data={[user_isos[\"Materials\"][user][\"claimed\"], user_isos[\"Materials\"][user][\"sent\"], user_isos[\"Materials\"][user][\"returned\"], user_isos[\"Materials\"][user][\"remaining\"]]}\r\n                                                            colHeaders={weeks}\r\n                                                            rowHeaders={[\"Claimed\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                            width=\"1750\"\r\n                                                            height=\"145\"\r\n                                                            settings={usersSettings} \r\n                                                            manualColumnResize={true}\r\n                                                            manualRowResize={true}\r\n                                                            columns= {col}\r\n                                                            filters={true}\r\n                                                            className='users-table'\r\n                                                            readOnly={true}\r\n                                                            \r\n                                                    /></div></div>)\r\n                                                });\r\n                                            }\r\n                                            if(user_isos[\"Issuer\"]){\r\n                                                Object.keys(user_isos[\"Issuer\"]).map(async function(user, index) {\r\n                                                    await issuer.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                    <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                            data={[user_isos[\"Issuer\"][user][\"claimed\"], user_isos[\"Issuer\"][user][\"sent\"], user_isos[\"Issuer\"][user][\"returned\"], user_isos[\"Issuer\"][user][\"remaining\"]]}\r\n                                                            colHeaders={weeks}\r\n                                                            rowHeaders={[\"Claimed\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                            width=\"1750\"\r\n                                                            height=\"145\"\r\n                                                            settings={usersSettings} \r\n                                                            manualColumnResize={true}\r\n                                                            manualRowResize={true}\r\n                                                            columns= {col}\r\n                                                            filters={true}\r\n                                                            className='users-table'\r\n                                                            readOnly={true}\r\n                                                            \r\n                                                    /></div></div>)\r\n                                                });\r\n                                            }\r\n\r\n                                            await setTables(<div><ProductionUserTabs>\r\n                                                    <div label=\"Design\">\r\n                                                        <div className=\"user__productivity__tables__container\">\r\n                                                            <text className=\"isoCount__text\">Unclaimed isos: {trayCount[0].Design}</text>\r\n                                                            {design}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div label=\"DesignLead\">\r\n                                                        <div className=\"user__productivity__tables__container\">\r\n                                                            <text className=\"isoCount__text\">Unclaimed isos: {trayCount[0].DesignLead}</text>\r\n                                                            {designLead}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div label=\"Stress\">\r\n                                                        <div className=\"user__productivity__tables__container\">\r\n                                                            <text className=\"isoCount__text\">Unclaimed isos: {trayCount[0].Stress}</text>\r\n                                                            {stress}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div label=\"StressLead\">\r\n                                                        <div className=\"user__productivity__tables__container\">\r\n                                                            <text className=\"isoCount__text\">Unclaimed isos: {trayCount[0].StressLead}</text>\r\n                                                            {stressLead}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div label=\"Supports\">\r\n                                                        <div className=\"user__productivity__tables__container\">\r\n                                                         <text className=\"isoCount__text\">Unclaimed isos: {trayCount[0].Supports}</text>\r\n                                                            {supports}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div label=\"SupportsLead\">\r\n                                                        <div className=\"user__productivity__tables__container\">\r\n                                                            <text className=\"isoCount__text\">Unclaimed isos: {trayCount[0].SupportsLead}</text>\r\n                                                            {supportsLead}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div label=\"Materials\">\r\n                                                        <div className=\"user__productivity__tables__container\">\r\n                                                            <text className=\"isoCount__text\">Unclaimed isos: {trayCount[0].Materials}</text>\r\n                                                            {materials}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div label=\"Issuer\">\r\n                                                        <div className=\"user__productivity__tables__container\">\r\n                                                            <text className=\"isoCount__text\">Unclaimed isos: {trayCount[0].Issuer}</text>\r\n                                                            {issuer}\r\n                                                        </div>\r\n                                                    </div>\r\n                                            </ProductionUserTabs></div>)\r\n                                            \r\n                                        })\r\n                                    })\r\n                                })\r\n                                \r\n                            }else if(usersType === \"weight\"){\r\n                                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getWeightByUserWeekDesign\", options)\r\n                                .then(response => response.json())\r\n                                .then(async json => {\r\n                                    const design_isos = json.design_isos\r\n                                    console.log(design_isos)\r\n                                    let design = []\r\n                                    let designLead = []\r\n                                    let stress = []\r\n                                    let stressLead = []\r\n                                    let supports = []\r\n                                    let supportsLead = []\r\n                                    let materials = []\r\n                                    let issuer = []\r\n                                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getWeightByUserWeek\", options)\r\n                                    .then(response => response.json())\r\n                                    .then(async json => {\r\n                                        let user_isos = json.user_isos\r\n                                        if(design_isos){\r\n                                            Object.keys(design_isos).map(async function(user, index) {\r\n\r\n                                                await design.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                        data={[design_isos[user][\"assigned\"], design_isos[user][\"sent\"], design_isos[user][\"returned\"], design_isos[user][\"remaining\"]]}\r\n                                                        colHeaders={weeks}\r\n                                                        rowHeaders={[\"Assigned\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                        width=\"1750\"\r\n                                                        height=\"145\"\r\n                                                        settings={usersSettings} \r\n                                                        manualColumnResize={true}\r\n                                                        manualRowResize={true}\r\n                                                        columns= {col}\r\n                                                        filters={true}\r\n                                                        className='users-table'\r\n                                                        readOnly={true}\r\n                                                        \r\n                                                /></div></div>)\r\n                                            });\r\n                                        }\r\n                                        if(user_isos[\"DesignLead\"]){\r\n                                            Object.keys(user_isos[\"DesignLead\"]).map(async function(user, index) {\r\n                                                await designLead.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                        data={[user_isos[\"DesignLead\"][user][\"claimed\"], user_isos[\"DesignLead\"][user][\"sent\"], user_isos[\"DesignLead\"][user][\"returned\"], user_isos[\"DesignLead\"][user][\"remaining\"]]}\r\n                                                        colHeaders={weeks}\r\n                                                        rowHeaders={[\"Claimed\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                        width=\"1750\"\r\n                                                        height=\"145\"\r\n                                                        settings={usersSettings} \r\n                                                        manualColumnResize={true}\r\n                                                        manualRowResize={true}\r\n                                                        columns= {col}\r\n                                                        filters={true}\r\n                                                        className='users-table'\r\n                                                        readOnly={true}\r\n                                                        \r\n                                                /></div></div>)\r\n                                            });\r\n                                        }\r\n                                        if(user_isos[\"Stress\"]){\r\n                                            Object.keys(user_isos[\"Stress\"]).map(async function(user, index) {\r\n                                                await stress.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                        data={[user_isos[\"Stress\"][user][\"claimed\"], user_isos[\"Stress\"][user][\"sent\"], user_isos[\"Stress\"][user][\"returned\"], user_isos[\"Stress\"][user][\"remaining\"]]}\r\n                                                        colHeaders={weeks}\r\n                                                        rowHeaders={[\"Claimed\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                        width=\"1750\"\r\n                                                        height=\"145\"\r\n                                                        settings={usersSettings} \r\n                                                        manualColumnResize={true}\r\n                                                        manualRowResize={true}\r\n                                                        columns= {col}\r\n                                                        filters={true}\r\n                                                        className='users-table'\r\n                                                        readOnly={true}\r\n                                                        \r\n                                                /></div></div>)\r\n                                            });\r\n                                        }\r\n                                        if(user_isos[\"StressLead\"]){\r\n                                            Object.keys(user_isos[\"StressLead\"]).map(async function(user, index) {\r\n                                                await stressLead.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                        data={[user_isos[\"StressLead\"][user][\"claimed\"], user_isos[\"StressLead\"][user][\"sent\"], user_isos[\"StressLead\"][user][\"returned\"], user_isos[\"StressLead\"][user][\"remaining\"]]}\r\n                                                        colHeaders={weeks}\r\n                                                        rowHeaders={[\"Claimed\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                        width=\"1750\"\r\n                                                        height=\"145\"\r\n                                                        settings={usersSettings} \r\n                                                        manualColumnResize={true}\r\n                                                        manualRowResize={true}\r\n                                                        columns= {col}\r\n                                                        filters={true}\r\n                                                        className='users-table'\r\n                                                        readOnly={true}\r\n                                                        \r\n                                                /></div></div>)\r\n                                            });\r\n                                        }\r\n                                        if(user_isos[\"Supports\"]){\r\n                                            Object.keys(user_isos[\"Supports\"]).map(async function(user, index) {\r\n                                                await supports.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                        data={[user_isos[\"Supports\"][user][\"claimed\"], user_isos[\"Supports\"][user][\"sent\"], user_isos[\"Supports\"][user][\"returned\"], user_isos[\"Supports\"][user][\"remaining\"]]}\r\n                                                        colHeaders={weeks}\r\n                                                        rowHeaders={[\"Claimed\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                        width=\"1750\"\r\n                                                        height=\"145\"\r\n                                                        settings={usersSettings} \r\n                                                        manualColumnResize={true}\r\n                                                        manualRowResize={true}\r\n                                                        columns= {col}\r\n                                                        filters={true}\r\n                                                        className='users-table'\r\n                                                        readOnly={true}\r\n                                                        \r\n                                                /></div></div>)\r\n                                            });\r\n                                        }\r\n                                        if(user_isos[\"SupportsLead\"]){\r\n                                            Object.keys(user_isos[\"SupportsLead\"]).map(async function(user, index) {\r\n                                                await supportsLead.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                        data={[user_isos[\"SupportsLead\"][user][\"claimed\"], user_isos[\"SupportsLead\"][user][\"sent\"], user_isos[\"SupportsLead\"][user][\"returned\"], user_isos[\"SupportsLead\"][user][\"remaining\"]]}\r\n                                                        colHeaders={weeks}\r\n                                                        rowHeaders={[\"Claimed\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                        width=\"1750\"\r\n                                                        height=\"145\"\r\n                                                        settings={usersSettings} \r\n                                                        manualColumnResize={true}\r\n                                                        manualRowResize={true}\r\n                                                        columns= {col}\r\n                                                        filters={true}\r\n                                                        className='users-table'\r\n                                                        readOnly={true}\r\n                                                        \r\n                                                /></div></div>)\r\n                                            });\r\n                                        }\r\n                                        if(user_isos[\"Materials\"]){\r\n                                            Object.keys(user_isos[\"Materials\"]).map(async function(user, index) {\r\n                                                await materials.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                        data={[user_isos[\"Materials\"][user][\"claimed\"], user_isos[\"Materials\"][user][\"sent\"], user_isos[\"Materials\"][user][\"returned\"], user_isos[\"Materials\"][user][\"remaining\"]]}\r\n                                                        colHeaders={weeks}\r\n                                                        rowHeaders={[\"Claimed\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                        width=\"1750\"\r\n                                                        height=\"145\"\r\n                                                        settings={usersSettings} \r\n                                                        manualColumnResize={true}\r\n                                                        manualRowResize={true}\r\n                                                        columns= {col}\r\n                                                        filters={true}\r\n                                                        className='users-table'\r\n                                                        readOnly={true}\r\n                                                        \r\n                                                /></div></div>)\r\n                                            });\r\n                                        }\r\n                                        if(user_isos[\"Issuer\"]){\r\n                                            Object.keys(user_isos[\"Issuer\"]).map(async function(user, index) {\r\n                                                await issuer.push(<div id=\"hot-app\" style={{borderBottom:\"1px solid lightgray\", width:\"1750px\", paddingBottom:\"10px\", marginTop:\"10px\"}}><div style={{display:\"flex\"}}><text className=\"materials__title\">{user.toUpperCase()}<text style={{fontSize:\"17px\"}}></text></text></div>\r\n                                                <div style={{marginTop:\"10px\"}}><HotTable\r\n                                                        data={[user_isos[\"Issuer\"][user][\"claimed\"], user_isos[\"Issuer\"][user][\"sent\"], user_isos[\"Issuer\"][user][\"returned\"], user_isos[\"Issuer\"][user][\"remaining\"]]}\r\n                                                        colHeaders={weeks}\r\n                                                        rowHeaders={[\"Claimed\", \"Sent\", \"Returned\", \"Remaining\"]}\r\n                                                        width=\"1750\"\r\n                                                        height=\"145\"\r\n                                                        settings={usersSettings} \r\n                                                        manualColumnResize={true}\r\n                                                        manualRowResize={true}\r\n                                                        columns= {col}\r\n                                                        filters={true}\r\n                                                        className='users-table'\r\n                                                        readOnly={true}\r\n                                                        \r\n                                                /></div></div>)\r\n                                            });\r\n                                        }\r\n\r\n                                        await setTables(<div><ProductionUserTabs>\r\n                                            <div label=\"Design\">\r\n                                                <div className=\"user__productivity__tables__container\">\r\n                                                    {design}\r\n                                                </div>\r\n                                            </div>\r\n                                            <div label=\"DesignLead\">\r\n                                                <div className=\"user__productivity__tables__container\">\r\n                                                    {designLead}\r\n                                                </div>\r\n                                            </div>\r\n                                            <div label=\"Stress\">\r\n                                                <div className=\"user__productivity__tables__container\">\r\n                                                    {stress}\r\n                                                </div>\r\n                                            </div>\r\n                                            <div label=\"StressLead\">\r\n                                                <div className=\"user__productivity__tables__container\">\r\n                                                    {stressLead}\r\n                                                </div>\r\n                                            </div>\r\n                                            <div label=\"Supports\">\r\n                                                <div className=\"user__productivity__tables__container\">\r\n                                                    {supports}\r\n                                                </div>\r\n                                            </div>\r\n                                            <div label=\"SupportsLead\">\r\n                                                <div className=\"user__productivity__tables__container\">\r\n                                                    {supportsLead}\r\n                                                </div>\r\n                                            </div>\r\n                                            <div label=\"Materials\">\r\n                                                <div className=\"user__productivity__tables__container\">\r\n                                                    {materials}\r\n                                                </div>\r\n                                            </div>\r\n                                            <div label=\"Issuer\">\r\n                                                <div className=\"user__productivity__tables__container\">\r\n                                                    {issuer}\r\n                                                </div>\r\n                                            </div>\r\n                                    </ProductionUserTabs></div>)\r\n                                        \r\n                                    })\r\n                                })\r\n                            }\r\n                            \r\n                        }\r\n                        \r\n                    })\r\n                    \r\n                }\r\n\r\n            })\r\n            await setLoading(false)\r\n    }, [updateData, tab, usersType])\r\n\r\n    async function printDocument() {\r\n        const input = document.getElementById('graph');\r\n        if(tab === \"prod\"){\r\n            html2canvas(input, {scrollY: -window.scrollY})\r\n            .then((canvas) => {\r\n              const imgData = canvas.toDataURL('image/png');\r\n              const pdf = new jsPDF('l', 'mm', [340, 177]);\r\n              pdf.addImage(imgData, 'JPEG', 5, 5);\r\n              // pdf.output('dataurlnewwindow');\r\n              pdf.save(\"Production.pdf\");\r\n            })\r\n          ;\r\n        }else if(tab === \"weight\"){\r\n            html2canvas(input, {scrollY: -window.scrollY})\r\n            .then((canvas) => {\r\n              const imgData = canvas.toDataURL('image/png');\r\n              const pdf = new jsPDF('l', 'mm', [340, 177]);\r\n              pdf.addImage(imgData, 'JPEG', 5, 5);\r\n              // pdf.output('dataurlnewwindow');\r\n              pdf.save(\"Weight.pdf\");\r\n            })\r\n          ;\r\n        }\r\n        \r\n      }\r\n\r\n    async function addRowMaterials(){\r\n        let m = materials\r\n        m.push({\"id\": \"\", \"Material\": \"\"})\r\n        await setMaterials(m)\r\n        await setUpdateRows(!updateRows)\r\n    }\r\n\r\n    async function addRowPiping(){\r\n        let p = piping\r\n        p.push({\"id\": \"\", \"Material\": \"\"})\r\n        await setPiping(p)\r\n        await setUpdateRows(!updateRows)\r\n    }\r\n\r\n    async function submitChangesMaterials(){\r\n        const body ={\r\n            materials : materials\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submitMaterials\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            if(json.success){\r\n                await setMaterialsAlert(true)\r\n                await setUpdateData(!updateData)\r\n            }\r\n        })\r\n    }\r\n\r\n    async function submitChangesPiping(){\r\n        const body ={\r\n            piping : piping\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submitPipingClass\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            if(json.success){\r\n                await setPipingAlert(true)\r\n                await setUpdateData(!updateData)\r\n            }\r\n        })\r\n    }\r\n\r\n    async function submitManagement(){\r\n        const body ={\r\n            span : management\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submitProjectSpan\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            if(json.success){\r\n                await setSpanAlert(true)\r\n                await setUpdateData(!updateData)\r\n            }\r\n        })\r\n    }\r\n\r\n    async function submitEstimatedForecast(material_id){\r\n        const body ={\r\n            material_id : material_id,\r\n            estimated: estimatedData[material_id],\r\n            forecast: forecastData[material_id]\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submitEstimatedForecast\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            if(json.success){\r\n                await setSuccess(true)\r\n                await setUpdateData(!updateData)\r\n            }\r\n        })        \r\n    }\r\n\r\n    async function submitWeight(estimatedOverall, forecastOverall){\r\n        const body ={\r\n            estimated: estimatedOverall,\r\n            forecast: forecastOverall\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submitEstimatedForecastWeight\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            if(json.success){\r\n                await setSuccess(true)\r\n                await setUpdateData(!updateData)\r\n            }\r\n        })        \r\n    }\r\n\r\n    async function exportPiping(){\r\n\r\n        if(tab === \"prod\"){\r\n            let weeks = {0: \"WEEK\"}\r\n            let estAll = estimatedOverall\r\n            let realAll = realOverall\r\n            let estProgressAll = estimatedProgressOverall\r\n            let realProgressAll = realProgressOverall\r\n    \r\n            Object.keys(estAll).map(function(key, index) {\r\n                weeks[key] = \"W\" + key\r\n                if(!estAll[key]){\r\n                    estAll[key] = \" \"\r\n                }\r\n                if(!realAll[key]){\r\n                    realAll[key] = \" \"\r\n                }\r\n            });\r\n    \r\n            estAll[0] = \"Estimated\"\r\n            realAll[0] = \"Real\"\r\n            estProgressAll[0] = \"Estimated Progress\"\r\n            realProgressAll[0] = \"Real Progress\"\r\n            weeks[0] = \"Week\"\r\n    \r\n            let apiData = [{},{0:\"Piping production curves\"}, {}, {}, {0: \"OVERALL Isometrics\"}, weeks, estAll, realAll, estProgressAll, realProgressAll]\r\n    \r\n            for(let i = 0; i < materials.length; i++){\r\n                apiData.push({})\r\n                apiData.push({})\r\n                apiData.push({0:materials[i].Material}) \r\n    \r\n                let est = estimatedData[materialsIDList[i]]\r\n                let real = realData[materialsIDList[i]]\r\n                let forecast = forecastData[materialsIDList[i]]\r\n                let sumEst = estimatedProgressData[materialsIDList[i]]\r\n                let sumReal = realProgressData[materialsIDList[i]]\r\n                if(!est){\r\n                    est = {}\r\n                }if(!real){\r\n                    real = {}\r\n                }if(!forecast){\r\n                    forecast = {}\r\n                }\r\n    \r\n                Object.keys(est).map(function(key, index) {\r\n                    if(!est[key]){\r\n                        est[key] = \" \"\r\n                    }\r\n                    if(!real[key]){\r\n                        real[key] = \" \"\r\n                    }\r\n                    if(!forecast[key]){\r\n                        forecast[key] = \" \"\r\n                    }\r\n                });\r\n                \r\n                est[0] = \"Estimated\"\r\n                real[0] = \"Real\"\r\n                forecast[0] = \"Forecast\"\r\n                sumEst[0] = \"Estimated progress\"\r\n                sumReal[0] = \"Real progress\"\r\n    \r\n                apiData.push(weeks)\r\n                apiData.push(est)\r\n                apiData.push(real)\r\n                apiData.push(forecast)\r\n                apiData.push(sumEst)\r\n                apiData.push(sumReal)\r\n            }\r\n    \r\n            const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n            let ws = XLSX.utils.json_to_sheet(apiData, {skipHeader: 1}); \r\n           \r\n            Object.keys(ws).map(function(i, index) {\r\n               \r\n                if (typeof(ws[i]) != \"string\"){\r\n                    if(index === 0){\r\n                        ws[i].s = { \r\n                            font: {\r\n                                name: \"arial\",\r\n                                weight: \"bold\",\r\n                                sz: 15,\r\n                                color: {rgb: \"4169E1\"}\r\n                            },\r\n                            alignment: {\r\n                                vertical: \"center\",\r\n                                horizontal: \"center\",\r\n                                wrapText: '3',\r\n                            },\r\n                        }  ;\r\n                    }else if(colors[materialsList.indexOf(ws[i].v) * 3]){\r\n                        let fill = colors[materialsList.indexOf(ws[i].v) * 3].replace('#','')\r\n                        ws[i].s = { \r\n                            font: {\r\n                                name: \"arial\",\r\n                            },\r\n                            alignment: {\r\n                                vertical: \"center\",\r\n                                horizontal: \"center\",\r\n                            },\r\n                            border: {\r\n                                right: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                left: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                bottom: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                top: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                            },\r\n                            fill: { fgColor: { rgb: fill} }  \r\n                        }  ;\r\n                    }else if(ws[i].v === \"OVERALL Isometrics\"){\r\n                        ws[i].s = { \r\n                            font: {\r\n                                name: \"arial\",\r\n                            },\r\n                            alignment: {\r\n                                vertical: \"center\",\r\n                                horizontal: \"center\",\r\n                            },\r\n                            border: {\r\n                                right: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                left: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                bottom: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                top: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                            },\r\n                            fill: { fgColor: { rgb: \"9370DB\"} }  \r\n                        }  ;\r\n                    }else if(ws[i].v.toString().includes(\"W\")){\r\n                        ws[i].s = { \r\n                            font: {\r\n                                name: \"arial\",\r\n                            },\r\n                            alignment: {\r\n                                vertical: \"center\",\r\n                                horizontal: \"center\",\r\n                            },\r\n                            border: {\r\n                                right: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                left: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                bottom: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                top: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                            },\r\n                            fill: { fgColor: { rgb: \"C0C0C0\"} }  \r\n                        }  ;\r\n                    }else{\r\n                        ws[i].s = { \r\n                            font: {\r\n                                name: \"arial\",\r\n                                \r\n                            },\r\n                            alignment: {\r\n                                vertical: \"center\",\r\n                            },\r\n                            border: {\r\n                                right: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                left: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                bottom: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                top: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                            },\r\n                            fill: { fgColor: { rgb: \"DCDCDC\"} }  \r\n                        }  ;\r\n                    }\r\n    \r\n                }\r\n            })\r\n            \r\n            var wscols = [\r\n                {wch: 30}, // \"characters\"\r\n            ];\r\n    \r\n            ws['!cols'] = wscols\r\n    \r\n            const wb = { Sheets: { Production: ws }, SheetNames: [\"Production\"] };\r\n            const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n            const data = new Blob([excelBuffer], { type: fileType });\r\n            FileSaver.saveAs(data, \"Production.xlsx\");\r\n        }else if(tab === \"weight\"){\r\n            let weeks = {0: \"WEEK\"}\r\n            let estAll = estimatedWeightData\r\n            let forcAll = forecastWeightData\r\n            let realAll = realWeightData\r\n            let estProgressAll = estimatedProgressWeightData\r\n            let realProgressAll = realProgressWeightData\r\n    \r\n            Object.keys(estAll).map(function(key, index) {\r\n                weeks[key] = \"W\" + key\r\n                if(!estAll[key]){\r\n                    estAll[key] = \" \"\r\n                }\r\n                if(!realAll[key]){\r\n                    realAll[key] = \" \"\r\n                }\r\n                if(!forcAll[key]){\r\n                    forcAll[key] = \" \"\r\n                }\r\n            });\r\n    \r\n            estAll[0] = \"Estimated\"\r\n            forcAll[0] = \"Forecast\"\r\n            realAll[0] = \"Real\"\r\n            estProgressAll[0] = \"Estimated Progress\"\r\n            realProgressAll[0] = \"Real Progress\"\r\n            weeks[0] = \"Week\"\r\n\r\n            let apiData = [{},{0:\"Piping weight curves\"}, {}, {}, {0: \"OVERALL Weight\"}, weeks, estAll, realAll, forcAll, estProgressAll, realProgressAll]\r\n\r\n            for(let i = 0; i < materials.length; i++){\r\n                \r\n                if(realProgressWeightMatData[materialsIDList[i]]){\r\n\r\n                    apiData.push({})\r\n                    apiData.push({})\r\n                    apiData.push({0:materials[i].Material}) \r\n                    let real = realWeightMatData[materialsIDList[i]]\r\n                    let sumReal = realProgressWeightMatData[materialsIDList[i]]\r\n                    if(!real){\r\n                        real = {}\r\n                    }\r\n        \r\n                    Object.keys(estAll).map(function(key, index) {\r\n                        if(!real[key]){\r\n                            real[key] = \" \"\r\n                        }\r\n                    });\r\n                    \r\n                    real[0] = \"Real\"\r\n                    sumReal[0] = \"Real progress\"\r\n        \r\n                    apiData.push(weeks)\r\n                    apiData.push(real)\r\n                    apiData.push(sumReal)\r\n                }\r\n                \r\n            }\r\n\r\n            const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n            let ws = XLSX.utils.json_to_sheet(apiData, {skipHeader: 1}); \r\n           \r\n            Object.keys(ws).map(function(i, index) {\r\n               \r\n                if (typeof(ws[i]) != \"string\"){\r\n                    if(index === 0){\r\n                        ws[i].s = { \r\n                            font: {\r\n                                name: \"arial\",\r\n                                weight: \"bold\",\r\n                                sz: 15,\r\n                                color: {rgb: \"4169E1\"}\r\n                            },\r\n                            alignment: {\r\n                                vertical: \"center\",\r\n                                horizontal: \"center\",\r\n                                wrapText: '3',\r\n                            },\r\n                        }  ;\r\n                    }else if(colors[materialsList.indexOf(ws[i].v) * 3]){\r\n                        let fill = colors[materialsList.indexOf(ws[i].v) * 3].replace('#','')\r\n                        ws[i].s = { \r\n                            font: {\r\n                                name: \"arial\",\r\n                            },\r\n                            alignment: {\r\n                                vertical: \"center\",\r\n                                horizontal: \"center\",\r\n                            },\r\n                            border: {\r\n                                right: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                left: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                bottom: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                top: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                            },\r\n                            fill: { fgColor: { rgb: fill} }  \r\n                        }  ;\r\n                    }else if(ws[i].v === \"OVERALL Weight\"){\r\n                        ws[i].s = { \r\n                            font: {\r\n                                name: \"arial\",\r\n                            },\r\n                            alignment: {\r\n                                vertical: \"center\",\r\n                                horizontal: \"center\",\r\n                            },\r\n                            border: {\r\n                                right: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                left: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                bottom: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                top: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                            },\r\n                            fill: { fgColor: { rgb: \"9370DB\"} }  \r\n                        }  ;\r\n                    }else if(ws[i].v.toString().includes(\"W\")){\r\n                        ws[i].s = { \r\n                            font: {\r\n                                name: \"arial\",\r\n                            },\r\n                            alignment: {\r\n                                vertical: \"center\",\r\n                                horizontal: \"center\",\r\n                            },\r\n                            border: {\r\n                                right: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                left: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                bottom: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                top: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                            },\r\n                            fill: { fgColor: { rgb: \"C0C0C0\"} }  \r\n                        }  ;\r\n                    }else{\r\n                        ws[i].s = { \r\n                            font: {\r\n                                name: \"arial\",\r\n                                \r\n                            },\r\n                            alignment: {\r\n                                vertical: \"center\",\r\n                            },\r\n                            border: {\r\n                                right: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                left: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                bottom: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                top: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                            },\r\n                            fill: { fgColor: { rgb: \"DCDCDC\"} }  \r\n                        }  ;\r\n                    }\r\n    \r\n                }\r\n            })\r\n            \r\n            var wscols = [\r\n                {wch: 30}, // \"characters\"\r\n            ];\r\n    \r\n            ws['!cols'] = wscols\r\n    \r\n            const wb = { Sheets: { Production: ws }, SheetNames: [\"Production\"] };\r\n            const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n            const data = new Blob([excelBuffer], { type: fileType });\r\n            FileSaver.saveAs(data, \"Weights.xlsx\");\r\n        }else if(tab === \"users\"){\r\n            let apiData = []\r\n            let type = \"\"\r\n            if(usersType === \"iso\"){\r\n                apiData = [{},{0:\"User efficiency\"}]\r\n                type = \"User efficiency\"\r\n            }else if(usersType === \"weight\"){\r\n                apiData = [{},{0:\"User efficiency\"}]\r\n                type = \"User efficiency\"\r\n\r\n            }\r\n\r\n            Object.keys(usersData).map(function(user, index) {\r\n                apiData.push({})\r\n                apiData.push({})\r\n                apiData.push({0:user})\r\n\r\n                let assigned = {}, sent = {}, returned = {}, remaining = {}, weeks = {0: \"WEEK\"}\r\n                \r\n                assigned[0] = \"Assigned\"\r\n                sent[0] = \"Sent\"\r\n                returned[0] = \"Returned\"\r\n                remaining[0] = \"Remaining\"\r\n                Object.keys(usersData[user][\"remaining\"]).map(function(key, index) {\r\n                    weeks[key] = \"W\" + key\r\n                    if(usersData[user][\"assigned\"]){\r\n                        if(usersData[user][\"assigned\"][key]){\r\n                            assigned[key] = usersData[user][\"assigned\"][key]\r\n                        }else{\r\n                            assigned[key] = \"\"\r\n                        }\r\n                    }else{\r\n                        assigned[key] = \"\"\r\n                    }\r\n\r\n                    if(usersData[user][\"sent\"]){\r\n                        if(usersData[user][\"sent\"][key]){\r\n                            sent[key] = usersData[user][\"sent\"][key]\r\n                        }else{\r\n                            sent[key] = \"\"\r\n                        }\r\n                    }else{\r\n                        sent[key] = \"\"\r\n                    }\r\n\r\n                    if(usersData[user][\"returned\"]){\r\n                        if(usersData[user][\"returned\"][key]){\r\n                            returned[key] = usersData[user][\"returned\"][key]\r\n                        }else{\r\n                            returned[key] = \"\"\r\n                        }\r\n                    }else{\r\n                        returned[key] = \"\"\r\n                    }\r\n\r\n                    if(usersData[user][\"remaining\"]){\r\n                        if(usersData[user][\"remaining\"][key]){\r\n                            remaining[key] = usersData[user][\"remaining\"][key]\r\n                        }else{\r\n                            remaining[key] = 0\r\n                        }\r\n                    }else{\r\n                        remaining[key] = \"\"\r\n                    }\r\n\r\n                });\r\n                apiData.push(weeks)\r\n                apiData.push(assigned)\r\n                apiData.push(sent)\r\n                apiData.push(returned)\r\n                apiData.push(remaining)\r\n                \r\n            });\r\n            const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n            let ws = XLSX.utils.json_to_sheet(apiData, {skipHeader: 1}); \r\n\r\n            Object.keys(ws).map(function(i, index) {\r\n               \r\n                if (typeof(ws[i]) != \"string\"){\r\n                    if(index === 0){\r\n                        ws[i].s = { \r\n                            font: {\r\n                                name: \"arial\",\r\n                                weight: \"bold\",\r\n                                sz: 12,\r\n                                color: {rgb: \"4169E1\"}\r\n                            },\r\n                            alignment: {\r\n                                vertical: \"center\",\r\n                                horizontal: \"center\",\r\n                                wrapText: '3',\r\n                            },\r\n                        }  ;\r\n                    }else if(ws[i].v === type){\r\n                        ws[i].s = { \r\n                            font: {\r\n                                name: \"arial\",\r\n                            },\r\n                            alignment: {\r\n                                vertical: \"center\",\r\n                                horizontal: \"center\",\r\n                            },\r\n                            border: {\r\n                                right: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                left: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                bottom: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                top: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                            },\r\n                            fill: { fgColor: { rgb: \"9370DB\"} }  \r\n                        }  ;\r\n                    }else if(ws[i].v.toString().includes(\"W\")){\r\n                        ws[i].s = { \r\n                            font: {\r\n                                name: \"arial\",\r\n                            },\r\n                            alignment: {\r\n                                vertical: \"center\",\r\n                                horizontal: \"center\",\r\n                            },\r\n                            border: {\r\n                                right: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                left: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                bottom: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                top: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                            },\r\n                            fill: { fgColor: { rgb: \"C0C0C0\"} }  \r\n                        }  ;\r\n                    }else{\r\n                        ws[i].s = { \r\n                            font: {\r\n                                name: \"arial\",\r\n                                \r\n                            },\r\n                            alignment: {\r\n                                vertical: \"center\",\r\n                            },\r\n                            border: {\r\n                                right: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                left: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                bottom: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                                top: {\r\n                                    style: \"thin\",\r\n                                    color: \"000000\"\r\n                                },\r\n                            },\r\n                            fill: { fgColor: { rgb: \"DCDCDC\"} }  \r\n                        }  ;\r\n                    }\r\n    \r\n                }\r\n            })\r\n\r\n\r\n            var wscols = [\r\n                {wch: 30}, // \"characters\"\r\n            ];\r\n    \r\n            ws['!cols'] = wscols\r\n    \r\n            const wb = { Sheets: { Production: ws }, SheetNames: [\"Production\"] };\r\n            const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n            const data = new Blob([excelBuffer], { type: fileType });\r\n            let name = \"\"\r\n            if(usersType === \"iso\"){\r\n                name = \"Users efficiency.xlsx\"\r\n            }else if(usersType === \"weight\"){\r\n                name = \"Users efficiency.xlsx\"\r\n            }\r\n            FileSaver.saveAs(data, name);\r\n        }\r\n        \r\n    }\r\n    \r\n    const matSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 430,\r\n        //... other options\r\n    }\r\n\r\n    const pipingSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 215,\r\n        //... other options\r\n    }\r\n\r\n    const spanSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 215,\r\n        //... other options\r\n    }\r\n    if(tab === \"users\"){\r\n        return(\r\n            <body style={{overflow:\"hidden\", height:\"100vh\"}}>\r\n                {updateData}\r\n                {updateRows}\r\n                <IdleTimer\r\n                    timeout={1000 * 60 * 15}\r\n                    onIdle={handleOnIdle}\r\n                    debounce={250}\r\n                />\r\n                <NavBarProdCurve/>\r\n                <div className={`alert alert-success ${spanAlert ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setSpanAlert(false)}>\r\n                    <AlertF type=\"success\" text=\"Project week span saved!\" margin=\"0px\"/>\r\n                </div>\r\n                <div className={`alert alert-success ${pipingAlert ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setPipingAlert(false)}>\r\n                    <AlertF type=\"success\" text=\"Piping classes saved!\" margin=\"0px\"/>\r\n                </div>\r\n                <div className={`alert alert-success ${materialsAlert ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setMaterialsAlert(false)}>\r\n                    <AlertF type=\"success\" text=\"Materials saved!\" margin=\"0px\"/>\r\n                </div>\r\n                <div className={`alert alert-success ${success ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setSuccess(false)}>\r\n                    <AlertF type=\"success\" text=\"Changes saved!\" margin=\"0px\"/>\r\n                </div>\r\n                <Collapse in={loading}>\r\n                    <Alert style={{fontSize:\"16px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\",zIndex:\"0\"}} severity=\"info\"\r\n                        >\r\n                        Processing...\r\n                    </Alert>\r\n                </Collapse>\r\n                <div id=\"pdf\">\r\n                    <div style={{display:\"flex\"}}>\r\n                        {tabBtns}\r\n                        <div className=\"users__tables__container\">\r\n                            <div>\r\n                                {userEffTitle}\r\n                            </div>\r\n                            {tables}\r\n                        </div>\r\n                        <div style={{marginBottom:\"30px\", marginLeft:\"1630px\", position:\"absolute\"}}>\r\n                            <button className=\"back__button\" onClick={()=>history.push('/'+process.env.REACT_APP_PROJECT+'/piping')} style={{width:\"110px\", marginTop: \"80px\"}}><img src={BackIcon} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\", height: \"30px\"}}></img><p className=\"back__button__text\">Back</p></button>\r\n                            <button className=\"back__button\" onClick={()=> exportPiping()} style={{width:\"110px\", marginLeft:\"10px\", marginTop: \"80px\"}}><img src={Reports} alt=\"report\" className=\"navBar__icon\" style={{marginRight:\"0px\", height: \"30px\"}}></img><p className=\"back__button__text\">Export</p></button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n            </body>\r\n        )\r\n    }else{\r\n        return(\r\n\r\n            <body style={{overflow:\"hidden\", height:\"100vh\"}}>\r\n                {updateData}\r\n                {updateRows}\r\n                <IdleTimer\r\n                    timeout={1000 * 60 * 15}\r\n                    onIdle={handleOnIdle}\r\n                    debounce={250}\r\n                />\r\n                <NavBarProdCurve/>\r\n                <div className={`alert alert-success ${spanAlert ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setSpanAlert(false)}>\r\n                    <AlertF type=\"success\" text=\"Project week span saved!\" margin=\"0px\"/>\r\n                </div>\r\n                <div className={`alert alert-success ${pipingAlert ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setPipingAlert(false)}>\r\n                    <AlertF type=\"success\" text=\"Piping classes saved!\" margin=\"0px\"/>\r\n                </div>\r\n                <div className={`alert alert-success ${materialsAlert ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setMaterialsAlert(false)}>\r\n                    <AlertF type=\"success\" text=\"Materials saved!\" margin=\"0px\"/>\r\n                </div>\r\n                <div className={`alert alert-success ${success ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setSuccess(false)}>\r\n                    <AlertF type=\"success\" text=\"Changes saved!\" margin=\"0px\"/>\r\n                </div>\r\n                <Collapse in={loading}>\r\n                    <Alert style={{fontSize:\"16px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\",zIndex:\"0\"}} severity=\"info\"\r\n                        >\r\n                        Processing...\r\n                    </Alert>\r\n                </Collapse>\r\n                <div id=\"pdf\">\r\n                    <div style={{marginLeft: \"100px\", marginBottom: \"-120px\"}}>\r\n                        <button className=\"back__button\" onClick={()=>history.push('/'+process.env.REACT_APP_PROJECT+'/piping')} style={{width:\"180px\", marginTop: \"80px\"}}><img src={ArrowImage} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\", height: \"30px\"}}></img><p className=\"back__button__text\">Back to menu</p></button>\r\n                    </div>\r\n                    <div className=\"top__container\">\r\n                        {/*{tabBtns}*/}\r\n                        <div className={`Cabecera ${ menu ? 'isActive' : '' }` }>\r\n                                <button \r\n                                    onClick={ toggleMenu }\r\n                                    className=\"Cabecera__button\">\r\n                                    <svg className=\"Cabecera__svg\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n                                        <path fill-rule=\"evenodd\" d=\"M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z\"/>\r\n                                    </svg>\r\n                                </button>\r\n                                <nav className={`Cabecera__nav ${ menu ? 'isActive' : '' }` }>\r\n                                    \r\n                                    {/* Menu Users */}\r\n                                    <button className={`Cabecera__titulo ${ menuUsers ? 'isActiveUsers' : '' }` } onClick={ toggleMenuUsers }>\r\n                                        <img src={ArrowDownImage} alt=\"hold\" className=\"Cabecera__navBar__icon\" style={{marginRight:\"5px\", height: \"10px\"}}></img>\r\n                                        Users \r\n                                    </button>\r\n                                    <ul className={`Cabecera__ul ${ menuUsers ? 'isActiveUsers' : '' }` }>\r\n                                        <li className=\"Cabecera__li\">\r\n                                            <img src={WeightImage} alt=\"hold\" className=\"Cabecera__navBar__icon\" style={{marginRight:\"5px\", height: \"22px\"}}></img>\r\n                                            <a onClick={async() => await setTab(\"weight\")} className=\"Cabecera__a\">By Weights</a>\r\n                                        </li>\r\n                                        <li className=\"Cabecera__li\">\r\n                                            <img src={IsometricsImage} alt=\"hold\" className=\"Cabecera__navBar__icon\" style={{marginRight:\"5px\", height: \"22px\"}}></img>\r\n                                            <a onClick={async() => await setTab(\"prod\")} className=\"Cabecera__a\">By Isometrics</a>\r\n                                        </li>\r\n                                    </ul>\r\n\r\n                                    {/* Menu Production */}\r\n\r\n                                    <button className={`Cabecera__titulo ${ menuProduction ? 'isActiveProduction' : '' }` } onClick={ toggleMenuProduction }>\r\n                                        <img src={ArrowDownImage} alt=\"hold\" className=\"Cabecera__navBar__icon\" style={{marginRight:\"5px\", height: \"10px\"}}></img>\r\n                                        Production \r\n                                    </button>\r\n                                    <ul className={`Cabecera__ul ${ menuProduction ? 'isActiveProduction' : '' }` }>\r\n                                        <li className=\"Cabecera__li\">\r\n                                            <img src={WeightImage} alt=\"hold\" className=\"Cabecera__navBar__icon\" style={{marginRight:\"5px\", height: \"22px\"}}></img>\r\n                                            <a onClick={async() => await setTab(\"weight\")} className=\"Cabecera__a\">By Weight</a>\r\n                                        </li>\r\n                                        <li className=\"Cabecera__li\">\r\n                                            <img src={AtomImage} alt=\"hold\" className=\"Cabecera__navBar__icon\" style={{marginRight:\"5px\", height: \"22px\"}}></img>\r\n                                            <a onClick={async() => await setTab(\"weight\")} className=\"Cabecera__a\">By Material</a>\r\n                                        </li>\r\n                                    </ul>\r\n\r\n                                </nav>\r\n                            </div>\r\n                        <div id=\"graph\" className={`graph__container ${ menu ? 'isActive' : '' }` }>\r\n                            {lineChart}\r\n                        </div>\r\n                        <div className=\"materials__pc__container\">\r\n                            <div style={{marginBottom:\"30px\"}}>\r\n                                {/*<button className=\"back__button\" onClick={()=>history.push('/'+process.env.REACT_APP_PROJECT+'/piping')} style={{width:\"110px\", marginTop: \"80px\"}}><img src={BackIcon} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\", height: \"30px\"}}></img><p className=\"back__button__text\">Back</p></button>*/}\r\n                                <button className=\"right__button\" onClick={()=> printDocument()} style={{width:\"110px\", marginLeft:\"10px\", marginTop: \"80px\"}}><img src={GraphImage} alt=\"report\" className=\"navBar__icon\" style={{marginRight:\"0px\", height: \"25px\"}}></img><p className=\"right__button__text\">Graph</p></button>\r\n                                <button className=\"right__button\" onClick={()=> exportPiping()} style={{width:\"110px\", marginLeft:\"10px\", marginTop: \"80px\"}}><img src={ExportImage} alt=\"report\" className=\"navBar__icon\" style={{marginRight:\"0px\", height: \"23px\"}}></img><p className=\"right__button__text\">Export</p></button>\r\n                            </div>\r\n                            <div style={{display:\"flex\"}}>\r\n                                <text className=\"materials__title\">Project Management</text>\r\n                                <button className=\"save__button\" onClick={()=> submitManagement()}><img src={SaveIcon} alt=\"save\" className=\"save__icon\"></img></button>\r\n                            </div>\r\n                            <div style={{marginBottom:\"20px\", marginTop:\"10px\"}}>\r\n                                <HotTable\r\n                                    data={management}\r\n                                    colHeaders = {[\"<b>Starting date</b>\", \"<b>Finishing date</b>\"]}\r\n                                    width=\"500\"\r\n                                    height=\"60\"\r\n                                    settings={spanSettings} \r\n                                    manualColumnResize={true}\r\n                                    manualRowResize={true}\r\n                                    columns= {[{ data: \"Starting date\", type:\"date\"}, { data: \"Finishing date\", type:\"date\"}]}\r\n                                    className='project__management'\r\n                                />\r\n                            </div>\r\n                            <div id=\"hot-app\" style={{marginBottom:\"20px\"}}>\r\n                                <HotTable\r\n                                    data={materials}\r\n                                    colHeaders = {[\"<b>Materials</b>\"]}\r\n                                    width=\"450\"\r\n                                    height=\"130\"\r\n                                    settings={matSettings} \r\n                                    manualColumnResize={true}\r\n                                    manualRowResize={true}\r\n                                    columns= {[{ data: \"Material\"}]}\r\n                                    className='materials__management'\r\n                                />\r\n                                </div>\r\n                                <button className=\"projects__add__button\" onClick={()=>addRowMaterials()}><p className=\"projects__add__button__text\">+ Add</p></button>\r\n                                <button className=\"projects__button__save\" onClick={()=> submitChangesMaterials()} ><img src={SaveIcon2} alt=\"hold\" className=\"navBar__icon__save\" style={{marginRight:\"-20px\"}}></img><p className=\"projects__button__text\">Save</p></button>\r\n                                <div id=\"hot-app\" style={{marginBottom:\"20px\", marginTop:\"40px\"}}>\r\n                                <HotTable\r\n                                    data={piping}\r\n                                    colHeaders = {[\"<b>Piping class</b>\", \"<b>Material</b>\"]}\r\n                                    width=\"450\"\r\n                                    height=\"130\"\r\n                                    settings={pipingSettings} \r\n                                    manualColumnResize={true}\r\n                                    manualRowResize={true}\r\n                                    columns= {[{ data: \"PipingClass\"}, { data: \"Material\", type:\"dropdown\",strict:\"true\", source: materialsList}]}\r\n                                    className='pipingclass__management'\r\n                                />\r\n                                </div>\r\n                                <button className=\"projects__add__button\" onClick={()=>addRowPiping()}><p className=\"projects__add__button__text\">+ Add</p></button>\r\n                                <button className=\"projects__button__save\" onClick={()=> submitChangesPiping()} ><img src={SaveIcon2} alt=\"hold\" className=\"navBar__icon__save\" style={{marginRight:\"-20px\"}}></img><p className=\"projects__button__text\">Save</p></button>\r\n        \r\n                            </div>\r\n                    </div>\r\n                    <div className=\"materials__tables__container\">\r\n                        {overallTable}\r\n                        {tables}\r\n                    </div>\r\n                </div>\r\n            </body>\r\n        );\r\n    }\r\n    \r\n};\r\n\r\nexport default PITRequests;",["724","725"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotCivils\\progressPlotCivils.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navBar\\navBar.js",["726","727","728","729","730"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\EquipmentsNavBtns\\equipmentsNavBtns.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\roleDropDown\\roleDropDown.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilModelledDataTable\\civilModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navBtns\\navBtns.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilExcel\\civilExcel.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilTypesDataTable\\civilTypesDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\alert\\alert.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilExcelEdit\\civilExcelEdit.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\datatable\\datatable.js",["731","732","733"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\actionBtns\\actionBtns.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilEstimatedDataTable\\civilEstimatedDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\dragAndDrop\\dragAndDrop.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportBtns\\reportBtns.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\myTrayBtn\\myTrayBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\binBtn\\binBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\selectPag\\selectPag.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\stateTable\\stateTable.js",["734","735","736"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportBoxBtns\\reportBoxBtns.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\myTrayTable\\myTrayTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\statusDataTable\\statusDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\checkInTable\\checkInTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\binTable\\binTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\onHoldBtn\\onHoldBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportsBtn\\reportsBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\issuedBtn\\issuedBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\historyDataTable\\historyDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\procInsBtn\\procInsBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\modelledBtn\\modelledBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\modelledDataTable\\modelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressBtn\\progressBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlot\\progressPlot.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\menuList\\menuList.js",["737","738","739","740"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\procInstTable\\procInstTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\usersDataTable\\usersDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\onHoldTable\\onHoldTable.js",["741","742","743","744","745","746","747","748","749"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\byPassDataTable\\byPassDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\estimatedPipesExcel\\estimatedPipesExcel.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\productionUserTabs\\productionUserTabs.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navBarProdCurve\\navBarProdCurve.js",["750","751","752","753","754"],"//Cabecera de IsoTracker con diferentes desplegables y botones\r\n\r\nimport React, { useEffect ,useRef, useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {useHistory} from \"react-router\";\r\nimport Trash from \"../../assets/images/Trash.png\"\r\nimport Bell from \"../../assets/images/bell.svg\"\r\nimport BellActive from \"../../assets/images/bell_active.svg\"\r\nimport './navBarProdCurve.css'\r\nconst CryptoJS = require(\"crypto-js\");\r\nconst SecureStorage = require(\"secure-web-storage\");\r\nvar SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\nvar secureStorage = new SecureStorage(localStorage, {\r\n    hash: function hash(key) {\r\n        key = CryptoJS.SHA256(key, SECRET_KEY);\r\n\r\n        return key.toString();\r\n    },\r\n    encrypt: function encrypt(data) {\r\n        data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n\r\n        data = data.toString();\r\n\r\n        return data;\r\n    },\r\n    decrypt: function decrypt(data) {\r\n        data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n\r\n        data = data.toString(CryptoJS.enc.Utf8);\r\n\r\n        return data;\r\n    }\r\n});\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    label: {\r\n      },\r\n      label2: {\r\n      },\r\n  }));\r\n\r\n\r\nconst NavBarProdCurve = (props) =>{\r\n    const classes = useStyles();\r\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\r\n    const history = useHistory();\r\n    const [username, setUsername] = React.useState(\"\");\r\n    const [progressButtons, setProgressButtons] = React.useState(null);\r\n    const [isMenuOpen, setIsMenuOpen] = useState(false)\r\n    const ref = useRef()\r\n    const [notifications, setNotifications] = useState(false)\r\n    const [updateData, setUpdateData] = useState(false)\r\n    const [bellImage, setBellImage] = useState()\r\n    const [emptyNotifications, setEmptyNotifications] = useState()\r\n\r\n    const handleClickUser = (event) => {\r\n        setAnchorElUser(event.currentTarget);\r\n    };\r\n    \r\n    const handleCloseUser = () => {\r\n        setAnchorElUser(null);\r\n    };\r\n\r\n    const handleClickIsotracker = () => {\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/isotracker\");\r\n    };\r\n\r\n    const handleLogOut = () => {\r\n        localStorage.clear();\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/\");\r\n    };\r\n\r\n    const handleChangePassword = () =>{\r\n        setAnchorElUser(null);\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/changepassword\");\r\n    }\r\n\r\n    const handleClickEquipments = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/equipments\");\r\n    }\r\n\r\n    const handleClickInstrument = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/instrumentation\");\r\n    }\r\n    const handleClickCivil = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/civil\");\r\n    }\r\n    const handleClickElectrical = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/electrical\");\r\n    }\r\n    const handleClickPiping = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/piping\");\r\n    }\r\n    const handleClickHome = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/home\");\r\n    }\r\n    const handleClickSP = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/csptracker\");\r\n    }\r\n    const handleClickPIT = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/pitrequests\");\r\n    }\r\n     \r\n\r\n    useEffect(() => {\r\n        const checkIfClickedOutside = e => {\r\n          // If the menu is open and the clicked target is not within the menu,\r\n          // then close the menu\r\n          if (isMenuOpen && ref.current && !ref.current.contains(e.target)) {\r\n              \r\n            setIsMenuOpen(false)\r\n          }\r\n        }\r\n\r\n    \r\n        document.addEventListener(\"mousedown\", checkIfClickedOutside)\r\n    \r\n        return () => {\r\n          // Cleanup the event listener\r\n          document.removeEventListener(\"mousedown\", checkIfClickedOutside)\r\n        }\r\n      }, [isMenuOpen])\r\n\r\n    useEffect(async() =>{\r\n        const bodyUsername = {\r\n            email: secureStorage.getItem(\"user\")\r\n          }\r\n        const optionsUsername = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(bodyUsername)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/findByEmail\", optionsUsername)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            setUsername(json.name);\r\n        })\r\n\r\n        if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n            if(process.env.REACT_APP_SP === \"1\"){\r\n                setProgressButtons(<div style={{ marginLeft: \"3%\", float:\"left\"}}>\r\n                    <Button class=\"btn nohover\" onClick={handleClickHome} style={{marginRight:\"50px\", paddingTop: \"0px\"}}>\r\n                        <i className=\"nb__text\">Home </i>\r\n                    </Button><Button class=\"btn nohover\" onClick={handleClickPiping} style={{marginRight:\"50px\", paddingTop: \"0px\"}}>\r\n                        <i className=\"nb__text\">Piping </i>\r\n                    </Button><Button class=\"btn nohover\" onClick={handleClickInstrument} style={{marginRight:\"50px\", paddingTop: \"0px\"}}>\r\n                        <i className=\"nb__text\">Instrumentation </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickEquipments} style={{marginRight:\"50px\", paddingTop: \"0px\"}}>\r\n                        <i className=\"nb__text\">Equipment </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickCivil} style={{marginRight:\"50px\", paddingTop: \"0px\"}}>\r\n                        <i className=\"nb__text\">Civil </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickElectrical} style={{marginRight:\"50px\", paddingTop: \"0px\"}}>\r\n                        <i className=\"nb__text\">Electrical </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickIsotracker} style={{marginRight:\"50px\", paddingTop: \"0px\"}}>\r\n                                    <i className=\"nb__text\" >IsoTracker </i>\r\n                    </Button></div>)\r\n            }else{\r\n                setProgressButtons(<div style={{ marginLeft: \"3%\", float:\"left\" }}>\r\n                    <Button class=\"btn nohover\" onClick={handleClickHome} style={{marginRight:\"50px\", paddingTop: \"0px\"}}>\r\n                        <i className=\"nb__text\">Home </i>\r\n                    </Button><Button class=\"btn nohover\" onClick={handleClickPiping} style={{marginRight:\"50px\", paddingTop: \"0px\"}}>\r\n                        <i className=\"nb__text\">Piping </i>\r\n                    </Button><Button class=\"btn nohover\" onClick={handleClickInstrument} style={{marginRight:\"50px\", paddingTop: \"0px\"}}>\r\n                        <i className=\"nb__text\">Instrumentation </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickEquipments} style={{marginRight:\"50px\", paddingTop: \"0px\"}}>\r\n                        <i className=\"nb__text\">Equipment </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickCivil} style={{marginRight:\"50px\", paddingTop: \"0px\"}}>\r\n                        <i className=\"nb__text\">Civil </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickElectrical} style={{marginRight:\"50px\", paddingTop: \"0px\"}}>\r\n                        <i className=\"nb__text\">Electrical </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickIsotracker} style={{marginRight:\"50px\", paddingTop: \"0px\"}}>\r\n                        <i className=\"nb__text\" >IsoTracker </i>\r\n                    </Button></div>)\r\n            }\r\n\r\n        }\r\n      \r\n    },[])\r\n\r\n    useEffect (async ()=>{\r\n\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/notifications/\"+ secureStorage.getItem(\"user\"), options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            let notif = []\r\n            let alert = false\r\n            if(json.rows[0]){\r\n                for(let i = 0; i < json.rows.length; i++){           \r\n                    if(json.rows[i].read === 0){\r\n                        alert = true\r\n                        notif.push(<div className=\"notification__container\" >\r\n                                    <p className=\"notification__text\" style={{fontWeight:\"bold\"}}>{json.rows[i].text}</p>\r\n                                    <button className=\"markAsReadNotification__button\" style={{marginLeft:\"170px\"}} onClick={()=> markAsRead(json.rows[i].id)}>Mark as read</button>\r\n                                    <button className=\"deleteNotification__button\"><img src={Trash} alt=\"trash\" className=\"notificationTrash__icon\" onClick={()=> deleteNotification(json.rows[i].id)}></img></button>\r\n                                </div>)\r\n                    }else{\r\n                        notif.push(<div className=\"notification__container\" >\r\n                                    <p className=\"notification__text\">{json.rows[i].text}</p>\r\n                                    <button className=\"markAsReadNotification__button\" style={{marginLeft:\"157px\"}} onClick={()=> markAsUnread(json.rows[i].id)}>Mark as unread</button>\r\n                                    <button className=\"deleteNotification__button\"><img src={Trash} alt=\"trash\" className=\"notificationTrash__icon\" onClick={()=> deleteNotification(json.rows[i].id)}></img></button>\r\n                                </div>)\r\n                    }\r\n                    \r\n                }\r\n                await setEmptyNotifications(null)\r\n            }else{\r\n                await setEmptyNotifications(<div className=\"emptyNotifications__container\">\r\n                    <p className=\"emptyNotifications__text\">No new notifications</p>\r\n                </div>)\r\n            }\r\n\r\n            if(alert){\r\n                await setBellImage(<img src={BellActive} alt=\"bellActive\" className=\"nb__notificationBell__icon\"></img>)\r\n            }else{\r\n                await setBellImage(<img src={Bell} alt=\"bell\" className=\"nb__notificationBell__icon\"></img>)\r\n            }\r\n            await setNotifications(notif)\r\n        })\r\n    },[updateData])\r\n\r\n    \r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            const options = {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n            }\r\n    \r\n            fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/notifications/\"+ secureStorage.getItem(\"user\"), options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                let notif = []\r\n                let alert = false\r\n                if(json.rows[0]){\r\n                    for(let i = 0; i < json.rows.length; i++){           \r\n                        if(json.rows[i].read === 0){\r\n                            alert = true\r\n                            notif.push(<div className=\"notification__container\" >\r\n                                        <p className=\"notification__text\" style={{fontWeight:\"bold\"}}>{json.rows[i].text}</p>\r\n                                        <button className=\"markAsReadNotification__button\" style={{marginLeft:\"170px\"}} onClick={()=> markAsRead(json.rows[i].id)}>Mark as read</button>\r\n                                        <button className=\"deleteNotification__button\"><img src={Trash} alt=\"trash\" className=\"notificationTrash__icon\" onClick={()=> deleteNotification(json.rows[i].id)}></img></button>\r\n                                    </div>)\r\n                        }else{\r\n                            notif.push(<div className=\"notification__container\" >\r\n                                        <p className=\"notification__text\">{json.rows[i].text}</p>\r\n                                        <button className=\"markAsReadNotification__button\" style={{marginLeft:\"157px\"}} onClick={()=> markAsUnread(json.rows[i].id)}>Mark as unread</button>\r\n                                        <button className=\"deleteNotification__button\"><img src={Trash} alt=\"trash\" className=\"notificationTrash__icon\" onClick={()=> deleteNotification(json.rows[i].id)}></img></button>\r\n                                    </div>)\r\n                        }\r\n                        \r\n                    }\r\n                    await setEmptyNotifications(null)\r\n                }else{\r\n                    setEmptyNotifications(<div className=\"emptyNotifications__container\">\r\n                        <p className=\"emptyNotifications__text\">No new notifications</p>\r\n                    </div>)\r\n                }\r\n    \r\n                if(alert){\r\n                    setBellImage(<img src={BellActive} alt=\"bellActive\" className=\"nb__notificationBell__icon\"></img>)\r\n                }else{\r\n                    setBellImage(<img src={Bell} alt=\"bell\" className=\"nb__notificationBell__icon\"></img>)\r\n                }\r\n                await setNotifications(notif)\r\n            })\r\n        }, 10000);\r\n        return () => clearInterval(interval);\r\n      }, []);\r\n      \r\n\r\n    let projectBtn, pitButton, spbutton, pitButtonProgress, rightButtons = null\r\n    if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n        if(process.env.REACT_APP_SP === \"1\"){\r\n            if(process.env.REACT_APP_PIT === \"1\"){\r\n            projectBtn = <Button class=\"btn nohover\" disabled style={{marginRight:\"20px\", float:\"right\"}}>\r\n            <i className=\"nb__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n        </Button>\r\n            rightButtons = <div style={{width:\"28%\"}}>\r\n                    \r\n                            \r\n                <button style={{float:\"right\", marginLeft:\"20px\", border:\"none\", background:\"none\", paddingTop: \"0px\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n                <Button class=\"btn nohover\" style={{float: \"right\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n                <i className=\"nb__text\">{username}&nbsp;🠗</i>\r\n                </Button>\r\n                \r\n\r\n                {isMenuOpen && (\r\n                    <div className=\"notifications__container\" style={{marginLeft: \"11%\"}}>\r\n                        <div className=\"notificationPanel__header\">\r\n                            <p className=\"notificationHeader__text\">Notifications</p>\r\n                            <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                        </div>\r\n                        {notifications}\r\n                        {emptyNotifications}\r\n                    </div>\r\n                )}\r\n                \r\n                {projectBtn}\r\n            </div>\r\n            }else{\r\n                projectBtn = <Button class=\"btn nohover\" disabled style={{marginRight:\"20px\", float:\"right\"}}>\r\n            <i className=\"nb__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n        </Button>\r\n            rightButtons = <div style={{width:\"40%\"}}>\r\n                    \r\n                            \r\n                <button style={{float:\"right\", marginLeft:\"20px\", border:\"none\", background:\"none\", paddingTop: \"0px\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n                <Button class=\"btn nohover\" style={{float: \"right\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n                <i className=\"nb__text\">{username}&nbsp;🠗</i>\r\n                </Button>\r\n                \r\n\r\n                {isMenuOpen && (\r\n                    <div className=\"notifications__container\" style={{marginLeft: \"26%\"}}>\r\n                        <div className=\"notificationPanel__header\">\r\n                            <p className=\"notificationHeader__text\">Notifications</p>\r\n                            <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                        </div>\r\n                        {notifications}\r\n                        {emptyNotifications}\r\n                    </div>\r\n                )}\r\n                \r\n                {projectBtn}\r\n            </div>\r\n            }\r\n        }else{\r\n            if(process.env.REACT_APP_PIT === \"1\"){\r\n                projectBtn = <Button class=\"btn nohover\" disabled style={{float:\"right\", marginRight:\"20px\"}}>\r\n                <i className=\"nb__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n            </Button>\r\n                rightButtons= <div style={{width:\"40%\"}}>\r\n                        \r\n                            \r\n                <button style={{float:\"right\", marginLeft:\"20px\", border:\"none\", background:\"none\", paddingTop: \"0px\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n                <Button class=\"btn nohover\" style={{float: \"right\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n                <i className=\"nb__text\">{username}&nbsp;🠗</i>\r\n                </Button>\r\n                \r\n\r\n                {isMenuOpen && (\r\n                    <div className=\"notifications__container\" style={{marginLeft: \"27%\"}}>\r\n                        <div className=\"notificationPanel__header\">\r\n                            <p className=\"notificationHeader__text\">Notifications</p>\r\n                            <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                        </div>\r\n                        {notifications}\r\n                        {emptyNotifications}\r\n                    </div>\r\n                )}\r\n                \r\n                {projectBtn}\r\n            </div>\r\n            }else{\r\n                projectBtn = <Button class=\"btn nohover\" disabled style={{float:\"right\", marginRight:\"20px\"}}>\r\n                <i className=\"nb__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n            </Button>\r\n                rightButtons= <div style={{width:\"40%\"}}>\r\n                        \r\n                            \r\n                <button style={{float:\"right\", marginLeft:\"20px\", border:\"none\", background:\"none\", paddingTop: \"0px\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n                <Button class=\"btn nohover\" style={{float: \"right\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n                <i className=\"nb__text\">{username}&nbsp;🠗</i>\r\n                </Button>\r\n                \r\n\r\n                {isMenuOpen && (\r\n                    <div className=\"notifications__container\" style={{marginLeft: \"34%\"}}>\r\n                        <div className=\"notificationPanel__header\">\r\n                            <p className=\"notificationHeader__text\">Notifications</p>\r\n                            <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                        </div>\r\n                        {notifications}\r\n                        {emptyNotifications}\r\n                    </div>\r\n                )}\r\n                \r\n                {projectBtn}\r\n            </div>\r\n            }\r\n        }\r\n        \r\n        \r\n    }else{\r\n        if(process.env.REACT_APP_SP === \"1\"){\r\n            if(process.env.REACT_APP_PIT === \"1\"){\r\n            projectBtn = <Button classes={{label: classes.label2}} class=\"btn nohover\" disabled style={{float:\"right\", marginRight:\"20px\"}}>\r\n            <i className=\"nb__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n        </Button>\r\n        rightButtons= <div style={{width:\"76%\"}}>\r\n                    \r\n                        \r\n            <button style={{float:\"right\", marginLeft:\"20px\", border:\"none\", background:\"none\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n            <Button class=\"btn nohover\" style={{float: \"right\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n            <i className=\"nb__text\">{username}&nbsp;🠗</i>\r\n            </Button>\r\n            \r\n\r\n            {isMenuOpen && (\r\n                <div className=\"notifications__container\" style={{marginLeft: \"62%\"}}>\r\n                    <div className=\"notificationPanel__header\">\r\n                        <p className=\"notificationHeader__text\">Notifications</p>\r\n                        <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                    </div>\r\n                    {notifications}\r\n                    {emptyNotifications}\r\n                </div>\r\n            )}\r\n            \r\n            {projectBtn}\r\n        </div>\r\n            }else{\r\n                projectBtn = <Button classes={{label: classes.label2}} class=\"btn nohover\" disabled style={{float:\"right\", marginRight:\"20px\"}}>\r\n                <i className=\"nb__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n            </Button>\r\n            rightButtons= <div style={{width:\"82%\"}}>\r\n                        \r\n                            \r\n                <button style={{float:\"right\", marginLeft:\"20px\", border:\"none\", background:\"none\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n                <Button class=\"btn nohover\" style={{float: \"right\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n                <i className=\"nb__text\">{username}&nbsp;🠗</i>\r\n                </Button>\r\n                \r\n    \r\n                {isMenuOpen && (\r\n                    <div className=\"notifications__container\" style={{marginLeft: \"68%\"}}>\r\n                        <div className=\"notificationPanel__header\">\r\n                            <p className=\"notificationHeader__text\">Notifications</p>\r\n                            <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                        </div>\r\n                        {notifications}\r\n                        {emptyNotifications}\r\n                    </div>\r\n                )}\r\n                \r\n                {projectBtn}\r\n                </div>\r\n            }\r\n        \r\n        }else{\r\n            if(process.env.REACT_APP_PIT === \"1\"){\r\n                projectBtn = <Button classes={{label: classes.label2}} class=\"btn nohover\" disabled style={{float:\"right\", marginRight:\"20px\"}}>\r\n                <i className=\"nb__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n                </Button>\r\n                \r\n                \r\n                rightButtons= <div style={{width:\"82%\"}}>\r\n                            \r\n                                \r\n                <button style={{float:\"right\", marginLeft:\"20px\", border:\"none\", background:\"none\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n                <Button class=\"btn nohover\" style={{float: \"right\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n                <i className=\"nb__text\">{username}&nbsp;🠗</i>\r\n                </Button>\r\n                \r\n\r\n                {isMenuOpen && (\r\n                    <div className=\"notifications__container\" style={{marginLeft: \"68%\"}}>\r\n                        <div className=\"notificationPanel__header\">\r\n                            <p className=\"notificationHeader__text\">Notifications</p>\r\n                            <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                        </div>\r\n                        {notifications}\r\n                        {emptyNotifications}\r\n                    </div>\r\n                )}\r\n                \r\n                {projectBtn}\r\n            </div>\r\n            }else{\r\n                projectBtn = <Button classes={{label: classes.label2}} class=\"btn nohover\" disabled style={{float:\"right\", marginRight:\"20px\"}}>\r\n                <i className=\"nb__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n                </Button>\r\n                \r\n                \r\n                rightButtons= <div style={{width:\"90%\"}}>\r\n                            \r\n                                \r\n                <button style={{float:\"right\", marginLeft:\"20px\", border:\"none\", background:\"none\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n                <Button class=\"btn nohover\" style={{float: \"right\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n                <i className=\"nb__text\">{username}&nbsp;🠗</i>\r\n                </Button>\r\n                \r\n\r\n                {isMenuOpen && (\r\n                    <div className=\"notifications__container\" style={{marginLeft: \"75%\"}}>\r\n                        <div className=\"notificationPanel__header\">\r\n                            <p className=\"notificationHeader__text\">Notifications</p>\r\n                            <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                        </div>\r\n                        {notifications}\r\n                        {emptyNotifications}\r\n                    </div>\r\n                )}\r\n                \r\n                {projectBtn}\r\n            </div>\r\n            }\r\n        }\r\n\r\n    }\r\n    let isotrackerBtnNoProgress = null\r\n    if(process.env.REACT_APP_SP === \"1\"){\r\n        if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n            spbutton = <Button class=\"btn nohover\" onClick={handleClickSP} style={{marginRight:\"50px\" , paddingTop: \"0px\"}}>\r\n            <i className=\"nb__text\" >SPTracker</i>\r\n            </Button>\r\n        }else{\r\n            spbutton = <Button class=\"btn nohover\" onClick={handleClickSP} style={{marginLeft:\"50px\", paddingTop: \"0px\"}}>\r\n            <i className=\"nb__text\" >SPTracker</i>\r\n            </Button>\r\n            isotrackerBtnNoProgress = <Button class=\"btn nohover\" onClick={handleClickIsotracker} style={{marginLeft:\"50px\", paddingTop: \"0px\"}}>\r\n                        <i className=\"nb__text\" >IsoTracker </i>\r\n            </Button>\r\n        }    \r\n    }\r\n\r\n    if(process.env.REACT_APP_PIT === \"1\"){\r\n        if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n            pitButtonProgress = <Button class=\"btn nohover\" onClick={handleClickPIT} style={{marginRight:\"50px\" , paddingTop: \"0px\"}}>\r\n            <i className=\"nb__text\" >PITRequests</i>\r\n            </Button>\r\n        }else{\r\n            pitButton = <Button class=\"btn nohover\" onClick={handleClickPIT} style={{marginLeft:\"50px\"}}>\r\n            <i className=\"nb__text\" >PITRequests</i>\r\n            </Button>\r\n            isotrackerBtnNoProgress = <Button class=\"btn nohover\" onClick={handleClickIsotracker} style={{marginLeft:\"50px\" , paddingTop: \"0px\"}}>\r\n                        <i className=\"nb__text\" >IsoTracker </i>\r\n            </Button>\r\n        }    \r\n    }    \r\n\r\n    if(process.env.REACT_APP_PROGRESS === \"0\" && process.env.REACT_APP_SP === \"0\" && process.env.REACT_APP_PIT === \"0\"){\r\n        isotrackerBtnNoProgress = <Button class=\"btn nohover\" onClick={handleClickIsotracker} style={{marginLeft:\"50px\" , paddingTop: \"0px\"}}>\r\n        <i className=\"nb__text\" >IsoTracker </i>\r\n        </Button>\r\n    }\r\n\r\n    function markAllAsRead(){\r\n        const body = {\r\n            email: secureStorage.getItem(\"user\")\r\n          }\r\n          const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n          }\r\n          fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/markAllNotificationsAsRead\", options)\r\n          .then(response => response.json())\r\n          .then(json =>{\r\n              if(json.success){\r\n                setUpdateData(!updateData)\r\n              }\r\n          })\r\n   \r\n    }\r\n\r\n    function markAsRead(id){\r\n        const body = {\r\n            id: id\r\n          }\r\n          const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n          }\r\n          fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/markNotificationAsRead\", options)\r\n          .then(response => response.json())\r\n          .then(json =>{\r\n              if(json.success){\r\n                setUpdateData(!updateData)\r\n              }\r\n          })\r\n   \r\n    }\r\n\r\n    function markAsUnread(id){\r\n        const body = {\r\n            id: id\r\n          }\r\n          const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n          }\r\n          fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/markNotificationAsUnread\", options)\r\n          .then(response => response.json())\r\n          .then(json =>{\r\n              if(json.success){\r\n                setUpdateData(!updateData)\r\n              }\r\n          })\r\n   \r\n    }\r\n\r\n    function deleteNotification(id){\r\n        const body = {\r\n            id: id\r\n          }\r\n          const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n          }\r\n          fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/deleteNotification\", options)\r\n          .then(response => response.json())\r\n          .then(json =>{\r\n              if(json.success){\r\n                setUpdateData(!updateData)\r\n              }\r\n          })\r\n    }\r\n\r\n\r\n    \r\n    return(\r\n        <div ref={ref}>\r\n        <div className={classes.root}>\r\n            <div>\r\n            <AppBar position=\"fixed\" className=\"navBar__container\" style={{height:\"49px\", borderBottomColor: \"rgb(211, 224, 233)\", borderLeftColor: \"rgb(211, 224, 233)\", bordeRightColor: \"rgb(211, 224, 233)\", borderTopColor: \"rgb(211, 224, 233)\", backgroundColor: \"#383838\"}}>\r\n            \r\n                <Toolbar>\r\n                    \r\n                    {progressButtons}   \r\n                    {isotrackerBtnNoProgress}        \r\n                    {pitButtonProgress}\r\n                    {pitButton}\r\n                    \r\n                    {spbutton}\r\n\r\n                    <Menu\r\n                        id=\"simple-menu\"\r\n                        anchorEl={anchorElUser}\r\n                        getContentAnchorEl={null}\r\n                        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                        transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                        open={Boolean(anchorElUser)}\r\n                        onClose={handleCloseUser}\r\n                        PaperProps={{\r\n                            style: {\r\n                            left: '50%',\r\n                            transform: 'translateX(+30%)',\r\n                            }\r\n                        }}\r\n                    >\r\n                    <MenuItem style={{fontFamily:\"Quicksand\", fontSize:\"13.33px\"}} onClick={handleChangePassword}>Change password</MenuItem>\r\n                    <MenuItem style={{fontFamily:\"Quicksand\", fontSize:\"13.33px\"}} onClick={handleLogOut}><b>Logout</b></MenuItem>\r\n                    </Menu>\r\n                    {rightButtons}\r\n                </Toolbar>\r\n\r\n            </AppBar>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavBarProdCurve;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\holdsPopUp\\holdsPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\commentPopUp\\commentPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\manageRolesPopUp\\manageRolesPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\deleteUserConfPopUp\\deleteUserConfPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\revisionPopUp\\revisionPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadProcInst\\uploadProcInst.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadPopUp\\uploadPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\byPassPopUp\\byPassPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadElectricalModelledPopUp\\uploadElectricalModelledPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateBOMPopUp\\updateBOMPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadPipesEstimatedPopUp\\uploadPipesEstimatedPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadElectricalEstimatedPopUp\\uploadElectricalEstimatedPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadCivilModelledPopUp\\uploadCivilModelledPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadInstrumentationEstimatedPopUp\\uploadInstrumentationEstimatedPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadCivilEstimtedPopUp\\uploadCivilEstimtedPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadInstrumentationModelledPopUp\\uploadInstrumentationModelledPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\byPassRejNACommentPopUp\\byPassRejNACommentPopUp.js",["755"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\deleteByPassPopUp\\deleteByPassPopUp.js",["756"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\editByPassPopUp\\editByPassPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\acceptByPassPopUp\\acceptByPassPopUp.js",["757"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadReportPopUp\\uploadReportPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadEquisEstimatedPopUp\\uploadEquisEstimatedPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadEquisModelledPopUp\\uploadEquisModelledPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\newRevPopUp\\newRevPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\holdComment\\holdComment.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\addUserPopUp\\addUserPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateMassivePopUp\\updateMassivePopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\cancelIso\\cancelIso.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\actionExtra\\actionExtra.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\forceClaimPopUp\\forceClaimPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\cancelRevPopUp\\cancelRevPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateMassive\\updateMassive.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\productionUserTab\\productionUserTab.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\renamePopUp\\renamePopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadBomIsocontrolPopUp\\uploadBomIsocontrolPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlGroupLineIdDataTable\\isoControlGroupLineIdDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\loadingScreen\\loadingScreen.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlNotModelledDataTable\\isoControlNotModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlModelledDataTable\\isoControlModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlFullDataTable\\isoControlFullDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\timeTrackDataTable\\timeTrackDataTable.js",["758"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerViewDataTable\\qtrackerViewDataTable.js",["759"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerKeyParams\\csptrackerKeyParams.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\menuListPit\\menuListPit.js",["760","761"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerRequestsDataTable\\csptrackerRequestsDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingMyTrayTable\\pipingMyTrayTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingBinTable\\pipingBinTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlHoldsDataTable\\isoControlHoldsDataTable.js",["762"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingDataTable\\pipingDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingNavBtns\\pipingNavBtns.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerDataTable\\csptrackerDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingTypesDataTable\\pipingTypesDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navisTable\\navisTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingExcel\\pipingExcel.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingExcelEdit\\pipingExcelEdit.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipExcelEdit\\equipExcelEdit.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingEstimatedDataTable\\pipingEstimatedDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotPiping\\progressPlotPiping.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotEquipments\\progressPlotEquipments.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipExcel\\equipExcel.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipModelledDataTable\\equipModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotCurve\\progressPlotCurve.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipTypesDataTable\\equipTypesDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerRequestPopUp\\csptrackerRequestPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipEstimatedDataTable\\equipEstimatedDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instrumentationTypesDataTable\\instrumentationTypesDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instExcelEdit\\instExcelEdit.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instrumentationEstimatedDataTable\\instrumentationEstimatedDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotInstrumentation\\progressPlotInstrumentation.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instExcel\\instExcel.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instrumentationModelledDataTable\\instrumentationModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\elecExcelEdit\\elecExcelEdit.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\elecExcel\\elecExcel.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\elecTypesDataTable\\elecTypesDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progresPlotElecs\\progressPlotElecs.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\electricalEstimatedDataTable\\electricalEstimatedDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\electricalModelledDataTable\\electricalModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\loadingScreen3D\\loadingScreen3D.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\menuListPitList\\menuListPitList.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerRPSpecPopUp\\qtrackerRPSpecPopUp.js",["763"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRIDSSpecPopUp\\qtrackerNRIDSSpecPopUp.js",["764"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRBSpecPopUp\\qtrackerNRBSpecPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNWCSpecPopUp\\qtrackerNWCSpecPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRISpecPopUp\\qtrackerNRISpecPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNVNSpecPopUp\\qtrackerNVNSpecPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateDrawingPopUp\\updateDrawingPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadDrawingPopUp\\uploadDrawingPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlHoldsPopUp\\isoControlHoldsPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRBPopUp\\qtrackerNRBPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRIPopUp\\qtrackerNRIPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNWCPopUp\\qtrackerNWCPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerRRPopUp\\qtrackerRRPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNVNPopUp\\qtrackerNVNPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRIDSPopUp\\qtrackerNRIDSPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\pipingProgress\\pipingProgress.js",["765","766","767","768","769","770","771"],{"ruleId":"772","severity":1,"message":"773","line":2,"column":8,"nodeType":"774","messageId":"775","endLine":2,"endColumn":15},{"ruleId":"776","severity":1,"message":"777","line":65,"column":7,"nodeType":"778","endLine":65,"endColumn":20,"suggestions":"779"},{"ruleId":"776","severity":1,"message":"780","line":104,"column":7,"nodeType":"778","endLine":104,"endColumn":9,"suggestions":"781"},{"ruleId":"776","severity":1,"message":"782","line":160,"column":8,"nodeType":"778","endLine":160,"endColumn":10,"suggestions":"783"},{"ruleId":"776","severity":1,"message":"784","line":158,"column":7,"nodeType":"778","endLine":158,"endColumn":20,"suggestions":"785"},{"ruleId":"786","severity":1,"message":"787","line":1621,"column":129,"nodeType":"788","messageId":"789","endLine":1621,"endColumn":131},{"ruleId":"786","severity":1,"message":"787","line":1622,"column":38,"nodeType":"788","messageId":"789","endLine":1622,"endColumn":40},{"ruleId":"786","severity":1,"message":"787","line":1623,"column":67,"nodeType":"788","messageId":"789","endLine":1623,"endColumn":69},{"ruleId":"786","severity":1,"message":"787","line":1624,"column":64,"nodeType":"788","messageId":"789","endLine":1624,"endColumn":66},{"ruleId":"776","severity":1,"message":"782","line":52,"column":8,"nodeType":"778","endLine":52,"endColumn":10,"suggestions":"790"},{"ruleId":"776","severity":1,"message":"791","line":87,"column":8,"nodeType":"778","endLine":87,"endColumn":10,"suggestions":"792"},{"ruleId":"776","severity":1,"message":"777","line":64,"column":7,"nodeType":"778","endLine":64,"endColumn":20,"suggestions":"793"},{"ruleId":"776","severity":1,"message":"780","line":103,"column":7,"nodeType":"778","endLine":103,"endColumn":9,"suggestions":"794"},{"ruleId":"776","severity":1,"message":"782","line":109,"column":8,"nodeType":"778","endLine":109,"endColumn":10,"suggestions":"795"},{"ruleId":"776","severity":1,"message":"777","line":64,"column":7,"nodeType":"778","endLine":64,"endColumn":20,"suggestions":"796"},{"ruleId":"776","severity":1,"message":"780","line":103,"column":7,"nodeType":"778","endLine":103,"endColumn":9,"suggestions":"797"},{"ruleId":"776","severity":1,"message":"782","line":109,"column":8,"nodeType":"778","endLine":109,"endColumn":10,"suggestions":"798"},{"ruleId":"776","severity":1,"message":"777","line":46,"column":7,"nodeType":"778","endLine":46,"endColumn":20,"suggestions":"799"},{"ruleId":"776","severity":1,"message":"780","line":64,"column":7,"nodeType":"778","endLine":64,"endColumn":9,"suggestions":"800"},{"ruleId":"776","severity":1,"message":"782","line":112,"column":8,"nodeType":"778","endLine":112,"endColumn":10,"suggestions":"801"},{"ruleId":"776","severity":1,"message":"777","line":64,"column":7,"nodeType":"778","endLine":64,"endColumn":20,"suggestions":"802"},{"ruleId":"776","severity":1,"message":"780","line":103,"column":7,"nodeType":"778","endLine":103,"endColumn":9,"suggestions":"803"},{"ruleId":"776","severity":1,"message":"782","line":109,"column":8,"nodeType":"778","endLine":109,"endColumn":10,"suggestions":"804"},{"ruleId":"772","severity":1,"message":"805","line":74,"column":31,"nodeType":"774","messageId":"775","endLine":74,"endColumn":51},{"ruleId":"772","severity":1,"message":"806","line":75,"column":35,"nodeType":"774","messageId":"775","endLine":75,"endColumn":59},{"ruleId":"776","severity":1,"message":"780","line":112,"column":7,"nodeType":"778","endLine":112,"endColumn":20,"suggestions":"807"},{"ruleId":"776","severity":1,"message":"780","line":152,"column":7,"nodeType":"778","endLine":152,"endColumn":19,"suggestions":"808"},{"ruleId":"776","severity":1,"message":"809","line":154,"column":15,"nodeType":"810","endLine":156,"endColumn":6},{"ruleId":"776","severity":1,"message":"811","line":191,"column":8,"nodeType":"778","endLine":191,"endColumn":10,"suggestions":"812"},{"ruleId":"772","severity":1,"message":"813","line":267,"column":9,"nodeType":"774","messageId":"775","endLine":267,"endColumn":35},{"ruleId":"776","severity":1,"message":"777","line":41,"column":7,"nodeType":"778","endLine":41,"endColumn":20,"suggestions":"814"},{"ruleId":"776","severity":1,"message":"782","line":124,"column":8,"nodeType":"778","endLine":124,"endColumn":10,"suggestions":"815"},{"ruleId":"776","severity":1,"message":"777","line":169,"column":7,"nodeType":"778","endLine":169,"endColumn":20,"suggestions":"816"},{"ruleId":"776","severity":1,"message":"809","line":171,"column":15,"nodeType":"810","endLine":203,"endColumn":6},{"ruleId":"776","severity":1,"message":"780","line":203,"column":7,"nodeType":"778","endLine":203,"endColumn":19,"suggestions":"817"},{"ruleId":"776","severity":1,"message":"809","line":205,"column":15,"nodeType":"810","endLine":233,"endColumn":6},{"ruleId":"776","severity":1,"message":"782","line":53,"column":8,"nodeType":"778","endLine":53,"endColumn":10,"suggestions":"818"},{"ruleId":"776","severity":1,"message":"791","line":78,"column":8,"nodeType":"778","endLine":78,"endColumn":10,"suggestions":"819"},{"ruleId":"772","severity":1,"message":"820","line":74,"column":12,"nodeType":"774","messageId":"775","endLine":74,"endColumn":19},{"ruleId":"776","severity":1,"message":"782","line":88,"column":8,"nodeType":"778","endLine":88,"endColumn":10,"suggestions":"821"},{"ruleId":"776","severity":1,"message":"822","line":129,"column":7,"nodeType":"778","endLine":129,"endColumn":20,"suggestions":"823"},{"ruleId":"776","severity":1,"message":"809","line":131,"column":15,"nodeType":"810","endLine":163,"endColumn":6},{"ruleId":"776","severity":1,"message":"780","line":163,"column":7,"nodeType":"778","endLine":163,"endColumn":19,"suggestions":"824"},{"ruleId":"776","severity":1,"message":"782","line":122,"column":8,"nodeType":"778","endLine":122,"endColumn":10,"suggestions":"825"},{"ruleId":"776","severity":1,"message":"784","line":223,"column":7,"nodeType":"778","endLine":223,"endColumn":20,"suggestions":"826"},{"ruleId":"786","severity":1,"message":"787","line":2032,"column":129,"nodeType":"788","messageId":"789","endLine":2032,"endColumn":131},{"ruleId":"786","severity":1,"message":"787","line":2033,"column":38,"nodeType":"788","messageId":"789","endLine":2033,"endColumn":40},{"ruleId":"786","severity":1,"message":"787","line":2034,"column":67,"nodeType":"788","messageId":"789","endLine":2034,"endColumn":69},{"ruleId":"786","severity":1,"message":"787","line":2035,"column":64,"nodeType":"788","messageId":"789","endLine":2035,"endColumn":66},{"ruleId":"772","severity":1,"message":"827","line":2136,"column":9,"nodeType":"774","messageId":"775","endLine":2136,"endColumn":22},{"ruleId":"772","severity":1,"message":"828","line":2146,"column":13,"nodeType":"774","messageId":"775","endLine":2146,"endColumn":26},{"ruleId":"772","severity":1,"message":"829","line":2154,"column":13,"nodeType":"774","messageId":"775","endLine":2154,"endColumn":32},{"ruleId":"772","severity":1,"message":"830","line":2162,"column":13,"nodeType":"774","messageId":"775","endLine":2162,"endColumn":25},{"ruleId":"772","severity":1,"message":"831","line":2165,"column":13,"nodeType":"774","messageId":"775","endLine":2165,"endColumn":30},{"ruleId":"772","severity":1,"message":"832","line":2175,"column":13,"nodeType":"774","messageId":"775","endLine":2175,"endColumn":35},{"ruleId":"772","severity":1,"message":"833","line":2191,"column":13,"nodeType":"774","messageId":"775","endLine":2191,"endColumn":38},{"ruleId":"772","severity":1,"message":"834","line":8,"column":8,"nodeType":"774","messageId":"775","endLine":8,"endColumn":13},{"ruleId":"772","severity":1,"message":"835","line":19,"column":10,"nodeType":"774","messageId":"775","endLine":19,"endColumn":16},{"ruleId":"772","severity":1,"message":"836","line":26,"column":8,"nodeType":"774","messageId":"775","endLine":26,"endColumn":13},{"ruleId":"776","severity":1,"message":"809","line":153,"column":15,"nodeType":"810","endLine":1433,"endColumn":6},{"ruleId":"837","severity":1,"message":"838","line":331,"column":69,"nodeType":"839","messageId":"840","endLine":333,"endColumn":46},{"ruleId":"841","severity":1,"message":"842","line":331,"column":69,"nodeType":"839","messageId":"843","endLine":331,"endColumn":77},{"ruleId":"837","severity":1,"message":"844","line":335,"column":70,"nodeType":"839","messageId":"840","endLine":337,"endColumn":46},{"ruleId":"841","severity":1,"message":"842","line":335,"column":70,"nodeType":"839","messageId":"843","endLine":335,"endColumn":78},{"ruleId":"837","severity":1,"message":"845","line":339,"column":70,"nodeType":"839","messageId":"840","endLine":341,"endColumn":46},{"ruleId":"841","severity":1,"message":"842","line":339,"column":70,"nodeType":"839","messageId":"843","endLine":339,"endColumn":78},{"ruleId":"841","severity":1,"message":"842","line":466,"column":65,"nodeType":"839","messageId":"843","endLine":466,"endColumn":73},{"ruleId":"841","severity":1,"message":"842","line":470,"column":66,"nodeType":"839","messageId":"843","endLine":470,"endColumn":74},{"ruleId":"841","severity":1,"message":"842","line":473,"column":66,"nodeType":"839","messageId":"843","endLine":473,"endColumn":74},{"ruleId":"841","severity":1,"message":"842","line":523,"column":80,"nodeType":"839","messageId":"843","endLine":523,"endColumn":88},{"ruleId":"841","severity":1,"message":"842","line":527,"column":65,"nodeType":"839","messageId":"843","endLine":527,"endColumn":73},{"ruleId":"841","severity":1,"message":"842","line":528,"column":74,"nodeType":"839","messageId":"843","endLine":528,"endColumn":82},{"ruleId":"841","severity":1,"message":"842","line":537,"column":68,"nodeType":"839","messageId":"843","endLine":537,"endColumn":76},{"ruleId":"841","severity":1,"message":"842","line":548,"column":81,"nodeType":"839","messageId":"843","endLine":548,"endColumn":89},{"ruleId":"841","severity":1,"message":"842","line":738,"column":70,"nodeType":"839","messageId":"843","endLine":738,"endColumn":78},{"ruleId":"772","severity":1,"message":"846","line":776,"column":45,"nodeType":"774","messageId":"775","endLine":776,"endColumn":59},{"ruleId":"841","severity":1,"message":"842","line":779,"column":62,"nodeType":"839","messageId":"843","endLine":779,"endColumn":70},{"ruleId":"841","severity":1,"message":"842","line":787,"column":63,"nodeType":"839","messageId":"843","endLine":787,"endColumn":71},{"ruleId":"841","severity":1,"message":"842","line":800,"column":81,"nodeType":"839","messageId":"843","endLine":800,"endColumn":89},{"ruleId":"776","severity":1,"message":"847","line":1433,"column":8,"nodeType":"778","endLine":1433,"endColumn":36,"suggestions":"848"},{"ruleId":"841","severity":1,"message":"842","line":1597,"column":37,"nodeType":"839","messageId":"843","endLine":1597,"endColumn":45},{"ruleId":"841","severity":1,"message":"842","line":1633,"column":38,"nodeType":"839","messageId":"843","endLine":1633,"endColumn":46},{"ruleId":"841","severity":1,"message":"842","line":1662,"column":33,"nodeType":"839","messageId":"843","endLine":1662,"endColumn":41},{"ruleId":"841","severity":1,"message":"842","line":1819,"column":37,"nodeType":"839","messageId":"843","endLine":1819,"endColumn":45},{"ruleId":"841","severity":1,"message":"842","line":1854,"column":45,"nodeType":"839","messageId":"843","endLine":1854,"endColumn":53},{"ruleId":"841","severity":1,"message":"842","line":1873,"column":33,"nodeType":"839","messageId":"843","endLine":1873,"endColumn":41},{"ruleId":"849","severity":1,"message":"850","line":2012,"column":17,"nodeType":"774","messageId":"851","endLine":2012,"endColumn":23},{"ruleId":"841","severity":1,"message":"842","line":2034,"column":40,"nodeType":"839","messageId":"843","endLine":2034,"endColumn":48},{"ruleId":"841","severity":1,"message":"842","line":2045,"column":63,"nodeType":"839","messageId":"843","endLine":2045,"endColumn":71},{"ruleId":"841","severity":1,"message":"842","line":2098,"column":33,"nodeType":"839","messageId":"843","endLine":2098,"endColumn":41},{"ruleId":"849","severity":1,"message":"850","line":2208,"column":17,"nodeType":"774","messageId":"851","endLine":2208,"endColumn":23},{"ruleId":"852","severity":1,"message":"853","line":2346,"column":45,"nodeType":"854","endLine":2346,"endColumn":116},{"ruleId":"852","severity":1,"message":"853","line":2350,"column":45,"nodeType":"854","endLine":2350,"endColumn":114},{"ruleId":"852","severity":1,"message":"853","line":2363,"column":45,"nodeType":"854","endLine":2363,"endColumn":116},{"ruleId":"852","severity":1,"message":"853","line":2367,"column":45,"nodeType":"854","endLine":2367,"endColumn":116},{"ruleId":"855","replacedBy":"856"},{"ruleId":"857","replacedBy":"858"},{"ruleId":"776","severity":1,"message":"809","line":141,"column":15,"nodeType":"810","endLine":205,"endColumn":6},{"ruleId":"776","severity":1,"message":"859","line":205,"column":7,"nodeType":"778","endLine":205,"endColumn":9,"suggestions":"860"},{"ruleId":"776","severity":1,"message":"809","line":207,"column":16,"nodeType":"810","endLine":253,"endColumn":6},{"ruleId":"776","severity":1,"message":"861","line":253,"column":7,"nodeType":"778","endLine":253,"endColumn":19,"suggestions":"862"},{"ruleId":"776","severity":1,"message":"861","line":304,"column":10,"nodeType":"778","endLine":304,"endColumn":12,"suggestions":"863"},{"ruleId":"772","severity":1,"message":"864","line":424,"column":27,"nodeType":"774","messageId":"775","endLine":424,"endColumn":29},{"ruleId":"786","severity":1,"message":"865","line":758,"column":458,"nodeType":"788","messageId":"789","endLine":758,"endColumn":460},{"ruleId":"786","severity":1,"message":"865","line":758,"column":610,"nodeType":"788","messageId":"789","endLine":758,"endColumn":612},{"ruleId":"776","severity":1,"message":"809","line":76,"column":15,"nodeType":"810","endLine":228,"endColumn":6},{"ruleId":"776","severity":1,"message":"866","line":228,"column":7,"nodeType":"778","endLine":228,"endColumn":16,"suggestions":"867"},{"ruleId":"776","severity":1,"message":"809","line":230,"column":15,"nodeType":"810","endLine":232,"endColumn":6},{"ruleId":"776","severity":1,"message":"809","line":52,"column":15,"nodeType":"810","endLine":126,"endColumn":6},{"ruleId":"776","severity":1,"message":"868","line":126,"column":7,"nodeType":"778","endLine":126,"endColumn":9,"suggestions":"869"},{"ruleId":"776","severity":1,"message":"809","line":130,"column":15,"nodeType":"810","endLine":218,"endColumn":6},{"ruleId":"776","severity":1,"message":"870","line":218,"column":7,"nodeType":"778","endLine":218,"endColumn":126,"suggestions":"871"},{"ruleId":"849","severity":1,"message":"872","line":73,"column":31,"nodeType":"774","messageId":"851","endLine":73,"endColumn":36},{"ruleId":"849","severity":1,"message":"873","line":74,"column":31,"nodeType":"774","messageId":"851","endLine":74,"endColumn":43},{"ruleId":"849","severity":1,"message":"874","line":76,"column":31,"nodeType":"774","messageId":"851","endLine":76,"endColumn":34},{"ruleId":"875","severity":1,"message":"876","line":158,"column":31,"nodeType":"774","messageId":"877","endLine":158,"endColumn":34},{"ruleId":"875","severity":1,"message":"876","line":160,"column":31,"nodeType":"774","messageId":"877","endLine":160,"endColumn":34},{"ruleId":"875","severity":1,"message":"876","line":163,"column":39,"nodeType":"774","messageId":"877","endLine":163,"endColumn":42},{"ruleId":"849","severity":1,"message":"872","line":165,"column":33,"nodeType":"774","messageId":"851","endLine":165,"endColumn":38},{"ruleId":"849","severity":1,"message":"873","line":166,"column":33,"nodeType":"774","messageId":"851","endLine":166,"endColumn":45},{"ruleId":"772","severity":1,"message":"878","line":351,"column":11,"nodeType":"774","messageId":"775","endLine":351,"endColumn":29},{"ruleId":"776","severity":1,"message":"809","line":140,"column":15,"nodeType":"810","endLine":204,"endColumn":6},{"ruleId":"776","severity":1,"message":"859","line":204,"column":7,"nodeType":"778","endLine":204,"endColumn":9,"suggestions":"879"},{"ruleId":"776","severity":1,"message":"809","line":206,"column":16,"nodeType":"810","endLine":252,"endColumn":6},{"ruleId":"776","severity":1,"message":"861","line":252,"column":7,"nodeType":"778","endLine":252,"endColumn":19,"suggestions":"880"},{"ruleId":"776","severity":1,"message":"861","line":303,"column":10,"nodeType":"778","endLine":303,"endColumn":12,"suggestions":"881"},{"ruleId":"772","severity":1,"message":"882","line":3,"column":8,"nodeType":"774","messageId":"775","endLine":3,"endColumn":14},{"ruleId":"883","severity":1,"message":"884","line":35,"column":135,"nodeType":"885","messageId":"886","endLine":35,"endColumn":150},{"ruleId":"772","severity":1,"message":"882","line":3,"column":8,"nodeType":"774","messageId":"775","endLine":3,"endColumn":14},{"ruleId":"772","severity":1,"message":"887","line":4,"column":10,"nodeType":"774","messageId":"775","endLine":4,"endColumn":14},{"ruleId":"772","severity":1,"message":"888","line":7,"column":8,"nodeType":"774","messageId":"775","endLine":7,"endColumn":28},{"ruleId":"772","severity":1,"message":"889","line":1,"column":17,"nodeType":"774","messageId":"775","endLine":1,"endColumn":25},{"ruleId":"772","severity":1,"message":"890","line":1,"column":27,"nodeType":"774","messageId":"775","endLine":1,"endColumn":36},{"ruleId":"772","severity":1,"message":"878","line":159,"column":11,"nodeType":"774","messageId":"775","endLine":159,"endColumn":29},{"ruleId":"772","severity":1,"message":"887","line":3,"column":10,"nodeType":"774","messageId":"775","endLine":3,"endColumn":14},{"ruleId":"772","severity":1,"message":"887","line":3,"column":10,"nodeType":"774","messageId":"775","endLine":3,"endColumn":14},{"ruleId":"772","severity":1,"message":"891","line":13,"column":10,"nodeType":"774","messageId":"775","endLine":13,"endColumn":27},{"ruleId":"772","severity":1,"message":"892","line":48,"column":24,"nodeType":"774","messageId":"775","endLine":48,"endColumn":37},{"ruleId":"772","severity":1,"message":"893","line":53,"column":12,"nodeType":"774","messageId":"775","endLine":53,"endColumn":24},{"ruleId":"772","severity":1,"message":"894","line":53,"column":26,"nodeType":"774","messageId":"775","endLine":53,"endColumn":41},{"ruleId":"772","severity":1,"message":"895","line":54,"column":12,"nodeType":"774","messageId":"775","endLine":54,"endColumn":17},{"ruleId":"776","severity":1,"message":"809","line":121,"column":15,"nodeType":"810","endLine":300,"endColumn":6},{"ruleId":"776","severity":1,"message":"896","line":300,"column":8,"nodeType":"778","endLine":300,"endColumn":20,"suggestions":"897"},"no-unused-vars","'IsoCtrl' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentUser' and 'secureStorage'. Either include them or remove the dependency array.","ArrayExpression",["898"],"React Hook useEffect has a missing dependency: 'currentUser'. Either include it or remove the dependency array.",["899"],"React Hook useEffect has missing dependencies: 'history' and 'secureStorage'. Either include them or remove the dependency array.",["900"],"React Hook useEffect has missing dependencies: 'currentUser', 'secureStorage', and 'updateData'. Either include them or remove the dependency array. You can also do a functional update 'setUpdateData(u => ...)' if you only need 'updateData' in the 'setUpdateData' call.",["901"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator",["902"],"React Hook useEffect has a missing dependency: 'secureStorage'. Either include it or remove the dependency array.",["903"],["904"],["905"],["906"],["907"],["908"],["909"],["910"],["911"],["912"],["913"],["914"],["915"],"'setNotModelledWeight' is assigned a value but never used.","'setTotalIsocontrolWeight' is assigned a value but never used.",["916"],["917"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["918"],"'isocontrolWeightsComponent' is assigned a value but never used.",["919"],["920"],["921"],["922"],["923"],["924"],"'saveBtn' is assigned a value but never used.",["925"],"React Hook useEffect has missing dependencies: 'currentUser', 'saveChanges', and 'secureStorage'. Either include them or remove the dependency array.",["926"],["927"],["928"],["929"],"'editCustomBtn' is assigned a value but never used.","'isoControlBtn' is assigned a value but never used.","'isoControlNotModBtn' is assigned a value but never used.","'uploadBOMBtn' is assigned a value but never used.","'isoControlFullBtn' is assigned a value but never used.","'isoControlEstimatedBtn' is assigned a value but never used.","'isoControllLineIdGroupBtn' is assigned a value but never used.","'Graph' is defined but never used.","'saveAs' is defined but never used.","'Chart' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'sumEstGraph', 'sumEst'.","FunctionExpression","unsafeRefs","array-callback-return","Array.prototype.map() expects a return value from function.","expectedInside","Function declared in a loop contains unsafe references to variable(s) 'sumRealGraph', 'sumReal'.","Function declared in a loop contains unsafe references to variable(s) 'sumForcGraph', 'sumForc'.","'totalEstimated' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'colors', 'estimatedData', 'estimatedMaterialData', 'estimatedProgressData', 'forecastData', 'materialsList', 'realData', 'realProgressData', 'realProgressWeightMatData', 'submitEstimatedForecast', 'submitWeight', and 'weeksYDiff'. Either include them or remove the dependency array.",["930"],"no-redeclare","'wscols' is already defined.","redeclared","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["931"],"no-negated-in-lhs",["932"],"React Hook useEffect has missing dependencies: 'handleClickCivil', 'handleClickElectrical', 'handleClickEquipments', 'handleClickHome', 'handleClickInstrument', 'handleClickIsotracker', and 'handleClickPiping'. Either include them or remove the dependency array.",["933"],"React Hook useEffect has missing dependencies: 'deleteNotification', 'markAsRead', and 'markAsUnread'. Either include them or remove the dependency array.",["934"],["935"],"'fn' is assigned a value but never used.","Unexpected mix of '&&' and '||'.","React Hook useEffect has missing dependencies: 'progress', 'progressIso', 'props.currentRole', and 'totalStock'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTotalStockTD' needs the current value of 'totalStock'.",["936"],"React Hook useEffect has missing dependencies: 'civilsProgress', 'civilsWeight', 'elecsProgress', 'elecsWeight', 'equisProgress', 'equisWeight', 'instsProgress', 'instsWeight', 'pipesProgress', 'pipesWeight', 'totalProgress', and 'totalWeight'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTotalWeight' needs the current value of 'pipesWeight'.",["937"],"React Hook useEffect has missing dependencies: 'civilsProgress', 'civilsProgressWidth', 'civilsWeight', 'elecsProgress', 'elecsProgressWidth', 'elecsWeight', 'equisProgress', 'equisProgressWidth', 'equisWeight', 'instsProgress', 'instsProgressWidth', 'instsWeight', 'pipesProgress', 'pipesProgressWidth', and 'pipesWeight'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setProgressButtons' needs the current value of 'pipesWeight'.",["938"],"'holds' is already defined.","'descriptions' is already defined.","'row' is already defined.","no-use-before-define","'row' was used before it was defined.","usedBeforeDefined","'rowSelectionFilter' is assigned a value but never used.",["939"],["940"],["941"],"'AlertF' is defined but never used.","no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","unexpected","'Link' is defined but never used.","'QtrackerNRBSpecPopUp' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'SettingsCellSharp' is defined but never used.","'setUpdateRows' is assigned a value but never used.","'progressData' is assigned a value but never used.","'setProgressData' is assigned a value but never used.","'cells' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'estimatedData', 'forecastData', and 'submitEstimatedForecastIFD'. Either include them or remove the dependency array.",["942"],{"desc":"943","fix":"944"},{"desc":"945","fix":"946"},{"desc":"947","fix":"948"},{"desc":"949","fix":"950"},{"desc":"947","fix":"951"},{"desc":"952","fix":"953"},{"desc":"943","fix":"954"},{"desc":"945","fix":"955"},{"desc":"947","fix":"956"},{"desc":"943","fix":"957"},{"desc":"945","fix":"958"},{"desc":"947","fix":"959"},{"desc":"943","fix":"960"},{"desc":"945","fix":"961"},{"desc":"947","fix":"962"},{"desc":"943","fix":"963"},{"desc":"945","fix":"964"},{"desc":"947","fix":"965"},{"desc":"966","fix":"967"},{"desc":"968","fix":"969"},{"desc":"970","fix":"971"},{"desc":"943","fix":"972"},{"desc":"947","fix":"973"},{"desc":"943","fix":"974"},{"desc":"968","fix":"975"},{"desc":"947","fix":"976"},{"desc":"952","fix":"977"},{"desc":"947","fix":"978"},{"desc":"979","fix":"980"},{"desc":"968","fix":"981"},{"desc":"947","fix":"982"},{"desc":"949","fix":"983"},{"desc":"984","fix":"985"},"no-global-assign","no-unsafe-negation",{"desc":"986","fix":"987"},{"desc":"988","fix":"989"},{"desc":"990","fix":"991"},{"desc":"992","fix":"993"},{"desc":"994","fix":"995"},{"desc":"996","fix":"997"},{"desc":"986","fix":"998"},{"desc":"988","fix":"999"},{"desc":"990","fix":"1000"},{"desc":"1001","fix":"1002"},"Update the dependencies array to be: [currentRole, currentUser, secureStorage]",{"range":"1003","text":"1004"},"Update the dependencies array to be: [currentUser]",{"range":"1005","text":"1006"},"Update the dependencies array to be: [history, secureStorage]",{"range":"1007","text":"1008"},"Update the dependencies array to be: [currentRole, currentUser, secureStorage, updateData]",{"range":"1009","text":"1010"},{"range":"1011","text":"1008"},"Update the dependencies array to be: [secureStorage]",{"range":"1012","text":"1013"},{"range":"1014","text":"1004"},{"range":"1015","text":"1006"},{"range":"1016","text":"1008"},{"range":"1017","text":"1004"},{"range":"1018","text":"1006"},{"range":"1019","text":"1008"},{"range":"1020","text":"1004"},{"range":"1021","text":"1006"},{"range":"1022","text":"1008"},{"range":"1023","text":"1004"},{"range":"1024","text":"1006"},{"range":"1025","text":"1008"},"Update the dependencies array to be: [currentRole, currentUser]",{"range":"1026","text":"1027"},"Update the dependencies array to be: [currentUser, updateData]",{"range":"1028","text":"1029"},"Update the dependencies array to be: [history]",{"range":"1030","text":"1031"},{"range":"1032","text":"1004"},{"range":"1033","text":"1008"},{"range":"1034","text":"1004"},{"range":"1035","text":"1029"},{"range":"1036","text":"1008"},{"range":"1037","text":"1013"},{"range":"1038","text":"1008"},"Update the dependencies array to be: [currentRole, currentUser, saveChanges, secureStorage]",{"range":"1039","text":"1040"},{"range":"1041","text":"1029"},{"range":"1042","text":"1008"},{"range":"1043","text":"1010"},"Update the dependencies array to be: [updateData, tab, usersType, estimatedMaterialData, estimatedData, forecastData, realData, estimatedProgressData, realProgressData, colors, submitEstimatedForecast, materialsList, realProgressWeightMatData, weeksYDiff, submitWeight]",{"range":"1044","text":"1045"},"Update the dependencies array to be: [handleClickCivil, handleClickElectrical, handleClickEquipments, handleClickHome, handleClickInstrument, handleClickIsotracker, handleClickPiping]",{"range":"1046","text":"1047"},"Update the dependencies array to be: [deleteNotification, markAsRead, markAsUnread, updateData]",{"range":"1048","text":"1049"},"Update the dependencies array to be: [deleteNotification, markAsRead, markAsUnread]",{"range":"1050","text":"1051"},"Update the dependencies array to be: [loading, progress, progressIso, props.currentRole, totalStock]",{"range":"1052","text":"1053"},"Update the dependencies array to be: [civilsProgress, civilsWeight, elecsProgress, elecsWeight, equisProgress, equisWeight, instsProgress, instsWeight, pipesProgress, pipesWeight, totalProgress, totalWeight]",{"range":"1054","text":"1055"},"Update the dependencies array to be: [totalProgressWidth, refresh, isoIsShown, progIsShown, pipeIsShown, equipIsShown, civIsShown, instIsShown, elecIsShown, pipesWeight, equisWeight, instsWeight, civilsWeight, elecsWeight, pipesProgress, equisProgress, civilsProgress, instsProgress, elecsProgress, pipesProgressWidth, equisProgressWidth, civilsProgressWidth, instsProgressWidth, elecsProgressWidth]",{"range":"1056","text":"1057"},{"range":"1058","text":"1047"},{"range":"1059","text":"1049"},{"range":"1060","text":"1051"},"Update the dependencies array to be: [estimatedData, forecastData, submitEstimatedForecastIFD, updateData]",{"range":"1061","text":"1062"},[2644,2657],"[currentRole, currentUser, secureStorage]",[3817,3819],"[currentUser]",[5359,5361],"[history, secureStorage]",[7104,7117],"[currentRole, currentUser, secureStorage, updateData]",[1667,1669],[2814,2816],"[secureStorage]",[2669,2682],[3849,3851],[4007,4009],[2773,2786],[3948,3950],[4106,4108],[1512,1525],[2040,2042],[3421,3423],[2664,2677],[3844,3846],[4002,4004],[4949,4962],"[currentRole, currentUser]",[6179,6191],"[currentUser, updateData]",[7205,7207],"[history]",[1315,1328],[4627,4629],[5982,5995],[7225,7237],[1687,1689],[2551,2553],[2787,2789],[4179,4192],"[currentRole, currentUser, saveChanges, secureStorage]",[5363,5375],[6118,6120],[10128,10141],[102705,102733],"[updateData, tab, usersType, estimatedMaterialData, estimatedData, forecastData, realData, estimatedProgressData, realProgressData, colors, submitEstimatedForecast, materialsList, realProgressWeightMatData, weeksYDiff, submitWeight]",[8103,8105],"[handleClickCivil, handleClickElectrical, handleClickEquipments, handleClickHome, handleClickInstrument, handleClickIsotracker, handleClickPiping]",[10765,10777],"[deleteNotification, markAsRead, markAsUnread, updateData]",[13704,13706],"[deleteNotification, markAsRead, markAsUnread]",[12622,12631],"[loading, progress, progressIso, props.currentRole, totalStock]",[5785,5787],"[civilsProgress, civilsWeight, elecsProgress, elecsWeight, equisProgress, equisWeight, instsProgress, instsWeight, pipesProgress, pipesWeight, totalProgress, totalWeight]",[14898,15017],"[totalProgressWidth, refresh, isoIsShown, progIsShown, pipeIsShown, equipIsShown, civIsShown, instIsShown, elecIsShown, pipesWeight, equisWeight, instsWeight, civilsWeight, elecsWeight, pipesProgress, equisProgress, civilsProgress, instsProgress, elecsProgress, pipesProgressWidth, equisProgressWidth, civilsProgressWidth, instsProgressWidth, elecsProgressWidth]",[8300,8302],[10970,10982],[13917,13919],[13053,13065],"[estimatedData, forecastData, submitEstimatedForecastIFD, updateData]"]