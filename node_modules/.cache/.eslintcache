[{"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\index.js":"1","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\App.js":"2","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\reportWebVitals.js":"3","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\register\\register.js":"4","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\instrumentation\\instrumentation.js":"5","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\isoCtrl\\isoCtrl.js":"6","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\equipments\\equipments.js":"7","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\civil\\civil.js":"8","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\changePassword\\changePassword.js":"9","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\navis\\navis.js":"10","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\home\\home.js":"11","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\piping\\piping.js":"12","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\progressCurve\\progressCurve.js":"13","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\welcomeLoginF\\welcomeLoginF.js":"14","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\pitrequests\\pitrequests.js":"15","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\isoCtrlF\\isoCtrlF.js":"16","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\electrical\\electrical.js":"17","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\sptracker\\sptracker.js":"18","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\pitRequestView\\pitRequestView.js":"19","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\EquipmentsNavBtns\\equipmentsNavBtns.js":"20","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navBar\\navBar.js":"21","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instrumentationEstimatedDataTable\\instrumentationEstimatedDataTable.js":"22","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\roleDropDown\\roleDropDown.js":"23","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\stateTable\\stateTable.js":"24","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instrumentationModelledDataTable\\instrumentationModelledDataTable.js":"25","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\alert\\alert.js":"26","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instrumentationTypesDataTable\\instrumentationTypesDataTable.js":"27","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navBtns\\navBtns.js":"28","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotInstrumentation\\progressPlotInstrumentation.js":"29","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportBtns\\reportBtns.js":"30","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\actionBtns\\actionBtns.js":"31","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\datatable\\datatable.js":"32","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instExcelEdit\\instExcelEdit.js":"33","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\dragAndDrop\\dragAndDrop.js":"34","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\myTrayBtn\\myTrayBtn.js":"35","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instExcel\\instExcel.js":"36","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\onHoldTable\\onHoldTable.js":"37","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\myTrayTable\\myTrayTable.js":"38","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\binTable\\binTable.js":"39","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\historyDataTable\\historyDataTable.js":"40","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\statusDataTable\\statusDataTable.js":"41","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\checkInTable\\checkInTable.js":"42","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\selectPag\\selectPag.js":"43","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\procInstTable\\procInstTable.js":"44","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\binBtn\\binBtn.js":"45","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportBoxBtns\\reportBoxBtns.js":"46","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\procInsBtn\\procInsBtn.js":"47","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportsBtn\\reportsBtn.js":"48","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressBtn\\progressBtn.js":"49","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\onHoldBtn\\onHoldBtn.js":"50","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\modelledBtn\\modelledBtn.js":"51","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\usersDataTable\\usersDataTable.js":"52","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipModelledDataTable\\equipModelledDataTable.js":"53","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlot\\progressPlot.js":"54","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\modelledDataTable\\modelledDataTable.js":"55","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotEquipments\\progressPlotEquipments.js":"56","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\issuedBtn\\issuedBtn.js":"57","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipTypesDataTable\\equipTypesDataTable.js":"58","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipEstimatedDataTable\\equipEstimatedDataTable.js":"59","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipExcelEdit\\equipExcelEdit.js":"60","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerKeyParams\\csptrackerKeyParams.js":"61","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipExcel\\equipExcel.js":"62","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerViewDataTable\\qtrackerViewDataTable.js":"63","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerRequestsDataTable\\csptrackerRequestsDataTable.js":"64","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\deleteUserConfPopUp\\deleteUserConfPopUp.js":"65","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\manageRolesPopUp\\manageRolesPopUp.js":"66","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadElectricalEstimatedPopUp\\uploadElectricalEstimatedPopUp.js":"67","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateBOMPopUp\\updateBOMPopUp.js":"68","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadPipesEstimatedPopUp\\uploadPipesEstimatedPopUp.js":"69","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadCivilModelledPopUp\\uploadCivilModelledPopUp.js":"70","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadElectricalModelledPopUp\\uploadElectricalModelledPopUp.js":"71","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadCivilEstimtedPopUp\\uploadCivilEstimtedPopUp.js":"72","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadInstrumentationModelledPopUp\\uploadInstrumentationModelledPopUp.js":"73","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadInstrumentationEstimatedPopUp\\uploadInstrumentationEstimatedPopUp.js":"74","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadEquisEstimatedPopUp\\uploadEquisEstimatedPopUp.js":"75","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadEquisModelledPopUp\\uploadEquisModelledPopUp.js":"76","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadReportPopUp\\uploadReportPopUp.js":"77","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRIDSSpecPopUp\\qtrackerNRIDSSpecPopUp.js":"78","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerRPSpecPopUp\\qtrackerRPSpecPopUp.js":"79","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRISpecPopUp\\qtrackerNRISpecPopUp.js":"80","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRBSpecPopUp\\qtrackerNRBSpecPopUp.js":"81","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNVNSpecPopUp\\qtrackerNVNSpecPopUp.js":"82","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNWCSpecPopUp\\qtrackerNWCSpecPopUp.js":"83","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\byPassPopUp\\byPassPopUp.js":"84","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\commentPopUp\\commentPopUp.js":"85","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\revisionPopUp\\revisionPopUp.js":"86","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadPopUp\\uploadPopUp.js":"87","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadProcInst\\uploadProcInst.js":"88","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\holdsPopUp\\holdsPopUp.js":"89","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\cancelRevPopUp\\cancelRevPopUp.js":"90","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\renamePopUp\\renamePopUp.js":"91","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\newRevPopUp\\newRevPopUp.js":"92","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateMassivePopUp\\updateMassivePopUp.js":"93","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\addUserPopUp\\addUserPopUp.js":"94","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\holdComment\\holdComment.js":"95","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\actionExtra\\actionExtra.js":"96","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\cancelIso\\cancelIso.js":"97","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\forceClaimPopUp\\forceClaimPopUp.js":"98","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerRequestPopUp\\csptrackerRequestPopUp.js":"99","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\elecExcelEdit\\elecExcelEdit.js":"100","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerDataTable\\csptrackerDataTable.js":"101","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\elecExcel\\elecExcel.js":"102","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\elecTypesDataTable\\elecTypesDataTable.js":"103","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\electricalModelledDataTable\\electricalModelledDataTable.js":"104","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\electricalEstimatedDataTable\\electricalEstimatedDataTable.js":"105","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progresPlotElecs\\progressPlotElecs.js":"106","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\byPassDataTable\\byPassDataTable.js":"107","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadBomIsocontrolPopUp\\uploadBomIsocontrolPopUp.js":"108","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlGroupLineIdDataTable\\isoControlGroupLineIdDataTable.js":"109","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlFullDataTable\\isoControlFullDataTable.js":"110","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlModelledDataTable\\isoControlModelledDataTable.js":"111","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlNotModelledDataTable\\isoControlNotModelledDataTable.js":"112","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\loadingScreen\\loadingScreen.js":"113","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\menuListPit\\menuListPit.js":"114","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\timeTrackDataTable\\timeTrackDataTable.js":"115","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotCurve\\progressPlotCurve.js":"116","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingTypesDataTable\\pipingTypesDataTable.js":"117","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotPiping\\progressPlotPiping.js":"118","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingExcelEdit\\pipingExcelEdit.js":"119","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingExcel\\pipingExcel.js":"120","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingEstimatedDataTable\\pipingEstimatedDataTable.js":"121","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\loadingScreen3D\\loadingScreen3D.js":"122","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\menuList\\menuList.js":"123","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navisTable\\navisTable.js":"124","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilExcelEdit\\civilExcelEdit.js":"125","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilTypesDataTable\\civilTypesDataTable.js":"126","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilModelledDataTable\\civilModelledDataTable.js":"127","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilExcel\\civilExcel.js":"128","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilEstimatedDataTable\\civilEstimatedDataTable.js":"129","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotCivils\\progressPlotCivils.js":"130","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateMassive\\updateMassive.js":"131","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadDrawingPopUp\\uploadDrawingPopUp.js":"132","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateDrawingPopUp\\updateDrawingPopUp.js":"133","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\editByPassPopUp\\editByPassPopUp.js":"134","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\acceptByPassPopUp\\acceptByPassPopUp.js":"135","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\deleteByPassPopUp\\deleteByPassPopUp.js":"136","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\byPassRejNACommentPopUp\\byPassRejNACommentPopUp.js":"137","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\menuListPitList\\menuListPitList.js":"138","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNVNPopUp\\qtrackerNVNPopUp.js":"139","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRIPopUp\\qtrackerNRIPopUp.js":"140","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerRRPopUp\\qtrackerRRPopUp.js":"141","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNWCPopUp\\qtrackerNWCPopUp.js":"142","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRBPopUp\\qtrackerNRBPopUp.js":"143","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRIDSPopUp\\qtrackerNRIDSPopUp.js":"144","C:\\xampp\\htdocs\\isotracker-react\\src\\index.js":"145","C:\\xampp\\htdocs\\isotracker-react\\src\\App.js":"146","C:\\xampp\\htdocs\\isotracker-react\\src\\reportWebVitals.js":"147","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\changePassword\\changePassword.js":"148","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\register\\register.js":"149","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\instrumentation\\instrumentation.js":"150","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\equipments\\equipments.js":"151","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\civil\\civil.js":"152","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\isoCtrl\\isoCtrl.js":"153","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\home\\home.js":"154","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\piping\\piping.js":"155","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\progressCurve\\progressCurve.js":"156","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\navis\\navis.js":"157","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\pitrequests\\pitrequests.js":"158","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\electrical\\electrical.js":"159","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\welcomeLoginF\\welcomeLoginF.js":"160","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\sptracker\\sptracker.js":"161","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\pitRequestView\\pitRequestView.js":"162","C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\isoCtrlF\\isoCtrlF.js":"163","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\roleDropDown\\roleDropDown.js":"164","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\alert\\alert.js":"165","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\instrumentationEstimatedDataTable\\instrumentationEstimatedDataTable.js":"166","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\instrumentationModelledDataTable\\instrumentationModelledDataTable.js":"167","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\navBar\\navBar.js":"168","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progressPlotInstrumentation\\progressPlotInstrumentation.js":"169","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\instrumentationTypesDataTable\\instrumentationTypesDataTable.js":"170","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\instExcel\\instExcel.js":"171","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\instExcelEdit\\instExcelEdit.js":"172","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\equipModelledDataTable\\equipModelledDataTable.js":"173","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\equipEstimatedDataTable\\equipEstimatedDataTable.js":"174","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\equipTypesDataTable\\equipTypesDataTable.js":"175","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progressPlotCivils\\progressPlotCivils.js":"176","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\EquipmentsNavBtns\\equipmentsNavBtns.js":"177","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\equipExcelEdit\\equipExcelEdit.js":"178","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progressPlotEquipments\\progressPlotEquipments.js":"179","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\civilEstimatedDataTable\\civilEstimatedDataTable.js":"180","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\civilExcel\\civilExcel.js":"181","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\equipExcel\\equipExcel.js":"182","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\civilExcelEdit\\civilExcelEdit.js":"183","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\byPassDataTable\\byPassDataTable.js":"184","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadBomIsocontrolPopUp\\uploadBomIsocontrolPopUp.js":"185","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\issuedDataTable\\issuedDataTable.js":"186","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\civilTypesDataTable\\civilTypesDataTable.js":"187","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\isoControlGroupLineIdDataTable\\isoControlGroupLineIdDataTable.js":"188","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\civilModelledDataTable\\civilModelledDataTable.js":"189","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\isoControlFullDataTable\\isoControlFullDataTable.js":"190","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\isoControlNotModelledDataTable\\isoControlNotModelledDataTable.js":"191","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\isoControlModelledDataTable\\isoControlModelledDataTable.js":"192","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\loadingScreen\\loadingScreen.js":"193","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\modelledDataTable\\modelledDataTable.js":"194","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progressBtn\\progressBtn.js":"195","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\modelledBtn\\modelledBtn.js":"196","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\usersDataTable\\usersDataTable.js":"197","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\reportBoxBtns\\reportBoxBtns.js":"198","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\timeTrackDataTable\\timeTrackDataTable.js":"199","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progressPlot\\progressPlot.js":"200","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\procInstTable\\procInstTable.js":"201","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\statusDataTable\\statusDataTable.js":"202","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\historyDataTable\\historyDataTable.js":"203","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\onHoldTable\\onHoldTable.js":"204","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\binTable\\binTable.js":"205","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\myTrayBtn\\myTrayBtn.js":"206","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\checkInTable\\checkInTable.js":"207","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\myTrayTable\\myTrayTable.js":"208","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\actionBtns\\actionBtns.js":"209","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\dragAndDrop\\dragAndDrop.js":"210","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\navBtns\\navBtns.js":"211","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\reportBtns\\reportBtns.js":"212","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\stateTable\\stateTable.js":"213","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\datatable\\datatable.js":"214","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\csptrackerKeyParams\\csptrackerKeyParams.js":"215","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerViewDataTable\\qtrackerViewDataTable.js":"216","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\cancelRevPopUp\\cancelRevPopUp.js":"217","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\holdsPopUp\\holdsPopUp.js":"218","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\commentPopUp\\commentPopUp.js":"219","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\renamePopUp\\renamePopUp.js":"220","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\deleteByPassPopUp\\deleteByPassPopUp.js":"221","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\byPassRejNACommentPopUp\\byPassRejNACommentPopUp.js":"222","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\acceptByPassPopUp\\acceptByPassPopUp.js":"223","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\editByPassPopUp\\editByPassPopUp.js":"224","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\newRevPopUp\\newRevPopUp.js":"225","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\addUserPopUp\\addUserPopUp.js":"226","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\updateMassivePopUp\\updateMassivePopUp.js":"227","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\holdComment\\holdComment.js":"228","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\cancelIso\\cancelIso.js":"229","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\actionExtra\\actionExtra.js":"230","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNRISpecPopUp\\qtrackerNRISpecPopUp.js":"231","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerRPSpecPopUp\\qtrackerRPSpecPopUp.js":"232","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNRBSpecPopUp\\qtrackerNRBSpecPopUp.js":"233","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNRIDSSpecPopUp\\qtrackerNRIDSSpecPopUp.js":"234","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNVNSpecPopUp\\qtrackerNVNSpecPopUp.js":"235","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNWCSpecPopUp\\qtrackerNWCSpecPopUp.js":"236","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\forceClaimPopUp\\forceClaimPopUp.js":"237","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\revisionPopUp\\revisionPopUp.js":"238","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\byPassPopUp\\byPassPopUp.js":"239","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadProcInst\\uploadProcInst.js":"240","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadPopUp\\uploadPopUp.js":"241","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\updateMassive\\updateMassive.js":"242","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadReportPopUp\\uploadReportPopUp.js":"243","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\updateBOMPopUp\\updateBOMPopUp.js":"244","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadElectricalEstimatedPopUp\\uploadElectricalEstimatedPopUp.js":"245","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadPipesEstimatedPopUp\\uploadPipesEstimatedPopUp.js":"246","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadElectricalModelledPopUp\\uploadElectricalModelledPopUp.js":"247","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadCivilModelledPopUp\\uploadCivilModelledPopUp.js":"248","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadCivilEstimtedPopUp\\uploadCivilEstimtedPopUp.js":"249","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadInstrumentationModelledPopUp\\uploadInstrumentationModelledPopUp.js":"250","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadInstrumentationEstimatedPopUp\\uploadInstrumentationEstimatedPopUp.js":"251","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadEquisModelledPopUp\\uploadEquisModelledPopUp.js":"252","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadEquisEstimatedPopUp\\uploadEquisEstimatedPopUp.js":"253","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\deleteUserConfPopUp\\deleteUserConfPopUp.js":"254","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\manageRolesPopUp\\manageRolesPopUp.js":"255","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\csptrackerRequestsDataTable\\csptrackerRequestsDataTable.js":"256","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\csptrackerRequestPopUp\\csptrackerRequestPopUp.js":"257","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\csptrackerDataTable\\csptrackerDataTable.js":"258","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\elecExcelEdit\\elecExcelEdit.js":"259","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\elecExcel\\elecExcel.js":"260","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\elecTypesDataTable\\elecTypesDataTable.js":"261","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progresPlotElecs\\progressPlotElecs.js":"262","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\electricalModelledDataTable\\electricalModelledDataTable.js":"263","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\electricalEstimatedDataTable\\electricalEstimatedDataTable.js":"264","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\navisTable\\navisTable.js":"265","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\menuListPit\\menuListPit.js":"266","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progressPlotCurve\\progressPlotCurve.js":"267","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\pipingExcelEdit\\pipingExcelEdit.js":"268","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\pipingExcel\\pipingExcel.js":"269","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\pipingTypesDataTable\\pipingTypesDataTable.js":"270","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progressPlotPiping\\progressPlotPiping.js":"271","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\pipingEstimatedDataTable\\pipingEstimatedDataTable.js":"272","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\loadingScreen3D\\loadingScreen3D.js":"273","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\menuList\\menuList.js":"274","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\reportsBtn\\reportsBtn.js":"275","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\issuedBtn\\issuedBtn.js":"276","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\procInsBtn\\procInsBtn.js":"277","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\binBtn\\binBtn.js":"278","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\onHoldBtn\\onHoldBtn.js":"279","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\selectPag\\selectPag.js":"280","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\updateDrawingPopUp\\updateDrawingPopUp.js":"281","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadDrawingPopUp\\uploadDrawingPopUp.js":"282","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\menuListPitList\\menuListPitList.js":"283","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNRIDSPopUp\\qtrackerNRIDSPopUp.js":"284","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerRRPopUp\\qtrackerRRPopUp.js":"285","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNVNPopUp\\qtrackerNVNPopUp.js":"286","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNRBPopUp\\qtrackerNRBPopUp.js":"287","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNRIPopUp\\qtrackerNRIPopUp.js":"288","C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNWCPopUp\\qtrackerNWCPopUp.js":"289"},{"size":756,"mtime":1658913994690,"results":"290","hashOfConfig":"291"},{"size":2913,"mtime":1658913994128,"results":"292","hashOfConfig":"291"},{"size":375,"mtime":1658913994795,"results":"293","hashOfConfig":"291"},{"size":3627,"mtime":1658913994775,"results":"294","hashOfConfig":"291"},{"size":13132,"mtime":1658913994729,"results":"295","hashOfConfig":"291"},{"size":71984,"mtime":1658913994742,"results":"296","hashOfConfig":"291"},{"size":12844,"mtime":1658913994715,"results":"297","hashOfConfig":"291"},{"size":12796,"mtime":1658913994708,"results":"298","hashOfConfig":"291"},{"size":8364,"mtime":1658913994703,"results":"299","hashOfConfig":"291"},{"size":2655,"mtime":1658913994755,"results":"300","hashOfConfig":"291"},{"size":3864,"mtime":1658913994724,"results":"301","hashOfConfig":"291"},{"size":12785,"mtime":1658913994762,"results":"302","hashOfConfig":"291"},{"size":4725,"mtime":1658913994771,"results":"303","hashOfConfig":"291"},{"size":6028,"mtime":1658990224406,"results":"304","hashOfConfig":"291"},{"size":3875,"mtime":1658913994767,"results":"305","hashOfConfig":"291"},{"size":101373,"mtime":1658992840217,"results":"306","hashOfConfig":"291"},{"size":12853,"mtime":1658913994711,"results":"307","hashOfConfig":"291"},{"size":28148,"mtime":1658913994782,"results":"308","hashOfConfig":"291"},{"size":23748,"mtime":1658913994765,"results":"309","hashOfConfig":"291"},{"size":7059,"mtime":1658913994291,"results":"310","hashOfConfig":"291"},{"size":32431,"mtime":1658913994508,"results":"311","hashOfConfig":"291"},{"size":7249,"mtime":1658913994445,"results":"312","hashOfConfig":"291"},{"size":3174,"mtime":1658913994621,"results":"313","hashOfConfig":"291"},{"size":19368,"mtime":1658995529797,"results":"314","hashOfConfig":"291"},{"size":6764,"mtime":1658990125367,"results":"315","hashOfConfig":"291"},{"size":5803,"mtime":1658992117883,"results":"316","hashOfConfig":"291"},{"size":5361,"mtime":1658990128119,"results":"317","hashOfConfig":"291"},{"size":6393,"mtime":1658913994511,"results":"318","hashOfConfig":"291"},{"size":1536,"mtime":1658913994555,"results":"319","hashOfConfig":"291"},{"size":1969,"mtime":1658913994611,"results":"320","hashOfConfig":"291"},{"size":17214,"mtime":1658913994298,"results":"321","hashOfConfig":"291"},{"size":66373,"mtime":1659001330543,"results":"322","hashOfConfig":"291"},{"size":4507,"mtime":1658913994443,"results":"323","hashOfConfig":"291"},{"size":10307,"mtime":1658913994399,"results":"324","hashOfConfig":"291"},{"size":1417,"mtime":1658913994495,"results":"325","hashOfConfig":"291"},{"size":8348,"mtime":1658913994441,"results":"326","hashOfConfig":"291"},{"size":25348,"mtime":1658990177833,"results":"327","hashOfConfig":"291"},{"size":56657,"mtime":1658990169086,"results":"328","hashOfConfig":"291"},{"size":14674,"mtime":1658913994316,"results":"329","hashOfConfig":"291"},{"size":11273,"mtime":1658913994434,"results":"330","hashOfConfig":"291"},{"size":14390,"mtime":1658913994630,"results":"331","hashOfConfig":"291"},{"size":5869,"mtime":1658913994339,"results":"332","hashOfConfig":"291"},{"size":1960,"mtime":1658913994621,"results":"333","hashOfConfig":"291"},{"size":18610,"mtime":1659440117983,"results":"334","hashOfConfig":"291"},{"size":1206,"mtime":1658913994312,"results":"335","hashOfConfig":"291"},{"size":5513,"mtime":1658913994604,"results":"336","hashOfConfig":"291"},{"size":1846,"mtime":1658913994538,"results":"337","hashOfConfig":"291"},{"size":1208,"mtime":1658913994613,"results":"338","hashOfConfig":"291"},{"size":1201,"mtime":1658913994546,"results":"339","hashOfConfig":"291"},{"size":1191,"mtime":1658913994519,"results":"340","hashOfConfig":"291"},{"size":1191,"mtime":1658913994490,"results":"341","hashOfConfig":"291"},{"size":18886,"mtime":1658990202784,"results":"342","hashOfConfig":"291"},{"size":6775,"mtime":1658990114648,"results":"343","hashOfConfig":"291"},{"size":1521,"mtime":1658913994547,"results":"344","hashOfConfig":"291"},{"size":8005,"mtime":1658990148984,"results":"345","hashOfConfig":"291"},{"size":1532,"mtime":1658913994553,"results":"346","hashOfConfig":"291"},{"size":1195,"mtime":1658913994463,"results":"347","hashOfConfig":"291"},{"size":5350,"mtime":1658990121469,"results":"348","hashOfConfig":"291"},{"size":7263,"mtime":1658913994416,"results":"349","hashOfConfig":"291"},{"size":4555,"mtime":1658913994422,"results":"350","hashOfConfig":"291"},{"size":15129,"mtime":1658913994371,"results":"351","hashOfConfig":"291"},{"size":8353,"mtime":1658913994420,"results":"352","hashOfConfig":"291"},{"size":86877,"mtime":1658990405923,"results":"353","hashOfConfig":"291"},{"size":15179,"mtime":1658913994380,"results":"354","hashOfConfig":"291"},{"size":1901,"mtime":1658913994395,"results":"355","hashOfConfig":"291"},{"size":19284,"mtime":1658990142352,"results":"356","hashOfConfig":"291"},{"size":4210,"mtime":1658913994650,"results":"357","hashOfConfig":"291"},{"size":3104,"mtime":1658913994632,"results":"358","hashOfConfig":"291"},{"size":4202,"mtime":1658913994665,"results":"359","hashOfConfig":"291"},{"size":4195,"mtime":1658913994646,"results":"360","hashOfConfig":"291"},{"size":4206,"mtime":1658913994652,"results":"361","hashOfConfig":"291"},{"size":4199,"mtime":1658913994644,"results":"362","hashOfConfig":"291"},{"size":4248,"mtime":1658913994663,"results":"363","hashOfConfig":"291"},{"size":4219,"mtime":1658913994661,"results":"364","hashOfConfig":"291"},{"size":4194,"mtime":1658913994656,"results":"365","hashOfConfig":"291"},{"size":4279,"mtime":1658913994658,"results":"366","hashOfConfig":"291"},{"size":3773,"mtime":1658913994679,"results":"367","hashOfConfig":"291"},{"size":3340,"mtime":1658913994571,"results":"368","hashOfConfig":"291"},{"size":4465,"mtime":1658913994596,"results":"369","hashOfConfig":"291"},{"size":5786,"mtime":1658913994580,"results":"370","hashOfConfig":"291"},{"size":5786,"mtime":1658913994567,"results":"371","hashOfConfig":"291"},{"size":5786,"mtime":1658913994584,"results":"372","hashOfConfig":"291"},{"size":5825,"mtime":1658913994592,"results":"373","hashOfConfig":"291"},{"size":3793,"mtime":1658913994323,"results":"374","hashOfConfig":"291"},{"size":2047,"mtime":1658913994364,"results":"375","hashOfConfig":"291"},{"size":13904,"mtime":1658913994617,"results":"376","hashOfConfig":"291"},{"size":2379,"mtime":1658913994670,"results":"377","hashOfConfig":"291"},{"size":9926,"mtime":1658913994675,"results":"378","hashOfConfig":"291"},{"size":2130,"mtime":1658913994439,"results":"379","hashOfConfig":"291"},{"size":1909,"mtime":1658991678540,"results":"380","hashOfConfig":"291"},{"size":1966,"mtime":1658913994602,"results":"381","hashOfConfig":"291"},{"size":2111,"mtime":1658913994517,"results":"382","hashOfConfig":"291"},{"size":2279,"mtime":1658913994640,"results":"383","hashOfConfig":"291"},{"size":13825,"mtime":1658913994306,"results":"384","hashOfConfig":"291"},{"size":1569,"mtime":1658913994437,"results":"385","hashOfConfig":"291"},{"size":5495,"mtime":1658913994301,"results":"386","hashOfConfig":"291"},{"size":3507,"mtime":1658913994330,"results":"387","hashOfConfig":"291"},{"size":6961,"mtime":1658913994430,"results":"388","hashOfConfig":"291"},{"size":5844,"mtime":1658913994375,"results":"389","hashOfConfig":"291"},{"size":4499,"mtime":1658913994406,"results":"390","hashOfConfig":"291"},{"size":54142,"mtime":1658990100289,"results":"391","hashOfConfig":"291"},{"size":8323,"mtime":1658913994404,"results":"392","hashOfConfig":"291"},{"size":5332,"mtime":1658990112504,"results":"393","hashOfConfig":"291"},{"size":6785,"mtime":1658913994414,"results":"394","hashOfConfig":"291"},{"size":7226,"mtime":1658913994411,"results":"395","hashOfConfig":"291"},{"size":1526,"mtime":1658913994542,"results":"396","hashOfConfig":"291"},{"size":16489,"mtime":1658913994319,"results":"397","hashOfConfig":"291"},{"size":3106,"mtime":1658913994643,"results":"398","hashOfConfig":"291"},{"size":5699,"mtime":1658913994456,"results":"399","hashOfConfig":"291"},{"size":16540,"mtime":1658990131364,"results":"400","hashOfConfig":"291"},{"size":11678,"mtime":1658990134365,"results":"401","hashOfConfig":"291"},{"size":10543,"mtime":1658990136406,"results":"402","hashOfConfig":"291"},{"size":797,"mtime":1658913994467,"results":"403","hashOfConfig":"291"},{"size":831,"mtime":1658913994486,"results":"404","hashOfConfig":"291"},{"size":7172,"mtime":1658990193864,"results":"405","hashOfConfig":"291"},{"size":5608,"mtime":1658913994551,"results":"406","hashOfConfig":"291"},{"size":5334,"mtime":1658913994535,"results":"407","hashOfConfig":"291"},{"size":1527,"mtime":1658913994557,"results":"408","hashOfConfig":"291"},{"size":4492,"mtime":1658913994533,"results":"409","hashOfConfig":"291"},{"size":3730,"mtime":1658913994530,"results":"410","hashOfConfig":"291"},{"size":5523,"mtime":1658990181120,"results":"411","hashOfConfig":"291"},{"size":748,"mtime":1658913994468,"results":"412","hashOfConfig":"291"},{"size":16241,"mtime":1658913994484,"results":"413","hashOfConfig":"291"},{"size":7332,"mtime":1658913994514,"results":"414","hashOfConfig":"291"},{"size":4494,"mtime":1658913994352,"results":"415","hashOfConfig":"291"},{"size":5330,"mtime":1658990091483,"results":"416","hashOfConfig":"291"},{"size":6753,"mtime":1658990087806,"results":"417","hashOfConfig":"291"},{"size":8308,"mtime":1658913994350,"results":"418","hashOfConfig":"291"},{"size":7301,"mtime":1658913994347,"results":"419","hashOfConfig":"291"},{"size":1528,"mtime":1658913994549,"results":"420","hashOfConfig":"291"},{"size":7187,"mtime":1658913994637,"results":"421","hashOfConfig":"291"},{"size":3916,"mtime":1658990197449,"results":"422","hashOfConfig":"291"},{"size":4706,"mtime":1658913994634,"results":"423","hashOfConfig":"291"},{"size":3644,"mtime":1658913994402,"results":"424","hashOfConfig":"291"},{"size":3000,"mtime":1658913994294,"results":"425","hashOfConfig":"291"},{"size":1862,"mtime":1658913994386,"results":"426","hashOfConfig":"291"},{"size":2901,"mtime":1658913994325,"results":"427","hashOfConfig":"291"},{"size":6760,"mtime":1658913994488,"results":"428","hashOfConfig":"291"},{"size":9053,"mtime":1658913994583,"results":"429","hashOfConfig":"291"},{"size":9115,"mtime":1658913994575,"results":"430","hashOfConfig":"291"},{"size":8377,"mtime":1658913994597,"results":"431","hashOfConfig":"291"},{"size":9375,"mtime":1658913994589,"results":"432","hashOfConfig":"291"},{"size":8944,"mtime":1658913994565,"results":"433","hashOfConfig":"291"},{"size":7276,"mtime":1658913994569,"results":"434","hashOfConfig":"291"},{"size":756,"mtime":1664462523377,"results":"435","hashOfConfig":"436"},{"size":2913,"mtime":1664462522908,"results":"437","hashOfConfig":"436"},{"size":375,"mtime":1664462523436,"results":"438","hashOfConfig":"436"},{"size":8364,"mtime":1664462523385,"results":"439","hashOfConfig":"436"},{"size":3627,"mtime":1664462523428,"results":"440","hashOfConfig":"436"},{"size":13132,"mtime":1664462523398,"results":"441","hashOfConfig":"436"},{"size":12844,"mtime":1664462523393,"results":"442","hashOfConfig":"436"},{"size":12796,"mtime":1664462523388,"results":"443","hashOfConfig":"436"},{"size":71984,"mtime":1664462523406,"results":"444","hashOfConfig":"436"},{"size":3864,"mtime":1664462523396,"results":"445","hashOfConfig":"436"},{"size":12785,"mtime":1664462523420,"results":"446","hashOfConfig":"436"},{"size":4725,"mtime":1664462523426,"results":"447","hashOfConfig":"436"},{"size":2655,"mtime":1664462523415,"results":"448","hashOfConfig":"436"},{"size":3875,"mtime":1664462523424,"results":"449","hashOfConfig":"436"},{"size":12853,"mtime":1664462523391,"results":"450","hashOfConfig":"436"},{"size":6028,"mtime":1664462523435,"results":"451","hashOfConfig":"436"},{"size":28148,"mtime":1664462523430,"results":"452","hashOfConfig":"436"},{"size":23748,"mtime":1664462523422,"results":"453","hashOfConfig":"436"},{"size":101373,"mtime":1664462523410,"results":"454","hashOfConfig":"436"},{"size":3174,"mtime":1664462523275,"results":"455","hashOfConfig":"436"},{"size":5803,"mtime":1664462523009,"results":"456","hashOfConfig":"436"},{"size":7249,"mtime":1664462523096,"results":"457","hashOfConfig":"436"},{"size":6764,"mtime":1664462523098,"results":"458","hashOfConfig":"436"},{"size":32431,"mtime":1664462523135,"results":"459","hashOfConfig":"436"},{"size":1536,"mtime":1664462523193,"results":"460","hashOfConfig":"436"},{"size":5361,"mtime":1664462523099,"results":"461","hashOfConfig":"436"},{"size":8348,"mtime":1664462523093,"results":"462","hashOfConfig":"436"},{"size":4507,"mtime":1664462523094,"results":"463","hashOfConfig":"436"},{"size":6775,"mtime":1664462523080,"results":"464","hashOfConfig":"436"},{"size":7263,"mtime":1664462523073,"results":"465","hashOfConfig":"436"},{"size":5350,"mtime":1664462523082,"results":"466","hashOfConfig":"436"},{"size":1528,"mtime":1664462523182,"results":"467","hashOfConfig":"436"},{"size":7059,"mtime":1664462522996,"results":"468","hashOfConfig":"436"},{"size":4555,"mtime":1664462523078,"results":"469","hashOfConfig":"436"},{"size":1532,"mtime":1664462523189,"results":"470","hashOfConfig":"436"},{"size":7301,"mtime":1664462523030,"results":"471","hashOfConfig":"436"},{"size":8308,"mtime":1664462523032,"results":"472","hashOfConfig":"436"},{"size":8353,"mtime":1664462523075,"results":"473","hashOfConfig":"436"},{"size":4494,"mtime":1664462523034,"results":"474","hashOfConfig":"436"},{"size":16489,"mtime":1664462523014,"results":"475","hashOfConfig":"436"},{"size":3106,"mtime":1664462523301,"results":"476","hashOfConfig":"436"},{"size":36850,"mtime":1664462523111,"results":"477","hashOfConfig":"436"},{"size":5330,"mtime":1664462523036,"results":"478","hashOfConfig":"436"},{"size":5699,"mtime":1664462523104,"results":"479","hashOfConfig":"436"},{"size":6753,"mtime":1664462523035,"results":"480","hashOfConfig":"436"},{"size":16540,"mtime":1664462523102,"results":"481","hashOfConfig":"436"},{"size":10543,"mtime":1664462523107,"results":"482","hashOfConfig":"436"},{"size":11678,"mtime":1664462523105,"results":"483","hashOfConfig":"436"},{"size":797,"mtime":1664462523113,"results":"484","hashOfConfig":"436"},{"size":8005,"mtime":1664462523127,"results":"485","hashOfConfig":"436"},{"size":1201,"mtime":1664462523177,"results":"486","hashOfConfig":"436"},{"size":1191,"mtime":1664462523126,"results":"487","hashOfConfig":"436"},{"size":18886,"mtime":1664462523376,"results":"488","hashOfConfig":"436"},{"size":5513,"mtime":1664462523261,"results":"489","hashOfConfig":"436"},{"size":7172,"mtime":1664462523284,"results":"490","hashOfConfig":"436"},{"size":1521,"mtime":1664462523180,"results":"491","hashOfConfig":"436"},{"size":18610,"mtime":1664462523163,"results":"492","hashOfConfig":"436"},{"size":14390,"mtime":1664462523282,"results":"493","hashOfConfig":"436"},{"size":11273,"mtime":1664462523088,"results":"494","hashOfConfig":"436"},{"size":25348,"mtime":1664462523146,"results":"495","hashOfConfig":"436"},{"size":14674,"mtime":1664462523012,"results":"496","hashOfConfig":"436"},{"size":1417,"mtime":1664462523130,"results":"497","hashOfConfig":"436"},{"size":5869,"mtime":1664462523026,"results":"498","hashOfConfig":"436"},{"size":56657,"mtime":1664462523132,"results":"499","hashOfConfig":"436"},{"size":17214,"mtime":1664462523002,"results":"500","hashOfConfig":"436"},{"size":10307,"mtime":1664462523060,"results":"501","hashOfConfig":"436"},{"size":6393,"mtime":1664462523136,"results":"502","hashOfConfig":"436"},{"size":1969,"mtime":1664462523269,"results":"503","hashOfConfig":"436"},{"size":19368,"mtime":1664462523279,"results":"504","hashOfConfig":"436"},{"size":66373,"mtime":1664462523053,"results":"505","hashOfConfig":"436"},{"size":15129,"mtime":1664462523045,"results":"506","hashOfConfig":"436"},{"size":86877,"mtime":1664462523257,"results":"507","hashOfConfig":"436"},{"size":1909,"mtime":1664462523022,"results":"508","hashOfConfig":"436"},{"size":2130,"mtime":1664462523091,"results":"509","hashOfConfig":"436"},{"size":2047,"mtime":1664462523041,"results":"510","hashOfConfig":"436"},{"size":1966,"mtime":1664462523259,"results":"511","hashOfConfig":"436"},{"size":1862,"mtime":1664462523055,"results":"512","hashOfConfig":"436"},{"size":2901,"mtime":1664462523018,"results":"513","hashOfConfig":"436"},{"size":3000,"mtime":1664462522998,"results":"514","hashOfConfig":"436"},{"size":3644,"mtime":1664462523063,"results":"515","hashOfConfig":"436"},{"size":2111,"mtime":1664462523140,"results":"516","hashOfConfig":"436"},{"size":13825,"mtime":1664462523007,"results":"517","hashOfConfig":"436"},{"size":2279,"mtime":1664462523298,"results":"518","hashOfConfig":"436"},{"size":1569,"mtime":1664462523089,"results":"519","hashOfConfig":"436"},{"size":3507,"mtime":1664462523020,"results":"520","hashOfConfig":"436"},{"size":5495,"mtime":1664462523004,"results":"521","hashOfConfig":"436"},{"size":5786,"mtime":1664462523211,"results":"522","hashOfConfig":"436"},{"size":4465,"mtime":1664462523249,"results":"523","hashOfConfig":"436"},{"size":5786,"mtime":1664462523201,"results":"524","hashOfConfig":"436"},{"size":3340,"mtime":1664462523205,"results":"525","hashOfConfig":"436"},{"size":5786,"mtime":1664462523219,"results":"526","hashOfConfig":"436"},{"size":5825,"mtime":1664462523227,"results":"527","hashOfConfig":"436"},{"size":6961,"mtime":1664462523085,"results":"528","hashOfConfig":"436"},{"size":13904,"mtime":1664462523273,"results":"529","hashOfConfig":"436"},{"size":3793,"mtime":1664462523017,"results":"530","hashOfConfig":"436"},{"size":9926,"mtime":1664462523359,"results":"531","hashOfConfig":"436"},{"size":2379,"mtime":1664462523352,"results":"532","hashOfConfig":"436"},{"size":7187,"mtime":1664462523290,"results":"533","hashOfConfig":"436"},{"size":3773,"mtime":1664462523361,"results":"534","hashOfConfig":"436"},{"size":3104,"mtime":1664462523286,"results":"535","hashOfConfig":"436"},{"size":4210,"mtime":1664462523315,"results":"536","hashOfConfig":"436"},{"size":4202,"mtime":1664462523342,"results":"537","hashOfConfig":"436"},{"size":4206,"mtime":1664462523322,"results":"538","hashOfConfig":"436"},{"size":4195,"mtime":1664462523307,"results":"539","hashOfConfig":"436"},{"size":4199,"mtime":1664462523306,"results":"540","hashOfConfig":"436"},{"size":4248,"mtime":1664462523341,"results":"541","hashOfConfig":"436"},{"size":4219,"mtime":1664462523332,"results":"542","hashOfConfig":"436"},{"size":4279,"mtime":1664462523330,"results":"543","hashOfConfig":"436"},{"size":4194,"mtime":1664462523324,"results":"544","hashOfConfig":"436"},{"size":1901,"mtime":1664462523058,"results":"545","hashOfConfig":"436"},{"size":19284,"mtime":1664462523120,"results":"546","hashOfConfig":"436"},{"size":15179,"mtime":1664462523051,"results":"547","hashOfConfig":"436"},{"size":5844,"mtime":1664462523048,"results":"548","hashOfConfig":"436"},{"size":54142,"mtime":1664462523044,"results":"549","hashOfConfig":"436"},{"size":4499,"mtime":1664462523066,"results":"550","hashOfConfig":"436"},{"size":8323,"mtime":1664462523064,"results":"551","hashOfConfig":"436"},{"size":5332,"mtime":1664462523068,"results":"552","hashOfConfig":"436"},{"size":1526,"mtime":1664462523174,"results":"553","hashOfConfig":"436"},{"size":6785,"mtime":1664462523071,"results":"554","hashOfConfig":"436"},{"size":7226,"mtime":1664462523069,"results":"555","hashOfConfig":"436"},{"size":7332,"mtime":1664462523139,"results":"556","hashOfConfig":"436"},{"size":831,"mtime":1664462523123,"results":"557","hashOfConfig":"436"},{"size":5608,"mtime":1664462523188,"results":"558","hashOfConfig":"436"},{"size":4492,"mtime":1664462523151,"results":"559","hashOfConfig":"436"},{"size":3730,"mtime":1664462523149,"results":"560","hashOfConfig":"436"},{"size":5334,"mtime":1664462523152,"results":"561","hashOfConfig":"436"},{"size":1527,"mtime":1664462523193,"results":"562","hashOfConfig":"436"},{"size":5523,"mtime":1664462523147,"results":"563","hashOfConfig":"436"},{"size":748,"mtime":1664462523114,"results":"564","hashOfConfig":"436"},{"size":16241,"mtime":1664462523122,"results":"565","hashOfConfig":"436"},{"size":1208,"mtime":1664462523270,"results":"566","hashOfConfig":"436"},{"size":1195,"mtime":1664462523109,"results":"567","hashOfConfig":"436"},{"size":1846,"mtime":1664462523161,"results":"568","hashOfConfig":"436"},{"size":1206,"mtime":1664462523010,"results":"569","hashOfConfig":"436"},{"size":1191,"mtime":1664462523142,"results":"570","hashOfConfig":"436"},{"size":1960,"mtime":1664462523277,"results":"571","hashOfConfig":"436"},{"size":4706,"mtime":1664462523287,"results":"572","hashOfConfig":"436"},{"size":3916,"mtime":1664462523313,"results":"573","hashOfConfig":"436"},{"size":6760,"mtime":1664462523124,"results":"574","hashOfConfig":"436"},{"size":7276,"mtime":1664462523203,"results":"575","hashOfConfig":"436"},{"size":8377,"mtime":1664462523250,"results":"576","hashOfConfig":"436"},{"size":9053,"mtime":1664462523214,"results":"577","hashOfConfig":"436"},{"size":8944,"mtime":1664462523199,"results":"578","hashOfConfig":"436"},{"size":9115,"mtime":1664462523207,"results":"579","hashOfConfig":"436"},{"size":9375,"mtime":1664462523222,"results":"580","hashOfConfig":"436"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},"1eahr2m",{"filePath":"584","messages":"585","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"586","usedDeprecatedRules":"583"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"583"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"583"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599","usedDeprecatedRules":"583"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602","usedDeprecatedRules":"583"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607","usedDeprecatedRules":"583"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"610","usedDeprecatedRules":"583"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"613","usedDeprecatedRules":"583"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616","usedDeprecatedRules":"583"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621","usedDeprecatedRules":"583"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624","usedDeprecatedRules":"583"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"583"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"583"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"633","usedDeprecatedRules":"583"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"638","usedDeprecatedRules":"583"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"645","usedDeprecatedRules":"583"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662","usedDeprecatedRules":"583"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671","usedDeprecatedRules":"583"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"674","usedDeprecatedRules":"583"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"679","messages":"680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"689","messages":"690","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"691","messages":"692","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"725","usedDeprecatedRules":"583"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"728","usedDeprecatedRules":"583"},{"filePath":"729","messages":"730","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"735","messages":"736","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"747","messages":"748","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"753","messages":"754","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"755","messages":"756","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"757","messages":"758","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"759","usedDeprecatedRules":"583"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"762","usedDeprecatedRules":"583"},{"filePath":"763","messages":"764","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"765","messages":"766","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"767","messages":"768","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"769","messages":"770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"773","messages":"774","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"775","messages":"776","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"777","messages":"778","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"779","messages":"780","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"781","messages":"782","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"783","messages":"784","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"785","messages":"786","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"787","messages":"788","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"789","messages":"790","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"791","messages":"792","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"793","messages":"794","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"795","messages":"796","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"797","messages":"798","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"799","messages":"800","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"801","messages":"802","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"803","messages":"804","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"805","messages":"806","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"807","messages":"808","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"809","usedDeprecatedRules":"583"},{"filePath":"810","messages":"811","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"812","messages":"813","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"814","messages":"815","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"816","messages":"817","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"818","messages":"819","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"820","messages":"821","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"822","messages":"823","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"824","messages":"825","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"826","messages":"827","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"828","messages":"829","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"830","messages":"831","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"832","messages":"833","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"834","usedDeprecatedRules":"583"},{"filePath":"835","messages":"836","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"837","usedDeprecatedRules":"583"},{"filePath":"838","messages":"839","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"840","messages":"841","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"842","messages":"843","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"844","messages":"845","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"846","messages":"847","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"848","messages":"849","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"850","messages":"851","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"852","messages":"853","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"854","usedDeprecatedRules":"583"},{"filePath":"855","messages":"856","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"857","messages":"858","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"859","messages":"860","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"861","messages":"862","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"863","messages":"864","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"865","usedDeprecatedRules":"583"},{"filePath":"866","messages":"867","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"868","messages":"869","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"870","messages":"871","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"872","messages":"873","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"874","messages":"875","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"876","messages":"877","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"583"},{"filePath":"878","messages":"879","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"880","usedDeprecatedRules":"583"},{"filePath":"881","messages":"882","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"883","usedDeprecatedRules":"583"},{"filePath":"884","messages":"885","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"886","usedDeprecatedRules":"583"},{"filePath":"887","messages":"888","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"889","usedDeprecatedRules":"583"},{"filePath":"890","messages":"891","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"892","usedDeprecatedRules":"583"},{"filePath":"893","messages":"894","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"895","usedDeprecatedRules":"583"},{"filePath":"896","messages":"897","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"898","usedDeprecatedRules":"583"},{"filePath":"899","messages":"900","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"901","usedDeprecatedRules":"583"},{"filePath":"902","messages":"903","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"904","usedDeprecatedRules":"583"},{"filePath":"905","messages":"906","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"907","usedDeprecatedRules":"583"},{"filePath":"908","messages":"909","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sm191z",{"filePath":"910","messages":"911","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"912","messages":"913","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"914","messages":"915","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"916","messages":"917","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"918","messages":"919","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"920","messages":"921","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"922","messages":"923","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"924","messages":"925","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"926","messages":"927","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"928","messages":"929","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"930","messages":"931","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"932","messages":"933","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"934","messages":"935","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"936","messages":"937","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"938","messages":"939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"940","messages":"941","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"942","messages":"943","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"944","messages":"945","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"946","messages":"947","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"948","messages":"949","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"950","messages":"951","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"952","messages":"953","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"954","messages":"955","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"956","messages":"957","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"958","messages":"959","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"960","messages":"961","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"962","messages":"963","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"964","messages":"965","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"966","messages":"967","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"968","messages":"969","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"970","messages":"971","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"972","messages":"973","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"974","messages":"975","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"976","messages":"977","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"978","messages":"979","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"980","messages":"981","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"982","messages":"983","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"984","messages":"985","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"986","messages":"987","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"988","messages":"989","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"990","messages":"991","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"992","messages":"993","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"994","messages":"995","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"996","messages":"997","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"998","messages":"999","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1000","messages":"1001","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1002","messages":"1003","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1004","messages":"1005","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1006","messages":"1007","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1008","messages":"1009","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1010","messages":"1011","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1012","messages":"1013","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1014","messages":"1015","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1016","messages":"1017","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1018","messages":"1019","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1020","messages":"1021","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1022","messages":"1023","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1024","messages":"1025","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1026","messages":"1027","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1028","messages":"1029","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1030","messages":"1031","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1032","messages":"1033","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1034","messages":"1035","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1036","messages":"1037","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1038","messages":"1039","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1040","messages":"1041","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1042","messages":"1043","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1044","messages":"1045","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1046","messages":"1047","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1048","messages":"1049","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1050","messages":"1051","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1052","messages":"1053","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1054","messages":"1055","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1056","messages":"1057","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1058","messages":"1059","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1060","messages":"1061","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1062","messages":"1063","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1064","messages":"1065","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1066","messages":"1067","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1068","messages":"1069","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1070","messages":"1071","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1072","messages":"1073","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1074","messages":"1075","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1076","messages":"1077","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1078","messages":"1079","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1080","messages":"1081","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1082","messages":"1083","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1084","messages":"1085","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1086","messages":"1087","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1088","messages":"1089","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1090","messages":"1091","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1092","messages":"1093","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1094","messages":"1095","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1096","messages":"1097","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1098","messages":"1099","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1100","messages":"1101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1102","messages":"1103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1104","messages":"1105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1106","messages":"1107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1108","messages":"1109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1110","messages":"1111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1112","messages":"1113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1114","messages":"1115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1116","messages":"1117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1118","messages":"1119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1120","messages":"1121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1122","messages":"1123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1124","messages":"1125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1126","messages":"1127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1128","messages":"1129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1130","messages":"1131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1132","messages":"1133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1134","messages":"1135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1136","messages":"1137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1138","messages":"1139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1140","messages":"1141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1142","messages":"1143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1144","messages":"1145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1146","messages":"1147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1148","messages":"1149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1150","messages":"1151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1152","messages":"1153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1154","messages":"1155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1156","messages":"1157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1158","messages":"1159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1160","messages":"1161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1162","messages":"1163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1164","messages":"1165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1166","messages":"1167","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1168","messages":"1169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1170","messages":"1171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1172","messages":"1173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1174","messages":"1175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1176","messages":"1177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1178","messages":"1179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1180","messages":"1181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1182","messages":"1183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1184","messages":"1185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1186","messages":"1187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1188","messages":"1189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1190","messages":"1191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1192","messages":"1193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1194","messages":"1195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1196","messages":"1197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\index.js",[],["1198","1199"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\App.js",["1200"],"import './App.css';\r\nimport IsoCtrl from './pages/isoCtrl/isoCtrl';\r\nimport { Switch, Route} from 'react-router-dom';\r\nimport { BrowserRouter as Router} from 'react-router-dom';\r\nimport Register from './pages/register/register';\r\nimport ChangePasswordPage from './pages/changePassword/changePassword';\r\nimport Equipments from './pages/equipments/equipments';\r\nimport Instrumentation from './pages/instrumentation/instrumentation';\r\nimport Civil from './pages/civil/civil';\r\nimport Electrical from './pages/electrical/electrical';\r\nimport Home from './pages/home/home'\r\nimport Piping from './pages/piping/piping';\r\nimport ProgressCurve from './pages/progressCurve/progressCurve';\r\nimport Navis from './pages/navis/navis';\r\nimport WelcomeLoginF from './pages/welcomeLoginF/welcomeLoginF';\r\nimport IsoCtrlF from './pages/isoCtrlF/isoCtrlF';\r\nimport CSPTracker from './pages/sptracker/sptracker';\r\nimport PITRequests from './pages/pitrequests/pitrequests';\r\nimport PitRequestView from './pages/pitRequestView/pitRequestView';\r\nrequire('dotenv').config();\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n            <Route exact path={\"/\"+process.env.REACT_APP_PROJECT+\"/\"} component={WelcomeLoginF}></Route>\r\n            <Route exact path={\"/\"+process.env.REACT_APP_PROJECT+\"/isotracker\"} component={IsoCtrlF}></Route>\r\n            <Route exact path={\"/\"+process.env.REACT_APP_PROJECT+\"/home\"} component={Home}></Route>\r\n            <Route exact path={\"/\"+process.env.REACT_APP_PROJECT+\"/register\"} component={Register}></Route>\r\n            <Route exact path={\"/\"+process.env.REACT_APP_PROJECT+\"/changepassword\"} component={ChangePasswordPage}></Route>\r\n            <Route exact path={\"/\"+process.env.REACT_APP_PROJECT+\"/equipments\"} component={Equipments}></Route>\r\n            <Route exact path={\"/\"+process.env.REACT_APP_PROJECT+\"/instrumentation\"} component={Instrumentation}></Route>\r\n            <Route exact path={\"/\"+process.env.REACT_APP_PROJECT+\"/civil\"} component={Civil}></Route>\r\n            <Route exact path={\"/\"+process.env.REACT_APP_PROJECT+\"/electrical\"} component={Electrical}></Route>\r\n            <Route exact path={\"/\"+process.env.REACT_APP_PROJECT+\"/piping\"} component={Piping}></Route>\r\n            <Route exact path={\"/\"+process.env.REACT_APP_PROJECT+\"/3dprogress\"} component={ProgressCurve}></Route>\r\n            <Route exact path={\"/\"+process.env.REACT_APP_PROJECT+\"/navis\"} component={Navis}></Route>\r\n            <Route exact path={\"/\"+process.env.REACT_APP_PROJECT+\"/csptracker\"} component={CSPTracker}></Route>\r\n            <Route exact path={\"/\"+process.env.REACT_APP_PROJECT+\"/pitrequests\"} component={PITRequests}></Route>\r\n            <Route exact path={\"/\"+process.env.REACT_APP_PROJECT+\"/pitrequestsview\"} component={PitRequestView}></Route>\r\n\r\n        </Switch>\r\n      </Router>\r\n  \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\register\\register.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\instrumentation\\instrumentation.js",["1201","1202","1203"],"import \"./instrumentation.css\"\r\nimport React, { useState , useEffect} from 'react'\r\nimport NavBar from '../../components/navBar/navBar'\r\nimport RoleDropDown from '../../components/roleDropDown/roleDropDown'\r\nimport InstrumentationEstimatedDataTable from \"../../components/instrumentationEstimatedDataTable/instrumentationEstimatedDataTable\"\r\nimport InstrumentationModelledDataTable from \"../../components/instrumentationModelledDataTable/instrumentationModelledDataTable\"\r\nimport EquipmentsNavBtns from \"../../components/EquipmentsNavBtns/equipmentsNavBtns\"\r\nimport ProgressPlotInstrumentation from \"../../components/progressPlotInstrumentation/progressPlotInstrumentation\"\r\nimport InstrumentationTypesDataTable from \"../../components/instrumentationTypesDataTable/instrumentationTypesDataTable\"\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport InstExcel from \"../../components/instExcel/instExcel\"\r\nimport InstExcelEdit from \"../../components/instExcelEdit/instExcelEdit\"\r\nimport IsoTrackerLogo from \"../../assets/images/3DTracker.svg\"\r\nimport ExportIcon from \"../../assets/images/downloadicon.png\"\r\nimport EditIcon from \"../../assets/images/edit.png\"\r\nimport AlertF from \"../../components/alert/alert\"\r\n\r\nimport IdleTimer from 'react-idle-timer'\r\nimport {useHistory} from \"react-router\";\r\n\r\nconst Instrumentation = () => {\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n    const [currentRole, setCurrentRole] = useState();\r\n    const [roles, setRoles] = useState();\r\n    const[weight, setWeight] = useState();\r\n    const[progress, setProgress] = useState();\r\n    const[successAlert, setSuccessAlert] = useState(false);\r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(()=>{\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n       \r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/roles/user\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setRoles(json.roles);\r\n                if(secureStorage.getItem('role') !== null){\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }else{\r\n                    secureStorage.setItem('role', json.roles[0])\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }\r\n                }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })       \r\n            \r\n    },[currentRole]);\r\n\r\n    useEffect(()=>{\r\n\r\n        let options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n       \r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/instrumentation/weight\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setWeight(json.weight)\r\n                setProgress(json.progress)\r\n            }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })       \r\n\r\n            const body = {\r\n                user: currentUser,\r\n            }\r\n            options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n    \r\n                })\r\n            \r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n        if(!secureStorage.getItem(\"user\")){\r\n            history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/\");\r\n        }\r\n    }, [])\r\n\r\n    function success(){\r\n        setSuccessAlert(true)\r\n        setTimeout(function () {\r\n            setSuccessAlert(false)\r\n        }, 1000);\r\n    }\r\n    \r\n    function handleOnIdle(){\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n        secureStorage.clear()\r\n        history.push(\"/\" + process.env.REACT_APP_PROJECT)\r\n    }\r\n    \r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    var dataTableHeight = \"500px\"\r\n\r\n    \r\n    document.title= process.env.REACT_APP_APP_NAMEPROJ\r\n    const [currentTab, setCurrentTab] = useState(secureStorage.getItem(\"inst_tab\"))\r\n    if(currentTab === \"\" || currentTab === null){\r\n        setCurrentTab(\"Estimated\")\r\n    }\r\n\r\n    var currentUser = secureStorage.getItem('user')\r\n    var table = null\r\n\r\n    let downloadBtn = null\r\n    let adminBtn = null\r\n\r\n    if(currentTab === \"Estimated\"){\r\n        table = <InstrumentationEstimatedDataTable/>\r\n    }else if(currentTab === \"Modelled\"){\r\n        downloadBtn = <button className=\"navBar__button\" onClick={()=>downloadInstrumentationModelled()} style={{marginLeft:\"230px\", width:\"115px\", position:\"relative\"}}><img src={ExportIcon} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\" style={{paddingLeft:\"25px\"}}>Export</p></button>\r\n    \r\n        table = <InstrumentationModelledDataTable/>\r\n    }else if(currentTab === \"Progress\"){\r\n        table = <ProgressPlotInstrumentation/>\r\n    }else if(currentTab === \"Types\"){\r\n        table = <InstrumentationTypesDataTable/>\r\n    }else if(currentTab === \"Key parameters\"){\r\n        table = <InstExcel success={success.bind(this)}/>\r\n    }else if(currentTab === \"Edit\"){\r\n        table = <InstExcelEdit success={success.bind(this)}/>\r\n    }\r\n\r\n    \r\n    if(currentTab === \"Edit\" || currentTab === \"Key parameters\"){\r\n        dataTableHeight = \"500px\"\r\n    }\r\n    \r\n    if(currentRole === \"Project\"){\r\n        if(currentTab === \"Estimated\" || currentTab === \"Edit\"){\r\n            if(currentTab === \"Edit\"){\r\n                adminBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Edit\")} style={{backgroundColor:\"#99C6F8\", marginLeft:\"230px\", position:\"relative\"}}><img src={EditIcon} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Edit</p></button>\r\n            }else{\r\n                adminBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Edit\")} style={{marginLeft:\"230px\", position:\"relative\"}}><img src={EditIcon} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Edit</p></button>\r\n            }        }else{\r\n            adminBtn = null\r\n        }\r\n    }\r\n\r\n\r\n    async function downloadInstrumentationModelled(){\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadInstrumentationModelled/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"AREA\", \"TAG\", \"TYPE\", \"WEIGHT\", \"STATUS\", \"PROGRESS\"]\r\n            exportToExcel(JSON.parse(json), \"Instrumentation modelled\", headers)\r\n        })\r\n    }\r\n\r\n    const exportToExcel = (apiData, fileName, headers) => {\r\n        const fileType =\r\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const header_cells = ['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'O1']\r\n        const fileExtension = \".xlsx\";\r\n\r\n        let wscols = []\r\n        for(let i = 0; i < headers.length; i++){\r\n            wscols.push({width:35})\r\n        }\r\n\r\n        const ws = XLSX.utils.json_to_sheet(apiData);   \r\n        ws[\"!cols\"] = wscols\r\n        for(let i = 0; i < headers.length; i++){\r\n            ws[header_cells[i]].v = headers[i]\r\n        }\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n\r\n    }\r\n\r\n    return(\r\n        \r\n        <body>\r\n            <IdleTimer\r\n                timeout={1000 * 60 * 15}\r\n                onIdle={handleOnIdle}\r\n                debounce={250}\r\n            />\r\n            <NavBar onChange={value => setCurrentTab(currentTab)}/>\r\n            <div\r\n            className={`alert alert-success ${successAlert ? 'alert-shown' : 'alert-hidden'}`}\r\n            onTransitionEnd={() => setSuccessAlert(false)}\r\n            >\r\n                <AlertF type=\"success\" text=\"Changes saved!\" margin=\"0px\"/>\r\n            </div>\r\n            <div style={{position:\"absolute\", marginTop:\"180px\", marginLeft:\"46%\"}}>\r\n                <i className=\"discipline__title\" style={{fontStyle:\"normal\"}}>Instrumentation</i>\r\n            </div>\r\n                <div className=\"isotracker__row\">\r\n                  <div className=\"isotracker__column\">\r\n                      <img src={IsoTrackerLogo} alt=\"isoTrackerLogo\" className=\"isoTrackerLogo__image2\"/>\r\n                      \r\n                      <div className=\"roleSelector__containerF\">\r\n                              <RoleDropDown style={{paddingLeft: \"2px\"}} onChange={value => setCurrentRole(value)} roles = {roles}/>\r\n                      </div>\r\n                      \r\n                  </div>\r\n                  \r\n\r\n                  <div className=\"isotracker__column\">\r\n                  \r\n                  <table className=\"equipTable__table\" style={{marginTop:\"270px\", width:\"35%\", marginLeft:\"59%\"}}>\r\n                        <tbody className=\"equipable__body\">\r\n                            <tr>    \r\n                                <td  className=\"equipTable__header\" style={{backgroundColor:\"#338DF1\", borderRadius:\"1em 0 0 0\"}}>Estimated weight</td>\r\n                                <td className=\"equipTable__header\" style={{backgroundColor:\"#338DF1\", borderRadius:\"0 1em 0 0\"}}>Total progress</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"equipTable__state\" style={{borderRadius:\"0 0 0 1em\"}}>{weight}</td>\r\n                                <td className=\"equipTable__state\" style={{borderRadius:\"0 0 1em 0\"}}>{progress}%</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    \r\n                  </div>               \r\n                  \r\n                  \r\n              </div>\r\n              <table className=\"isotracker__table__container\">\r\n                      <tr className=\"isotracker__table__navBar__container\">\r\n                          <th  colspan=\"2\" className=\"isotracker__table__navBar\">\r\n                            {adminBtn}\r\n                            {downloadBtn}\r\n                          </th>\r\n                      </tr>\r\n                      <tr className=\"isotracker__table__tray__and__table__container\" style={{height: dataTableHeight}}>\r\n                          <td className=\"disciplines__table__trays\">\r\n                              <div className=\"trays__container\">\r\n                                  <p className=\"isotracker__table__trays__group\">Options</p>\r\n                                  <center className=\"equimentsNavBtns__center\">              \r\n                                    <EquipmentsNavBtns onChange={value => setCurrentTab(value)} currentTab = {currentTab} currentRole = {currentRole} discipline = \"Equipment\"/>               \r\n                                    </center>\r\n                              </div>\r\n                          </td>\r\n                          <td className=\"discplines__table__table\"  >\r\n                              <div  style={{height: \"540px\", width: \"1550px\"}} className=\"isotracker__table__table__container\">\r\n                                  {table}\r\n                              </div>\r\n                          </td>\r\n                          \r\n                      </tr>\r\n                  </table>\r\n         </body>\r\n    )\r\n}\r\n\r\nexport default Instrumentation;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\isoCtrl\\isoCtrl.js",["1204","1205","1206","1207","1208"],"import DataTable from \"../../components/datatable/datatable\"\r\nimport ReportBtns from \"../../components/reportBtns/reportBtns\"\r\nimport StateTable from \"../../components/stateTable/stateTable\"\r\nimport NavBtns from \"../../components/navBtns/navBtns\"\r\nimport DragAndDrop from \"../../components/dragAndDrop/dragAndDrop\"\r\nimport \"./isoCtrl.css\"\r\nimport React, { useState , useEffect} from 'react'\r\nimport ActionButtons from \"../../components/actionBtns/actionBtns\"\r\nimport SelectPag from \"../../components/selectPag/selectPag\"\r\nimport CheckInTable from \"../../components/checkInTable/checkInTable\"\r\nimport NavBar from '../../components/navBar/navBar'\r\nimport MyTrayBtn from \"../../components/myTrayBtn/myTrayBtn\"\r\nimport MyTrayTable from \"../../components/myTrayTable/myTrayTable\"\r\nimport BinBtn from '../../components/binBtn/binBtn'\r\nimport BinTable from \"../../components/binTable/binTable\"\r\nimport OnHoldTable from \"../../components/onHoldTable/onHoldTable\"\r\nimport StatusDataTable from \"../../components/statusDataTable/statusDataTable\"\r\nimport HistoryDataTable from \"../../components/historyDataTable/historyDataTable\"\r\nimport RoleDropDown from \"../../components/roleDropDown/roleDropDown\"\r\n\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse'\r\nimport OnHoldBtn from \"../../components/onHoldBtn/onHoldBtn\"\r\nimport ProcInsBtn from \"../../components/procInsBtn/procInsBtn\"\r\nimport ReportsBtn from \"../../components/reportsBtn/reportsBtn\"\r\nimport ProcInstTable from \"../../components/procInstTable/procInstTable\"\r\nimport JSZip from 'jszip'\r\nimport { saveAs } from 'file-saver';\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ReportBoxBtns from \"../../components/reportBoxBtns/reportBoxBtns\"\r\nimport IssuedBtn from \"../../components/issuedBtn/issuedBtn\"\r\nimport ProgressBtn from \"../../components/progressBtn/progressBtn\"\r\nimport ProgressPlot from \"../../components/progressPlot/progressPlot\"\r\nimport ModelledBtn from \"../../components/modelledBtn/modelledBtn\"\r\nimport ModelledDataTable from \"../../components/modelledDataTable/modelledDataTable\"\r\nimport UsersDataTable from \"../../components/usersDataTable/usersDataTable\"\r\n\r\n\r\nconst IsoCtrl = () => {\r\n   \r\n    document.body.style.zoom = 0.9\r\n    document.title= process.env.REACT_APP_APP_NAMEPROJ\r\n    const[pagination, setPagination] = useState(8) //Controla el numero de entradas por pagina de la tabla\r\n    const [currentRole, setCurrentRole] = useState();\r\n    const [roles, setRoles] = useState();\r\n    const [selected, setSelected] = useState([]);\r\n    const [updateData, setUpdateData] = useState();\r\n    const [comment, setComment] = useState(\" \");\r\n    const [commentAlert, setCommentAlert] = useState(false);\r\n    const [downloadZip, setDownloadzip] = useState(new JSZip());\r\n    const [loading, setLoading] = useState(false);\r\n    const [errorUnclaim, setErrorUnclaim] = useState(false);\r\n    const [errorPI, setErrorPI] = useState(false);\r\n    const [errorCL, setErrorCL] = useState(false);\r\n    const [transactionSuccess, setTransactionSuccess] = useState(false);\r\n    const [errorReports, setErrorReports] = useState(false);\r\n    const [errorUnclaimR, setErrorUnclaimR] = useState(false);\r\n    const [warningSelected, setWarningSelected] = useState(false);\r\n    const [blocked, setBlocked] = useState(false);\r\n    const [errorReportD, setErrorReportD] = useState(false)\r\n    const [errorReportDIndex, setErrorReportDIndex] = useState(0);\r\n    const [errorDeleteUser, setErrorDeleteUser] = useState(false);\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n    \r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    const [currentTab, setCurrentTab] = useState(secureStorage.getItem(\"tab\")) //Controla la tabla y botones que se muestran\r\n    //La altura de la tabla es fija en funcion de la paginacion para evitar que los botones se muevan\r\n    var dataTableHeight = 8\r\n\r\n    if (pagination === 8){\r\n        dataTableHeight = \"550px\"\r\n    }if(pagination === 25){\r\n        dataTableHeight = \"1250px\"\r\n    }if(pagination === 50){\r\n        dataTableHeight = \"2250px\"\r\n    }if(pagination === 100){\r\n        dataTableHeight = \"4330px\"\r\n    }if(pagination === 500){\r\n        dataTableHeight = \"19300px\"\r\n    }\r\n\r\n    //Componentes de la pagina que varian en funcion del estado\r\n    var uploadButton, actionButtons, actionText, commentBox, tableContent, procInsBtn, progressBtn, modelledBtn, myTrayBtn, usersButton\r\n    var currentTabText = currentTab\r\n    if(currentTabText === \"LDE/IsoControl\"){\r\n        currentTabText = \"LOS/IsoControl\"\r\n    }\r\n    tableContent = <DataTable forceUnclaim = {forceUnclaim.bind(this)} onChange={value=> setSelected(value)} selected = {selected} pagination = {pagination} currentTab = {currentTab} currentRole={currentRole} updateData = {updateData} unlock = {unlock.bind(this)} rename = {rename.bind(this)}/>\r\n    var pageSelector = <SelectPag onChange={value => setPagination(value)} pagination = {pagination}/>\r\n    var currentUser = secureStorage.getItem('user')\r\n\r\n    \r\n    \r\n    useEffect(()=>{\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/roles/user\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setRoles(json.roles);\r\n                if(secureStorage.getItem('role') !== null){\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }else{\r\n                    secureStorage.setItem('role', json.roles[0])\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }\r\n                }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })       \r\n            setErrorPI(false)\r\n            setErrorUnclaimR(false)\r\n            setErrorCL(false)\r\n            setUpdateData(!updateData)\r\n            setTransactionSuccess(false);\r\n            setErrorUnclaim(false)\r\n            setErrorReports(false)\r\n            setLoading(false)\r\n            setWarningSelected(false)\r\n            setBlocked(false)\r\n            setErrorReportD(false)\r\n            setErrorDeleteUser(false)\r\n            \r\n    },[currentRole]);\r\n\r\n    useEffect(()=>{\r\n        setErrorUnclaimR(false)\r\n        setErrorPI(false);\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false)\r\n        setErrorUnclaim(false)\r\n        setLoading(false)\r\n        setErrorReports(false)\r\n        setSelected([])\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n    }, [currentTab])\r\n\r\n    const getProgress = () =>{\r\n        setUpdateData(!updateData)\r\n\r\n    }\r\n\r\n    const claim = async(event) => {\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setTransactionSuccess(false);\r\n        setWarningSelected(false)\r\n        setErrorPI(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            if(currentTab === \"Process\"){\r\n                for (let i = 0; i < selected.length; i++){\r\n                \r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/claimProc\", options)\r\n                }\r\n            }else if(currentTab === \"Instrument\"){\r\n                for (let i = 0; i < selected.length; i++){\r\n                \r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/claimInst\", options)\r\n                }\r\n            }else{\r\n                for (let i = 0; i < selected.length; i++){\r\n                \r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/claim\", options)\r\n                }\r\n            \r\n            }\r\n            setUpdateData(!updateData)\r\n            setLoading(false)\r\n            setSelected([])\r\n            \r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n     \r\n    }   \r\n    \r\n    const forceClaim = async(username) =>{\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                \r\n                const body ={\r\n                    user : username,\r\n                    file: selected[i],\r\n                    los: currentUser\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/forceClaim\", options)\r\n            }\r\n            setUpdateData(!updateData)\r\n            setLoading(false)\r\n            setSelected([])\r\n        }\r\n    }\r\n\r\n    const unclaim = async (event) =>{\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            if (currentRole === \"Process\"){\r\n                for (let i = 0; i < selected.length; i++){\r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/unclaimProc\", options)\r\n                }\r\n            }else if(currentRole === \"Instrument\"){\r\n                for (let i = 0; i < selected.length; i++){\r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/unclaimInst\", options)\r\n                }\r\n            }else{\r\n                for (let i = 0; i < selected.length; i++){\r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/unclaim\", options)\r\n                    .then(response => response.json())\r\n                    .then(json=>{\r\n                        if(json.error === \"forced\"){\r\n                            setErrorUnclaim(true)\r\n                        }else if(json.error === \"returned\"){\r\n                            setErrorUnclaimR(true)\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                    });\r\n                }\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n        \r\n    }\r\n\r\n    async function forceUnclaim(fileName){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setLoading(true)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n        const body ={\r\n            user : currentUser,\r\n            file: fileName,\r\n            role: currentRole\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/forceUnclaim\", options)\r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n        setSelected([])\r\n    }\r\n\r\n\r\n    const verifyClick = async(event) =>{\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                \r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    role: currentRole\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/verify\", options)\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n    }\r\n\r\n    async function cancelVerifyClick(filename){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setTransactionSuccess(false);\r\n        setLoading(true)\r\n        setWarningSelected(false)\r\n        setErrorReportD(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n            \r\n            const body ={\r\n                user : currentUser,\r\n                file: filename,\r\n                role: currentRole\r\n            }\r\n            const options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/cancelVerify\", options)\r\n        \r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n        setSelected([])\r\n    }\r\n\r\n    async function transaction(destiny, comments){\r\n        \r\n        if(selected.length > 0){\r\n            setErrorUnclaimR(false)\r\n            setWarningSelected(false)\r\n            setErrorReports(false)\r\n            setErrorCL(false)\r\n            setErrorUnclaim(false)\r\n            setErrorPI(false);\r\n            setTransactionSuccess(false);\r\n            setLoading(true)\r\n            setErrorReportD(false)\r\n            setBlocked(false)\r\n            setErrorDeleteUser(false)\r\n            \r\n            if(destiny === \"Design\"){\r\n                if(comment.length > 1){\r\n                    setComment(\" \")\r\n                    setCommentAlert(false)\r\n                    localStorage.setItem(\"update\", true)\r\n                    for (let i = 0; i < selected.length; i++){\r\n                        const body ={\r\n                            user : currentUser,\r\n                            fileName: selected[i],\r\n                            to: destiny,\r\n                            role: secureStorage.getItem(\"role\"),\r\n                            comment: comment,\r\n                            deleted: 0,\r\n                            onhold: 0\r\n                        }\r\n                        const options = {\r\n                            method: \"POST\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            },\r\n                            body: JSON.stringify(body)\r\n                        }\r\n                        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/transaction\", options)\r\n                        .then(response => response.json())\r\n                        .then(json =>{\r\n                            if(json.blocked){\r\n                                setBlocked(true)\r\n                            }else{\r\n                                setTransactionSuccess(true)\r\n                            }\r\n                        })\r\n                        \r\n                    }\r\n                }else{\r\n                    setCommentAlert(true)\r\n                }\r\n            }else if (destiny === \"LDE/Isocontrol\"){\r\n                for (let i = 0; i < selected.length; i++){\r\n                    const options = {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/piStatus/\"+selected[i], options)\r\n                    .then(response => response.json())\r\n                    .then(async json =>{\r\n                        if(json.sit === 1 || json.sit === 4 || json.sit === 5|| json.spo === 1 || json.spo === 4 || json.spo === 5){\r\n                            localStorage.setItem(\"update\", true)\r\n                            setErrorPI(true);\r\n                            setTransactionSuccess(false);\r\n                        }else{\r\n                            setCommentAlert(false)\r\n                            localStorage.setItem(\"update\", true)\r\n                            let deleted, hold = 0\r\n                    \r\n                            const body ={\r\n                                user : currentUser,\r\n                                fileName: selected[i],\r\n                                to: destiny,\r\n                                role: secureStorage.getItem(\"role\"),\r\n                                comment: null,\r\n                                deleted: deleted,\r\n                                onhold: hold\r\n                            }\r\n                            const options = {\r\n                                method: \"POST\",\r\n                                headers: {\r\n                                    \"Content-Type\": \"application/json\"\r\n                                },\r\n                                body: JSON.stringify(body)\r\n                            }\r\n                            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/transaction\", options)\r\n                            .then(response => response.json())\r\n                            .then(async json=>{\r\n                                if(json.error){\r\n                                    await setErrorCL(true) \r\n                                }else if(json.blocked){\r\n                                    setBlocked(true)\r\n                                }\r\n                            })\r\n                            if(!errorCL && !blocked){\r\n                                setTransactionSuccess(true)\r\n                            }\r\n                            \r\n                        }\r\n                    })\r\n                }\r\n                await setUpdateData(!updateData)\r\n                setLoading(false)\r\n            }else if(destiny === \"On hold\"){\r\n                setCommentAlert(false)\r\n                localStorage.setItem(\"update\", true)\r\n                let deleted, hold = 0\r\n\r\n                if(destiny === \"Recycle bin\"){\r\n                    deleted = 1\r\n                }\r\n\r\n                if(destiny === \"On hold\"){\r\n                    hold = 1\r\n                }\r\n                for (let i = 0; i < selected.length; i++){\r\n                    \r\n                    const body ={\r\n                        user : currentUser,\r\n                        fileName: selected[i],\r\n                        to: destiny,\r\n                        role: secureStorage.getItem(\"role\"),\r\n                        comment: comments,\r\n                        deleted: deleted,\r\n                        onhold: hold\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/transaction\", options)\r\n                    .then(response => response.json())\r\n                        .then(json =>{\r\n                            if(json.blocked){\r\n                                setBlocked(true)\r\n                            }else{\r\n                                setTransactionSuccess(true)\r\n                            }\r\n                        })\r\n                }\r\n            }else{\r\n                setCommentAlert(false)\r\n                localStorage.setItem(\"update\", true)\r\n                let deleted, hold = 0\r\n\r\n                if(destiny === \"Recycle bin\"){\r\n                    deleted = 1\r\n                }\r\n\r\n                if(destiny === \"On hold\"){\r\n                    hold = 1\r\n                }\r\n                for (let i = 0; i < selected.length; i++){\r\n                    \r\n                    const body ={\r\n                        user : currentUser,\r\n                        fileName: selected[i],\r\n                        to: destiny,\r\n                        role: secureStorage.getItem(\"role\"),\r\n                        comment: null,\r\n                        deleted: deleted,\r\n                        onhold: hold\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/transaction\", options)\r\n                    .then(response => response.json())\r\n                        .then(json =>{\r\n                            if(json.blocked){\r\n                                setBlocked(true)\r\n                            }else{\r\n                                setTransactionSuccess(true)\r\n                            }\r\n                        })\r\n                }\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            await getProgress()\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }    \r\n    }\r\n\r\n    async function returnLead(destiny){\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorCL(false)\r\n        setWarningSelected(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setErrorUnclaimR(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                setLoading(true)\r\n                const body ={\r\n                    user : currentUser,\r\n                    fileName: selected[i],\r\n                    to: destiny,\r\n                    from: currentTab\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/returnLead\", options)\r\n                .then(response => response.json())\r\n                        .then(json =>{\r\n                            if(json.blocked){\r\n                                setBlocked(true)\r\n                            }else{\r\n                                setTransactionSuccess(true)\r\n                            }\r\n                        })\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            await getProgress()\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n    }\r\n    \r\n    async function returnLeadStress(){\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setErrorUnclaimR(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                        \r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    comments: comment\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/returnLeadStress\", options)\r\n                .then(response => response.json())\r\n                .then(json =>{\r\n                    if(json.blocked){\r\n                        setBlocked(true)\r\n                    }else{\r\n                        setTransactionSuccess(true)\r\n                    }\r\n                })\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            await getProgress()\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n    }\r\n\r\n    function handleComment(event){\r\n        setComment(event.target.value)\r\n    }\r\n\r\n    async function restore(){\r\n        setErrorReports(false)\r\n        setErrorUnclaimR(false)\r\n        setErrorReportD(false)\r\n        setErrorUnclaim(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                const body ={\r\n                    fileName: selected[i],\r\n                    user: currentUser,\r\n                    role: currentRole,\r\n                    deleted: 0,\r\n                    onhold: 0\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/restore\", options)\r\n                setTransactionSuccess(true)\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            await getProgress()\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n    }\r\n\r\n    function procOrInst(tab) {\r\n        if(tab === \"Process\" || tab === \"Instrument\"){\r\n            setCurrentTab(tab)\r\n        }else if (currentRole === \"Process\"){\r\n            setCurrentTab(\"Process\")\r\n        }else{\r\n            setCurrentTab(\"Instrument\")\r\n        }\r\n    }\r\n\r\n    async function sendProcessClick(fileName){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setLoading(true)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n            \r\n            const body ={\r\n                user : currentUser,\r\n                file: fileName,\r\n                role: currentRole\r\n            }\r\n            const options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/process\", options)\r\n        \r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n        setSelected([])\r\n    }\r\n\r\n    async function sendInstrumentClick(fileName){\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorUnclaimR(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setLoading(true)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n            \r\n            const body ={\r\n                user : currentUser,\r\n                file: fileName,\r\n                role: currentRole\r\n            }\r\n            const options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/instrument\", options)\r\n        \r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n        setSelected([])\r\n    }\r\n\r\n    async function sendCancelProcessClick(fileName){\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorUnclaimR(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setLoading(true)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n\r\n        const body ={\r\n            file: fileName,\r\n            user: currentUser,\r\n            role: currentRole,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/cancelProc\", options)\r\n    \r\n        await setUpdateData(!updateData)\r\n        await setLoading(false)\r\n        setSelected([])\r\n    }\r\n\r\n    async function sendCancelInstrumentClick(fileName){\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorUnclaimR(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setWarningSelected(false)\r\n        setLoading(true)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n        const body ={\r\n            file: fileName,\r\n            user: currentUser,\r\n            role: currentRole\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/cancelInst\", options)\r\n    \r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n        setSelected([])\r\n    }\r\n\r\n    function updateD(){\r\n        setUpdateData(!updateData)\r\n    }\r\n\r\n    async function downloadFiles(){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            /*\r\n            if(selected.length === 1){\r\n                localStorage.setItem(\"update\", true)\r\n                for (let i = 0; i < selected.length; i++){\r\n                    const options = {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/pdf\"\r\n                        }\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/download/\"+selected[i], options)\r\n                    .then(res => res.blob())\r\n                        .then(response =>{\r\n                            console.log(\"Se descarga\")\r\n                            download(new Blob([response]), selected[i], \"application/pdf\")\r\n                        })\r\n                }\r\n            }else if (selected.length > 1){\r\n                localStorage.setItem(\"update\", true)\r\n                for (let i = 0; i < selected.length; i++){\r\n\r\n                    const options = {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/pdf\"\r\n                        }\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/download/\"+selected[i], options)\r\n                    .then(res => res.blob())\r\n                        .then(response =>{\r\n                            setDownloadzip(downloadZip.file(selected[i], new Blob([response]),{binary:true}))   \r\n                        })\r\n                }\r\n                const zipname = String(Date().toLocaleString().replace(/\\s/g, '-').split('-G').slice(0, -1))\r\n                downloadZip.generateAsync({type:\"blob\"}).then(function (blob) { // 1) generate the zip file\r\n                    saveAs(blob,  zipname)\r\n                })\r\n                \r\n            }\r\n            await setUpdateData(!updateData)\r\n            await setDownloadzip(new JSZip())   \r\n            setLoading(false)\r\n            */\r\n            for (let i = 0; i < selected.length; i++){\r\n\r\n                const options = {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/pdf\"\r\n                    }\r\n                }\r\n                \r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getAttach/\"+selected[i], options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/download/\"+selected[i], options)\r\n                    .then(res => res.blob())\r\n                    .then( async response =>{\r\n                        setDownloadzip(downloadZip.file(selected[i], new Blob([response]),{binary:true}))   \r\n                        for(let i = 0; i < json.length; i++){\r\n                            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/download/\"+json[i], options)\r\n                            .then(res => res.blob())\r\n                            .then(response =>{\r\n                                setDownloadzip(downloadZip.file(json[i], new Blob([response]),{binary:true}))   \r\n                            })\r\n                        }\r\n                        \r\n                    })\r\n                })\r\n            \r\n\r\n                \r\n        \r\n            }\r\n            const zipname = String(Date().toLocaleString().replace(/\\s/g, '-').split('-G').slice(0, -1))\r\n            downloadZip.generateAsync({type:\"blob\"}).then(function (blob) { // 1) generate the zip file\r\n                saveAs(blob,  zipname)\r\n            })  \r\n            \r\n            await setDownloadzip(new JSZip())   \r\n            //await setAttachFiles(null)\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n    }\r\n\r\n    async function downloadHistory(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadHistory/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"ISO_ID\", \"FROM\", \"TO\", \"DATE\", \"COMMENT\", \"USER\"]\r\n            exportToExcel(JSON.parse(json), \"Comments\", headers)\r\n        })\r\n    }\r\n\r\n    async function downloadStatus(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadStatus/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            let headers = null\r\n            if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n                headers = [\"ISO_ID\", \"START_DATE\", \"CURRENT_DATE\", \"TYPE\", \"CONDITION\", \"TRAY\"]\r\n            }else{\r\n                headers = [\"ISO_ID\", \"START_DATE\", \"CURRENT_DATE\", \"CONDITION\", \"TRAY\"]\r\n            }\r\n            \r\n            exportToExcel(JSON.parse(json), \"Status\", headers)\r\n        })\r\n    }\r\n\r\n    async function downloadPI(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadPI/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"ISO_ID\", \"PROCESS\", \"INSTRUMENTATION\", \"UPDATED_AT\"]\r\n            exportToExcel(JSON.parse(json), \"IsoStatusSIT-SPO\", headers)\r\n        })\r\n    }\r\n\r\n    async function downloadIssued(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadIssued/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"ISO_ID\", \"REV0\", \"REV1\", \"REV2\", \"REV3\", \"REV4\"]\r\n            exportToExcel(JSON.parse(json), \"IsoStatusIssued\", headers)\r\n        })\r\n    }\r\n\r\n    async function downloadStatus3D(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadStatus3D/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            let output = JSON.stringify(json.log)\r\n            output = output.substring(1,output.length-1)\r\n            output = output.replaceAll(\",\", \"\\n\")\r\n            output = output.replaceAll(/['\"]+/g, \"\")\r\n\r\n\r\n            const data = new Blob([output], { type: 'txt' });\r\n            FileSaver.saveAs(data, \"fromIsoTrackerTo3d.mac\");\r\n        })\r\n    }\r\n\r\n    async function downloadModelled(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadModelled/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"TAG\", \"ISO_ID\", \"TYPE\"]\r\n            exportToExcel(JSON.parse(json), \"Modelled\", headers)\r\n        })\r\n    }\r\n\r\n    const exportToExcel = (apiData, fileName, headers) => {\r\n        setErrorReports(false)\r\n        const fileType =\r\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const header_cells = ['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'O1']\r\n        const fileExtension = \".xlsx\";\r\n\r\n        let wscols = []\r\n        for(let i = 0; i < headers.length; i++){\r\n            wscols.push({width:35})\r\n        }\r\n\r\n        const ws = XLSX.utils.json_to_sheet(apiData);   \r\n        ws[\"!cols\"] = wscols\r\n        for(let i = 0; i < headers.length; i++){\r\n            ws[header_cells[i]].v = headers[i]\r\n        }\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n\r\n    }\r\n\r\n    async function setUploading(active){\r\n        setErrorReports(false)\r\n        setErrorReportD(false)\r\n        setLoading(active)\r\n        if(!active){\r\n            setTransactionSuccess(true)\r\n        }\r\n    }\r\n\r\n    async function setErrorReport(){\r\n        setErrorReports(true)\r\n    }\r\n\r\n    async function issue(transmittal, date){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if (selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    role: currentRole,\r\n                    transmittal: transmittal,\r\n                    date: date\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/toIssue\", options)\r\n                .then(response => response.json())\r\n                .then(json =>{\r\n                    if(json.blocked){\r\n                        setBlocked(true)\r\n                    }else{\r\n                        setTransactionSuccess(true)\r\n                    }\r\n                })\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            await getProgress()\r\n            setSelected([])\r\n        }\r\n    }\r\n\r\n    async function newRev() {\r\n        setErrorReports(false)\r\n        setErrorUnclaimR(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setErrorReportD(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if (selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    role: currentRole,\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/newRev\", options)\r\n                .then(response => response.json())\r\n                .then(json =>{\r\n                    \r\n                    if(json.blocked){\r\n                        setBlocked(true)\r\n                    }else{\r\n                        setTransactionSuccess(true)\r\n                    }\r\n                })\r\n            }\r\n            setUpdateData(!updateData)\r\n            setLoading(false)\r\n            await getProgress()\r\n            setSelected([])\r\n        }\r\n    }\r\n\r\n    async function request() {\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if (selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    role: currentRole,\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/request\", options)\r\n                \r\n            }\r\n            setUpdateData(!updateData)\r\n            setLoading(false)\r\n            setSelected([])\r\n        }\r\n\r\n    }\r\n\r\n    async function returnIso(destiny, comments){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setErrorReportD(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if (selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            if(comments.length < 1){\r\n                comments = comment\r\n            }\r\n            for (let i = 0; i < selected.length; i++){\r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    role: currentRole,\r\n                    from: currentTab,\r\n                    destiny: destiny,\r\n                    comments: comments\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/returnIso\", options)\r\n                .then(response => response.json())\r\n                .then(json =>{\r\n                    if(json.blocked){\r\n                        setBlocked(true)\r\n                    }else{\r\n                        setTransactionSuccess(true)\r\n                    }\r\n                })\r\n                \r\n            }\r\n            setUpdateData(!updateData)\r\n            setLoading(false)\r\n            setComment(\"\")\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n    }\r\n\r\n    async function success(){\r\n        setTransactionSuccess(true)\r\n    }\r\n\r\n    async function unlock(filename){\r\n\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n\r\n        const body = {\r\n            fileName: filename\r\n          }\r\n      \r\n          const options = {\r\n              method: \"POST\",\r\n              headers: {\r\n                  \"Content-Type\": \"application/json\"\r\n              },\r\n              body: JSON.stringify(body)\r\n          }\r\n      \r\n          fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/unlock\", options)\r\n          .then(response => console.log(\"Unlocked\"))\r\n\r\n          setUpdateData(!updateData)\r\n    }\r\n\r\n    async function rename(newName, oldName){\r\n\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setErrorReportD(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n\r\n        const body = {\r\n            oldName: oldName,\r\n            newName: newName\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/rename\", options)\r\n        .then(response => console.log(\"Cambiado\"))\r\n\r\n        setTransactionSuccess(true)\r\n        \r\n        setUpdateData(!updateData)\r\n    }\r\n\r\n    async function setErrorReportData(index){\r\n        setErrorReportD(true)\r\n        setErrorReportDIndex(index)\r\n    }\r\n\r\n    async function addUser(username, email, roles){\r\n\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setErrorReportD(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n\r\n        const body = {\r\n            username: username,\r\n            email: email,\r\n            roles: roles\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/createUser\", options)\r\n        .then(response => response.json())\r\n        .then(json =>{\r\n            if(json.success){\r\n                setTransactionSuccess(true)\r\n            }\r\n        })\r\n        setUpdateData(!updateData)\r\n        \r\n    }\r\n\r\n    async function deleteUser(id){\r\n\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setErrorReportD(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n\r\n\r\n        const options = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        }\r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/user/\"+id, options)\r\n        .then(response => response.json())\r\n        .then(json =>{\r\n            if(json.error){\r\n                setErrorDeleteUser(true)\r\n            }else{\r\n                setTransactionSuccess(true)\r\n            }\r\n        })\r\n\r\n       setUpdateData(!updateData)\r\n\r\n    }\r\n\r\n    async function submitRoles(id, roles){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setErrorReportD(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n\r\n        const body = {\r\n            id: id,\r\n            roles: roles\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/users/manageRoles\", options)\r\n        .then(response => response.json())\r\n        .then(json =>{\r\n            if(json.success){\r\n                setTransactionSuccess(true)\r\n            }\r\n        })\r\n        setUpdateData(!updateData)\r\n    }\r\n\r\n    if(currentTab === \"Upload IsoFiles\"){\r\n        secureStorage.setItem(\"tab\", \"Upload IsoFiles\")\r\n        uploadButton = <button  type=\"button\" class=\"btn btn-info btn-lg\" style={{backgroundColor: \"#17a2b8\", width:\"180px\"}}><b>Upload</b></button>\r\n        tableContent = <DragAndDrop mode={\"upload\"} role={currentRole} user={currentUser}  uploaded={getProgress.bind(this)}/>\r\n        pageSelector = null\r\n    }if(currentTab === \"Design\" && currentRole === \"Design\"){\r\n        uploadButton = <button  type=\"button\" className=\"btn btn-info btn-lg\" style={{backgroundColor: \"lightblue\", width:\"180px\"}} onClick={() => setCurrentTab(\"Upload IsoFiles\")}><b>Upload</b></button>\r\n    }if(currentTab === \"CheckBy\"){\r\n        tableContent = <CheckInTable/>\r\n    }if(currentTab === \"My Tray\"){\r\n        tableContent = <MyTrayTable  updateData = {updateData} onChange={value=> setSelected(value)} cancelVerifyClick={cancelVerifyClick.bind(this)} sendProcessClick={sendProcessClick.bind(this)} success={success.bind(this)} sendInstrumentClick = {sendInstrumentClick.bind(this)} sendCancelProcessClick={sendCancelProcessClick.bind(this)} sendCancelInstrumentClick={sendCancelInstrumentClick.bind(this)} updateD = {updateD.bind(this)} pagination = {pagination} currentRole = {currentRole} currentUser = {currentUser} selected={selected} />\r\n    }if(currentTab === \"Recycle bin\"){\r\n        tableContent = <BinTable onChange={value=> setSelected(value)} selected = {selected} pagination = {pagination} currentTab = {currentTab} updateData = {updateData}/>\r\n    }if(currentTab === \"On hold\"){\r\n        tableContent = <OnHoldTable onChange={value=> setSelected(value)} selected = {selected} pagination = {pagination} currentTab = {currentTab} updateData = {updateData}/>\r\n    }if(currentTab === \"Status\"){\r\n        tableContent = <StatusDataTable onChange={value=> setSelected(value)} pagination = {pagination} role = {currentRole}/>\r\n    }if(currentTab === \"History\"){\r\n        tableContent = <HistoryDataTable pagination = {pagination}/>   \r\n    }if(currentRole === \"Process\" || currentRole === \"Instrument\" || currentRole === \"SpecialityLead\"){\r\n        procInsBtn = <ProcInsBtn onChange={value => procOrInst(value)} currentTab = {currentTab} />\r\n    }if(currentTab === \"Process\" || currentTab === \"Instrument\"){\r\n        tableContent = <ProcInstTable onChange={value=> setSelected(value)} selected = {selected} pagination = {pagination} currentTab = {currentTab} updateData = {updateData} />\r\n    }if(currentTab === \"Reports\"){\r\n        tableContent = <ReportBoxBtns user={currentUser} downloadHistory={downloadHistory.bind(this)} downloadStatus={downloadStatus.bind(this)} downloadPI={downloadPI.bind(this)} downloadIssued={downloadIssued.bind(this)} setErrorReport={setErrorReport.bind(this)} setUploading={setUploading.bind(this)} downloadStatus3D={downloadStatus3D.bind(this)} downloadModelled={downloadModelled.bind(this)} setErrorReportData={setErrorReportData.bind(this)}/>\r\n    }if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n        progressBtn = <ProgressBtn onChange={value => setCurrentTab(\"Progress\")} currentTab = {currentTab}></ProgressBtn>\r\n        modelledBtn = <ModelledBtn onChange={value => setCurrentTab(\"Modelled\")} currentTab = {currentTab}></ModelledBtn>\r\n    }if(currentTab === \"Progress\"){\r\n        tableContent = <ProgressPlot></ProgressPlot>\r\n    }if(currentTab === \"Modelled\"){\r\n        tableContent = <ModelledDataTable  pagination = {pagination}></ModelledDataTable>\r\n    }if(currentRole !== \"Review\"){\r\n        myTrayBtn = <MyTrayBtn onChange={value => setCurrentTab(value)} currentTab = {currentTab}/>\r\n    }if(currentRole === \"SpecialityLead\"){\r\n        if (currentTab === \"Users\"){\r\n            usersButton = <button  type=\"button\" className=\"btn btn-info btn-lg\" style={{backgroundColor: \"#17a2b8\", width:\"180px\"}} onClick={() => setCurrentTab(\"Users\")}><b>Users</b></button>\r\n            secureStorage.setItem(\"tab\", \"Users\")\r\n        }else{\r\n            usersButton = <button  type=\"button\" className=\"btn btn-info btn-lg\" style={{backgroundColor: \"lightblue\", width:\"180px\"}} onClick={() => setCurrentTab(\"Users\")}><b>Users</b></button>\r\n        }\r\n    }if(currentTab === \"Users\"){\r\n \r\n        tableContent = <UsersDataTable pagination = {pagination} updateData={updateData} deleteUser={deleteUser.bind(this)} submitRoles={submitRoles.bind(this)}/>\r\n        if (pagination === 8){\r\n            dataTableHeight = \"650px\"\r\n        }if(pagination === 25){\r\n            dataTableHeight = \"1500px\"\r\n        }if(pagination === 50){\r\n            dataTableHeight = \"2720px\"\r\n        }if(pagination === 100){\r\n            dataTableHeight = \"5200px\"\r\n        }\r\n    }\r\n\r\n    if(currentTab === \"My Tray\" || currentTab === \"LDE/IsoControl\"){\r\n        commentBox = <div>\r\n            <textarea placeholder=\"Comments\" class=\"comments\" cols=\"100\" rows=\"2\" required=\"\" maxlength=\"400\" name=\"comments\" value={comment} onChange={handleComment}></textarea>\r\n        </div>\r\n    }\r\n\r\n    \r\n\r\n    if(((currentRole === \"Design\" || currentRole === \"DesignLead\") && currentTab === \"Design\") || \r\n    ((currentRole === \"Stress\" || currentRole === \"StressLead\") && currentTab === \"Stress\") ||\r\n    ((currentRole === \"Supports\" || currentRole === \"SupportsLead\") && currentTab === \"Supports\") ||\r\n    ((currentRole === \"Materials\") && currentTab === \"Materials\") ||\r\n    ((currentRole === \"Issuer\") && currentTab === \"Issuer\") ||\r\n    ((currentRole === \"SpecialityLead\" && currentTab ===\"SpecialityLead\") ||\r\n    (currentTab=== \"My Tray\")) || (((currentTab === \"Recycle bin\" || currentTab === \"On hold\") && currentRole === \"DesignLead\") || \r\n    currentRole === \"SpecialityLead\" && currentTab !== \"Progress\") || (currentTab === \"Process\" && currentRole === \"Process\") ||\r\n    (currentRole === \"Instrument\" && currentTab === \"Instrument\") ||\r\n    (currentRole === \"Design\" || currentRole === \"DesignLead\") && currentTab === \"Issued\"){\r\n        actionText = <b className=\"progress__text\">Click an action for selected IsoFiles:</b>\r\n        actionButtons = <ActionButtons claimClick={claim.bind(this)} verifyClick={verifyClick.bind(this)} unclaimClick={unclaim.bind(this)} transaction={transaction.bind(this)} restoreClick={restore.bind(this)} returnLead={returnLead.bind(this)} returnLeadStress={returnLeadStress.bind(this)} downloadFiles={downloadFiles.bind(this)} forceClaim={forceClaim.bind(this)} issue={issue.bind(this)} newRev={newRev.bind(this)} request={request.bind(this)} returnIso={returnIso.bind(this)} addUser={addUser.bind(this)} onlyDownload = {false} currentTab = {currentTab} user={currentUser} role = {currentRole}/>\r\n    }else if(currentTab !== \"History\" && currentTab !== \"Upload IsoFiles\" && currentTab !== \"Recycle bin\" && currentTab !== \"Reports\" && currentTab !== \"Progress\" && currentTab !== \"Modelled\"){\r\n        actionText = <b className=\"progress__text\">Click an action for selected IsoFiles:</b>\r\n        actionButtons = <ActionButtons claimClick={claim.bind(this)} verifyClick={verifyClick.bind(this)} unclaimClick={unclaim.bind(this)} transaction={transaction.bind(this)} restoreClick={restore.bind(this)} returnLead={returnLead.bind(this)} returnLeadStress={returnLeadStress.bind(this)} downloadFiles={downloadFiles.bind(this)} forceClaim={forceClaim.bind(this)} issue={issue.bind(this)} newRev={newRev.bind(this)} request={request.bind(this)} returnIso={returnIso.bind(this)} addUser={addUser.bind(this)} onlyDownload = {true} currentTab = {currentTab} user={currentUser} role = {currentRole}/>\r\n    }\r\n    if(currentTab === \"Modelled\"){\r\n        actionText = null\r\n        actionButtons = <button className=\"btn btn-sm btn-success\" style={{marginTop:\"40px\"}} onClick={()=>downloadModelled()}>Export</button>\r\n    }\r\n\r\n    if(currentTab === \"Users\"){\r\n        actionText = null\r\n    }\r\n\r\n    if(currentRole === \"Project\"){\r\n        actionText = null\r\n        actionButtons = null\r\n    }\r\n    \r\n    return (\r\n        \r\n        <body>\r\n            \r\n            <NavBar onChange={value => setCurrentTab(value)}/>\r\n\r\n            <div className=\"isoCtrl__container\">     \r\n                <center>\r\n                    <Collapse in={loading}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\",zIndex:\"3\"}} severity=\"info\"\r\n                            >\r\n                            Processing...\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={errorPI}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"error\"\r\n                            >\r\n                            At least one isometric was on revision and wasn't sent to LDE/Isocontrol\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={transactionSuccess}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"success\"\r\n                            >\r\n                            Successful!\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={errorUnclaim}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"error\"\r\n                            >\r\n                            Can't unclaim an iso assigned by LOS!\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={errorUnclaimR}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"error\"\r\n                            >\r\n                            Can't unclaim a returned ISO!\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={errorReports}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"error\"\r\n                            >\r\n                            Missing columns!\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={errorCL}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"error\"\r\n                            >\r\n                            Missing clean!\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={warningSelected}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"warning\"\r\n                            >\r\n                            Select at least one isometric!\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={blocked}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"error\"\r\n                            >\r\n                            The isometric has been locked! Contact the administrator\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={errorReportD}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"error\"\r\n                            >\r\n                            The line {errorReportDIndex} of the report has an invalid type or progress!\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={errorDeleteUser}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"error\"\r\n                            >\r\n                            This user has claimed isometrics and can't be deleted!\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <h2 className=\"title__container\">\r\n                        <div className=\"roleSelector__container\">\r\n                            <RoleDropDown style={{paddingLeft: \"2px\"}} onChange={value => setCurrentRole(value)} roles = {roles}/>\r\n                         </div>\r\n                        <b >      \r\n                            <i className=\"iso__title\">IsoTracker</i>\r\n                        </b>\r\n                    </h2>\r\n                    <h3 className=\"iso__subtitle\">{currentTabText}</h3>\r\n                </center>\r\n                \r\n                <div>\r\n                    <div>\r\n                        <div style={{display:\"inline\"}}>\r\n                        {myTrayBtn}\r\n                            <td className=\"reportBtns__container\" style={{width:\"380px\"}}>\r\n                                \r\n                                <ReportBtns onChange={value => setCurrentTab(value)} currentTab = {currentTab}/>\r\n                                \r\n                            </td>\r\n                            <td>\r\n                                {uploadButton}\r\n                                {usersButton}\r\n                            </td>   \r\n                            <div className=\"stateTable__container\">\r\n                                \r\n                                <StateTable updateData={updateData} currentRole = {currentRole}/>\r\n                               \r\n                            </div>            \r\n\r\n                        </div>\r\n                    </div>\r\n                </div>              \r\n                \r\n                \r\n                <div style={{position: \"relative\", width:\"600px\"}}>\r\n                  {pageSelector}\r\n                  <BinBtn onChange={value => setCurrentTab(\"Recycle bin\")} currentTab = {currentTab}/>\r\n                  <OnHoldBtn onChange={value => setCurrentTab(\"On hold\")} currentTab = {currentTab}/>\r\n                  <IssuedBtn onChange={value => setCurrentTab(\"Issued\")} currentTab = {currentTab}/>\r\n                  <ReportsBtn onChange={value => setCurrentTab(\"Reports\")} currentTab = {currentTab}/>\r\n                  {progressBtn}\r\n                  {modelledBtn}\r\n                  {procInsBtn}\r\n                  \r\n\r\n                </div>\r\n                    \r\n                \r\n                <div style={{height: dataTableHeight}}>\r\n                    <br></br>\r\n                    <br></br> \r\n                    {tableContent}\r\n                </div>\r\n                <div className=\"bottom__container\">\r\n                    <Collapse in={commentAlert}>\r\n                        <Alert severity=\"error\"\r\n                            >\r\n                            Add a comment before sending the isos back to design!\r\n\r\n                            </Alert>\r\n                    </Collapse>\r\n                    <center className=\"actionBtns__container\">\r\n                        {actionText}\r\n                        {actionButtons}\r\n                    </center>\r\n                    <br></br>\r\n                    <center className=\"commentBox__container\">\r\n                        {commentBox}\r\n                    </center>\r\n                 \r\n                    \r\n                </div>\r\n            </div>\r\n            <center className=\"navBtns__center\">              \r\n                <NavBtns onChange={value => setCurrentTab(value)} currentTab = {currentTab} currentRole = {currentRole}/>               \r\n            </center>\r\n            <br></br>\r\n        </body>\r\n\r\n        \r\n    );\r\n};\r\n\r\nexport default IsoCtrl;\r\n","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\equipments\\equipments.js",["1209","1210","1211"],"import \"./equipments.css\"\r\nimport React, { useState , useEffect} from 'react'\r\nimport NavBar from '../../components/navBar/navBar'\r\nimport RoleDropDown from '../../components/roleDropDown/roleDropDown'\r\nimport EquipEstimatedDataTable from \"../../components/equipEstimatedDataTable/equipEstimatedDataTable\"\r\nimport EquipModelledDataTable from \"../../components/equipModelledDataTable/equipModelledDataTable\"\r\nimport EquipmentsNavBtns from \"../../components/EquipmentsNavBtns/equipmentsNavBtns\"\r\nimport ProgressPlotEquipments from \"../../components/progressPlotEquipments/progressPlotEquipments\"\r\nimport EquipTypesDataTable from \"../../components/equipTypesDataTable/equipTypesDataTable\"\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport EquipExcel from \"../../components/equipExcel/equipExcel\"\r\nimport EquipExcelEdit from \"../../components/equipExcelEdit/equipExcelEdit\"\r\nimport IsoTrackerLogo from \"../../assets/images/3DTracker.svg\"\r\nimport ExportIcon from \"../../assets/images/downloadicon.png\"\r\nimport EditIcon from \"../../assets/images/edit.png\"\r\nimport AlertF from \"../../components/alert/alert\"\r\n\r\nimport IdleTimer from 'react-idle-timer'\r\nimport {useHistory} from \"react-router\";\r\n\r\nconst Equipments = () => {\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n    const [currentRole, setCurrentRole] = useState();\r\n    const [roles, setRoles] = useState();\r\n    const[weight, setWeight] = useState();\r\n    const[progress, setProgress] = useState();\r\n    const[successAlert, setSuccessAlert] = useState(false);\r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(()=>{\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n       \r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/roles/user\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setRoles(json.roles);\r\n                if(secureStorage.getItem('role') !== null){\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }else{\r\n                    secureStorage.setItem('role', json.roles[0])\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }\r\n                }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })       \r\n            \r\n    },[currentRole]);\r\n\r\n    useEffect(()=>{\r\n\r\n        let options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n       \r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/equipments/weight\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setWeight(json.weight)\r\n                setProgress(json.progress)\r\n            }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })     \r\n            \r\n            const body = {\r\n                user: currentUser,\r\n            }\r\n            options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n    \r\n                })\r\n            \r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n        if(!secureStorage.getItem(\"user\")){\r\n            history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/\");\r\n        }\r\n    }, [])\r\n\r\n    function success(){\r\n        setSuccessAlert(true)\r\n        setTimeout(function () {\r\n            setSuccessAlert(false)\r\n        }, 1000);\r\n    }\r\n\r\n    function handleOnIdle(){\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n        secureStorage.clear()\r\n        history.push(\"/\" + process.env.REACT_APP_PROJECT)\r\n    }\r\n    \r\n    \r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    var dataTableHeight = \"500px\"\r\n\r\n    document.title= process.env.REACT_APP_APP_NAMEPROJ\r\n    const [currentTab, setCurrentTab] = useState(secureStorage.getItem(\"equip_tab\"))\r\n    if(currentTab === \"\" || currentTab === null){\r\n        setCurrentTab(\"Estimated\")\r\n    }\r\n\r\n    var currentUser = secureStorage.getItem('user')\r\n    var table = null\r\n\r\n    let downloadBtn = null\r\n    let adminBtn = null\r\n\r\n    if(currentTab === \"Estimated\"){\r\n        table = <EquipEstimatedDataTable/>\r\n    }else if(currentTab === \"Modelled\"){\r\n        downloadBtn = <button className=\"navBar__button\" onClick={()=>downloadEquipmentModelled()} style={{marginLeft:\"230px\", width:\"115px\"}}><img src={ExportIcon} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Export</p></button>\r\n    \r\n        table = <EquipModelledDataTable/>\r\n    }else if(currentTab === \"Progress\"){\r\n        table = <ProgressPlotEquipments/>\r\n    }else if(currentTab === \"Types\"){\r\n        table = <EquipTypesDataTable/>\r\n    }else if(currentTab === \"Key parameters\"){\r\n        table = <EquipExcel success={success.bind(this)}/>\r\n    }else if(currentTab === \"Edit\"){\r\n        table = <EquipExcelEdit success={success.bind(this)}/>\r\n    }\r\n\r\n    \r\n    if(currentTab === \"Edit\" || currentTab === \"Key parameters\"){\r\n        dataTableHeight = \"500px\"\r\n    }\r\n    \r\n    if(currentRole === \"Project\"){\r\n        if(currentTab === \"Estimated\" || currentTab === \"Edit\"){\r\n            if(currentTab === \"Edit\"){\r\n                adminBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Edit\")} style={{backgroundColor:\"#99C6F8\", marginLeft:\"230px\"}}><img src={EditIcon} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Edit</p></button>\r\n            }else{\r\n                adminBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Edit\")} style={{marginLeft:\"230px\"}}><img src={EditIcon} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Edit</p></button>\r\n            }        }else{\r\n            adminBtn = null\r\n        }\r\n    }\r\n\r\n\r\n    async function downloadEquipmentModelled(){\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadEquipmentModelled/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"AREA\", \"TAG\", \"TYPE\", \"WEIGHT\", \"STATUS\", \"PROGRESS\"]\r\n            exportToExcel(JSON.parse(json), \"Equipment modelled\", headers)\r\n        })\r\n    }\r\n\r\n    const exportToExcel = (apiData, fileName, headers) => {\r\n        const fileType =\r\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const header_cells = ['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'O1']\r\n        const fileExtension = \".xlsx\";\r\n\r\n        let wscols = []\r\n        for(let i = 0; i < headers.length; i++){\r\n            wscols.push({width:35})\r\n        }\r\n\r\n        const ws = XLSX.utils.json_to_sheet(apiData);   \r\n        ws[\"!cols\"] = wscols\r\n        for(let i = 0; i < headers.length; i++){\r\n            ws[header_cells[i]].v = headers[i]\r\n        }\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n\r\n    }\r\n\r\n    return(\r\n        \r\n        <body>\r\n            <IdleTimer\r\n                timeout={1000 * 60 * 15}\r\n                onIdle={handleOnIdle}\r\n                debounce={250}\r\n            />\r\n            <NavBar onChange={value => setCurrentTab(currentTab)}/>\r\n            <div\r\n            className={`alert alert-success ${successAlert ? 'alert-shown' : 'alert-hidden'}`}\r\n            onTransitionEnd={() => setSuccessAlert(false)}\r\n            >\r\n                <AlertF type=\"success\" text=\"Changes saved!\" margin=\"0px\"/>\r\n            </div>\r\n            <div style={{position:\"absolute\", marginTop:\"180px\", marginLeft:\"47%\"}}>\r\n                <i className=\"discipline__title\" style={{fontStyle:\"normal\"}}>Equipment</i>\r\n            </div>\r\n                <div className=\"isotracker__row\">\r\n                  <div className=\"isotracker__column\">\r\n                      <img src={IsoTrackerLogo} alt=\"isoTrackerLogo\" className=\"isoTrackerLogo__image2\"/>\r\n                      \r\n                      <div className=\"roleSelector__containerF\">\r\n                              <RoleDropDown style={{paddingLeft: \"2px\"}} onChange={value => setCurrentRole(value)} roles = {roles}/>\r\n                      </div>\r\n                      \r\n                  </div>\r\n\r\n                  <div className=\"isotracker__column\">\r\n                  \r\n                  <table className=\"equipTable__table\" style={{marginTop:\"270px\", width:\"35%\", marginLeft:\"59%\"}}>\r\n                        <tbody className=\"equipable__body\">\r\n                            <tr>    \r\n                                <td  className=\"equipTable__header\" style={{backgroundColor:\"#338DF1\", borderRadius:\"1em 0 0 0\"}}>Estimated weight</td>\r\n                                <td className=\"equipTable__header\" style={{backgroundColor:\"#338DF1\", borderRadius:\"0 1em 0 0\"}}>Total progress</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"equipTable__state\" style={{borderRadius:\"0 0 0 1em\"}}>{weight}</td>\r\n                                <td className=\"equipTable__state\" style={{borderRadius:\"0 0 1em 0\"}}>{progress}%</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    \r\n                  </div>               \r\n                  \r\n                  \r\n              </div>\r\n              <table className=\"isotracker__table__container\">\r\n                      <tr className=\"isotracker__table__navBar__container\">\r\n                          <th  colspan=\"2\" className=\"isotracker__table__navBar\">\r\n                            {adminBtn}\r\n                            {downloadBtn}\r\n                          </th>\r\n                      </tr>\r\n                      <tr className=\"isotracker__table__tray__and__table__container\" style={{height: dataTableHeight}}>\r\n                          <td className=\"disciplines__table__trays\">\r\n                              <div className=\"trays__container\">\r\n                                  <p className=\"isotracker__table__trays__group\">Options</p>\r\n                                  <center className=\"equimentsNavBtns__center\">              \r\n                                    <EquipmentsNavBtns onChange={value => setCurrentTab(value)} currentTab = {currentTab} currentRole = {currentRole} discipline = \"Equipment\"/>               \r\n                                    </center>\r\n                              </div>\r\n                          </td>\r\n                          <td className=\"discplines__table__table\" >\r\n                              <div  style={{height: \"540px\", width: \"1550px\"}} className=\"isotracker__table__table__container\">\r\n                                  {table}\r\n                              </div>\r\n                          </td>\r\n                          \r\n                      </tr>\r\n                  </table>\r\n         </body>\r\n    )\r\n}\r\n\r\nexport default Equipments;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\civil\\civil.js",["1212","1213","1214"],"import \"./civil.css\"\r\nimport React, { useState , useEffect} from 'react'\r\nimport NavBar from '../../components/navBar/navBar'\r\nimport RoleDropDown from '../../components/roleDropDown/roleDropDown'\r\nimport EquipmentsNavBtns from \"../../components/EquipmentsNavBtns/equipmentsNavBtns\"\r\nimport ProgressPlotCivils from \"../../components/progressPlotCivils/progressPlotCivils\"\r\nimport CivilEstimatedDataTable from \"../../components/civilEstimatedDataTable/civilEstimatedDataTable\"\r\nimport CivilModelledDataTable from \"../../components/civilModelledDataTable/civilModelledDataTable\"\r\nimport CivilTypesDataTable from \"../../components/civilTypesDataTable/civilTypesDataTable\"\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport CivilExcel from \"../../components/civilExcel/civilExcel\"\r\nimport CivilExcelEdit from \"../../components/civilExcelEdit/civilExcelEdit\"\r\nimport IsoTrackerLogo from \"../../assets/images/3DTracker.svg\"\r\nimport ExportIcon from \"../../assets/images/downloadicon.png\"\r\nimport EditIcon from \"../../assets/images/edit.png\"\r\nimport AlertF from \"../../components/alert/alert\"\r\n\r\nimport IdleTimer from 'react-idle-timer'\r\nimport {useHistory} from \"react-router\";\r\n\r\n\r\nconst Civil = () => {\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n    const [currentRole, setCurrentRole] = useState();\r\n    const [roles, setRoles] = useState();\r\n    const[weight, setWeight] = useState();\r\n    const[progress, setProgress] = useState();\r\n    const[successAlert, setSuccessAlert] = useState(false);\r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(()=>{\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n       \r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/roles/user\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setRoles(json.roles);\r\n                if(secureStorage.getItem('role') !== null){\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }else{\r\n                    secureStorage.setItem('role', json.roles[0])\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }\r\n                }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })       \r\n            \r\n    },[currentRole]);\r\n\r\n    useEffect(()=>{\r\n\r\n        let options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n       \r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/civils/weight\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setWeight(json.weight)\r\n                setProgress(json.progress)\r\n            }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })  \r\n            \r\n            const body = {\r\n                user: currentUser,\r\n            }\r\n            options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n    \r\n                })\r\n            \r\n    },[]);\r\n\r\n    function success(){\r\n        setSuccessAlert(true)\r\n        setTimeout(function () {\r\n            setSuccessAlert(false)\r\n        }, 1000);\r\n    }\r\n\r\n    function handleOnIdle(){\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n        secureStorage.clear()\r\n        history.push(\"/\" + process.env.REACT_APP_PROJECT)\r\n    }\r\n    \r\n    \r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    useEffect(()=>{\r\n        if(!secureStorage.getItem(\"user\")){\r\n            history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/\");\r\n        }\r\n    }, [])\r\n\r\n    var dataTableHeight = \"500px\"\r\n\r\n    \r\n    document.title= process.env.REACT_APP_APP_NAMEPROJ\r\n    const [currentTab, setCurrentTab] = useState(secureStorage.getItem(\"civ_tab\"))\r\n    if(currentTab === \"\" || currentTab === null){\r\n        setCurrentTab(\"Estimated\")\r\n    }\r\n\r\n    var currentUser = secureStorage.getItem('user')\r\n    var table = null\r\n\r\n    let downloadBtn = null\r\n    let adminBtn = null\r\n\r\n\r\n    if(currentTab === \"Estimated\"){\r\n        table = <CivilEstimatedDataTable/>\r\n    }else if(currentTab === \"Modelled\"){\r\n        downloadBtn = <button className=\"navBar__button\" onClick={()=>downloadCivilsModelled()} style={{marginLeft:\"230px\", width:\"115px\"}}><img src={ExportIcon} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Export</p></button>\r\n    \r\n        table = <CivilModelledDataTable/>\r\n    }else if(currentTab === \"Progress\"){\r\n        table = <ProgressPlotCivils/>\r\n    }else if(currentTab === \"Types\"){\r\n        table = <CivilTypesDataTable/>\r\n    }else if(currentTab === \"Key parameters\"){\r\n        table = <CivilExcel success={success.bind(this)}/>\r\n    }else if(currentTab === \"Edit\"){\r\n        table = <CivilExcelEdit success={success.bind(this)}/>\r\n    }\r\n\r\n    \r\n    if(currentTab === \"Edit\" || currentTab === \"Key parameters\"){\r\n        dataTableHeight = \"500px\"\r\n    }\r\n    \r\n    if(currentRole === \"Project\"){\r\n        if(currentTab === \"Estimated\" || currentTab === \"Edit\"){\r\n            if(currentTab === \"Edit\"){\r\n                adminBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Edit\")} style={{backgroundColor:\"#99C6F8\", marginLeft:\"230px\"}}><img src={EditIcon} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Edit</p></button>\r\n            }else{\r\n                adminBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Edit\")} style={{marginLeft:\"230px\"}}><img src={EditIcon} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Edit</p></button>\r\n            }        }else{\r\n            adminBtn = null \r\n        }\r\n    }\r\n\r\n    async function downloadCivilsModelled(){\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadCivilsModelled/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"AREA\", \"TAG\", \"TYPE\", \"WEIGHT\", \"STATUS\", \"PROGRESS\"]\r\n            exportToExcel(JSON.parse(json), \"Civil modelled\", headers)\r\n        })\r\n    }\r\n\r\n    const exportToExcel = (apiData, fileName, headers) => {\r\n        const fileType =\r\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const header_cells = ['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'O1']\r\n        const fileExtension = \".xlsx\";\r\n\r\n        let wscols = []\r\n        for(let i = 0; i < headers.length; i++){\r\n            wscols.push({width:35})\r\n        }\r\n\r\n        const ws = XLSX.utils.json_to_sheet(apiData);   \r\n        ws[\"!cols\"] = wscols\r\n        for(let i = 0; i < headers.length; i++){\r\n            ws[header_cells[i]].v = headers[i]\r\n        }\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n\r\n    }\r\n\r\n    return(\r\n        \r\n        <body>\r\n            <IdleTimer\r\n                timeout={1000 * 60 * 15}\r\n                onIdle={handleOnIdle}\r\n                debounce={250}\r\n            />\r\n            <NavBar onChange={value => setCurrentTab(currentTab)}/>\r\n            <div\r\n            className={`alert alert-success ${successAlert ? 'alert-shown' : 'alert-hidden'}`}\r\n            onTransitionEnd={() => setSuccessAlert(false)}\r\n            >\r\n                <AlertF type=\"success\" text=\"Changes saved!\" margin=\"0px\"/>\r\n            </div>\r\n            <div style={{position:\"absolute\", marginTop:\"180px\", marginLeft:\"49%\"}}>\r\n                <i className=\"discipline__title\" style={{fontStyle:\"normal\"}}>Civil</i>\r\n            </div>\r\n                <div className=\"isotracker__row\">\r\n                  <div className=\"isotracker__column\">\r\n                      <img src={IsoTrackerLogo} alt=\"isoTrackerLogo\" className=\"isoTrackerLogo__image2\"/>\r\n                      \r\n                      <div className=\"roleSelector__containerF\">\r\n                              <RoleDropDown style={{paddingLeft: \"2px\"}} onChange={value => setCurrentRole(value)} roles = {roles}/>\r\n                      </div>\r\n                      \r\n                  </div>\r\n\r\n                  <div className=\"isotracker__column\">\r\n                  \r\n                  <table className=\"equipTable__table\" style={{marginTop:\"270px\", width:\"35%\", marginLeft:\"59%\"}}>\r\n                        <tbody className=\"equipable__body\">\r\n                            <tr>    \r\n                                <td  className=\"equipTable__header\" style={{backgroundColor:\"#338DF1\", borderRadius:\"1em 0 0 0\"}}>Estimated weight</td>\r\n                                <td className=\"equipTable__header\" style={{backgroundColor:\"#338DF1\", borderRadius:\"0 1em 0 0\"}}>Total progress</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"equipTable__state\" style={{borderRadius:\"0 0 0 1em\"}}>{weight}</td>\r\n                                <td className=\"equipTable__state\" style={{borderRadius:\"0 0 1em 0\"}}>{progress}%</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    \r\n                  </div>               \r\n                  \r\n                  \r\n              </div>\r\n              <table className=\"isotracker__table__container\">\r\n                      <tr className=\"isotracker__table__navBar__container\">\r\n                          <th  colspan=\"2\" className=\"isotracker__table__navBar\">\r\n                            {adminBtn}\r\n                            {downloadBtn}\r\n                          </th>\r\n                      </tr>\r\n                      <tr className=\"isotracker__table__tray__and__table__container\" style={{height: dataTableHeight}}>\r\n                          <td className=\"disciplines__table__trays\">\r\n                              <div className=\"trays__container\">\r\n                                  <p className=\"isotracker__table__trays__group\">Options</p>\r\n                                  <center className=\"equimentsNavBtns__center\">              \r\n                                    <EquipmentsNavBtns onChange={value => setCurrentTab(value)} currentTab = {currentTab} currentRole = {currentRole} discipline = \"Equipment\"/>               \r\n                                    </center>\r\n                              </div>\r\n                          </td>\r\n                          <td className=\"discplines__table__table\" >\r\n                              <div  style={{height: \"540px\", width: \"1550px\"}} className=\"isotracker__table__table__container\">\r\n                                  {table}\r\n                              </div>\r\n                          </td>\r\n                          \r\n                      </tr>\r\n                  </table>\r\n         </body>\r\n    )\r\n}\r\n\r\nexport default Civil;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\changePassword\\changePassword.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\navis\\navis.js",["1215"],"import React, { useState , useEffect} from 'react'\r\nimport NavisTable from '../../components/navisTable/navisTable';\r\nimport \"./navis.css\"\r\n\r\nconst Navis = () => {\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n    const [currentRole, setCurrentRole] = useState();\r\n    \r\n\r\n    useEffect(()=>{\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n       \r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/roles/user\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                if(secureStorage.getItem('role') !== null){\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }else{\r\n                    secureStorage.setItem('role', json.roles[0])\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }\r\n                }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })       \r\n            \r\n    },[currentRole]);\r\n\r\n\r\n    \r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n\r\n\r\n    \r\n    document.title= process.env.REACT_APP_APP_NAMEPROJ\r\n    const [currentTab, setCurrentTab] = useState(secureStorage.getItem(\"civ_tab\"))\r\n    if(currentTab === \"\" || currentTab === null){\r\n        setCurrentTab(\"Estimated\")\r\n    }\r\n\r\n    var currentUser = secureStorage.getItem('user')\r\n    var table = null\r\n\r\n\r\n    table = <NavisTable/>\r\n\r\n    \r\n\r\n    return(\r\n        \r\n        <body>\r\n            <div className=\"navis__container\">  \r\n                <div>\r\n                    <br></br>\r\n                    <br></br> \r\n\r\n                    <br></br> \r\n                    {table}\r\n                </div>         \r\n            </div>\r\n         </body>\r\n    )\r\n}\r\n\r\nexport default Navis;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\home\\home.js",["1216","1217"],"import NavBar from '../../components/navBar/navBar';\r\nimport MenuList from '../../components/menuList/menuList';\r\nimport React, { useState , useEffect} from 'react'\r\nimport './home.css'\r\nimport LoadingScreen3D from '../../components/loadingScreen3D/loadingScreen3D';\r\nimport GreenCircle from \"../../assets/images/green_circle.png\"\r\nimport BlueCircle from \"../../assets/images/blue_circle.png\"\r\n\r\nimport IdleTimer from 'react-idle-timer'\r\nimport {useHistory} from \"react-router\";\r\n\r\n//Página de home con el menú para ir a las aplicaciones de isotracker\r\n\r\nconst Home = () =>{\r\n\r\n    const [content, setContent] = useState();\r\n    const [navBar, setNavBar] = useState(null);\r\n    const [circles, setCircles] = useState(null);\r\n\r\n    const history = useHistory()\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    useEffect(()=>{\r\n        if(!secureStorage.getItem(\"user\")){\r\n            history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/\");\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() =>{\r\n\r\n        setContent(<LoadingScreen3D progress={\"25\"}/>)\r\n        setTimeout(() => {\r\n            setContent(<LoadingScreen3D progress={\"75\"}/>)\r\n        }, 1000)\r\n        setTimeout(() => {\r\n            setContent(<LoadingScreen3D progress={\"100\"}/>)\r\n        }, 2000)\r\n        setTimeout(() => {\r\n            setNavBar(<NavBar/>)\r\n            setContent(<MenuList/>)    \r\n            setCircles(<div><img src={GreenCircle} alt=\"greenCircle\" className=\"greenCircle__image\"/>\r\n            <img src={BlueCircle} alt=\"blueCircle\" className=\"blueCircle__image\"/></div>)        \r\n        }, 2300);\r\n\r\n        const body = {\r\n            user: secureStorage.getItem(\"user\"),\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n\r\n          \r\n    }, [])\r\n\r\n    document.title= process.env.REACT_APP_APP_NAMEPROJ\r\n    \r\n\r\n    function handleOnIdle(){\r\n        const body = {\r\n            user: secureStorage.getItem(\"user\"),\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n        secureStorage.clear()\r\n        history.push(\"/\" + process.env.REACT_APP_PROJECT)\r\n    }\r\n\r\n    return(\r\n        <body>\r\n            <IdleTimer\r\n                timeout={1000 * 60 * 15}\r\n                onIdle={handleOnIdle}\r\n                debounce={250}\r\n            />\r\n            {circles}\r\n            <div>\r\n                {navBar}\r\n                {content}\r\n            </div>\r\n        </body>\r\n    );\r\n};\r\n\r\nexport default Home;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\piping\\piping.js",["1218","1219","1220"],"import \"./piping.css\"\r\nimport React, { useState , useEffect} from 'react'\r\nimport NavBar from '../../components/navBar/navBar'\r\nimport RoleDropDown from '../../components/roleDropDown/roleDropDown'\r\nimport EquipmentsNavBtns from \"../../components/EquipmentsNavBtns/equipmentsNavBtns\"\r\nimport PipingEstimatedDataTable from \"../../components/pipingEstimatedDataTable/pipingEstimatedDataTable\"\r\nimport ModelledDataTable from \"../../components/modelledDataTable/modelledDataTable\"\r\nimport ProgressPlotPiping from \"../../components/progressPlotPiping/progressPlotPiping\"\r\nimport PipingTypesDataTable from \"../../components/pipingTypesDataTable/pipingTypesDataTable\"\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport PipingExcel from \"../../components/pipingExcel/pipingExcel\"\r\nimport PipingExcelEdit from \"../../components/pipingExcelEdit/pipingExcelEdit\"\r\nimport IsoTrackerLogo from \"../../assets/images/3DTracker.svg\"\r\nimport ExportIcon from \"../../assets/images/downloadicon.png\"\r\nimport EditIcon from \"../../assets/images/edit.png\"\r\nimport AlertF from \"../../components/alert/alert\"\r\n\r\nimport IdleTimer from 'react-idle-timer'\r\nimport {useHistory} from \"react-router\";\r\n\r\nconst Piping = () => {\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n    const [currentRole, setCurrentRole] = useState();\r\n    const [roles, setRoles] = useState();\r\n    const[weight, setWeight] = useState();\r\n    const[progress, setProgress] = useState();\r\n    const[successAlert, setSuccessAlert] = useState(false);\r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(()=>{\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n       \r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/roles/user\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setRoles(json.roles);\r\n                if(secureStorage.getItem('role') !== null){\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }else{\r\n                    secureStorage.setItem('role', json.roles[0])\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }\r\n                }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })       \r\n            \r\n    },[currentRole]);\r\n\r\n    useEffect(()=>{\r\n\r\n        let options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n       \r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/pipingWeight\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setWeight(json.weight)\r\n                setProgress(json.progress)\r\n            }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })       \r\n\r\n            const body = {\r\n                user: currentUser,\r\n            }\r\n            options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n    \r\n                })\r\n            \r\n    },[]);\r\n\r\n    function success(){\r\n        setSuccessAlert(true)\r\n        setTimeout(function () {\r\n            setSuccessAlert(false)\r\n        }, 1000);\r\n    }\r\n\r\n    function handleOnIdle(){\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n        secureStorage.clear()\r\n        history.push(\"/\" + process.env.REACT_APP_PROJECT)\r\n    }\r\n    \r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    useEffect(()=>{\r\n        if(!secureStorage.getItem(\"user\")){\r\n            history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/\");\r\n        }\r\n    }, [])\r\n\r\n    var dataTableHeight = \"540px\"\r\n\r\n    \r\n    document.title= process.env.REACT_APP_APP_NAMEPROJ\r\n    const [currentTab, setCurrentTab] = useState(secureStorage.getItem(\"piping_tab\"))\r\n    if(currentTab === \"\" || currentTab === null){\r\n        setCurrentTab(\"Estimated\")\r\n    }\r\n\r\n    var currentUser = secureStorage.getItem('user')\r\n    var table = null\r\n    let downloadBtn = null\r\n    let adminBtn = null\r\n\r\n    if(currentTab === \"Estimated\"){\r\n        table = <PipingEstimatedDataTable/>\r\n    }else if(currentTab === \"Modelled\"){\r\n        downloadBtn = <button className=\"navBar__button\" onClick={()=>downloadModelled()} style={{marginLeft:\"230px\", width:\"115px\"}}><img src={ExportIcon} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Export</p></button>\r\n    \r\n        table = <ModelledDataTable/>\r\n    }else if(currentTab === \"Progress\"){\r\n        table = <ProgressPlotPiping/>\r\n    }else if(currentTab === \"Types\"){\r\n        table = <PipingTypesDataTable/>\r\n    }else if(currentTab === \"Key parameters\"){\r\n        table = <PipingExcel success={success.bind(this)}/>\r\n    }else if(currentTab === \"Edit\"){\r\n        table = <PipingExcelEdit success={success.bind(this)}/>\r\n    }\r\n\r\n    \r\n    if(currentTab === \"Edit\" || currentTab === \"Key parameters\"){\r\n        dataTableHeight = \"500px\"\r\n    }\r\n    \r\n    if(currentRole === \"Project\"){\r\n        if(currentTab === \"Estimated\" || currentTab === \"Edit\"){\r\n            if(currentTab === \"Edit\"){\r\n                adminBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Edit\")} style={{backgroundColor:\"#99C6F8\", marginLeft:\"230px\"}}><img src={EditIcon} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Edit</p></button>\r\n            }else{\r\n                adminBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Edit\")} style={{marginLeft:\"230px\"}}><img src={EditIcon} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Edit</p></button>\r\n            }        }else{\r\n            adminBtn = null\r\n        }\r\n    }\r\n        \r\n\r\n    async function downloadModelled(){\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadModelled/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"TAG\", \"ISO_ID\", \"TYPE\"]\r\n            exportToExcel(JSON.parse(json), \"Piping modelled\", headers)\r\n        })\r\n    }\r\n\r\n    const exportToExcel = (apiData, fileName, headers) => {\r\n        const fileType =\r\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const header_cells = ['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'O1']\r\n        const fileExtension = \".xlsx\";\r\n\r\n        let wscols = []\r\n        for(let i = 0; i < headers.length; i++){\r\n            wscols.push({width:35})\r\n        }\r\n\r\n        const ws = XLSX.utils.json_to_sheet(apiData);   \r\n        ws[\"!cols\"] = wscols\r\n        for(let i = 0; i < headers.length; i++){\r\n            ws[header_cells[i]].v = headers[i]\r\n        }\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n\r\n    }\r\n\r\n\r\n    return(\r\n        \r\n        <body>\r\n            <IdleTimer\r\n                timeout={1000 * 60 * 15}\r\n                onIdle={handleOnIdle}\r\n                debounce={250}\r\n            />\r\n            <NavBar onChange={value => setCurrentTab(currentTab)}/>\r\n            <div\r\n            className={`alert alert-success ${successAlert ? 'alert-shown' : 'alert-hidden'}`}\r\n            onTransitionEnd={() => setSuccessAlert(false)}\r\n            >\r\n                <AlertF type=\"success\" text=\"Changes saved!\" margin=\"0px\"/>\r\n            </div>\r\n            <div style={{position:\"absolute\", marginTop:\"180px\", marginLeft:\"48%\"}}>\r\n                <i className=\"discipline__title\" style={{fontStyle:\"normal\"}}>Piping</i>\r\n            </div>\r\n                <div className=\"isotracker__row\">\r\n                  <div className=\"isotracker__column\">\r\n                      <img src={IsoTrackerLogo} alt=\"isoTrackerLogo\" className=\"isoTrackerLogo__image2\"/>\r\n                      \r\n                      <div className=\"roleSelector__containerF\">\r\n                              <RoleDropDown style={{paddingLeft: \"2px\"}} onChange={value => setCurrentRole(value)} roles = {roles}/>\r\n                      </div>\r\n                      \r\n                  </div>\r\n\r\n                  <div className=\"isotracker__column\">\r\n                  \r\n                  <table className=\"equipTable__table\" style={{marginTop:\"270px\", width:\"35%\", marginLeft:\"59%\"}}>\r\n                        <tbody className=\"equipable__body\">\r\n                            <tr>    \r\n                                <td  className=\"equipTable__header\" style={{backgroundColor:\"#338DF1\", borderRadius:\"1em 0 0 0\"}}>Estimated weight</td>\r\n                                <td className=\"equipTable__header\" style={{backgroundColor:\"#338DF1\", borderRadius:\"0 1em 0 0\"}}>Total progress</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"equipTable__state\" style={{borderRadius:\"0 0 0 1em\"}}>{weight}</td>\r\n                                <td className=\"equipTable__state\" style={{borderRadius:\"0 0 1em 0\"}}>{progress}%</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    \r\n                  </div>               \r\n                  \r\n                  \r\n              </div>\r\n              <table className=\"isotracker__table__container\">\r\n                      <tr className=\"isotracker__table__navBar__container\">\r\n                          <th  colspan=\"2\" className=\"isotracker__table__navBar\">\r\n                            {adminBtn}\r\n                            {downloadBtn}\r\n                          </th>\r\n                      </tr>\r\n                      <tr className=\"isotracker__table__tray__and__table__container\" style={{height: dataTableHeight}}>\r\n                          <td className=\"disciplines__table__trays\">\r\n                              <div className=\"trays__container\">\r\n                                  <p className=\"isotracker__table__trays__group\">Options</p>\r\n                                  <center className=\"equimentsNavBtns__center\">              \r\n                                    <EquipmentsNavBtns onChange={value => setCurrentTab(value)} currentTab = {currentTab} currentRole = {currentRole} discipline = \"Equipment\"/>               \r\n                                    </center>\r\n                              </div>\r\n                          </td>\r\n                          <td className=\"discplines__table__table\" style={{height: dataTableHeight}} >\r\n                              <div  style={{height: dataTableHeight, width: \"1550px\"}} className=\"isotracker__table__table__container\">\r\n                                  {table}\r\n                              </div>\r\n                          </td>\r\n                          \r\n                      </tr>\r\n                  </table>\r\n         </body>\r\n    )\r\n}\r\n\r\nexport default Piping;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\progressCurve\\progressCurve.js",["1221","1222","1223"],"import \"./progressCurve.css\"\r\nimport React, { useState , useEffect} from 'react'\r\nimport NavBar from '../../components/navBar/navBar'\r\nimport ProgressPlotCurve from \"../../components/progressPlotCurve/progressPlotCurve\"\r\n\r\nimport IdleTimer from 'react-idle-timer'\r\nimport {useHistory} from \"react-router\";\r\n\r\nconst Civil = () => {\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n    const [currentRole, setCurrentRole] = useState();\r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(()=>{\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n       \r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/roles/user\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                if(secureStorage.getItem('role') !== null){\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }else{\r\n                    secureStorage.setItem('role', json.roles[0])\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }\r\n                }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })       \r\n            \r\n    },[currentRole]);\r\n\r\n    useEffect(()=>{\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n    },[])\r\n\r\n    function handleOnIdle(){\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n        secureStorage.clear()\r\n        history.push(\"/\" + process.env.REACT_APP_APP_PROJECT)\r\n    }\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    useEffect(()=>{\r\n        if(!secureStorage.getItem(\"user\")){\r\n            history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/\");\r\n        }\r\n    }, [])\r\n\r\n    var dataTableHeight = \"550px\"\r\n\r\n\r\n    \r\n    document.title= process.env.REACT_APP_PROJECT\r\n    const [currentTab, setCurrentTab] = useState(secureStorage.getItem(\"civ_tab\"))\r\n    if(currentTab === \"\" || currentTab === null){\r\n        setCurrentTab(\"Estimated\")\r\n    }\r\n\r\n    var currentUser = secureStorage.getItem('user')\r\n    var table = null\r\n\r\n    table = <ProgressPlotCurve/>\r\n\r\n\r\n\r\n    return(\r\n        \r\n        <body>\r\n            <IdleTimer\r\n                timeout={1000 * 60 * 15}\r\n                onIdle={handleOnIdle}\r\n                debounce={250}\r\n            />\r\n            <NavBar/>\r\n            <div className=\"equipments__container\">  \r\n                <center>\r\n                    <h2 className=\"title__container\">\r\n\r\n                        <b >      \r\n                            <i className=\"iso__title\">Progress curve</i>\r\n                        </b>\r\n                    </h2>\r\n                    <h3 className=\"iso__subtitle\">3D Progress</h3>\r\n                </center>\r\n\r\n\r\n                <div style={{height: dataTableHeight}}>\r\n                    <br></br>\r\n                    <br></br> \r\n                    <br></br> \r\n                    {table}\r\n                </div>         \r\n            </div>\r\n         </body>\r\n    )\r\n}\r\n\r\nexport default Civil;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\welcomeLoginF\\welcomeLoginF.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\pitrequests\\pitrequests.js",["1224","1225"],"import NavBar from '../../components/navBar/navBar';\r\nimport React, { useState , useEffect} from 'react'\r\nimport GreenCircle from \"../../assets/images/green_circle.png\"\r\nimport BlueCircle from \"../../assets/images/blue_circle.png\"\r\n\r\nimport IdleTimer from 'react-idle-timer'\r\nimport {useHistory} from \"react-router\";\r\nimport MenuListPIT from '../../components/menuListPit/menuListPit';\r\n\r\nimport AlertF from \"../../components/alert/alert\"\r\n\r\n//Página de home con el menú para ir a las aplicaciones de isotracker\r\n\r\nconst PITRequests = () =>{\r\n\r\n    const [content, setContent] = useState();\r\n    const [navBar, setNavBar] = useState(null);\r\n    const [circles, setCircles] = useState(null);\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const history = useHistory();\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    useEffect(()=>{\r\n        if(!secureStorage.getItem(\"user\")){\r\n            history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/\");\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() =>{        \r\n        setNavBar(<NavBar/>)\r\n        setContent(<MenuListPIT success={() => setSuccess(true)}/>)    \r\n        setCircles(<div><img src={GreenCircle} alt=\"greenCircle\" className=\"greenCircle__image\"/>\r\n        <img src={BlueCircle} alt=\"blueCircle\" className=\"blueCircle__image\"/></div>)               \r\n\r\n        const body = {\r\n            user: secureStorage.getItem(\"user\"),\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n\r\n          \r\n    }, [])\r\n\r\n    document.title= process.env.REACT_APP_APP_NAMEPROJ\r\n    \r\n\r\n    function handleOnIdle(){\r\n        const body = {\r\n            user: secureStorage.getItem(\"user\"),\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n        secureStorage.clear()\r\n        history.push(\"/\" + process.env.REACT_APP_PROJECT)\r\n    }\r\n\r\n    return(\r\n        <body >\r\n            <IdleTimer\r\n                timeout={1000 * 60 * 15}\r\n                onIdle={handleOnIdle}\r\n                debounce={250}\r\n            />\r\n            <div style={{zIndex: 99999}}\r\n            className={`alert alert-success ${success ? 'alert-shown' : 'alert-hidden'}`}\r\n            onTransitionEnd={() => setSuccess(false)}\r\n            >\r\n                <AlertF type=\"qtracker\"/>\r\n            </div>\r\n            {circles}\r\n            <div>\r\n                {navBar}\r\n                {content}\r\n            </div>\r\n        </body>\r\n    );\r\n};\r\n\r\nexport default PITRequests;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\isoCtrlF\\isoCtrlF.js",["1226","1227","1228","1229","1230","1231","1232","1233"],"import DataTable from \"../../components/datatable/datatable\"\r\nimport ReportBtns from \"../../components/reportBtns/reportBtns\"\r\nimport StateTable from \"../../components/stateTable/stateTable\"\r\nimport NavBtns from \"../../components/navBtns/navBtns\"\r\nimport DragAndDrop from \"../../components/dragAndDrop/dragAndDrop\"\r\nimport \"./isoCtrlF.css\"\r\nimport React, { useState , useEffect} from 'react'\r\nimport ActionButtons from \"../../components/actionBtns/actionBtns\"\r\nimport CheckInTable from \"../../components/checkInTable/checkInTable\"\r\nimport NavBar from '../../components/navBar/navBar'\r\nimport MyTrayBtn from \"../../components/myTrayBtn/myTrayBtn\"\r\nimport MyTrayTable from \"../../components/myTrayTable/myTrayTable\"\r\nimport BinTable from \"../../components/binTable/binTable\"\r\nimport OnHoldTable from \"../../components/onHoldTable/onHoldTable\"\r\nimport StatusDataTable from \"../../components/statusDataTable/statusDataTable\"\r\nimport HistoryDataTable from \"../../components/historyDataTable/historyDataTable\"\r\nimport RoleDropDown from \"../../components/roleDropDown/roleDropDown\"\r\n\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse'\r\nimport ProcInstTable from \"../../components/procInstTable/procInstTable\"\r\nimport JSZip from 'jszip'\r\nimport { saveAs } from 'file-saver';\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ReportBoxBtns from \"../../components/reportBoxBtns/reportBoxBtns\"\r\nimport ProgressBtn from \"../../components/progressBtn/progressBtn\"\r\nimport ProgressPlot from \"../../components/progressPlot/progressPlot\"\r\nimport ModelledBtn from \"../../components/modelledBtn/modelledBtn\"\r\nimport ModelledDataTable from \"../../components/modelledDataTable/modelledDataTable\"\r\nimport UsersDataTable from \"../../components/usersDataTable/usersDataTable\"\r\nimport TimeTrackDataTable from \"../../components/timeTrackDataTable/timeTrackDataTable\"\r\n\r\nimport IsoTrackerLogo from \"../../assets/images/IsoTracker.svg\"\r\nimport Trash from \"../../assets/images/Trash.png\"\r\nimport Hold from \"../../assets/images/Prohibit.png\"\r\nimport Issued from \"../../assets/images/FolderOpen.png\"\r\nimport Reports from \"../../assets/images/Notepad.png\"\r\nimport Modelled from \"../../assets/images/Cube.png\"\r\nimport ProcInst from \"../../assets/images/MagnifyingGlass.png\"\r\nimport Progress from \"../../assets/images/ChartBar.png\"\r\nimport UploadIcon from \"../../assets/images/upload.png\"\r\nimport UsersIcon from \"../../assets/images/user.png\"\r\nimport ClockIcon from \"../../assets/images/clock.png\"\r\nimport LoadingScreen from \"../../components/loadingScreen/loadingScreen\"\r\n\r\nimport AlertF from \"../../components/alert/alert\"\r\nimport IsoControlModelledDataTable from \"../../components/isoControlModelledDataTable/isoControlModelledDataTable\"\r\nimport IsoControlNotModelledDataTable from \"../../components/isoControlNotModelledDataTable/isoControlNotModelledDataTable\"\r\nimport IsoControlFullDataTable from \"../../components/isoControlFullDataTable/isoControlFullDataTable\"\r\nimport IsoControlGroupLineIdDataTable from \"../../components/isoControlGroupLineIdDataTable/isoControlGroupLineIdDataTable\"\r\nimport UploadBOMIsocontrolPopUp from \"../../components/uploadBomIsocontrolPopUp/uploadBomIsocontrolPopUp\"\r\nimport IdleTimer from 'react-idle-timer'\r\nimport {useHistory} from \"react-router\";\r\nimport ByPassDataTable from \"../../components/byPassDataTable/byPassDataTable\"\r\nimport IssuedDataTable from \"../../components/issuedDataTable/issuedDataTable\"\r\n\r\nconst IsoCtrlF = () => {\r\n   \r\n    \r\n    document.title= process.env.REACT_APP_APP_NAMEPROJ\r\n    const [currentRole, setCurrentRole] = useState();\r\n    const [roles, setRoles] = useState();\r\n    const [selected, setSelected] = useState([]);\r\n    const [updateData, setUpdateData] = useState();\r\n    const [comment, setComment] = useState(\" \");\r\n    const [downloadZip, setDownloadzip] = useState(new JSZip());\r\n    const [loading, setLoading] = useState(false);\r\n    const [errorUnclaim, setErrorUnclaim] = useState(false);\r\n    const [errorPI, setErrorPI] = useState(false);\r\n    const [errorCL, setErrorCL] = useState(false);\r\n    const [transactionSuccess, setTransactionSuccess] = useState(false);\r\n    const [errorReports, setErrorReports] = useState(false);\r\n    const [errorUnclaimR, setErrorUnclaimR] = useState(false);\r\n    const [warningSelected, setWarningSelected] = useState(false);\r\n    const [blocked, setBlocked] = useState(false);\r\n    const [errorReportD, setErrorReportD] = useState(false)\r\n    const [errorDeleteUser, setErrorDeleteUser] = useState(false);\r\n    const [content, setContent] = useState();\r\n    const [navBar, setNavBar] = useState(null)\r\n    const [alreadyOnRev, setAlreadyOnRev] = useState(false)\r\n    const [errorREV, setErrorREV] = useState(false)\r\n    const [warningCancelRev, setWarningCancelRev] = useState(false)\r\n\r\n    const [modelledWeight, setModelledWeight] = useState(\"...\")\r\n    const [notModelledWeight, setNotModelledWeight] = useState(\"...\")\r\n    const [totalIsocontrolWeight, setTotalIsocontrolWeight] = useState(\"...\")\r\n\r\n    const history = useHistory()\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n    \r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    useEffect(()=>{\r\n        if(!secureStorage.getItem(\"user\")){\r\n            history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/\");\r\n        }\r\n    }, [])\r\n\r\n    const [currentTab, setCurrentTab] = useState(secureStorage.getItem(\"tab\")) \r\n\r\n    var dataTableHeight = \"500px\"\r\n\r\n    //Componentes de la pagina que varian en funcion del estado\r\n    var uploadButton, actionButtons, tableContent, progressBtn, modelledBtn, myTrayBtn, usersButton, ttButton\r\n    var currentTabText = currentTab\r\n    if(currentTabText === \"LDE/IsoControl\"){\r\n        currentTabText = \"LOS/IsoControl\"\r\n    }\r\n    tableContent = <DataTable forceUnclaim = {forceUnclaim.bind(this)} onChange={value=> setSelected(value)} selected = {selected} currentTab = {currentTab} currentRole={currentRole} updateData = {updateData} rename = {rename.bind(this)} sendHold = {sendHold.bind(this)} returnToLOS = {returnToLOS.bind(this)} cancelRev = {cancelRev.bind(this)}/>\r\n    var currentUser = secureStorage.getItem('user')\r\n\r\n    useEffect(() =>{\r\n\r\n        if(process.env.REACT_APP_PROGRESS === \"0\"){\r\n\r\n            setContent(<div className=\"content\">\r\n            <LoadingScreen progress={\"25\"}/>\r\n            </div>)\r\n            setTimeout(() => {\r\n                setContent(<div className=\"content\">\r\n                <LoadingScreen progress={\"75\"}/>\r\n                </div>)\r\n            }, 1000)\r\n            setTimeout(() => {\r\n                setContent(<div className=\"content\">\r\n                <LoadingScreen progress={\"100\"}/>\r\n                </div>)\r\n            }, 2000)\r\n            setTimeout(() => {\r\n                setNavBar(<NavBar onChange={value => setCurrentTab(value)}/>)\r\n                setContent(null)            \r\n            }, 2300);\r\n        }else{\r\n            setNavBar(<NavBar onChange={value => setCurrentTab(value)}/>)\r\n            setContent(null)   \r\n        }\r\n\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/isocontrolWeights\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                await setModelledWeight((json.modelledWeight/1000).toFixed(2))\r\n                await setNotModelledWeight((json.notModelledWeight/1000).toFixed(2))\r\n                await setTotalIsocontrolWeight(((json.modelledWeight/1000) + (json.notModelledWeight/1000)).toFixed(2))\r\n            })\r\n          \r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n    }, [])\r\n    \r\n    useEffect(()=>{\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/roles/user\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setRoles(json.roles);\r\n                if(secureStorage.getItem('role') !== null){\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }else{\r\n                    secureStorage.setItem('role', json.roles[0])\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }\r\n                }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })       \r\n            setErrorPI(false)\r\n            setErrorUnclaimR(false)\r\n            setErrorCL(false)\r\n            setUpdateData(!updateData)\r\n            setTransactionSuccess(false);\r\n            setErrorUnclaim(false)\r\n            setErrorReports(false)\r\n            setLoading(false)\r\n            setWarningSelected(false)\r\n            setBlocked(false)\r\n            setErrorReportD(false)\r\n            setErrorDeleteUser(false)\r\n            \r\n    },[currentRole]);\r\n\r\n    useEffect(()=>{\r\n        setErrorUnclaimR(false)\r\n        setErrorPI(false);\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false)\r\n        setErrorUnclaim(false)\r\n        setLoading(false)\r\n        setErrorReports(false)\r\n        setSelected([])\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n\r\n        \r\n    }, [currentTab])\r\n\r\n    const successAlert = () =>{\r\n        setTransactionSuccess(true)\r\n        setTimeout(function () {\r\n            setTransactionSuccess(false)\r\n        }, 3000);     \r\n    }\r\n\r\n    const getProgress = () =>{\r\n        setUpdateData(!updateData)\r\n\r\n    }\r\n\r\n    const claim = async(event) => {\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setTransactionSuccess(false);\r\n        setWarningSelected(false)\r\n        setErrorPI(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            if(currentTab === \"Process\"){\r\n                for (let i = 0; i < selected.length; i++){\r\n                \r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/claimProc\", options)\r\n                }\r\n            }else if(currentTab === \"Instrument\"){\r\n                for (let i = 0; i < selected.length; i++){\r\n                \r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/claimInst\", options)\r\n                }\r\n            }else{\r\n                for (let i = 0; i < selected.length; i++){\r\n                \r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/claim\", options)\r\n                }\r\n            \r\n            }\r\n            setUpdateData(!updateData)\r\n            setLoading(false)\r\n            setSelected([])\r\n            \r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n     \r\n    }   \r\n    \r\n    const forceClaim = async(username) =>{\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                \r\n                const body ={\r\n                    user : username,\r\n                    file: selected[i],\r\n                    los: currentUser\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/forceClaim\", options)\r\n            }\r\n            setUpdateData(!updateData)\r\n            setLoading(false)\r\n            setSelected([])\r\n        }\r\n    }\r\n\r\n    const unclaim = async (event) =>{\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            if (currentRole === \"Process\"){\r\n                for (let i = 0; i < selected.length; i++){\r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/unclaimProc\", options)\r\n                }\r\n            }else if(currentRole === \"Instrument\"){\r\n                for (let i = 0; i < selected.length; i++){\r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/unclaimInst\", options)\r\n                }\r\n            }else{\r\n                for (let i = 0; i < selected.length; i++){\r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/unclaim\", options)\r\n                    .then(response => response.json())\r\n                    .then(json=>{\r\n                        if(json.error === \"forced\"){\r\n                            setErrorUnclaim(true)\r\n                        }else if(json.error === \"returned\"){\r\n                            setErrorUnclaimR(true)\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                    });\r\n                }\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n        \r\n    }\r\n\r\n    async function forceUnclaim(fileName){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setLoading(true)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n        const body ={\r\n            user : currentUser,\r\n            file: fileName,\r\n            role: currentRole\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/forceUnclaim\", options)\r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n        setSelected([])\r\n    }\r\n\r\n\r\n    const verifyClick = async(event) =>{\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                \r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    role: currentRole\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/verify\", options)\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n    }\r\n\r\n    async function cancelVerifyClick(filename){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setTransactionSuccess(false);\r\n        setLoading(true)\r\n        setWarningSelected(false)\r\n        setErrorReportD(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n            \r\n            const body ={\r\n                user : currentUser,\r\n                file: filename,\r\n                role: currentRole\r\n            }\r\n            const options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/cancelVerify\", options)\r\n        \r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n        setSelected([])\r\n    }\r\n\r\n    async function transaction(destiny, comments){\r\n        \r\n        if(selected.length > 0){\r\n            setErrorUnclaimR(false)\r\n            setWarningSelected(false)\r\n            setErrorReports(false)\r\n            setErrorCL(false)\r\n            setErrorUnclaim(false)\r\n            setErrorPI(false);\r\n            setTransactionSuccess(false);\r\n            setLoading(true)\r\n            setErrorReportD(false)\r\n            setBlocked(false)\r\n            setErrorDeleteUser(false)\r\n            \r\n            if(destiny === \"Design\"){\r\n                if(comment.length > 1){\r\n                    setComment(\" \")\r\n                    localStorage.setItem(\"update\", true)\r\n                    for (let i = 0; i < selected.length; i++){\r\n                        const body ={\r\n                            user : currentUser,\r\n                            fileName: selected[i],\r\n                            to: destiny,\r\n                            role: secureStorage.getItem(\"role\"),\r\n                            comment: comment,\r\n                            deleted: 0,\r\n                            onhold: 0\r\n                        }\r\n                        const options = {\r\n                            method: \"POST\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            },\r\n                            body: JSON.stringify(body)\r\n                        }\r\n                        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/transaction\", options)\r\n                        .then(response => response.json())\r\n                        .then(json =>{\r\n                            if(json.blocked){\r\n                                setBlocked(true)\r\n                            }else{\r\n                                successAlert()\r\n                            }\r\n                        })\r\n                        \r\n                    }\r\n                }else{\r\n                }\r\n            }else if (destiny === \"LDE/Isocontrol\"){\r\n                for (let i = 0; i < selected.length; i++){\r\n                    const options = {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/piStatus/\"+selected[i], options)\r\n                    .then(response => response.json())\r\n                    .then(async json =>{\r\n                        if(json.sit === 1 || json.sit === 3 || json.sit === 4 || json.sit === 5|| json.spo === 1 || json.spo === 3 || json.spo === 4 || json.spo === 5){\r\n                            localStorage.setItem(\"update\", true)\r\n                            setErrorPI(true);\r\n                            setTransactionSuccess(false);\r\n                        }else{\r\n                            localStorage.setItem(\"update\", true)\r\n                            let deleted, hold = 0\r\n                    \r\n                            const body ={\r\n                                user : currentUser,\r\n                                fileName: selected[i],\r\n                                to: destiny,\r\n                                role: secureStorage.getItem(\"role\"),\r\n                                comment: null,\r\n                                deleted: deleted,\r\n                                onhold: hold\r\n                            }\r\n                            const options = {\r\n                                method: \"POST\",\r\n                                headers: {\r\n                                    \"Content-Type\": \"application/json\"\r\n                                },\r\n                                body: JSON.stringify(body)\r\n                            }\r\n                            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/transaction\", options)\r\n                            .then(response => response.json())\r\n                            .then(async json=>{\r\n                                if(json.error === \"error\"){\r\n                                    await setErrorCL(true) \r\n                                }else if(json.error === \"rev\"){\r\n                                    await setErrorREV(true) \r\n                                }else if(json.blocked){\r\n                                    setBlocked(true)\r\n                                }\r\n                            })\r\n                            if(!errorCL && !blocked){\r\n                                successAlert()\r\n                            }\r\n                            \r\n                        }\r\n                    })\r\n                }\r\n                await setUpdateData(!updateData)\r\n                setLoading(false)\r\n            }else if(destiny === \"On hold\"){\r\n                localStorage.setItem(\"update\", true)\r\n                let deleted, hold = 0\r\n\r\n                if(destiny === \"Recycle bin\"){\r\n                    deleted = 1\r\n                }\r\n\r\n                if(destiny === \"On hold\"){\r\n                    hold = 1\r\n                }\r\n                for (let i = 0; i < selected.length; i++){\r\n                    \r\n                    const body ={\r\n                        user : currentUser,\r\n                        fileName: selected[i],\r\n                        to: destiny,\r\n                        role: secureStorage.getItem(\"role\"),\r\n                        comment: comments,\r\n                        deleted: deleted,\r\n                        onhold: hold\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/transaction\", options)\r\n                    .then(response => response.json())\r\n                        .then(json =>{\r\n                            if(json.blocked){\r\n                                setBlocked(true)\r\n                            }else{\r\n                                successAlert()\r\n                            }\r\n                        })\r\n                }\r\n            }else{\r\n                localStorage.setItem(\"update\", true)\r\n                let deleted, hold = 0\r\n\r\n                if(destiny === \"Recycle bin\"){\r\n                    deleted = 1\r\n                }\r\n\r\n                if(destiny === \"On hold\"){\r\n                    hold = 1\r\n                }\r\n                for (let i = 0; i < selected.length; i++){\r\n                    \r\n                    const body ={\r\n                        user : currentUser,\r\n                        fileName: selected[i],\r\n                        to: destiny,\r\n                        role: secureStorage.getItem(\"role\"),\r\n                        comment: null,\r\n                        deleted: deleted,\r\n                        onhold: hold\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/transaction\", options)\r\n                    .then(response => response.json())\r\n                        .then(json =>{\r\n                            if(json.blocked){\r\n                                setBlocked(true)\r\n                            }else{\r\n                                successAlert()\r\n                            }\r\n                        })\r\n                }\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            await getProgress()\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }    \r\n    }\r\n\r\n    async function returnLead(destiny){\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorCL(false)\r\n        setWarningSelected(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setErrorUnclaimR(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                setLoading(true)\r\n                const body ={\r\n                    user : currentUser,\r\n                    fileName: selected[i],\r\n                    to: destiny,\r\n                    from: currentTab\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/returnLead\", options)\r\n                .then(response => response.json())\r\n                        .then(json =>{\r\n                            if(json.blocked){\r\n                                setBlocked(true)\r\n                            }else{\r\n                                successAlert()\r\n                            }\r\n                        })\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            await getProgress()\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n    }\r\n    \r\n    async function returnLeadStress(){\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setErrorUnclaimR(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                        \r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    comments: comment\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/returnLeadStress\", options)\r\n                .then(response => response.json())\r\n                .then(json =>{\r\n                    if(json.blocked){\r\n                        setBlocked(true)\r\n                    }else{\r\n                        successAlert()\r\n                    }\r\n                })\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            await getProgress()\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n    }\r\n\r\n    async function restore(){\r\n        setErrorReports(false)\r\n        setErrorUnclaimR(false)\r\n        setErrorReportD(false)\r\n        setErrorUnclaim(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                const body ={\r\n                    fileName: selected[i],\r\n                    user: currentUser,\r\n                    role: currentRole,\r\n                    deleted: 0,\r\n                    onhold: 0\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/restore\", options)\r\n                successAlert()\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            await getProgress()\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n    }\r\n\r\n    async function sendProcessClick(fileName){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setLoading(true)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n            \r\n            const body ={\r\n                user : currentUser,\r\n                file: fileName,\r\n                role: currentRole\r\n            }\r\n            const options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/process\", options)\r\n        \r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n        setSelected([])\r\n    }\r\n\r\n    async function sendInstrumentClick(fileName){\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorUnclaimR(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setLoading(true)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n            \r\n            const body ={\r\n                user : currentUser,\r\n                file: fileName,\r\n                role: currentRole\r\n            }\r\n            const options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/instrument\", options)\r\n        \r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n        setSelected([])\r\n    }\r\n\r\n    async function sendCancelProcessClick(fileName){\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorUnclaimR(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setLoading(true)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n\r\n        const body ={\r\n            file: fileName,\r\n            user: currentUser,\r\n            role: currentRole,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/cancelProc\", options)\r\n    \r\n        await setUpdateData(!updateData)\r\n        await setLoading(false)\r\n        setSelected([])\r\n    }\r\n\r\n    async function sendCancelInstrumentClick(fileName){\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorUnclaimR(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setWarningSelected(false)\r\n        setLoading(true)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n        const body ={\r\n            file: fileName,\r\n            user: currentUser,\r\n            role: currentRole\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/cancelInst\", options)\r\n    \r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n        setSelected([])\r\n    }\r\n\r\n    async function updateD(){\r\n        await setUpdateData(!updateData)\r\n    }\r\n\r\n    async function downloadFiles(){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)    \r\n    \r\n            for (let i = 0; i < selected.length; i++){\r\n\r\n                const options = {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/pdf\"\r\n                    }\r\n                }\r\n                \r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getAttach/\"+selected[i], options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/download/\"+selected[i], options)\r\n                    .then(res => res.blob())\r\n                    .then( async response =>{\r\n                        setDownloadzip(downloadZip.file(selected[i], new Blob([response]),{binary:true}))   \r\n                        for(let i = 0; i < json.length; i++){\r\n                            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/download/\"+json[i], options)\r\n                            .then(res => res.blob())\r\n                            .then(response =>{\r\n                                setDownloadzip(downloadZip.file(json[i], new Blob([response]),{binary:true}))   \r\n                            })\r\n                        }\r\n                        \r\n                    })\r\n                })\r\n            \r\n\r\n                \r\n        \r\n            }\r\n            const zipname = String(Date().toLocaleString().replace(/\\s/g, '-').split('-G').slice(0, -1))\r\n            downloadZip.generateAsync({type:\"blob\"}).then(function (blob) { // 1) generate the zip file\r\n                saveAs(blob,  zipname)\r\n            })  \r\n            \r\n            await setDownloadzip(new JSZip())   \r\n            //await setAttachFiles(null)\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n    }\r\n\r\n    async function downloadMaster(){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)    \r\n    \r\n            for (let i = 0; i < selected.length; i++){\r\n\r\n                const options = {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/pdf\"\r\n                    }\r\n                }\r\n                \r\n                \r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/download/\"+selected[i], options)\r\n                .then(res => res.blob())\r\n                .then( async response =>{\r\n                    setDownloadzip(downloadZip.file(selected[i], new Blob([response]),{binary:true}))   \r\n                    \r\n                })\r\n        \r\n            }\r\n            const zipname = String(Date().toLocaleString().replace(/\\s/g, '-').split('-G').slice(0, -1))\r\n            downloadZip.generateAsync({type:\"blob\"}).then(function (blob) { // 1) generate the zip file\r\n                saveAs(blob,  zipname)\r\n            })  \r\n            \r\n            await setDownloadzip(new JSZip())   \r\n            //await setAttachFiles(null)\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n    }\r\n\r\n    async function downloadHistory(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadHistory/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            json = JSON.parse(json)\r\n            const headers = [\"ISO_ID\", \"FROM\", \"TO\", \"DATE\", \"COMMENT\", \"USER\"]\r\n            for (let i=0; i<json.length; i++){\r\n                json[i].created_at = json[i].created_at.substring(8,10) + \"/\" + json[i].created_at.substring(5,7) + \"/\" + json[i].created_at.substring(0,4);\r\n            } \r\n            exportToExcel(json, \"Comments\", headers)\r\n        })\r\n    }\r\n\r\n    async function downloadStatus(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadStatus/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            let headers = [\"ISO_ID\", \"START_DATE\", \"CURRENT_DATE\", \"CONDITION\", \"TRAY\", \"CLAIMED\"]\r\n\r\n            if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n                headers = [\"ISO_ID\", \"START_DATE\", \"CURRENT_DATE\", \"LINE TYPE\", \"CONDITION\", \"TRAY\", \"CLAIMED\"]\r\n            }\r\n            \r\n            json = JSON.parse(json);\r\n            for (let i=0; i<json.length; i++){\r\n                json[i].created_at = json[i].created_at.substring(3,5) + \"/\" + json[i].created_at.substring(0,2) + \"/\" + json[i].created_at.substring(6,10);\r\n                json[i].updated_at = json[i].updated_at.substring(3,5) + \"/\" + json[i].updated_at.substring(0,2) + \"/\" + json[i].updated_at.substring(6,10);\r\n            } \r\n\r\n            exportToExcel(json, \"Status\", headers)\r\n        })\r\n    }\r\n\r\n    async function downloadPI(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadPI/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            json = JSON.parse(json);\r\n            for (let i=0; i<json.length; i++){\r\n                json[i].updated_at = json[i].updated_at.substring(0,10);\r\n            } \r\n            const headers = [\"ISO_ID\", \"PROCESS\", \"INSTRUMENTATION\", \"DATE\"]\r\n            exportToExcel(json, \"IsoStatusSIT-SPO\", headers)\r\n        })\r\n    }\r\n\r\n    async function downloadIssued(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadIssued/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"ISO_ID\", \"REV0\", \"REV1\", \"REV2\", \"REV3\", \"REV4\"]\r\n            exportToExcel(JSON.parse(json), \"IsoStatusIssued\", headers)\r\n        })\r\n    }\r\n\r\n    async function downloadStatus3D(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadStatus3D/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            let output = JSON.stringify(json.log)\r\n            output = output.substring(1,output.length-1)\r\n            output = output.replaceAll(\",\", \"\\n\")\r\n            output = output.replaceAll(/['\"]+/g, \"\")\r\n\r\n\r\n            const data = new Blob([output], { type: 'txt' });\r\n            FileSaver.saveAs(data, \"fromIsoTrackerTo3d.mac\");\r\n        })\r\n    }\r\n\r\n    async function downloadModelled(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadModelled/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"TAG\", \"ISO_ID\", \"TYPE\"]\r\n            exportToExcel(JSON.parse(json), \"Modelled\", headers)\r\n        })\r\n    }\r\n\r\n    async function downloadUsers(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadUsers\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"USERNAME\", \"EMAIL\", \"ROLE\"]\r\n            exportToExcel(json, \"Users\", headers)\r\n        })\r\n    }\r\n\r\n    const exportToExcel = (apiData, fileName, headers) => {\r\n\r\n        setErrorReports(false)\r\n        const fileType =\r\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const header_cells = ['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'N1', 'O1', 'P1', 'Q1', 'R1', 'S1', 'T1', 'U1', 'V1', 'W1']\r\n        const fileExtension = \".xlsx\";\r\n\r\n        let wscols = []\r\n        for(let i = 0; i < headers.length; i++){\r\n            wscols.push({width:35})\r\n        }\r\n\r\n        const ws = XLSX.utils.json_to_sheet(apiData);   \r\n        ws[\"!cols\"] = wscols\r\n        for(let i = 0; i < headers.length; i++){\r\n            ws[header_cells[i]].v = headers[i]\r\n        }\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n        \r\n    }\r\n\r\n    async function setUploading(active){\r\n        setErrorReports(false)\r\n        setErrorReportD(false)\r\n        setLoading(active)\r\n        if(!active){\r\n            successAlert()\r\n        }\r\n    }\r\n\r\n    async function setErrorReport(){\r\n        setErrorReports(true)\r\n    }\r\n\r\n    async function issue(transmittal, date){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if (selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    role: currentRole,\r\n                    transmittal: transmittal,\r\n                    date: date\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/toIssue\", options)\r\n                .then(response => response.json())\r\n                .then(json =>{\r\n                    if(json.blocked){\r\n                        setBlocked(true)\r\n                    }else{\r\n                        successAlert()\r\n                    }\r\n                })\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            await getProgress()\r\n            setSelected([])\r\n        }\r\n    }\r\n\r\n    async function newRev(comments) {\r\n        setErrorReports(false)\r\n        setErrorUnclaimR(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setErrorReportD(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if (selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    role: currentRole,\r\n                    comments: comments\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/newRev\", options)\r\n                .then(response => response.json())\r\n                .then(json =>{\r\n                    \r\n                    if(json.blocked){\r\n                        setBlocked(true)\r\n                    }else if(json.already){\r\n                        setAlreadyOnRev(true)\r\n                    }else{\r\n                        successAlert()\r\n                    }\r\n                })\r\n            }\r\n            setUpdateData(!updateData)\r\n            setLoading(false)\r\n            await getProgress()\r\n            setSelected([])\r\n        }\r\n    }\r\n\r\n    async function request() {\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if (selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    role: currentRole,\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/request\", options)\r\n                \r\n            }\r\n            setUpdateData(!updateData)\r\n            setLoading(false)\r\n            setSelected([])\r\n        }\r\n\r\n    }\r\n\r\n    async function returnIso(destiny, comments){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setErrorReportD(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        if (selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            if(comments.length < 1){\r\n                comments = comment\r\n            }\r\n            for (let i = 0; i < selected.length; i++){\r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    role: currentRole,\r\n                    from: currentTab,\r\n                    destiny: destiny,\r\n                    comments: comments\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/returnIso\", options)\r\n                .then(response => response.json())\r\n                .then(json =>{\r\n                    if(json.blocked){\r\n                        setBlocked(true)\r\n                    }else{\r\n                        successAlert()\r\n                    }\r\n                })\r\n                \r\n            }\r\n            setUpdateData(!updateData)\r\n            setLoading(false)\r\n            setComment(\"\")\r\n            setSelected([])\r\n        }else{\r\n            setWarningSelected(true)\r\n        }\r\n    }\r\n\r\n    async function success(){\r\n        successAlert()\r\n    }\r\n\r\n    async function unlock(isoid){\r\n\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setBlocked(false)\r\n        setErrorReportD(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n\r\n        const body = {\r\n            isoid: isoid\r\n          }\r\n      \r\n          const options = {\r\n              method: \"POST\",\r\n              headers: {\r\n                  \"Content-Type\": \"application/json\"\r\n              },\r\n              body: JSON.stringify(body)\r\n          }\r\n      \r\n          fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/unlock\", options)\r\n          .then(response => {\r\n            setTransactionSuccess(true)\r\n          })\r\n\r\n          setUpdateData(!updateData)\r\n    }\r\n\r\n    async function rename(newName, oldName){\r\n\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setErrorReportD(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n\r\n        const body = {\r\n            oldName: oldName,\r\n            newName: newName\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/rename\", options)\r\n        .then(response => console.log(\"Cambiado\"))\r\n\r\n        successAlert()\r\n        \r\n        setUpdateData(!updateData)\r\n    }\r\n\r\n    async function cancelRev(filename){\r\n\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setErrorReportD(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n\r\n        const body = {\r\n            filename: filename,\r\n            user: currentUser\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/cancelRev\", options)\r\n        .then(response => response.json())\r\n        .then(json =>{\r\n            if(json.success){\r\n                successAlert()\r\n            }else{\r\n                setWarningCancelRev(true)\r\n            }\r\n        })\r\n\r\n        \r\n        setUpdateData(!updateData)\r\n    }\r\n\r\n    async function setErrorReportData(index){\r\n        setErrorReportD(true)\r\n    }\r\n\r\n    async function addUser(username, email, roles){\r\n\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setErrorReportD(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n\r\n        const body = {\r\n            username: username,\r\n            email: email,\r\n            roles: roles\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/createUser\", options)\r\n        .then(response => response.json())\r\n        .then(json =>{\r\n            if(json.success){\r\n                successAlert()\r\n            }\r\n        })\r\n        setUpdateData(!updateData)\r\n        \r\n    }\r\n\r\n    async function deleteUser(id){\r\n\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setErrorReportD(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n\r\n\r\n        const options = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        }\r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/user/\"+id, options)\r\n        .then(response => response.json())\r\n        .then(json =>{\r\n            if(json.error){\r\n                setErrorDeleteUser(true)\r\n            }else{\r\n                successAlert()\r\n            }\r\n        })\r\n\r\n       setUpdateData(!updateData)\r\n\r\n    }\r\n\r\n    async function submitRoles(id, roles){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setWarningSelected(false)\r\n        setErrorReportD(false)\r\n        setBlocked(false)\r\n        setErrorDeleteUser(false)\r\n        \r\n        localStorage.setItem(\"update\", true)\r\n\r\n        const body = {\r\n            id: id,\r\n            roles: roles\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/users/manageRoles\", options)\r\n        .then(response => response.json())\r\n        .then(json =>{\r\n            if(json.success){\r\n                successAlert()\r\n            }\r\n        })\r\n        setUpdateData(!updateData)\r\n    }\r\n\r\n    function handleOnIdle(){\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n        secureStorage.clear()\r\n        history.push(\"/\" + process.env.REACT_APP_PROJECT)\r\n    }\r\n    async function exportModelled(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exportModelled/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"UNIT\", \"AREA\", \"LINE\", \"TRAIN Nº\", \"FLUID\", \"SEQUENTIAL\", \"LINE ID\", \"ISO ID\", \"SPEC CODE\", \"DIAMETER\", \"P&ID\", \"STRESS LEVEL\", \"CALCULATION NOTES\", \"INSULATION\", \"TOTAL WEIGHT\"]\r\n            exportToExcel(JSON.parse(json), \"Isocontrol modelled\", headers)\r\n        })\r\n    }\r\n\r\n    async function exportNotModelled(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exportNotModelled/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            \r\n            const headers = [\"UNIT\", \"AREA\", \"LINE\", \"TRAIN Nº\", \"LINE ID\", \"ISO ID\", \"SPEC CODE\", \"TOTAL WEIGHT\", \"LDL\", \"BOM\"]\r\n            exportToExcel(JSON.parse(json), \"Isocontrol not modelled\", headers)\r\n        })\r\n    }\r\n\r\n    async function exportFull(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exportFull/\")\r\n        .then(response => response.json())\r\n        .then(json => {           \r\n            const headers = [\"LINE ID\", \"UNIT\", \"AREA\", \"LINE\", \"TRAIN Nº\", \"FLUID\", \"SEQUENTIAL\", \"SPEC CODE\", \"DIAMETER\", \"P&ID\", \"STRESS LEVEL\", \"CALCULATION NOTES\", \"INSULATION\", \"TOTAL WEIGHT\", \"MODELLED\", \"TRAY\", \"PROGRESS\", \"HOLDS\", \"LDL\", \"BOM\"]\r\n            exportToExcel(JSON.parse(json), \"Isocontrol\", headers)\r\n        })\r\n    }\r\n\r\n    async function exportLineIdGroup(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exportLineIdGroup/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            \r\n            const headers = [\"LINE ID\", \"ITEMS\", \"TOTAL WEIGHT\"]\r\n            exportToExcel(JSON.parse(json), \"Isocontrol line id group\", headers)\r\n        })\r\n    }\r\n\r\n    async function exportHolds(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exportHolds/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            \r\n            const headers = [\"TAG\", \"HOLD1\", \"DESCRIPTION1\", \"HOLD2\", \"DESCRIPTION2\", \"HOLD3\", \"DESCRIPTION3\", \"HOLD4\", \"DESCRIPTION4\", \"HOLD5\", \"DESCRIPTION5\", \"HOLD6\", \"DESCRIPTION6\", \"HOLD7\", \"DESCRIPTION7\", \"HOLD8\", \"DESCRIPTION8\", \"HOLD9\", \"DESCRIPTION9\", \"HOLD10\", \"DESCRIPTION10\"]\r\n            exportToExcel(JSON.parse(json), \"Holds\", headers)\r\n        })\r\n    }\r\n\r\n    async function exportHoldsNoProgress(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exportHoldsNoProgress/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            json = JSON.parse(json);\r\n            for (let i=0; i<json.length; i++){\r\n                json[i].updated_at = json[i].updated_at.substring(0,10);\r\n            } \r\n            const headers = [\"ISO ID\", \"REVISION\", \"DATE\", \"FROM\", \"USER\", \"COMMENTS\"]\r\n            exportToExcel(json, \"Holds\", headers)\r\n        })\r\n    }\r\n\r\n    async function downloadBOM(){\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadBOM/\")\r\n        .then(res => res.blob())\r\n        .then(response => {\r\n        const file = new Blob([response], {\r\n            type: \"application/pdf\"\r\n        });\r\n        //Build a URL from the file\r\n        const fileURL = URL.createObjectURL(file);\r\n\r\n            var fileLink = document.createElement('a');\r\n            fileLink.href = fileURL;\r\n\r\n            // it forces the name of the downloaded file\r\n            fileLink.download = \"BOM.xlsx\";\r\n\r\n            // triggers the click event\r\n            fileLink.click();\r\n\r\n\r\n        })\r\n        .catch(error => {\r\n        console.log(error);\r\n        });\r\n  }\r\n\r\n    async function exportTimeTrack(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exportTimeTrack\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            \r\n            const headers = [\"ISO ID\", \"Revision\", \"Design\", \"Stress\", \"Supports\", \"Materials\", \"Issuer\", \"LOS/IsoControl\"]\r\n            exportToExcel(JSON.parse(json), \"TimeTrack\", headers)\r\n        })\r\n    }\r\n\r\n    async function exportByPass(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exportByPass\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            json = JSON.parse(json);\r\n            for (let i=0; i<json.length; i++){\r\n                json[i].date = json[i].date.substring(8,10) + \"/\" + json[i].date.substring(5,7) + \"/\" + json[i].date.substring(0,4);\r\n            } \r\n            const headers = [\"TAG\", \"ISO ID\", \"Type\", \"Date\", \"User\", \"Notes\", \"Comments\", \"Status\"]\r\n            exportToExcel(json, \"ByPass\", headers)\r\n        })\r\n    }\r\n\r\n    async function sendHold(fileName){\r\n        const body ={\r\n            fileName : fileName\r\n          }\r\n      \r\n          const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n          fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/sendHold\", options)\r\n          await setUpdateData(!updateData)\r\n          await setTransactionSuccess(true)\r\n    }\r\n\r\n    async function excludeHold(fileName){\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/pdf\"\r\n            }\r\n          }\r\n          fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/excludeHold/\"+fileName, options)\r\n          await setUpdateData(!updateData)\r\n          await setTransactionSuccess(true)\r\n          tableContent = <OnHoldTable onChange={value=> setSelected(value)} selected = {selected} currentTab = {currentTab} currentRole = {currentRole} updateData = {updateData} excludeHold = {excludeHold.bind(this)}/>\r\n    }\r\n        \r\n    async function returnToLOS(fileName){\r\n        const body = {\r\n            fileName: fileName,\r\n            email: currentUser,\r\n            role: currentRole\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/returnToLOS\", options)\r\n        .then(response => response.json())\r\n        .then(json =>{\r\n            if(json.success){\r\n                successAlert()\r\n            }\r\n        })\r\n        setUpdateData(!updateData)\r\n    }\r\n\r\n    async function unlockAll(){\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/unlockAll\", options)\r\n        .then(response => response.json())\r\n        .then(json =>{\r\n            if(json.success){\r\n                successAlert()\r\n            }\r\n        })\r\n        setUpdateData(!updateData)\r\n\r\n    }\r\n\r\n    async function createByPass(type, notes, id){\r\n        const body = {\r\n            type: type,\r\n            notes: notes,\r\n            username: currentUser,\r\n            id: id\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/createByPass\", options)\r\n        .then(response => response.json())\r\n        .then(json =>{\r\n            if(json.success){\r\n                successAlert()\r\n            }\r\n        })\r\n        setUpdateData(!updateData)\r\n    }\r\n\r\n    async function editByPass(type, notes, id){\r\n        const body = {\r\n            type: type,\r\n            notes: notes,\r\n            id: id\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/editByPass\", options)\r\n        .then(response => response.json())\r\n        .then(json =>{\r\n            if(json.success){\r\n                successAlert()\r\n            }\r\n        })\r\n        setUpdateData(!updateData)\r\n    }\r\n\r\n    async function deleteByPass(id){\r\n        const body = {\r\n            id: id\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/deleteByPass\", options)\r\n        .then(response => response.json())\r\n        .then(json =>{\r\n            if(json.success){\r\n                successAlert()\r\n            }\r\n        })\r\n        setUpdateData(!updateData)\r\n    }\r\n\r\n    if(currentTab === \"Upload IsoFiles\"){\r\n        secureStorage.setItem(\"tab\", \"Upload IsoFiles\")\r\n        tableContent = <DragAndDrop mode={\"upload\"} role={currentRole} user={currentUser}  uploaded={getProgress.bind(this)}/>\r\n    }if(currentTab === \"CheckBy\"){\r\n        tableContent = <CheckInTable/>\r\n    }if(currentTab === \"My Tray\"){\r\n        tableContent = <MyTrayTable  updateData = {updateData} onChange={value=> setSelected(value)} cancelVerifyClick={cancelVerifyClick.bind(this)} sendProcessClick={sendProcessClick.bind(this)} success={success.bind(this)} sendInstrumentClick = {sendInstrumentClick.bind(this)} sendCancelProcessClick={sendCancelProcessClick.bind(this)} sendCancelInstrumentClick={sendCancelInstrumentClick.bind(this)} updateD = {updateD.bind(this)} createByPass = {(type, notes, id) => createByPass(type, notes, id)} currentRole = {currentRole} currentUser = {currentUser} selected={selected} />\r\n    }if(currentTab === \"Recycle bin\"){\r\n        tableContent = <BinTable onChange={value=> setSelected(value)} selected = {selected} currentTab = {currentTab} updateData = {updateData}/>\r\n    }if(currentTab === \"On hold\"){\r\n        tableContent = <OnHoldTable onChange={value=> setSelected(value)} selected = {selected} currentTab = {currentTab} currentRole = {currentRole} updateData = {updateData} excludeHold = {excludeHold.bind(this)}/>\r\n    }if(currentTab === \"Status\"){\r\n        tableContent = <StatusDataTable onChange={value=> setSelected(value)} role = {currentRole}/>\r\n    }if(currentTab === \"History\"){\r\n        tableContent = <HistoryDataTable/>   \r\n    }if(currentTab === \"Process\" || currentTab === \"Instrument\"){\r\n        tableContent = <ProcInstTable onChange={value=> setSelected(value)} selected = {selected} currentTab = {currentTab} updateData = {updateData} />\r\n    }if(currentTab === \"Reports\"){\r\n        tableContent = <ReportBoxBtns user={currentUser} role={currentRole} downloadHistory={downloadHistory.bind(this)} downloadStatus={downloadStatus.bind(this)} downloadPI={downloadPI.bind(this)} downloadIssued={downloadIssued.bind(this)} setErrorReport={setErrorReport.bind(this)} setUploading={setUploading.bind(this)} downloadStatus3D={downloadStatus3D.bind(this)} downloadModelled={downloadModelled.bind(this)} downloadUsers={downloadUsers.bind(this)} setErrorReportData={setErrorReportData.bind(this)}/>\r\n    }if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n        progressBtn = <ProgressBtn onChange={value => setCurrentTab(\"Progress\")} currentTab = {currentTab}></ProgressBtn>\r\n        modelledBtn = <ModelledBtn onChange={value => setCurrentTab(\"Modelled\")} currentTab = {currentTab}></ModelledBtn>\r\n    }if(currentTab === \"Progress\"){\r\n        tableContent = <ProgressPlot></ProgressPlot>\r\n        dataTableHeight = \"500px\"\r\n    }if(currentTab === \"Modelled\"){\r\n        tableContent = <ModelledDataTable role={currentRole} unlock = {unlock.bind(this)}></ModelledDataTable>\r\n    }if(currentRole !== \"Review\"){\r\n        myTrayBtn = <MyTrayBtn onChange={value => setCurrentTab(value)} currentTab = {currentTab}/>\r\n    }if(currentRole === \"SpecialityLead\"){\r\n        if (currentTab === \"Users\"){\r\n            usersButton = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Users\")} style={{width:\"100px\"}}><img src={UsersIcon} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Users</p></button>\r\n            secureStorage.setItem(\"tab\", \"Users\")\r\n        }else{\r\n            usersButton = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Users\")} style={{width:\"100px\"}}><img src={UsersIcon} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Users</p></button>\r\n        }\r\n        if (currentTab === \"TimeTrack\"){\r\n            ttButton = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"TimeTrack\")} style={{width:\"135px\"}}><img src={ClockIcon} alt=\"tt\" className=\"navBar__icon\" style={{marginRight:\"0px\", height:\"28px\", marginTop:\"8px\"}}></img><p className=\"navBar__button__text\">TimeTrack</p></button>\r\n            secureStorage.setItem(\"tab\", \"TimeTrack\")\r\n        }else{\r\n            ttButton = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"TimeTrack\")} style={{width:\"135px\"}}><img src={ClockIcon} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\", height:\"28px\", marginTop:\"8px\"}}></img><p className=\"navBar__button__text\">TimeTrack</p></button>\r\n        }\r\n    }if(currentTab === \"Users\"){\r\n \r\n        tableContent = <UsersDataTable updateData={updateData} deleteUser={deleteUser.bind(this)} submitRoles={submitRoles.bind(this)}/>\r\n\r\n    }if(currentTab === \"TimeTrack\"){\r\n \r\n        tableContent = <TimeTrackDataTable/>\r\n\r\n    }if(currentTab === \"ByPass\"){\r\n \r\n        tableContent = <ByPassDataTable success={success.bind(this)} updateData={updateData} editByPass = {editByPass.bind(this)} deleteByPass={deleteByPass.bind(this)}/>\r\n\r\n    }if(currentTab === \"Issued\"){\r\n \r\n        tableContent = <IssuedDataTable forceUnclaim = {forceUnclaim.bind(this)} onChange={value=> setSelected(value)} selected = {selected} currentTab = {currentTab} currentRole={currentRole} updateData = {updateData} rename = {rename.bind(this)} sendHold = {sendHold.bind(this)} returnToLOS = {returnToLOS.bind(this)} cancelRev = {cancelRev.bind(this)}/>\r\n\r\n    }\r\n\r\n    if(((currentRole === \"Design\" || currentRole === \"DesignLead\") && currentTab === \"Design\") || \r\n    ((currentRole === \"Stress\" || currentRole === \"StressLead\") && currentTab === \"Stress\") ||\r\n    ((currentRole === \"Supports\" || currentRole === \"SupportsLead\") && currentTab === \"Supports\") ||\r\n    ((currentRole === \"Materials\") && currentTab === \"Materials\") ||\r\n    ((currentRole === \"Issuer\") && currentTab === \"Issuer\") ||\r\n    ((currentRole === \"SpecialityLead\" && currentTab ===\"SpecialityLead\") ||\r\n    (currentTab=== \"My Tray\")) || (((currentTab === \"Recycle bin\" || currentTab === \"On hold\") && currentRole === \"DesignLead\") || \r\n    currentRole === \"SpecialityLead\" && currentTab !== \"Progress\") || (currentTab === \"Process\" && currentRole === \"Process\") ||\r\n    (currentRole === \"Instrument\" && currentTab === \"Instrument\") ||\r\n    (currentRole === \"Design\" || currentRole === \"DesignLead\") && currentTab === \"Issued\"){\r\n        actionButtons = <ActionButtons claimClick={claim.bind(this)} verifyClick={verifyClick.bind(this)} unclaimClick={unclaim.bind(this)} transaction={transaction.bind(this)} restoreClick={restore.bind(this)} returnLead={returnLead.bind(this)} returnLeadStress={returnLeadStress.bind(this)} downloadFiles={downloadFiles.bind(this)} forceClaim={forceClaim.bind(this)} issue={issue.bind(this)} newRev={newRev.bind(this)} request={request.bind(this)} returnIso={returnIso.bind(this)} addUser={addUser.bind(this)} success={success.bind(this)} onlyDownload = {false} currentTab = {currentTab} user={currentUser} role = {currentRole} exportModelled={exportModelled.bind(this)} exportNotModelled={exportNotModelled.bind(this)} exportFull={exportFull.bind(this)} exportLineIdGroup={exportLineIdGroup.bind(this)} exportHolds={exportHolds.bind(this)} exportHoldsNoProgress={exportHoldsNoProgress.bind(this)} downloadBOM={downloadBOM.bind(this)} exportTimeTrack={exportTimeTrack.bind(this)} exportByPass={exportByPass.bind(this)} downloadMaster={downloadMaster.bind(this)}/>\r\n    }else if(currentTab !== \"History\" && currentTab !== \"Upload IsoFiles\" && currentTab !== \"Recycle bin\" && currentTab !== \"Reports\" && currentTab !== \"Progress\" && currentTab !== \"Modelled\"){\r\n        actionButtons = <ActionButtons claimClick={claim.bind(this)} verifyClick={verifyClick.bind(this)} unclaimClick={unclaim.bind(this)} transaction={transaction.bind(this)} restoreClick={restore.bind(this)} returnLead={returnLead.bind(this)} returnLeadStress={returnLeadStress.bind(this)} downloadFiles={downloadFiles.bind(this)} forceClaim={forceClaim.bind(this)} issue={issue.bind(this)} newRev={newRev.bind(this)} request={request.bind(this)} returnIso={returnIso.bind(this)} addUser={addUser.bind(this)} success={success.bind(this)} onlyDownload = {true} currentTab = {currentTab} user={currentUser} role = {currentRole} exportModelled={exportModelled.bind(this)} exportNotModelled={exportNotModelled.bind(this)} exportFull={exportFull.bind(this)} exportLineIdGroup={exportLineIdGroup.bind(this)} exportHolds={exportHolds.bind(this)} exportHoldsNoProgress={exportHoldsNoProgress.bind(this)} downloadBOM={downloadBOM.bind(this)} exportTimeTrack={exportTimeTrack.bind(this)} exportByPass={exportByPass.bind(this)} downloadMaster={downloadMaster.bind(this)}/>\r\n    }\r\n    if(currentTab === \"Modelled\"){\r\n        actionButtons = <div style={{zoom:0.8}}><button className=\"action__btn\" onClick={()=>downloadModelled()}>Export</button><button className=\"action__btn\" onClick={()=>unlockAll()}>Unlock all</button></div>\r\n    }\r\n\r\n    if(currentRole === \"Project\"){\r\n        actionButtons = null\r\n    }\r\n\r\n    let recycleBinBtn, onHoldBtn, issuedBtn, reportsBtn, processBtn, instrumentationBtn, byPassBtn = null\r\n\r\n    if(currentTab === \"Recycle bin\"){\r\n        recycleBinBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Recycle bin\")} style={{backgroundColor:\"#99C6F8\", marginLeft:\"232px\"}}><img src={Trash} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Trash</p></button>\r\n    }else{\r\n        recycleBinBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Recycle bin\")} style={{marginLeft:\"232px\"}}><img src={Trash} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Trash</p></button>\r\n    }\r\n\r\n    if(currentTab === \"On hold\"){\r\n        onHoldBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"On hold\")} style={{backgroundColor:\"#99C6F8\"}}><img src={Hold} alt=\"hold\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Hold</p></button>\r\n\r\n    }else{\r\n        onHoldBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"On hold\")}><img src={Hold} alt=\"hold\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Hold</p></button>\r\n    }\r\n\r\n    if(currentTab === \"Issued\"){\r\n        issuedBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Issued\")} style={{backgroundColor:\"#99C6F8\"}}><img src={Issued} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Issued</p></button>\r\n\r\n    }else{\r\n        issuedBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Issued\")}><img src={Issued} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\" >Issued</p></button>\r\n    }\r\n\r\n    if(currentTab === \"Reports\"){\r\n        reportsBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Reports\")} style={{backgroundColor:\"#99C6F8\", width:\"120px\"}}><img src={Reports} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Reports</p></button>\r\n    }else{\r\n        reportsBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Reports\")} style={{width:\"120px\"}}><img src={Reports} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Reports</p></button>\r\n    }\r\n\r\n    if(currentTab === \"Progress\"){\r\n        progressBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Progress\")} style={{backgroundColor:\"#99C6F8\", width:\"120px\"}}><img src={Progress} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Progress</p></button>\r\n    }else if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n        progressBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Progress\")} style={{width:\"120px\"}}><img src={Progress} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Progress</p></button>\r\n    }\r\n\r\n    if(currentTab === \"Modelled\"){\r\n        modelledBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Modelled\")} style={{backgroundColor:\"#99C6F8\", width:\"120px\"}}><img src={Modelled} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Modelled</p></button>\r\n\r\n    }else if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n        modelledBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Modelled\")} style={{width:\"120px\"}}><img src={Modelled} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Modelled</p></button>\r\n    }\r\n    if(currentRole === \"Process\"){\r\n        if(currentTab === \"Process\"){\r\n            processBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Process\")} style={{backgroundColor:\"#99C6F8\", width:\"120px\"}}><img src={ProcInst} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Process</p></button>\r\n    \r\n        }else{\r\n            processBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Process\")} style={{width:\"120px\"}}><img src={ProcInst} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Process</p></button>\r\n        }\r\n    }else if(currentRole === \"Instrument\"){\r\n        if(currentTab === \"Instrument\"){\r\n            instrumentationBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Instrument\")} style={{backgroundColor:\"#99C6F8\", width:\"170px\"}}><img src={ProcInst} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Instrumentation</p></button>\r\n    \r\n        }else{\r\n            instrumentationBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Instrument\")} style={{width:\"170px\"}}><img src={ProcInst} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Instrumentation</p></button>\r\n        }\r\n    }else if(currentRole === \"SpecialityLead\"){\r\n        if(currentTab === \"Process\"){\r\n            processBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Process\")} style={{backgroundColor:\"#99C6F8\", width:\"120px\"}}><img src={ProcInst} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Process</p></button>\r\n    \r\n        }else{\r\n            processBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Process\")} style={{width:\"120px\"}}><img src={ProcInst} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Process</p></button>\r\n        }\r\n        if(currentTab === \"Instrument\"){\r\n            instrumentationBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Instrument\")} style={{backgroundColor:\"#99C6F8\", width:\"170px\"}}><img src={ProcInst} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Instrumentation</p></button>\r\n    \r\n        }else{\r\n            instrumentationBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Instrument\")} style={{width:\"170px\"}}><img src={ProcInst} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Instrumentation</p></button>\r\n        }\r\n    }else{\r\n        processBtn = null\r\n        instrumentationBtn = null\r\n    }\r\n    if(currentTab === \"ByPass\"){\r\n        byPassBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"ByPass\")} style={{backgroundColor:\"#99C6F8\", width:\"120px\"}}><img src={Reports} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">ByPass</p></button>\r\n    }else{\r\n        byPassBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"ByPass\")} style={{width:\"120px\"}}><img src={Reports} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">ByPass</p></button>\r\n    }\r\n\r\n    if(currentTab === \"History\"){\r\n        actionButtons = null\r\n    }\r\n    \r\n\r\n    let isoControlBtn = null\r\n    let isoControlNotModBtn = null\r\n    let isoControlFullBtn = null\r\n    let isocontrolWeightsComponent = null\r\n    let isoControllLineIdGroupBtn = null\r\n    let editCustomBtn = null\r\n    let uploadBOMBtn = null\r\n\r\n    if(process.env.REACT_APP_ISOCONTROL === \"1\" && currentRole === \"SpecialityLead\"){\r\n        \r\n        if(currentTab === \"IsoControl\"){\r\n            secureStorage.setItem(\"tab\", \"IsoControl\")\r\n            isoControlBtn = <button type=\"button\" className=\"nav__button text-left\" style={{backgroundColor:\"#99C6F8\", color:\"black\", fontWeight:\"bold\"}} >Modelled</button>\r\n            tableContent = <IsoControlModelledDataTable/>\r\n        }else{\r\n            isoControlBtn = <button type=\"button\" className=\"nav__button text-left\"  onClick={() => {setCurrentTab(\"IsoControl\")}}>Modelled</button>\r\n            \r\n        }\r\n        if(currentTab === \"IsoControlNotMod\"){\r\n            secureStorage.setItem(\"tab\", \"IsoControlNotMod\")\r\n            isoControlNotModBtn = <button type=\"button\" className=\"nav__button text-left\" style={{backgroundColor:\"#99C6F8\", color:\"black\", fontWeight:\"bold\"}} >Not modelled</button>\r\n            tableContent = <IsoControlNotModelledDataTable/>\r\n        }else{\r\n            isoControlNotModBtn = <button type=\"button\" className=\"nav__button text-left\"  onClick={() => {setCurrentTab(\"IsoControlNotMod\")}}>Not modelled</button>\r\n            \r\n        }\r\n        if(currentTab === \"IsoControlFull\"){\r\n            secureStorage.setItem(\"tab\", \"IsoControlFull\")\r\n            isoControlFullBtn = <button type=\"button\" className=\"nav__button__title text-left\" style={{backgroundColor:\"#99C6F8\", color:\"black\", fontWeight:\"bold\"}} >IsoControl</button>\r\n            tableContent = <IsoControlFullDataTable/>\r\n            isoControllLineIdGroupBtn = <button className=\"isocontrol__lineid__group__button\" onClick={() => {setCurrentTab(\"IsoControlLineIdGroup\")}}>Group by line ID</button>\r\n            uploadBOMBtn = <UploadBOMIsocontrolPopUp success={successAlert.bind(this)}/>\r\n            //editCustomBtn = <button className=\"isocontrol__lineid__group__button\" onClick={() => {setCurrentTab(\"IsoControlEditCustom\")}} style={{marginLeft:\"20px\"}}>Edit custom fields</button>\r\n        }else{\r\n            isoControlFullBtn = <button type=\"button\" className=\"nav__button__title text-left\"  onClick={() => {setCurrentTab(\"IsoControlFull\")}}>IsoControl</button>\r\n            \r\n        }\r\n\r\n        if(currentTab === \"IsoControlLineIdGroup\"){\r\n            secureStorage.setItem(\"tab\", \"IsoControlLineIdGroup\")\r\n            isoControllLineIdGroupBtn = <button className=\"isocontrol__lineid__group__button\" style={{backgroundColor: \"rgb(148, 220, 170)\"}} onClick={() => {setCurrentTab(\"IsoControlFull\")}}>Group by line ID</button>\r\n            tableContent = <IsoControlGroupLineIdDataTable/>\r\n            //editCustomBtn = <button className=\"isocontrol__lineid__group__button\" onClick={() => {setCurrentTab(\"IsoControlEditCustom\")}} style={{marginLeft:\"20px\"}}>Edit custom fields</button>\r\n\r\n        }\r\n        \r\n        if(currentTab === \"IsoControlEditCustom\"){\r\n            secureStorage.setItem(\"tab\", \"IsoControlEditCustom\")\r\n            //editCustomBtn = <button className=\"isocontrol__lineid__group__button\" style={{backgroundColor: \"rgb(148, 220, 170)\", marginLeft:\"20px\"}} onClick={() => {setCurrentTab(\"IsoControlFull\")}}>Edit custom fields</button>\r\n            tableContent = <IsoControlGroupLineIdDataTable />\r\n            isoControllLineIdGroupBtn = <button className=\"isocontrol__lineid__group__button\" onClick={() => {setCurrentTab(\"IsoControlLineIdGroup\")}}>Group by line ID</button>\r\n\r\n        }\r\n        \r\n        if(currentTab === \"IsoControlFull\"){\r\n            isocontrolWeightsComponent = \r\n                <center><button className=\"isocontrol__weigths__2\" disabled>Modelled: {modelledWeight} t &nbsp;&nbsp;&nbsp;&nbsp;   Not modelled: {notModelledWeight} t  &nbsp;&nbsp;&nbsp;&nbsp; Total: {totalIsocontrolWeight} t</button></center>\r\n    \r\n        }\r\n\r\n\r\n    }\r\n\r\n    if(currentRole === \"Design\"){\r\n        if(currentTab === \"Upload IsoFiles\"){\r\n            uploadButton = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Upload IsoFiles\")} style={{width:\"120px\"}}><img src={UploadIcon} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"navBar__button__text\">Upload</p></button>\r\n        }else{\r\n            uploadButton = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Upload IsoFiles\")} style={{width:\"120px\"}}><img src={UploadIcon} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p  className=\"navBar__button__text\">Upload</p></button>\r\n        }\r\n    }else{\r\n        uploadButton = null\r\n    }\r\n\r\n\r\n    return (       \r\n        <body>\r\n            <IdleTimer\r\n                timeout={1000 * 60 * 15}\r\n                onIdle={handleOnIdle}\r\n                debounce={250}\r\n            />\r\n            {content}\r\n            \r\n            <div>\r\n              <center>\r\n                      <Collapse in={loading}>\r\n                          <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\",zIndex:\"3\"}} severity=\"info\"\r\n                              >\r\n                              Processing...\r\n                          </Alert>\r\n                      </Collapse>\r\n                      <div\r\n                        className={`alert alert-success ${errorPI ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => setErrorPI(false)}\r\n                        >\r\n                            <AlertF type=\"error\" subtext=\"At least one isometric was on revision and wasn't sent to LDE/Isocontrol\" margin=\"-5px\"/>                            \r\n                      </div>\r\n \r\n                      <div\r\n                        className={`alert alert-success ${transactionSuccess ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => setTransactionSuccess(false)}\r\n                        >\r\n                          <AlertF type=\"success\" margin=\"-30px\" text=\"The action has been completed.\"/>\r\n                      </div>\r\n                      <div\r\n                        className={`alert alert-success ${errorUnclaim ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => setErrorUnclaim(false)}\r\n                        >\r\n                        <AlertF type=\"error\" subtext=\"Can't unclaim an iso forced by LOS\" margin=\"-105px\"/>                            \r\n                      </div>\r\n                      <div\r\n                        className={`alert alert-success ${errorUnclaimR ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => setErrorUnclaimR(false)}\r\n                        >\r\n                        <AlertF type=\"error\" subtext=\"Can't unclaim a returned ISO!\" margin=\"-118px\"/>   \r\n                      </div>\r\n\r\n                      <div\r\n                        className={`alert alert-success ${errorReports ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => setErrorReports(false)}\r\n                        >\r\n                         <AlertF type=\"error\" subtext=\"Missing columns!\" margin=\"-155px\"/>   \r\n                      </div>\r\n  \r\n                      <div\r\n                        className={`alert alert-success ${errorCL ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => setErrorCL(false)}\r\n                        >\r\n                        <AlertF type=\"error\" subtext=\"Missing clean!\" margin=\"-150px\"/>  \r\n                      </div>\r\n                      <div\r\n                        className={`alert alert-success ${warningSelected ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => setWarningSelected(false)}\r\n                        >\r\n                          <AlertF type=\"warning\" text=\"Select at least one isometric!\" margin=\"-40px\"/>   \r\n                      </div>\r\n                      <div\r\n                        className={`alert alert-success ${warningCancelRev ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => setWarningCancelRev(false)}\r\n                        >\r\n                          <AlertF type=\"warning\" text=\"This revision can't be cancelled!\" />   \r\n                      </div>\r\n                      <div\r\n                        className={`alert alert-success ${alreadyOnRev ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => setAlreadyOnRev(false)}\r\n                        >\r\n                          <AlertF type=\"warning\" text=\"Already on a new revision!\" margin=\"-40px\"/>   \r\n                      </div>\r\n                      <div\r\n                        className={`alert alert-success ${blocked ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => setBlocked(false)}\r\n                        >\r\n                         <AlertF type=\"error\" subtext=\"The isometric has been locked! Contact the administrator.\" margin=\"-45px\"/>          \r\n                      </div>\r\n                      <div\r\n                        className={`alert alert-success ${errorReportD ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => setErrorReportD(false)}\r\n                        >\r\n                          <AlertF type=\"error\" subtext=\"There is a line of the report has an invalid type or progress!\" margin=\"-35px\"/>          \r\n                      </div>\r\n                      <div\r\n                        className={`alert alert-success ${errorDeleteUser ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => setErrorDeleteUser(false)}\r\n                        >\r\n                          <AlertF type=\"error\" subtext=\"This user has claimed isometrics and can't be deleted!\" margin=\"-40px\"/>          \r\n                      </div>\r\n                      <div\r\n                        className={`alert alert-success ${errorREV ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => setErrorREV(false)}\r\n                        >\r\n                        <AlertF type=\"warning\" text=\"Complete the revision parameters!\" margin=\"-20px\"/>   \r\n                      </div>\r\n                  </center>\r\n              {navBar}\r\n              <div className=\"isotracker__row\">\r\n                  <div className=\"isotracker__column\">\r\n                      <img src={IsoTrackerLogo} alt=\"isoTrackerLogo\" className=\"isoTrackerLogo__image2\"/>\r\n                      \r\n                      <div className=\"roleSelector__containerF\">\r\n                              <RoleDropDown style={{paddingLeft: \"2px\"}} onChange={value => setCurrentRole(value)} roles = {roles}/>\r\n                      </div>\r\n                  </div>\r\n                  <div className=\"column1\">\r\n                      <div className=\"stateTable__containerF\">\r\n                                  \r\n                          <StateTable updateData={updateData} currentRole = {currentRole}/>\r\n                                 \r\n                      </div>  \r\n                  </div>\r\n                  \r\n              </div>\r\n              <table className=\"isotracker__table__container\" >\r\n                      <tr className=\"isotracker__table__navBar__container\">\r\n                          <th  colspan=\"2\" className=\"isotracker__table__navBar\">\r\n                              {recycleBinBtn}\r\n                              {onHoldBtn}\r\n                              {issuedBtn}\r\n                              {byPassBtn}\r\n                              {reportsBtn}\r\n                              {progressBtn}\r\n                              {modelledBtn}\r\n                              {processBtn}\r\n                              {instrumentationBtn}\r\n                              {usersButton}\r\n                              {ttButton}\r\n                              {uploadButton}\r\n                              \r\n                          </th>\r\n                      </tr>\r\n                      <tr className=\"isotracker__table__tray__and__table__container\" style={{height: dataTableHeight}}>\r\n                          <td className=\"isotracker__table__trays\">\r\n                              <div className=\"trays__container\">\r\n                                  {isoControlFullBtn}\r\n                                  \r\n                                  <p className=\"isotracker__table__trays__group\">Home</p>\r\n                                  \r\n                                  {myTrayBtn}\r\n                                  <ReportBtns onChange={value => setCurrentTab(value)} currentTab = {currentTab}/>\r\n                                  <p className=\"isotracker__table__trays__group\">Trays</p>\r\n                                  <NavBtns onChange={value => setCurrentTab(value)} currentTab = {currentTab} currentRole = {currentRole}/>        \r\n                              </div>\r\n                          </td>\r\n                          <td className=\"isotracker__table__table\">\r\n                              <div style={{height: \"450px\", width:\"1550px\"}} className=\"isotracker__table__table__container__2\">\r\n                                  {isocontrolWeightsComponent}\r\n                                  {isoControllLineIdGroupBtn}\r\n                                  {uploadBOMBtn}\r\n                                  {editCustomBtn}\r\n                                  {tableContent}\r\n                              </div>\r\n                          </td>\r\n                      </tr>\r\n                  </table>\r\n                     \r\n                    <center className=\"actionBtns__container\">   \r\n                       \r\n                      {actionButtons}\r\n                    </center>\r\n                  \r\n                  <br></br>\r\n                  </div>\r\n        </body> \r\n        \r\n    );\r\n};\r\n\r\nexport default IsoCtrlF;\r\n","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\electrical\\electrical.js",["1234","1235","1236"],"import \"./electrical.css\"\r\nimport React, { useState , useEffect} from 'react'\r\nimport NavBar from '../../components/navBar/navBar'\r\nimport RoleDropDown from '../../components/roleDropDown/roleDropDown'\r\nimport EquipmentsNavBtns from \"../../components/EquipmentsNavBtns/equipmentsNavBtns\"\r\nimport ElectricalEstimatedDataTable from \"../../components/electricalEstimatedDataTable/electricalEstimatedDataTable\"\r\nimport ElectricalModelledDataTable from \"../../components/electricalModelledDataTable/electricalModelledDataTable\"\r\nimport ProgressPlotElecs from \"../../components/progresPlotElecs/progressPlotElecs\"\r\nimport ElecTypesDataTable from \"../../components/elecTypesDataTable/elecTypesDataTable\"\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ElecExcel from \"../../components/elecExcel/elecExcel\"\r\nimport ElecExcelEdit from \"../../components/elecExcelEdit/elecExcelEdit\"\r\nimport IsoTrackerLogo from \"../../assets/images/3DTracker.svg\"\r\nimport ExportIcon from \"../../assets/images/downloadicon.png\"\r\nimport EditIcon from \"../../assets/images/edit.png\"\r\nimport AlertF from \"../../components/alert/alert\"\r\n\r\nimport IdleTimer from 'react-idle-timer'\r\nimport {useHistory} from \"react-router\";\r\n\r\nconst Electrical = () => {\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n    const [currentRole, setCurrentRole] = useState();\r\n    const [roles, setRoles] = useState();\r\n    const[weight, setWeight] = useState();\r\n    const[progress, setProgress] = useState();\r\n    const[successAlert, setSuccessAlert] = useState(false);\r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(()=>{\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n       \r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/roles/user\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setRoles(json.roles);\r\n                if(secureStorage.getItem('role') !== null){\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }else{\r\n                    secureStorage.setItem('role', json.roles[0])\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }\r\n                }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })       \r\n            \r\n    },[currentRole]);\r\n\r\n    useEffect(()=>{\r\n\r\n        let options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n       \r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/electrical/weight\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setWeight(json.weight)\r\n                setProgress(json.progress)\r\n            }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })     \r\n            \r\n            const body = {\r\n                user: currentUser,\r\n            }\r\n            options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n    \r\n                })\r\n            \r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n        if(!secureStorage.getItem(\"user\")){\r\n            history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/\");\r\n        }\r\n    }, [])\r\n\r\n    function success(){\r\n        setSuccessAlert(true)\r\n        setTimeout(function () {\r\n            setSuccessAlert(false)\r\n        }, 1000);\r\n    }\r\n    \r\n    function handleOnIdle(){\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n        secureStorage.clear()\r\n        history.push(\"/\" + process.env.REACT_APP_PROJECT)\r\n    }\r\n    \r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    var dataTableHeight = \"500px\"\r\n\r\n    \r\n    document.title= process.env.REACT_APP_APP_NAMEPROJ\r\n    const [currentTab, setCurrentTab] = useState(secureStorage.getItem(\"elec_tab\"))\r\n    if(currentTab === \"\" || currentTab === null){\r\n        setCurrentTab(\"Estimated\")\r\n    }\r\n\r\n    var currentUser = secureStorage.getItem('user')\r\n    var table = null\r\n\r\n    let downloadBtn = null\r\n    let adminBtn = null\r\n\r\n\r\n    if(currentTab === \"Estimated\"){\r\n        table = <ElectricalEstimatedDataTable/>\r\n    }else if(currentTab === \"Modelled\"){\r\n        downloadBtn = <button className=\"navBar__button\" onClick={()=>downloadCivilsModelled()} style={{marginLeft:\"230px\", width:\"115px\"}}><img src={ExportIcon} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Export</p></button>\r\n    \r\n        table = <ElectricalModelledDataTable/>\r\n    }else if(currentTab === \"Progress\"){\r\n        table = <ProgressPlotElecs/>\r\n    }else if(currentTab === \"Types\"){\r\n        table = <ElecTypesDataTable/>\r\n    }else if(currentTab === \"Key parameters\"){\r\n        table = <ElecExcel success={success.bind(this)}/>\r\n    }else if(currentTab === \"Edit\"){\r\n        table = <ElecExcelEdit success={success.bind(this)}/>\r\n    }\r\n\r\n    \r\n    if(currentTab === \"Edit\" || currentTab === \"Key parameters\"){\r\n        dataTableHeight = \"500px\"\r\n    }\r\n    \r\n    if(currentRole === \"Project\"){\r\n        if(currentTab === \"Estimated\" || currentTab === \"Edit\"){\r\n            if(currentTab === \"Edit\"){\r\n                adminBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Edit\")} style={{backgroundColor:\"#99C6F8\", marginLeft:\"230px\"}}><img src={EditIcon} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Edit</p></button>\r\n            }else{\r\n                adminBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Edit\")} style={{marginLeft:\"230px\"}}><img src={EditIcon} alt=\"trash\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Edit</p></button>\r\n            }        }else{\r\n            adminBtn = null\r\n        }\r\n    }\r\n\r\n\r\n    async function downloadCivilsModelled(){\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadElectricalModelled/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"AREA\", \"TAG\", \"TYPE\", \"WEIGHT\", \"STATUS\", \"PROGRESS\"]\r\n            exportToExcel(JSON.parse(json), \"Electrical modelled\", headers)\r\n        })\r\n    }\r\n\r\n    const exportToExcel = (apiData, fileName, headers) => {\r\n        const fileType =\r\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const header_cells = ['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'O1']\r\n        const fileExtension = \".xlsx\";\r\n\r\n        let wscols = []\r\n        for(let i = 0; i < headers.length; i++){\r\n            wscols.push({width:35})\r\n        }\r\n\r\n        const ws = XLSX.utils.json_to_sheet(apiData);   \r\n        ws[\"!cols\"] = wscols\r\n        for(let i = 0; i < headers.length; i++){\r\n            ws[header_cells[i]].v = headers[i]\r\n        }\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n\r\n    }\r\n\r\n    return(\r\n        \r\n        <body>\r\n            <IdleTimer\r\n                timeout={1000 * 60 * 15}\r\n                onIdle={handleOnIdle}\r\n                debounce={250}\r\n            />\r\n            <NavBar onChange={value => setCurrentTab(currentTab)}/>\r\n            <div\r\n            className={`alert alert-success ${successAlert ? 'alert-shown' : 'alert-hidden'}`}\r\n            onTransitionEnd={() => setSuccessAlert(false)}\r\n            >\r\n                <AlertF type=\"success\" text=\"Changes saved!\" margin=\"0px\"/>\r\n            </div>\r\n            <div style={{position:\"absolute\", marginTop:\"180px\", marginLeft:\"47%\"}}>\r\n                <i className=\"discipline__title\" style={{fontStyle:\"normal\"}}>Electrical</i>\r\n            </div>\r\n                <div className=\"isotracker__row\">\r\n                  <div className=\"isotracker__column\">\r\n                      <img src={IsoTrackerLogo} alt=\"isoTrackerLogo\" className=\"isoTrackerLogo__image2\"/>\r\n                      \r\n                      <div className=\"roleSelector__containerF\">\r\n                              <RoleDropDown style={{paddingLeft: \"2px\"}} onChange={value => setCurrentRole(value)} roles = {roles}/>\r\n                      </div>\r\n                      \r\n                  </div>\r\n\r\n                  <div className=\"isotracker__column\">\r\n                  \r\n                  <table className=\"equipTable__table\" style={{marginTop:\"270px\", width:\"35%\", marginLeft:\"59%\"}}>\r\n                        <tbody className=\"equipable__body\">\r\n                            <tr>    \r\n                                <td  className=\"equipTable__header\" style={{backgroundColor:\"#338DF1\", borderRadius:\"1em 0 0 0\"}}>Estimated weight</td>\r\n                                <td className=\"equipTable__header\" style={{backgroundColor:\"#338DF1\", borderRadius:\"0 1em 0 0\"}}>Total progress</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"equipTable__state\" style={{borderRadius:\"0 0 0 1em\"}}>{weight}</td>\r\n                                <td className=\"equipTable__state\" style={{borderRadius:\"0 0 1em 0\"}}>{progress}%</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    \r\n                  </div>               \r\n                  \r\n                  \r\n              </div>\r\n              <table className=\"isotracker__table__container\">\r\n                      <tr className=\"isotracker__table__navBar__container\">\r\n                          <th  colspan=\"2\" className=\"isotracker__table__navBar\">\r\n                            {adminBtn}\r\n                            {downloadBtn}\r\n                          </th>\r\n                      </tr>\r\n                      <tr className=\"isotracker__table__tray__and__table__container\" style={{height: dataTableHeight}}>\r\n                          <td className=\"disciplines__table__trays\">\r\n                              <div className=\"trays__container\">\r\n                                  <p className=\"isotracker__table__trays__group\">Options</p>\r\n                                  <center className=\"equimentsNavBtns__center\">              \r\n                                    <EquipmentsNavBtns onChange={value => setCurrentTab(value)} currentTab = {currentTab} currentRole = {currentRole} discipline = \"Equipment\"/>               \r\n                                    </center>\r\n                              </div>\r\n                          </td>\r\n                          <td className=\"discplines__table__table\" >\r\n                              <div  style={{height: \"540px\", width: \"1550px\"}} className=\"isotracker__table__table__container\">\r\n                                  {table}\r\n                              </div>\r\n                          </td>\r\n                          \r\n                      </tr>\r\n                  </table>\r\n         </body>\r\n    )\r\n}\r\n\r\nexport default Electrical;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\sptracker\\sptracker.js",["1237","1238","1239","1240","1241"],"import \"./sptracker.css\"\r\nimport React, { useState , useEffect} from 'react'\r\nimport NavBar from '../../components/navBar/navBar'\r\nimport CSPTrackerLogo from \"../../assets/images/csptracker.svg\"\r\nimport RoleDropDown from '../../components/roleDropDown/roleDropDown'\r\n\r\nimport IdleTimer from 'react-idle-timer'\r\nimport {useHistory} from \"react-router\";\r\nimport CSPTrackerdDataTable from \"../../components/csptrackerDataTable/csptrackerDataTable\"\r\nimport HotTable from \"@handsontable/react\"\r\n\r\nimport SaveIcon from \"../../assets/images/save.svg\"\r\nimport AlertF from \"../../components/alert/alert\"\r\nimport CSPTrackerRequestPopUp from \"../../components/csptrackerRequestPopUp/csptrackerRequestPopUp\"\r\nimport CSPTrackerdRequestsDataTable from \"../../components/csptrackerRequestsDataTable/csptrackerRequestsDataTable\"\r\n\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport Reports from \"../../assets/images/view_requests.svg\"\r\nimport Back from \"../../assets/images/back.svg\"\r\nimport CSPTrackerKeyParams from \"../../components/csptrackerKeyParams/csptrackerKeyParams\"\r\n\r\nimport { PieChart, Pie, Tooltip, Cell } from 'recharts';\r\n\r\nconst COLORS = ['#D2D2D2', '#FFCA42', '#7BD36D', '#99C6F8', '#94DCAA', '#FF3358'];\r\n\r\nconst RADIAN = Math.PI / 180;\r\nconst renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\r\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n    if(index === 0){\r\n        index = \"MAT\"\r\n    }else if(index === 1){\r\n        index = \"HOLD\"\r\n    }else if(index === 2){\r\n        index = \"OK-REV0\"\r\n    }else if(index === 3){\r\n        index = \"OK-REVN\"\r\n    }else if(index === 4){\r\n        index = \"EXCLUDED\"\r\n    }else if(index === 5){\r\n        index = \"DELETED\"\r\n    }\r\n  \r\n    return (\r\n      <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n          {index}\r\n      </text>\r\n    );\r\n  };\r\n\r\nconst CSPTracker = () => {\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    const settings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 250,\r\n      }\r\n\r\n    const [currentRole, setCurrentRole] = useState();\r\n    const [currentTab, setCurrentTab] = useState(\"View\")\r\n    const [roles, setRoles] = useState();\r\n\r\n    const [successAlert, setSuccessAlert] = useState(false);\r\n    const [uploadDrawingSuccess, setUploadDrawingSuccess] = useState(false);\r\n    const [updateDrawingSuccess, setUpdateDrawingSuccess] = useState(false)\r\n    const [noTagError, setNoTagError] = useState(false);\r\n    const [invalidFieldError, setInvalidFieldError] = useState(false);\r\n    const [errorIndex, setErrorIndex] = useState(null);\r\n    const [warningBlankRequest, setWarningBlankRequest] = useState(false)\r\n    const [requestSuccess, setRequestSuccess] = useState(false)\r\n    const [existsRequest, setExistsRequest] = useState(false)\r\n    const [errorPid, seterrorPid] = useState(false)\r\n\r\n    const [editData, setEditData] = useState()\r\n    const [descriptionPlaneData, setDescriptionPlaneData] = useState()\r\n    const [diametersData, setDiametersData] = useState()\r\n    const [ratingData, setRatingData] = useState()\r\n    const [specData, setSpecData] = useState()\r\n    const [endPreparationData, setEndPrepartaionData] = useState()\r\n    const [boltTypesData, setBoltTypesData] = useState()\r\n    const [pidData, setPidData] = useState()\r\n\r\n    const [busy, setBusy] = useState(false)\r\n    const [editingUser, setEditingUser] = useState()\r\n\r\n    const [updateData, setUpdateData] = useState(false)    \r\n\r\n    const history = useHistory()\r\n\r\n    const [counter, setCounter] = useState([])\r\n\r\n    useEffect(()=>{\r\n        if(!secureStorage.getItem(\"user\")){\r\n            history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/\");\r\n        }\r\n    }, [])\r\n\r\n    var currentUser = secureStorage.getItem('user')\r\n\r\n    let p1bore, p2bore, p3bore = \"\"\r\n\r\n    if(process.env.REACT_APP_MMDN === \"1\"){\r\n        p1bore = \"p1diameter_nps\"\r\n        p2bore = \"p2diameter_nps\"\r\n        p3bore = \"p3diameter_nps\"\r\n    }else{\r\n        p1bore = \"p1diameter_dn\"\r\n        p2bore = \"p2diameter_dn\"\r\n        p3bore = \"p3diameter_dn\"\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n       \r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/roles/user\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setRoles(json.roles);\r\n                if(secureStorage.getItem('role') !== null){\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }else{\r\n                    secureStorage.setItem('role', json.roles[0])\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }\r\n                }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })       \r\n            \r\n    },[currentRole]);\r\n\r\n    useEffect(async()=>{\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        let options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n\r\n        options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/spStatusData\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                let counter = [{name: \"Materials\", value: json.materials}, {name: \"Hold\", value: json.hold}, {name: \"OK-REV0\", value: json.ok_rev0}, {name: \"OK-REVN\", value: json.ok_revn}, {name: \"Excluded\", value: json.excluded}, {name: \"Deleted\", value: json.deleted}]\r\n                \r\n                await setCounter(counter)\r\n            })\r\n\r\n    },[updateData])\r\n\r\n    useEffect(async()=>{\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/csptracker\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                await setEditData(json.rows)\r\n            })\r\n\r\n        if(currentTab === \"View\"){  \r\n    \r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getListsData\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                await setDescriptionPlaneData(json.descriptionPlaneData)\r\n                await setDiametersData(json.diametersData)\r\n                await setRatingData(json.ratingData)\r\n                await setSpecData(json.specData)\r\n                await setEndPrepartaionData(json.endPreparationData)\r\n                await setBoltTypesData(json.boltTypesData)\r\n                await setPidData(json.pidData)\r\n            })\r\n        }    \r\n    }, [currentTab])\r\n\r\n    function uploadSuccess(){\r\n        setUploadDrawingSuccess(true)\r\n    }\r\n\r\n    function updateSuccess(){\r\n        setUpdateDrawingSuccess(true)\r\n    }\r\n\r\n    function drawingUploadError(){\r\n    }\r\n\r\n    function errorBlankRequest(){\r\n        setWarningBlankRequest(true)\r\n    }\r\n\r\n    function successRequest(){\r\n        setRequestSuccess(true)\r\n    }\r\n\r\n    function existsErrorRequest(){\r\n        setExistsRequest(true)\r\n    }\r\n\r\n    function errorPidRequest(){\r\n        seterrorPid(true)\r\n    }\r\n\r\n    function handleOnIdle(){\r\n        saveChanges()\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n        secureStorage.clear()\r\n        history.push(\"/\" + process.env.REACT_APP_PROJECT)\r\n    }\r\n\r\n    async function handleToggle(){\r\n        if(currentTab === \"View\"){\r\n            const body = {\r\n                user: currentUser,\r\n            }\r\n            const options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/editCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                if(json.user){\r\n                    await setBusy(true)\r\n                    await setEditingUser(json.user)\r\n                }else{\r\n                    await setBusy(false)\r\n                }\r\n                await setCurrentTab(\"Edit\")\r\n            })\r\n            \r\n        }else{\r\n            const body = {\r\n                user: currentUser,\r\n            }\r\n            const options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                if(json.success){\r\n                    await saveChanges()\r\n                    await setCurrentTab(\"View\")\r\n                }\r\n            })\r\n            \r\n        }\r\n    }\r\n\r\n    async function handleToggleKP(){\r\n        if(currentTab === \"View\"){\r\n            await setCurrentTab(\"CSP KeyParams\")\r\n            \r\n        }else{\r\n            //await saveChangesKP()\r\n            await setCurrentTab(\"View\")\r\n            \r\n        }\r\n    }\r\n\r\n    async function addRow(){\r\n        let rows = editData\r\n        rows.push({tag:\"\", quantity: \"\", description: \"\", description_plan_code: \"\", drawing_filename: \"\", description_iso: \"\", ident: \"\", p1diameter_dn: \"\", p1diameter_nps: \"\", p2diameter_dn: \"\", p2diameter_nps: \"\", p3diameter_dn: \"\", p3diameter_nps: \"\", rating: \"\", spec: \"\", type: \"\", end_preparation: \"\", description_drawing: \"\", face_to_face: \"\", bolt_type: \"\", ready_load: \"\", ready_e3d: \"\", comments: \"\", pid: \"\", line_id: \"\", requisition: \"\", equipnozz: \"\", utility_station: \"\"})\r\n        await setEditData(rows)\r\n        await setUpdateData(!updateData)\r\n      }\r\n\r\n    async function saveChanges(){\r\n\r\n        const body = {\r\n            rows: editData,\r\n            email: currentUser\r\n        }\r\n        let options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        }\r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/tags\", options)\r\n        .then(response => response.json())\r\n        .then(async json =>{\r\n            let unique = true\r\n            if(json.none){\r\n\r\n            }else{\r\n                let tags = []\r\n                for(let i = 0; i < editData.length; i++){\r\n                    if(tags.indexOf(editData[i].tag) > -1 && editData[i].tag !== null){\r\n                        unique = false\r\n                        await setErrorIndex(\"Repeated tag at entry \" + i +\"!\")             \r\n                    }else{\r\n                        tags.push(editData[i].tag)\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if(!unique){\r\n                await setNoTagError(true)\r\n            }\r\n            options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submitCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json =>{\r\n                if(json.success){\r\n                    await setSuccessAlert(true)\r\n\r\n                }\r\n            })\r\n\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/update_ready_load\", options)\r\n            .then(response => response.json())\r\n            .then(async json =>{\r\n\r\n            }) \r\n                                \r\n        })                \r\n             \r\n    }\r\n\r\n    async function updateDataMethod(){\r\n        setUpdateData(!updateData)\r\n    }\r\n\r\n    async function downloadReport(){\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadCSP/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"Tag\", \"Spec\", \"P1Bore\", \"P2Bore\", \"P3Bore\", \"Rating\", \"End preparation\", \"Line ID\", \"P&ID\", \"Type\", \"Drawing description\", \"Quantity\", \"Requisition\", \"Description\", \"Iso description\", \"Ident\", \"Face to face\", \"FLG Short Code\", \"Equipment + Nozzle\", \"Utility Station\", \"Request date\", \"Ready to load date\", \"Ready in E3D date\", \"Comments\", \"Ready to Load\", \"Ready in 3D\", \"Updated\"]\r\n            const apiData = JSON.parse(json)\r\n            const fileName = \"CSPTracker report\"\r\n\r\n            const fileType =\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n            const header_cells = ['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'N1', 'O1', 'P1', 'Q1', 'R1', 'S1', 'T1', 'U1', 'V1', 'W1', 'X1', 'Y1', 'Z1', 'A2', 'B2', 'C2', 'D2', 'E2', 'F2']\r\n            const fileExtension = \".xlsx\";\r\n\r\n            let wscols = []\r\n            for(let i = 0; i < headers.length; i++){\r\n                wscols.push({width:35})\r\n            }\r\n\r\n            const ws = XLSX.utils.json_to_sheet(apiData);   \r\n            ws[\"!cols\"] = wscols\r\n            for(let i = 0; i < headers.length; i++){\r\n                ws[header_cells[i]].v = headers[i]\r\n            }\r\n            const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n            const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n            const data = new Blob([excelBuffer], { type: fileType });\r\n            FileSaver.saveAs(data, fileName + fileExtension);\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    var dataTableHeight = \"570px\"\r\n\r\n    let editBtn, addRowBtn, saveBtn, exportBtn, requestBtn, notificationsBtn, designNotificationsBtn = null\r\n    let table = <CSPTrackerdDataTable currentRole = {currentRole} updateDataMethod = {updateDataMethod.bind(this)} updateData = {updateData} uploadDrawingSuccess = {uploadSuccess.bind(this)} updateDrawingSuccess = {updateSuccess.bind(this)} drawingUploadError={drawingUploadError.bind(this)}/>\r\n    if(currentRole === \"Materials\"){\r\n        editBtn = <label class=\"switchBtn\" style={{width:\"145px\"}}>\r\n                    <p className=\"navBar__button__text\" style={{width:\"100px\", marginTop:\"4px\"}}>Edit mode</p>\r\n                    <input type=\"checkbox\" id=\"edit\" onClick={()=>handleToggle()}/>\r\n                    <div class=\"slide round\"></div>\r\n                </label>   \r\n                   \r\n        if(currentTab === \"Edit\"){\r\n            notificationsBtn = null\r\n        }\r\n        else if(currentTab !== \"Requests\"){\r\n            notificationsBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"Requests\")} style={{width:\"120px\", marginTop:\"5px\"}}><img src={Reports} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"4px\"}}></img><p className=\"navBar__button__text\">Requests</p></button>\r\n        }else{\r\n            notificationsBtn = <button className=\"navBar__button\" onClick={()=>setCurrentTab(\"View\")} style={{backgroundColor:\"#99C6F8\", width:\"120px\", marginTop:\"5px\"}}><img src={Back} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"4px\"}}></img><p className=\"navBar__button__text\">Back</p></button>\r\n            editBtn = <label class=\"switchBtn\" style={{width:\"145px\"}}>\r\n            <p className=\"navBar__button__text\" style={{width:\"100px\", marginTop:\"4px\"}}>Edit mode</p>\r\n            <input type=\"checkbox\" id=\"edit\" disabled/>\r\n            <div class=\"slide round\"></div>\r\n        </label>\r\n        }\r\n    }\r\n\r\n    if(currentRole === \"3D Admin\"){\r\n        editBtn = <label class=\"switchBtn\" style={{width:\"155px\"}}>\r\n                    <p className=\"navBar__button__text\" style={{width:\"180px\", marginTop:\"4px\"}}>KeyParams</p>\r\n                    <input type=\"checkbox\" id=\"edit\" onClick={()=>handleToggleKP()}/>\r\n                    <div class=\"slide round\" style={{marginLeft:\"90px\"}}></div>\r\n                </label>  \r\n    }\r\n\r\n    if(currentRole === \"Design\"){\r\n        requestBtn = <CSPTrackerRequestPopUp errorBlankRequest={errorBlankRequest.bind(this)} successRequest={successRequest.bind(this)} existsErrorRequest={existsErrorRequest.bind(this)} errorPidRequest={errorPidRequest.bind(this)}/>\r\n    }\r\n\r\n\r\n\r\n    if(currentTab === \"View\"){\r\n        table = <CSPTrackerdDataTable currentRole = {currentRole} updateDataMethod = {updateDataMethod.bind(this)} updateData = {updateData} uploadDrawingSuccess = {uploadSuccess.bind(this)} updateDrawingSuccess = {updateSuccess.bind(this)} drawingUploadError={drawingUploadError.bind(this)}/>\r\n        exportBtn = <button className=\"action__btn\" name=\"export\" value=\"export\" onClick={() => downloadReport()}>Export</button>\r\n        addRowBtn = null\r\n        saveBtn = null\r\n        \r\n    }else if(currentTab === \"Edit\"){\r\n        if(!busy){\r\n            table = <HotTable\r\n            data={editData}\r\n            colHeaders = {[\"<b>TAG</b>\", \"<b>SPEC</b>\", \"<b>P1BORE</b>\", \"<b>P2BORE</b>\", \"P3BORE\", \"<b>RATING</b>\", \"<b>END PREPARATION</b>\", \"<b>LINE ID</b>\", \"<b>P&ID</b>\", \"<b>TYPE</b>\", \"<b>DRAWING DESCRIPTION</b>\", \"<b>QUANTITY</b>\", \"REQUISITION\", \"<b>DESCRIPTION</b>\", \"<b>ISO DESCRIPTION</b>\", \"<b>IDENT</b>\", \"FACE TO FACE\", \"<b>FLG SHORT CODE</b>\", \"EQUIPMENT + NOZZLE\", \"UTILITY STATION\", \"COMMENTS\"]}\r\n            rowHeaders={true}\r\n            width=\"2200\"\r\n            height=\"635\"\r\n            settings={settings} \r\n            manualColumnResize={true}\r\n            manualRowResize={true}\r\n            filters={true}\r\n            dropdownMenu= {[\r\n                'make_read_only',\r\n                '---------',\r\n                'alignment',\r\n                '---------',\r\n                'filter_by_condition',\r\n                '---------',\r\n                'filter_operators',\r\n                '---------',\r\n                'filter_by_condition2',\r\n                '---------',\r\n                'filter_by_value',\r\n                '---------',\r\n                'filter_action_bar',\r\n              ]}\r\n            columns= {[{ data: \"tag\", type:'text'}, {data: \"spec\", type:\"dropdown\", strict:\"true\", source: specData}, {data: p1bore, type:\"dropdown\", strict:\"true\", source: diametersData}, {data: p2bore, type:\"dropdown\", strict:\"true\", source: diametersData}, {data: p3bore, type:\"dropdown\", strict:\"true\", source: diametersData}, {data: \"rating\", type:\"dropdown\", strict:\"true\", source: ratingData}, {data: \"end_preparation\", type:\"dropdown\", strict:\"true\", source: endPreparationData}, {data: \"line_id\", type:\"text\"}, {data: \"pid\", type:\"dropdown\", strict:\"true\", source: pidData}, {data: \"type\", type:\"text\"}, {data: \"description_plan_code\", type:\"dropdown\", allowInvalid:true, source: descriptionPlaneData}, {data:\"quantity\", type:\"numeric\"}, { data: \"requisition\", type:'text'}, { data: \"description\", type:'text'}, {data: \"description_iso\", type:\"text\"},{data: \"ident\", type:\"text\"}, {data: \"face_to_face\", type:\"text\"}, {data: \"bolt_type\", type:\"dropdown\", strict:\"true\", source: boltTypesData}, {data:\"equipnozz\", type:\"text\"}, {data:\"utility_station\", type:\"text\"}, {data:\"comments\", type:\"text\"}]}\r\n            />\r\n          \r\n            dataTableHeight= \"700px\"\r\n            addRowBtn = <button class=\"btn btn-sm btn-success\" onClick={() => addRow()} style={{marginRight:\"5px\", fontSize:\"18px\", width:\"35px\", height:\"35px\", borderRadius:\"10px\", float:\"right\", marginTop:\"8px\"}}>+</button>\r\n    \r\n            saveBtn = <button className=\"navBar__button\" onClick={()=> saveChanges()} style={{marginTop:\"7px\"}}><img src={SaveIcon} alt=\"save\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Save</p></button>\r\n        }else{\r\n            table = <div className=\"connected__panel\"><p className=\"connected__text\">The user {editingUser} is already editing!</p></div>\r\n        }    \r\n\r\n    }else if(currentTab === \"Requests\"){\r\n        table = <CSPTrackerdRequestsDataTable updateDataMethod = {updateDataMethod.bind(this)} updateData = {updateData} />\r\n    }else if(currentTab === \"CSP KeyParams\"){\r\n        table = <CSPTrackerKeyParams success={()=> setSuccessAlert(true)}/>\r\n    }\r\n\r\n\r\n    return(\r\n        \r\n        <body>\r\n            {updateData}\r\n            <IdleTimer\r\n                timeout={1000 * 60 * 15}\r\n                onIdle={handleOnIdle}\r\n                debounce={250}\r\n            />\r\n            <NavBar onChange={value => setCurrentTab(currentTab)}/>\r\n            <div\r\n            className={`alert alert-success ${successAlert ? 'alert-shown' : 'alert-hidden'}`}\r\n            onTransitionEnd={() => setSuccessAlert(false)}\r\n            >\r\n                <AlertF type=\"success\" text=\"Changes saved!\" margin=\"0px\"/>\r\n            </div>\r\n            <div\r\n            className={`alert alert-success ${uploadDrawingSuccess ? 'alert-shown' : 'alert-hidden'}`}\r\n            onTransitionEnd={() => setUploadDrawingSuccess(false)}\r\n            >\r\n                <AlertF type=\"success\" text=\"Drawing uploaded successfully!\" margin=\"0px\"/>\r\n            </div>\r\n            <div\r\n            className={`alert alert-success ${updateDrawingSuccess ? 'alert-shown' : 'alert-hidden'}`}\r\n            onTransitionEnd={() => setUpdateDrawingSuccess(false)}\r\n            >\r\n                <AlertF type=\"success\" text=\"Drawing updated successfully!\" margin=\"0px\"/>\r\n            </div>\r\n            <div\r\n            className={`alert alert-success ${noTagError ? 'alert-shown' : 'alert-error-hidden'}`}\r\n            onTransitionEnd={() => setNoTagError(false)}\r\n            >\r\n                <AlertF type=\"waring\" text={errorIndex} margin=\"0px\"/>\r\n            </div>\r\n            <div\r\n            className={`alert alert-success ${invalidFieldError ? 'alert-shown' : 'alert-error-hidden'}`}\r\n            onTransitionEnd={() => setInvalidFieldError(false)}\r\n            >\r\n                <AlertF type=\"error\" subtext=\"At least one of the entries had an invalid field!\" margin=\"0px\"/>\r\n            </div>\r\n            <div\r\n            className={`alert alert-success ${requestSuccess? 'alert-shown' : 'alert-error-hidden'}`}\r\n            onTransitionEnd={() => setRequestSuccess(false)}\r\n            >\r\n                <AlertF type=\"success\" text=\"SP requested successfully!\" margin=\"0px\"/>\r\n            </div>\r\n            <div\r\n            className={`alert alert-success ${warningBlankRequest ? 'alert-shown' : 'alert-error-hidden'}`}\r\n            onTransitionEnd={() => setWarningBlankRequest(false)}\r\n            >\r\n                <AlertF type=\"warning\" text=\"All fileds need to be filled!\" margin=\"0px\"/>\r\n            </div>\r\n            <div\r\n            className={`alert alert-success ${existsRequest ? 'alert-shown' : 'alert-error-hidden'}`}\r\n            onTransitionEnd={() => setExistsRequest(false)}\r\n            >\r\n                <AlertF type=\"error\" subtext=\"An SP with that SPTag already exists!\" margin=\"0px\"/>\r\n            </div>\r\n            <div\r\n            className={`alert alert-success ${errorPid ? 'alert-shown' : 'alert-error-hidden'}`}\r\n            onTransitionEnd={() => seterrorPid(false)}\r\n            >\r\n                <AlertF type=\"error\" subtext=\"The specified P&ID is invalid!\" margin=\"0px\"/>\r\n            </div>\r\n            <div className=\"isotracker__row\">\r\n                  <div className=\"isotracker__column\">\r\n                      <img src={CSPTrackerLogo} alt=\"CSPTrackerLogo\" className=\"isoTrackerLogo__image2\" style={{height:\"85px\"}}/>\r\n                      \r\n                      <div className=\"roleSelector__containerF\">\r\n                              <RoleDropDown style={{paddingLeft: \"2px\"}} onChange={value => setCurrentRole(value)} roles = {roles}/>\r\n                      </div>\r\n                      \r\n                  </div>\r\n                  <PieChart width={600} height={400}>\r\n                    <Pie data={counter} dataKey=\"value\" cx=\"50%\" cy=\"60%\"  outerRadius={120} fill=\"#8884d8\" label={renderCustomizedLabel}>\r\n                    {counter.map((entry, index) => (\r\n                        <Cell key={`cell-${index}`} fill={COLORS[index]} />\r\n                        ))}\r\n                    </Pie>\r\n                    <Tooltip/>\r\n                </PieChart>\r\n            </div>\r\n            <table className=\"isotracker__table__container\" style={{zoom:0.8, marginTop: \"-80px\"}}>\r\n                      <tr className=\"isotracker__table__navBar__container\" style={{height:\"65px \"}}>\r\n                          <th  className=\"isotracker__table__navBar\">\r\n                              <div style={{display:\"flex\"}}>\r\n                                {requestBtn}\r\n                                {editBtn}\r\n                                {notificationsBtn}\r\n                                {designNotificationsBtn}\r\n                                {saveBtn}   \r\n                              </div>                           \r\n                               \r\n                          </th>\r\n                      </tr>\r\n                      <tr className=\"isotracker__table__tray__and__table__container\" style={{height: dataTableHeight}}>\r\n                          <td className=\"discplines__table__table\" style={{height: dataTableHeight}} >\r\n                              <div  style={{height: dataTableHeight, width: \"2200px\"}} className=\"isotracker__table__table__container\">\r\n                                {table}\r\n                                {addRowBtn}\r\n                              </div>\r\n                          </td>\r\n                          \r\n                      </tr>\r\n                  </table>\r\n                  <center className=\"actionBtns__container\">   \r\n                    <div style={{display:\"flex\", marginTop:\"10px\"}}>\r\n                        {exportBtn}\r\n                    </div>\r\n                    \r\n                  </center>\r\n                  <br></br>\r\n         </body>\r\n    )\r\n}\r\n\r\nexport default CSPTracker;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\pitRequestView\\pitRequestView.js",["1242","1243","1244","1245","1246","1247"],"import React, { useState , useEffect} from 'react'\r\nimport NavBar from '../../components/navBar/navBar'\r\nimport CSPTrackerLogo from \"../../assets/images/3dquery.svg\"\r\nimport RoleDropDown from '../../components/roleDropDown/roleDropDown'\r\n\r\nimport IdleTimer from 'react-idle-timer'\r\nimport {useHistory} from \"react-router\";\r\nimport QTrackerViewDataTable from '../../components/qtrackerViewDataTable/qtrackerViewDataTable'\r\n\r\nimport SaveIcon from \"../../assets/images/save.svg\"\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nimport { PieChart, Pie, Tooltip, Cell } from 'recharts';\r\n\r\nconst COLORS = ['#D2D2D2', '#FFCA42', '#7BD36D', '#FF3358'];\r\n\r\nconst RADIAN = Math.PI / 180;\r\nconst renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\r\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n    if(index === 0){\r\n        index = \"Pen\"\r\n    }else if(index === 1){\r\n        index = \"Pro\"\r\n    }else if(index === 2){\r\n        index = \"A\"\r\n    }else if(index === 3){\r\n        index = \"R\"\r\n    }\r\n  \r\n    return (\r\n      <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n          {index}\r\n      </text>\r\n    );\r\n  };\r\n  \r\n\r\nconst PitRequestView = () => {\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    const settings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 250,\r\n      }\r\n\r\n    const [currentRole, setCurrentRole] = useState();\r\n    const [currentTab, setCurrentTab] = useState(\"View\")\r\n    const [roles, setRoles] = useState();\r\n    const [saveBtn, setSaveBtn] = useState()\r\n    const [updatedRows, setUpdatedRows] = useState([])\r\n    const [observations, setObservations] = useState()\r\n    const [counter, setCounter] = useState([])\r\n\r\n    const [updateData, setUpdateData] = useState(false)    \r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(()=>{\r\n        if(!secureStorage.getItem(\"user\")){\r\n            history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/\");\r\n        }\r\n        \r\n    }, [])\r\n\r\n    var currentUser = secureStorage.getItem('user')\r\n\r\n    useEffect(()=>{\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n       \r\n\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/roles/user\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setRoles(json.roles);\r\n                if(secureStorage.getItem('role') !== null){\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }else{\r\n                    secureStorage.setItem('role', json.roles[0])\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }\r\n                }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })     \r\n            \r\n            \r\n        if(secureStorage.getItem(\"role\") === \"3D Admin\"){\r\n            setSaveBtn(<button className=\"navBar__button\" onClick={()=> saveChanges()}><img src={SaveIcon} alt=\"save\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Save</p></button>)\r\n\r\n        }else{\r\n            setSaveBtn(null)\r\n        }\r\n            \r\n    },[currentRole]);\r\n\r\n    useEffect(async ()=>{\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        let options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n\r\n        options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        } \r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/statusData\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                let counter = [{name: \"Pending\", value: json.pending}, {name: \"In progress\", value: json.progress}, {name: \"Accepted\", value: json.accepted}, {name: \"Rejected\", value: json.rejected}]\r\n                \r\n                await setCounter(counter)\r\n            })\r\n            \r\n\r\n    },[updateData])\r\n\r\n    function handleOnIdle(){\r\n        const body = {\r\n            user: currentUser,\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n        secureStorage.clear()\r\n        history.push(\"/\" + process.env.REACT_APP_PROJECT)\r\n    }\r\n\r\n    async function updateDataMethod(){\r\n        setUpdateData(!updateData)\r\n    }\r\n\r\n    async function downloadReport(){\r\n\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNWC\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n          var rows = []\r\n          var row = null\r\n            for(let i = 0; i < json.rows.length; i++){\r\n                row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), observations: json.rows[i].observations, spref: json.rows[i].spref, name: null, pipe: null, items: null, scope: null, description: json.rows[i].description}\r\n                  \r\n                  if(json.rows[i].status === 0){\r\n                    row.status = \"Pending\"\r\n                  }else if(json.rows[i].status === 1){\r\n                      row.status = \"In progress\"\r\n                  }else if(json.rows[i].status === 2){\r\n                      row.status = \"Ready\"\r\n                  }else{\r\n                      row.status = \"Rejected\"\r\n                  }\r\n\r\n                  if(json.rows[i].accept_reject_date){\r\n                   \r\n                    row.ar_date = json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)\r\n                  \r\n                  }\r\n                \r\n                \r\n                rows.push(row)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNVN\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n            var row = null\r\n                for(let i = 0; i < json.rows.length; i++){\r\n                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), observations: json.rows[i].observations, spref: null, name: json.rows[i].name, pipe: null, items: null, scope: null, description: json.rows[i].description}\r\n                    \r\n                      if(json.rows[i].status === 0){\r\n                        row.status = \"Pending\"\r\n                      }else if(json.rows[i].status === 1){\r\n                          row.status = \"In progress\"\r\n                      }else if(json.rows[i].status === 2){\r\n                          row.status = \"Ready\"\r\n                      }else{\r\n                          row.status = \"Rejected\"\r\n                      }\r\n                      if(json.rows[i].accept_reject_date){\r\n                        row.ar_date = json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)\r\n                    }\r\n                      rows.push(row)\r\n                }\r\n                \r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNRI\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n                var row = null\r\n                    for(let i = 0; i < json.rows.length; i++){\r\n                        row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), observations: json.rows[i].observations, spref: null, name: null, pipe: json.rows[i].pipe, items: null, scope: null, description: json.rows[i].description}\r\n                                             \r\n                        if(json.rows[i].status === 0){\r\n                        row.status = \"Pending\"\r\n                        }else if(json.rows[i].status === 1){\r\n                            row.status = \"In progress\"\r\n                        }else if(json.rows[i].status === 2){\r\n                            row.status = \"Ready\"\r\n                        }else{\r\n                            row.status = \"Rejected\"\r\n                        }\r\n                        if(json.rows[i].accept_reject_date){\r\n                    row.ar_date = json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)\r\n                  }\r\n                        \r\n                        rows.push(row)\r\n                    }\r\n                    \r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNRB\", options)\r\n                    .then(response => response.json())\r\n                    .then(async json => {\r\n                    var row = null\r\n                        for(let i = 0; i < json.rows.length; i++){\r\n                            row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), observations: json.rows[i].observations, spref: null, name: null, pipe: json.rows[i].pipe, items: null, scope: null, description: json.rows[i].description}\r\n                            \r\n                              if(json.rows[i].status === 0){\r\n                                row.status = \"Pending\"\r\n                              }else if(json.rows[i].status === 1){\r\n                                  row.status = \"In progress\"\r\n                              }else if(json.rows[i].status === 2){\r\n                                  row.status = \"Ready\"\r\n                              }else{\r\n                                  row.status = \"Rejected\"\r\n                              }\r\n                            \r\n                              if(json.rows[i].accept_reject_date){\r\n                                row.ar_date = json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)\r\n                  }\r\n                              rows.push(row)\r\n                        }\r\n                        \r\n                        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNRIDS\", options)\r\n                        .then(response => response.json())\r\n                        .then(async json => {\r\n                        var row = null\r\n                            for(let i = 0; i < json.rows.length; i++){\r\n                                row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), observations: json.rows[i].observations, spref: null, name: json.rows[i].name, pipe: null, items: null, scope: null, description: null}\r\n                               \r\n                                  if(json.rows[i].status === 0){\r\n                                    row.status = \"Pending\"\r\n                                  }else if(json.rows[i].status === 1){\r\n                                      row.status = \"In progress\"\r\n                                  }else if(json.rows[i].status === 2){\r\n                                      row.status = \"Ready\"\r\n                                  }else{\r\n                                      row.status = \"Rejected\"\r\n                                  }\r\n                                \r\n                                  if(json.rows[i].accept_reject_date){\r\n                    row.ar_date = json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)\r\n                  }\r\n                                  rows.push(row)\r\n                            }\r\n                            \r\n                            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getRP\", options)\r\n                            .then(response => response.json())\r\n                            .then(async json => {\r\n                            var row = null\r\n                                for(let i = 0; i < json.rows.length; i++){\r\n                                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), observations: json.rows[i].observations, spref: null, name: null, pipe: null, items: json.rows[i].items_to_report, scope: json.rows[i].scope, description: json.rows[i].description}\r\n                                    \r\n                                      if(json.rows[i].status === 0){\r\n                                        row.status = \"Pending\"\r\n                                      }else if(json.rows[i].status === 1){\r\n                                          row.status = \"In progress\"\r\n                                      }else if(json.rows[i].status === 2){\r\n                                          row.status = \"Ready\"\r\n                                      }else{\r\n                                          row.status = \"Rejected\"\r\n                                      }\r\n                                    \r\n                                      if(json.rows[i].accept_reject_date){\r\n                    row.ar_date = json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)\r\n                  }\r\n                                    rows.push(row)\r\n                                }\r\n\r\n                                // Sort the array based on the second element\r\n                                rows.sort(function(first, second) {\r\n                                  return second.created_at.localeCompare(first.created_at);\r\n                                });\r\n                                \r\n                                const headers = [\"Reference\", \"User\", \"Date\", \"Observations\", \"SPREF\", \"Name\", \"Pipe\", \"Items\", \"Scope\", \"Description\", \"Status\", \"Accepted/Rejected date\"]\r\n                                const apiData = rows\r\n                                const fileName = \"QueryTracker report\"\r\n\r\n                                const fileType =\r\n                                \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n                                const header_cells = ['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1']\r\n                                const fileExtension = \".xlsx\";\r\n\r\n                                let wscols = []\r\n                                for(let i = 0; i < headers.length; i++){\r\n                                    wscols.push({width:35})\r\n                                }\r\n\r\n                                const ws = XLSX.utils.json_to_sheet(apiData);   \r\n                                ws[\"!cols\"] = wscols\r\n                                for(let i = 0; i < headers.length; i++){\r\n                                    if(ws[header_cells[i]]){\r\n                                        ws[header_cells[i]].v = headers[i]\r\n                                    }\r\n                                }\r\n                                const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n                                const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n                                const data = new Blob([excelBuffer], { type: fileType });\r\n                                FileSaver.saveAs(data, fileName + fileExtension);\r\n\r\n                            })\r\n\r\n                        })\r\n\r\n                    })\r\n\r\n                })\r\n\r\n            })\r\n            \r\n        })\r\n    }\r\n\r\n    async function updateStatus(updatedRow){\r\n        let currentRows = updatedRows\r\n        currentRows.push(updatedRow)\r\n        await setUpdatedRows(currentRows)\r\n    }\r\n\r\n    async function updateObservations(observations){\r\n        await setObservations(observations)\r\n    }\r\n\r\n    async function saveChanges(){\r\n        for(let i = 0; i < updatedRows.length; i++){\r\n\r\n            let body = {\r\n                incidence_number: updatedRows[i][0],\r\n                status_id: updatedRows[i][1],\r\n                type: updatedRows[i][2],\r\n                email: secureStorage.getItem(\"user\")\r\n              }\r\n              let options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n              }\r\n              \r\n              fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/updateStatus\", options)\r\n              .then(response => response.json())\r\n              .then(async json => {\r\n                \r\n              })\r\n        }\r\n        \r\n        let observationsArray = []\r\n\r\n        if(observations){\r\n\r\n            Object.entries(observations)\r\n            .map(async ([incidence_number, observation]) => \r\n                \r\n                await observationsArray.push([incidence_number, observation])\r\n            )\r\n\r\n        }\r\n\r\n        for(let i = 0; i < observationsArray.length; i++){\r\n            let body = {\r\n                incidence_number: observationsArray[i][0],\r\n                observation: observationsArray[i][1],\r\n              }\r\n              let options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n              }\r\n              \r\n              fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/updateObservations\", options)\r\n              .then(response => response.json())\r\n              .then(async json => {\r\n                \r\n              })\r\n        }\r\n        \r\n        await setUpdatedRows([])\r\n        await setUpdateData(!updateData)\r\n        \r\n    }\r\n\r\n    \r\n\r\n    var dataTableHeight = \"500px\"\r\n\r\n    \r\n\r\n    return(\r\n        \r\n        <body>\r\n            {updateData}\r\n            <IdleTimer\r\n                timeout={1000 * 60 * 15}\r\n                onIdle={handleOnIdle}\r\n                debounce={250}\r\n            />\r\n            <NavBar onChange={value => setCurrentTab(currentTab)}/>\r\n            \r\n            <div className=\"isotracker__row\">\r\n                  <div className=\"isotracker__column\">\r\n                      <img src={CSPTrackerLogo} alt=\"CSPTrackerLogo\" className=\"isoTrackerLogo__image2\" style={{height:\"110px\"}}/>\r\n                      \r\n                      <div className=\"roleSelector__containerF\">\r\n                              <RoleDropDown style={{paddingLeft: \"2px\"}} onChange={value => setCurrentRole(value)} roles = {roles}/>\r\n                      </div>\r\n                      \r\n                  </div>\r\n                  <PieChart width={600} height={400}>\r\n                    <Pie data={counter} dataKey=\"value\" cx=\"50%\" cy=\"60%\"  outerRadius={120} fill=\"#8884d8\" label={renderCustomizedLabel}>\r\n                    {counter.map((entry, index) => (\r\n                        <Cell key={`cell-${index}`} fill={COLORS[index]} />\r\n                        ))}\r\n                    </Pie>\r\n                    <Tooltip/>\r\n                </PieChart>\r\n            </div>\r\n            <table className=\"isotracker__table__container\">\r\n                      <tr className=\"isotracker__table__navBar__container\" style={{height:\"65px \"}}>\r\n                          <th  className=\"isotracker__table__navBar\">\r\n                              <div style={{display:\"flex\"}}>\r\n                                  {secureStorage.getItem(\"role\") === \"3D Admin\" &&\r\n                                  <button className=\"navBar__button\" onClick={()=> saveChanges()}><img src={SaveIcon} alt=\"save\" className=\"navBar__icon\"></img><p className=\"navBar__button__text\">Save</p></button>\r\n                                  }\r\n                              </div>                           \r\n                               \r\n                          </th>\r\n                      </tr>\r\n                      <tr className=\"isotracker__table__tray__and__table__container\" style={{height: dataTableHeight}}>\r\n                          <td className=\"discplines__table__table\" style={{height: dataTableHeight}} >\r\n                              <div  style={{height: dataTableHeight, width:\"2200px\"}} className=\"isotracker__table__table__container\">\r\n                                <QTrackerViewDataTable updateObservations={updateObservations.bind(this)} updateData={updateDataMethod.bind(this)} updateStatus={updateStatus.bind(this)}/>\r\n                              </div>\r\n                          </td>\r\n                          \r\n                      </tr>\r\n                  </table>\r\n                  <center className=\"actionBtns__container\">   \r\n                    <div style={{display:\"flex\", marginTop:\"10px\"}}>\r\n                        <button className=\"action__btn\" name=\"export\" value=\"export\" onClick={() => downloadReport()}>Export</button>\r\n                    </div>\r\n                    \r\n                  </center>\r\n                  <br></br>\r\n         </body>\r\n    )\r\n}\r\n\r\nexport default PitRequestView;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\EquipmentsNavBtns\\equipmentsNavBtns.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navBar\\navBar.js",["1248","1249","1250","1251","1252"],"//Cabecera de IsoTracker con diferentes desplegables y botones\r\n\r\nimport React, { useEffect ,useRef, useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport './navBar.css';\r\nimport {useHistory} from \"react-router\";\r\nimport Trash from \"../../assets/images/Trash.png\"\r\nimport Bell from \"../../assets/images/bell.svg\"\r\nimport BellActive from \"../../assets/images/bell_active.svg\"\r\n\r\nconst CryptoJS = require(\"crypto-js\");\r\nconst SecureStorage = require(\"secure-web-storage\");\r\nvar SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\nvar secureStorage = new SecureStorage(localStorage, {\r\n    hash: function hash(key) {\r\n        key = CryptoJS.SHA256(key, SECRET_KEY);\r\n\r\n        return key.toString();\r\n    },\r\n    encrypt: function encrypt(data) {\r\n        data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n\r\n        data = data.toString();\r\n\r\n        return data;\r\n    },\r\n    decrypt: function decrypt(data) {\r\n        data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n\r\n        data = data.toString(CryptoJS.enc.Utf8);\r\n\r\n        return data;\r\n    }\r\n});\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    label: {\r\n      },\r\n      label2: {\r\n      },\r\n  }));\r\n\r\n\r\nconst NavBar = (props) =>{\r\n    const classes = useStyles();\r\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\r\n    const history = useHistory();\r\n    const [username, setUsername] = React.useState(\"\");\r\n    const [progressButtons, setProgressButtons] = React.useState(null);\r\n    const [isMenuOpen, setIsMenuOpen] = useState(false)\r\n    const ref = useRef()\r\n    const [notifications, setNotifications] = useState(false)\r\n    const [updateData, setUpdateData] = useState(false)\r\n    const [bellImage, setBellImage] = useState()\r\n    const [emptyNotifications, setEmptyNotifications] = useState()\r\n\r\n    const handleClickUser = (event) => {\r\n        setAnchorElUser(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseUser = () => {\r\n        setAnchorElUser(null);\r\n    };\r\n\r\n    const handleClickIsotracker = () => {\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/isotracker\");\r\n    };\r\n\r\n    const handleLogOut = () => {\r\n        localStorage.clear();\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/\");\r\n    };\r\n\r\n    const handleChangePassword = () =>{\r\n        setAnchorElUser(null);\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/changepassword\");\r\n    }\r\n\r\n    const handleClickEquipments = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/equipments\");\r\n    }\r\n\r\n    const handleClickInstrument = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/instrumentation\");\r\n    }\r\n    const handleClickCivil = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/civil\");\r\n    }\r\n    const handleClickElectrical = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/electrical\");\r\n    }\r\n    const handleClickPiping = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/piping\");\r\n    }\r\n    const handleClickHome = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/home\");\r\n    }\r\n    const handleClickSP = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/csptracker\");\r\n    }\r\n    const handleClickPIT = () =>{\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/pitrequests\");\r\n    }\r\n     \r\n\r\n    useEffect(() => {\r\n        const checkIfClickedOutside = e => {\r\n          // If the menu is open and the clicked target is not within the menu,\r\n          // then close the menu\r\n          if (isMenuOpen && ref.current && !ref.current.contains(e.target)) {\r\n              \r\n            setIsMenuOpen(false)\r\n          }\r\n        }\r\n\r\n    \r\n        document.addEventListener(\"mousedown\", checkIfClickedOutside)\r\n    \r\n        return () => {\r\n          // Cleanup the event listener\r\n          document.removeEventListener(\"mousedown\", checkIfClickedOutside)\r\n        }\r\n      }, [isMenuOpen])\r\n\r\n    useEffect(async() =>{\r\n        const bodyUsername = {\r\n            email: secureStorage.getItem(\"user\")\r\n          }\r\n        const optionsUsername = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(bodyUsername)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/findByEmail\", optionsUsername)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            setUsername(json.name);\r\n        })\r\n\r\n        if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n            if(process.env.REACT_APP_SP === \"1\"){\r\n                setProgressButtons(<div style={{ marginLeft: \"3%\", float:\"left\"}}>\r\n                    <Button class=\"btn nohover\" onClick={handleClickHome} style={{marginRight:\"50px\"}}>\r\n                        <i className=\"dropdown__text\">Home </i>\r\n                    </Button><Button class=\"btn nohover\" onClick={handleClickPiping} style={{marginRight:\"50px\"}}>\r\n                        <i className=\"dropdown__text\">Piping </i>\r\n                    </Button><Button class=\"btn nohover\" onClick={handleClickInstrument} style={{marginRight:\"50px\"}}>\r\n                        <i className=\"dropdown__text\">Instrumentation </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickEquipments} style={{marginRight:\"50px\"}}>\r\n                        <i className=\"dropdown__text\">Equipment </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickCivil} style={{marginRight:\"50px\"}}>\r\n                        <i className=\"dropdown__text\">Civil </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickElectrical} style={{marginRight:\"50px\"}}>\r\n                        <i className=\"dropdown__text\">Electrical </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickIsotracker} style={{marginRight:\"50px\"}}>\r\n                                    <i className=\"dropdown__text\" >IsoTracker </i>\r\n                    </Button></div>)\r\n            }else{\r\n                setProgressButtons(<div style={{ marginLeft: \"3%\", float:\"left\" }}>\r\n                    <Button class=\"btn nohover\" onClick={handleClickHome} style={{marginRight:\"50px\"}}>\r\n                        <i className=\"dropdown__text\">Home </i>\r\n                    </Button><Button class=\"btn nohover\" onClick={handleClickPiping} style={{marginRight:\"50px\"}}>\r\n                        <i className=\"dropdown__text\">Piping </i>\r\n                    </Button><Button class=\"btn nohover\" onClick={handleClickInstrument} style={{marginRight:\"50px\"}}>\r\n                        <i className=\"dropdown__text\">Instrumentation </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickEquipments} style={{marginRight:\"50px\"}}>\r\n                        <i className=\"dropdown__text\">Equipment </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickCivil} style={{marginRight:\"50px\"}}>\r\n                        <i className=\"dropdown__text\">Civil </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickElectrical} style={{marginRight:\"50px\"}}>\r\n                        <i className=\"dropdown__text\">Electrical </i>\r\n                    </Button>\r\n                    <Button class=\"btn nohover\" onClick={handleClickIsotracker} style={{marginRight:\"50px\"}}>\r\n                        <i className=\"dropdown__text\" >IsoTracker </i>\r\n                    </Button></div>)\r\n            }\r\n\r\n        }\r\n      \r\n    },[])\r\n\r\n    useEffect (async ()=>{\r\n\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/notifications/\"+ secureStorage.getItem(\"user\"), options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            let notif = []\r\n            let alert = false\r\n            if(json.rows[0]){\r\n                for(let i = 0; i < json.rows.length; i++){           \r\n                    if(json.rows[i].read === 0){\r\n                        alert = true\r\n                        notif.push(<div className=\"notification__container\" >\r\n                                    <p className=\"notification__text\" style={{fontWeight:\"bold\"}}>{json.rows[i].text}</p>\r\n                                    <button className=\"markAsReadNotification__button\" style={{marginLeft:\"170px\"}} onClick={()=> markAsRead(json.rows[i].id)}>Mark as read</button>\r\n                                    <button className=\"deleteNotification__button\"><img src={Trash} alt=\"trash\" className=\"notificationTrash__icon\" onClick={()=> deleteNotification(json.rows[i].id)}></img></button>\r\n                                </div>)\r\n                    }else{\r\n                        notif.push(<div className=\"notification__container\" >\r\n                                    <p className=\"notification__text\">{json.rows[i].text}</p>\r\n                                    <button className=\"markAsReadNotification__button\" style={{marginLeft:\"157px\"}} onClick={()=> markAsUnread(json.rows[i].id)}>Mark as unread</button>\r\n                                    <button className=\"deleteNotification__button\"><img src={Trash} alt=\"trash\" className=\"notificationTrash__icon\" onClick={()=> deleteNotification(json.rows[i].id)}></img></button>\r\n                                </div>)\r\n                    }\r\n                    \r\n                }\r\n                await setEmptyNotifications(null)\r\n            }else{\r\n                await setEmptyNotifications(<div className=\"emptyNotifications__container\">\r\n                    <p className=\"emptyNotifications__text\">No new notifications</p>\r\n                </div>)\r\n            }\r\n\r\n            if(alert){\r\n                await setBellImage(<img src={BellActive} alt=\"bellActive\" className=\"notificationBell__icon\"></img>)\r\n            }else{\r\n                await setBellImage(<img src={Bell} alt=\"bell\" className=\"notificationBell__icon\"></img>)\r\n            }\r\n            await setNotifications(notif)\r\n        })\r\n    },[updateData])\r\n\r\n    \r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            const options = {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n            }\r\n    \r\n            fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/notifications/\"+ secureStorage.getItem(\"user\"), options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                let notif = []\r\n                let alert = false\r\n                if(json.rows[0]){\r\n                    for(let i = 0; i < json.rows.length; i++){           \r\n                        if(json.rows[i].read === 0){\r\n                            alert = true\r\n                            notif.push(<div className=\"notification__container\" >\r\n                                        <p className=\"notification__text\" style={{fontWeight:\"bold\"}}>{json.rows[i].text}</p>\r\n                                        <button className=\"markAsReadNotification__button\" style={{marginLeft:\"170px\"}} onClick={()=> markAsRead(json.rows[i].id)}>Mark as read</button>\r\n                                        <button className=\"deleteNotification__button\"><img src={Trash} alt=\"trash\" className=\"notificationTrash__icon\" onClick={()=> deleteNotification(json.rows[i].id)}></img></button>\r\n                                    </div>)\r\n                        }else{\r\n                            notif.push(<div className=\"notification__container\" >\r\n                                        <p className=\"notification__text\">{json.rows[i].text}</p>\r\n                                        <button className=\"markAsReadNotification__button\" style={{marginLeft:\"157px\"}} onClick={()=> markAsUnread(json.rows[i].id)}>Mark as unread</button>\r\n                                        <button className=\"deleteNotification__button\"><img src={Trash} alt=\"trash\" className=\"notificationTrash__icon\" onClick={()=> deleteNotification(json.rows[i].id)}></img></button>\r\n                                    </div>)\r\n                        }\r\n                        \r\n                    }\r\n                    await setEmptyNotifications(null)\r\n                }else{\r\n                    setEmptyNotifications(<div className=\"emptyNotifications__container\">\r\n                        <p className=\"emptyNotifications__text\">No new notifications</p>\r\n                    </div>)\r\n                }\r\n    \r\n                if(alert){\r\n                    setBellImage(<img src={BellActive} alt=\"bellActive\" className=\"notificationBell__icon\"></img>)\r\n                }else{\r\n                    setBellImage(<img src={Bell} alt=\"bell\" className=\"notificationBell__icon\"></img>)\r\n                }\r\n                await setNotifications(notif)\r\n            })\r\n        }, 10000);\r\n        return () => clearInterval(interval);\r\n      }, []);\r\n      \r\n\r\n    let projectBtn, pitButton, spbutton, pitButtonProgress, rightButtons = null\r\n    if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n        if(process.env.REACT_APP_SP === \"1\"){\r\n            if(process.env.REACT_APP_PIT === \"1\"){\r\n            projectBtn = <Button class=\"btn nohover\" disabled style={{marginRight:\"20px\", float:\"right\"}}>\r\n            <i className=\"dropdown__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n        </Button>\r\n            rightButtons = <div style={{width:\"27%\"}}>\r\n                    \r\n                            \r\n                <button style={{float:\"right\", marginLeft:\"20px\", marginTop:\"4px\", border:\"none\", background:\"none\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n                <Button class=\"btn nohover\" style={{float: \"right\", marginTop:\"4px\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n                <i className=\"dropdown__text\">{username}&nbsp;🠗</i>\r\n                </Button>\r\n                \r\n\r\n                {isMenuOpen && (\r\n                    <div className=\"notifications__container\" style={{marginLeft: \"17%\", zoom: 0.8}}>\r\n                        <div className=\"notificationPanel__header\">\r\n                            <p className=\"notificationHeader__text\">Notifications</p>\r\n                            <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                        </div>\r\n                        {notifications}\r\n                        {emptyNotifications}\r\n                    </div>\r\n                )}\r\n                \r\n                {projectBtn}\r\n            </div>\r\n            }else{\r\n                projectBtn = <Button class=\"btn nohover\" disabled style={{marginRight:\"20px\", float:\"right\"}}>\r\n            <i className=\"dropdown__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n        </Button>\r\n            rightButtons = <div style={{width:\"39%\"}}>\r\n                    \r\n                            \r\n                <button style={{float:\"right\", marginLeft:\"20px\", marginTop:\"4px\", border:\"none\", background:\"none\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n                <Button class=\"btn nohover\" style={{float: \"right\", marginTop:\"4px\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n                <i className=\"dropdown__text\">{username}&nbsp;🠗</i>\r\n                </Button>\r\n                \r\n\r\n                {isMenuOpen && (\r\n                    <div className=\"notifications__container\" style={{marginLeft: \"26%\", zoom: 0.8}}>\r\n                        <div className=\"notificationPanel__header\">\r\n                            <p className=\"notificationHeader__text\">Notifications</p>\r\n                            <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                        </div>\r\n                        {notifications}\r\n                        {emptyNotifications}\r\n                    </div>\r\n                )}\r\n                \r\n                {projectBtn}\r\n            </div>\r\n            }\r\n        }else{\r\n            if(process.env.REACT_APP_PIT === \"1\"){\r\n                projectBtn = <Button class=\"btn nohover\" disabled style={{float:\"right\", marginRight:\"20px\"}}>\r\n                <i className=\"dropdown__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n            </Button>\r\n                rightButtons= <div style={{width:\"39%\"}}>\r\n                        \r\n                            \r\n                <button style={{float:\"right\", marginLeft:\"20px\", marginTop:\"4px\", border:\"none\", background:\"none\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n                <Button class=\"btn nohover\" style={{float: \"right\", marginTop:\"4px\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n                <i className=\"dropdown__text\">{username}&nbsp;🠗</i>\r\n                </Button>\r\n                \r\n\r\n                {isMenuOpen && (\r\n                    <div className=\"notifications__container\" style={{marginLeft: \"27%\", zoom: 0.8}}>\r\n                        <div className=\"notificationPanel__header\">\r\n                            <p className=\"notificationHeader__text\">Notifications</p>\r\n                            <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                        </div>\r\n                        {notifications}\r\n                        {emptyNotifications}\r\n                    </div>\r\n                )}\r\n                \r\n                {projectBtn}\r\n            </div>\r\n            }else{\r\n                projectBtn = <Button class=\"btn nohover\" disabled style={{float:\"right\", marginRight:\"20px\"}}>\r\n                <i className=\"dropdown__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n            </Button>\r\n                rightButtons= <div style={{width:\"45%\"}}>\r\n                        \r\n                            \r\n                <button style={{float:\"right\", marginLeft:\"20px\", marginTop:\"4px\", border:\"none\", background:\"none\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n                <Button class=\"btn nohover\" style={{float: \"right\", marginTop:\"4px\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n                <i className=\"dropdown__text\">{username}&nbsp;🠗</i>\r\n                </Button>\r\n                \r\n\r\n                {isMenuOpen && (\r\n                    <div className=\"notifications__container\" style={{marginLeft: \"34%\", zoom: 0.8}}>\r\n                        <div className=\"notificationPanel__header\">\r\n                            <p className=\"notificationHeader__text\">Notifications</p>\r\n                            <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                        </div>\r\n                        {notifications}\r\n                        {emptyNotifications}\r\n                    </div>\r\n                )}\r\n                \r\n                {projectBtn}\r\n            </div>\r\n            }\r\n        }\r\n        \r\n        \r\n    }else{\r\n        if(process.env.REACT_APP_SP === \"1\"){\r\n            if(process.env.REACT_APP_PIT === \"1\"){\r\n            projectBtn = <Button classes={{label: classes.label2}} class=\"btn nohover\" disabled style={{float:\"right\", marginRight:\"20px\"}}>\r\n            <i className=\"dropdown__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n        </Button>\r\n        rightButtons= <div style={{width:\"75%\"}}>\r\n                    \r\n                        \r\n            <button style={{float:\"right\", marginLeft:\"20px\", marginTop:\"4px\", border:\"none\", background:\"none\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n            <Button class=\"btn nohover\" style={{float: \"right\", marginTop:\"4px\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n            <i className=\"dropdown__text\">{username}&nbsp;🠗</i>\r\n            </Button>\r\n            \r\n\r\n            {isMenuOpen && (\r\n                <div className=\"notifications__container\" style={{marginLeft: \"62%\", zoom: 0.8}}>\r\n                    <div className=\"notificationPanel__header\">\r\n                        <p className=\"notificationHeader__text\">Notifications</p>\r\n                        <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                    </div>\r\n                    {notifications}\r\n                    {emptyNotifications}\r\n                </div>\r\n            )}\r\n            \r\n            {projectBtn}\r\n        </div>\r\n            }else{\r\n                projectBtn = <Button classes={{label: classes.label2}} class=\"btn nohover\" disabled style={{float:\"right\", marginRight:\"20px\"}}>\r\n                <i className=\"dropdown__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n            </Button>\r\n            rightButtons= <div style={{width:\"79%\"}}>\r\n                        \r\n                            \r\n                <button style={{float:\"right\", marginLeft:\"20px\", marginTop:\"4px\", border:\"none\", background:\"none\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n                <Button class=\"btn nohover\" style={{float: \"right\", marginTop:\"4px\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n                <i className=\"dropdown__text\">{username}&nbsp;🠗</i>\r\n                </Button>\r\n                \r\n    \r\n                {isMenuOpen && (\r\n                    <div className=\"notifications__container\" style={{marginLeft: \"68%\", zoom: 0.8}}>\r\n                        <div className=\"notificationPanel__header\">\r\n                            <p className=\"notificationHeader__text\">Notifications</p>\r\n                            <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                        </div>\r\n                        {notifications}\r\n                        {emptyNotifications}\r\n                    </div>\r\n                )}\r\n                \r\n                {projectBtn}\r\n                </div>\r\n            }\r\n        \r\n        }else{\r\n            if(process.env.REACT_APP_PIT === \"1\"){\r\n                projectBtn = <Button classes={{label: classes.label2}} class=\"btn nohover\" disabled style={{float:\"right\", marginRight:\"20px\"}}>\r\n                <i className=\"dropdown__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n                </Button>\r\n                \r\n                \r\n                rightButtons= <div style={{width:\"79%\"}}>\r\n                            \r\n                                \r\n                <button style={{float:\"right\", marginLeft:\"20px\", marginTop:\"4px\", border:\"none\", background:\"none\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n                <Button class=\"btn nohover\" style={{float: \"right\", marginTop:\"4px\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n                <i className=\"dropdown__text\">{username}&nbsp;🠗</i>\r\n                </Button>\r\n                \r\n\r\n                {isMenuOpen && (\r\n                    <div className=\"notifications__container\" style={{marginLeft: \"68%\", zoom: 0.8}}>\r\n                        <div className=\"notificationPanel__header\">\r\n                            <p className=\"notificationHeader__text\">Notifications</p>\r\n                            <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                        </div>\r\n                        {notifications}\r\n                        {emptyNotifications}\r\n                    </div>\r\n                )}\r\n                \r\n                {projectBtn}\r\n            </div>\r\n            }else{\r\n                projectBtn = <Button classes={{label: classes.label2}} class=\"btn nohover\" disabled style={{float:\"right\", marginRight:\"20px\"}}>\r\n                <i className=\"dropdown__text__projectname\" >{process.env.REACT_APP_APP_NAMEPROJ}</i>\r\n                </Button>\r\n                \r\n                \r\n                rightButtons= <div style={{width:\"87%\"}}>\r\n                            \r\n                                \r\n                <button style={{float:\"right\", marginLeft:\"20px\", marginTop:\"4px\", border:\"none\", background:\"none\"}} onClick={()=>setIsMenuOpen(!isMenuOpen)}>{bellImage}</button>\r\n                <Button class=\"btn nohover\" style={{float: \"right\", marginTop:\"4px\"}} classes={{label: classes.label}} onClick={handleClickUser}>\r\n                <i className=\"dropdown__text\">{username}&nbsp;🠗</i>\r\n                </Button>\r\n                \r\n\r\n                {isMenuOpen && (\r\n                    <div className=\"notifications__container\" style={{marginLeft: \"75%\", zoom: 0.8}}>\r\n                        <div className=\"notificationPanel__header\">\r\n                            <p className=\"notificationHeader__text\">Notifications</p>\r\n                            <button className=\"markAllAsRead__button\" onClick={()=> markAllAsRead()}>Mark all as read</button>            \r\n                        </div>\r\n                        {notifications}\r\n                        {emptyNotifications}\r\n                    </div>\r\n                )}\r\n                \r\n                {projectBtn}\r\n            </div>\r\n            }\r\n        }\r\n\r\n    }\r\n    let isotrackerBtnNoProgress = null\r\n    if(process.env.REACT_APP_SP === \"1\"){\r\n        if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n            spbutton = <Button class=\"btn nohover\" onClick={handleClickSP} style={{marginRight:\"50px\"}}>\r\n            <i className=\"dropdown__text\" >SPTracker</i>\r\n            </Button>\r\n        }else{\r\n            spbutton = <Button class=\"btn nohover\" onClick={handleClickSP} style={{marginLeft:\"50px\"}}>\r\n            <i className=\"dropdown__text\" >SPTracker</i>\r\n            </Button>\r\n            isotrackerBtnNoProgress = <Button class=\"btn nohover\" onClick={handleClickIsotracker} style={{marginLeft:\"50px\"}}>\r\n                        <i className=\"dropdown__text\" >IsoTracker </i>\r\n            </Button>\r\n        }    \r\n    }\r\n\r\n    if(process.env.REACT_APP_PIT === \"1\"){\r\n        if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n            pitButtonProgress = <Button class=\"btn nohover\" onClick={handleClickPIT} style={{marginRight:\"50px\"}}>\r\n            <i className=\"dropdown__text\" >PITRequests</i>\r\n            </Button>\r\n        }else{\r\n            pitButton = <Button class=\"btn nohover\" onClick={handleClickPIT} style={{marginLeft:\"50px\"}}>\r\n            <i className=\"dropdown__text\" >PITRequests</i>\r\n            </Button>\r\n            isotrackerBtnNoProgress = <Button class=\"btn nohover\" onClick={handleClickIsotracker} style={{marginLeft:\"50px\"}}>\r\n                        <i className=\"dropdown__text\" >IsoTracker </i>\r\n            </Button>\r\n        }    \r\n    }    \r\n\r\n    if(process.env.REACT_APP_PROGRESS === \"0\" && process.env.REACT_APP_SP === \"0\" && process.env.REACT_APP_PIT === \"0\"){\r\n        isotrackerBtnNoProgress = <Button class=\"btn nohover\" onClick={handleClickIsotracker} style={{marginLeft:\"50px\"}}>\r\n        <i className=\"dropdown__text\" >IsoTracker </i>\r\n        </Button>\r\n    }\r\n\r\n    function markAllAsRead(){\r\n        const body = {\r\n            email: secureStorage.getItem(\"user\")\r\n          }\r\n          const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n          }\r\n          fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/markAllNotificationsAsRead\", options)\r\n          .then(response => response.json())\r\n          .then(json =>{\r\n              if(json.success){\r\n                setUpdateData(!updateData)\r\n              }\r\n          })\r\n   \r\n    }\r\n\r\n    function markAsRead(id){\r\n        const body = {\r\n            id: id\r\n          }\r\n          const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n          }\r\n          fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/markNotificationAsRead\", options)\r\n          .then(response => response.json())\r\n          .then(json =>{\r\n              if(json.success){\r\n                setUpdateData(!updateData)\r\n              }\r\n          })\r\n   \r\n    }\r\n\r\n    function markAsUnread(id){\r\n        const body = {\r\n            id: id\r\n          }\r\n          const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n          }\r\n          fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/markNotificationAsUnread\", options)\r\n          .then(response => response.json())\r\n          .then(json =>{\r\n              if(json.success){\r\n                setUpdateData(!updateData)\r\n              }\r\n          })\r\n   \r\n    }\r\n\r\n    function deleteNotification(id){\r\n        const body = {\r\n            id: id\r\n          }\r\n          const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n          }\r\n          fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/deleteNotification\", options)\r\n          .then(response => response.json())\r\n          .then(json =>{\r\n              if(json.success){\r\n                setUpdateData(!updateData)\r\n              }\r\n          })\r\n    }\r\n\r\n\r\n    \r\n    return(\r\n        <div ref={ref}>\r\n        <div className={classes.root}>\r\n            <div>\r\n            <AppBar position=\"fixed\" className=\"navBar__container\" style={{height:\"62px\", borderBottomColor: \"rgb(211, 224, 233)\", borderLeftColor: \"rgb(211, 224, 233)\", bordeRightColor: \"rgb(211, 224, 233)\", borderTopColor: \"rgb(211, 224, 233)\", backgroundColor: \"#383838\"}}>\r\n            \r\n                <Toolbar>\r\n                    \r\n                    {progressButtons}   \r\n                    {isotrackerBtnNoProgress}        \r\n                    {pitButtonProgress}\r\n                    {pitButton}\r\n                    \r\n                    {spbutton}\r\n\r\n                    <Menu\r\n                        id=\"simple-menu\"\r\n                        anchorEl={anchorElUser}\r\n                        getContentAnchorEl={null}\r\n                        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                        transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                        open={Boolean(anchorElUser)}\r\n                        onClose={handleCloseUser}\r\n                        PaperProps={{\r\n                            style: {\r\n                            left: '50%',\r\n                            //transform: 'translateX(+0%)',\r\n                            }\r\n                        }}\r\n                    >\r\n                    <MenuItem style={{fontFamily:\"Quicksand\", fontSize:\"13.33px\"}} onClick={handleChangePassword}>Change password</MenuItem>\r\n                    <MenuItem style={{fontFamily:\"Quicksand\", fontSize:\"13.33px\"}} onClick={handleLogOut}><b>Logout</b></MenuItem>\r\n                    </Menu>\r\n                    {rightButtons}\r\n                </Toolbar>\r\n\r\n            </AppBar>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavBar;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instrumentationEstimatedDataTable\\instrumentationEstimatedDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\roleDropDown\\roleDropDown.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\stateTable\\stateTable.js",["1253","1254","1255","1256"],"//Tabla de estado de IsoTracker\r\n\r\nimport \"./stateTable.css\"\r\nimport React, { useState , useEffect} from 'react'\r\n\r\nconst StateTable = props =>{\r\n\r\n    const [designR0, setDesignR0] = useState(0)\r\n    const [designR1, setDesignR1] = useState(0)\r\n    const [designR2, setDesignR2] = useState(0)\r\n    const [designHold, setDesignHold] = useState(0)\r\n    const [designDeleted, setDesignDeleted] = useState(0)\r\n    const [designStock, setDesignStock] = useState(0)\r\n    const [stressR0, setStressR0] = useState(0)\r\n    const [stressR1, setStressR1] = useState(0)\r\n    const [stressR2, setStressR2] = useState(0)\r\n    const [stressHold, setStressHold] = useState(0)\r\n    const [stressDeleted, setStressDeleted] = useState(0)\r\n    const [stressStock, setStressStock] = useState(0)\r\n    const [supportsR0, setSupportsR0] = useState(0)\r\n    const [supportsR1, setSupportsR1] = useState(0)\r\n    const [supportsR2, setSupportsR2] = useState(0)\r\n    const [supportsHold, setSupportsHold] = useState(0)\r\n    const [supportsDeleted, setSupportsDeleted] = useState(0)\r\n    const [supportsStock, setSupportsStock] = useState(0)\r\n    const [materialsR0, setMaterialsR0] = useState(0)\r\n    const [materialsR1, setMaterialsR1] = useState(0)\r\n    const [materialsR2, setMaterialsR2] = useState(0)\r\n    const [materialsHold, setMaterialsHold] = useState(0)\r\n    const [materialsDeleted, setMaterialsDeleted] = useState(0)\r\n    const [materialsStock, setMaterialsStock] = useState(0)\r\n    const [issuerR0, setIssuerR0] = useState(0)\r\n    const [issuerR1, setIssuerR1] = useState(0)\r\n    const [issuerR2, setIssuerR2] = useState(0)\r\n    const [issuerHold, setIssuerHold] = useState(0)\r\n    const [issuerDeleted, setIssuerDeleted] = useState(0)\r\n    const [issuerStock, setIssuerStock] = useState(0)\r\n    const [toIssueR0, setToIssueR0] = useState(0)\r\n    const [toIssueR1, setToIssueR1] = useState(0)\r\n    const [toIssueR2, setToIssueR2] = useState(0)\r\n    const [toIssueHold, setToIssueHold] = useState(0)\r\n    const [toIssueDeleted, setToIssueDeleted] = useState(0)\r\n    const [toIssueStock, setToIssueStock] = useState(0)\r\n    const [issuedR0, setIssuedR0] = useState(0)\r\n    const [issuedR1, setIssuedR1] = useState(0)\r\n    const [issuedR2, setIssuedR2] = useState(0)\r\n    const [issuedDeleted, setIssuedDeleted] = useState(0)\r\n    const [issuedStock, setIssuedStock] = useState(0)\r\n    const [totalR0, setTotalR0] = useState(0)\r\n    const [totalR1, setTotalR1] = useState(0)\r\n    const [totalR2, setTotalR2] = useState(0)\r\n    const [totalHold, setTotalHold] = useState(0)\r\n    const [totalDeleted, setTotalDeleted] = useState(0)\r\n    const [totalStock, setTotalStock] = useState(0)\r\n    const [model, setModel] = useState(0)\r\n\r\n    const [progress, setProgress] = useState(0)\r\n    const [progressIso, setProgressIso] = useState(0)\r\n    \r\n\r\n    const [realProgressTD, setRealProgressTD] = useState()\r\n    const [realProgressIsoTD, setRealProgressIsoTD] = useState()\r\n    const [realProgressTDValue, setRealProgressTDValue] = useState()\r\n    const [realProgressIsoTDValue, setRealProgressIsoTDValue] = useState()\r\n\r\n    const[progressHeader, setProgressHeader] = useState()\r\n    const[progressTD, setProgressTD] = useState()\r\n    const[totalHeader, setTotalHeader] = useState()\r\n    const [totalStockTD, setTotalStockTD] = useState()\r\n\r\n    const [pISOHeaderTD, setpISOHeaderTD] = useState()\r\n    const [pISOValueTD, setpISOValueTD] = useState()\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(async ()=>{\r\n        if(loading){\r\n            if(process.env.REACT_APP_PROGRESS === \"0\"){\r\n                fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/updateStatus\")\r\n                .then(response => response.json())\r\n                .then(json => {\r\n                    setDesignR0(json[\"designR0\"])\r\n                    setDesignR1(json[\"designR1\"])\r\n                    setDesignR2(json[\"designR2\"])\r\n                    setDesignHold(json[\"designHold\"])\r\n                    setDesignDeleted(json[\"designDeleted\"])\r\n                    setDesignStock(json[\"designStock\"])\r\n                    setStressR0(json[\"stressR0\"])\r\n                    setStressR1(json[\"stressR1\"])\r\n                    setStressR2(json[\"stressR2\"])\r\n                    setStressHold(json[\"stressHold\"])\r\n                    setStressDeleted(json[\"stressDeleted\"])\r\n                    setStressStock(json[\"stressStock\"])\r\n                    setSupportsR0(json[\"supportsR0\"])\r\n                    setSupportsR1(json[\"supportsR1\"])\r\n                    setSupportsR2(json[\"supportsR2\"])\r\n                    setSupportsHold(json[\"supportsHold\"])\r\n                    setSupportsDeleted(json[\"supportsDeleted\"])\r\n                    setSupportsStock(json[\"supportsStock\"])\r\n                    setMaterialsR0(json[\"materialsR0\"])\r\n                    setMaterialsR1(json[\"materialsR1\"])\r\n                    setMaterialsR2(json[\"materialsR2\"])\r\n                    setMaterialsHold(json[\"materialsHold\"])\r\n                    setMaterialsDeleted(json[\"materialsDeleted\"])\r\n                    setMaterialsStock(json[\"materialsStock\"])\r\n                    setIssuerR0(json[\"issuerR0\"])\r\n                    setIssuerR1(json[\"issuerR1\"])\r\n                    setIssuerR2(json[\"issuerR2\"])\r\n                    setIssuerHold(json[\"issuerHold\"])\r\n                    setIssuerDeleted(json[\"issuerDeleted\"])\r\n                    setIssuerStock(json[\"issuerStock\"])\r\n                    setToIssueR0(json[\"toIssueR0\"])\r\n                    setToIssueR1(json[\"toIssueR1\"])\r\n                    setToIssueR2(json[\"toIssueR2\"])\r\n                    setToIssueHold(json[\"toIssueHold\"])\r\n                    setToIssueDeleted(json[\"toIssueDeleted\"])\r\n                    setToIssueStock(json[\"toIssueStock\"])\r\n                    setIssuedR0(json[\"issuedR0\"])\r\n                    setIssuedR1(json[\"issuedR1\"])\r\n                    setIssuedR2(json[\"issuedR2\"])\r\n                    setIssuedDeleted(json[\"issuedDeleted\"])\r\n                    setIssuedStock(json[\"issuedStock\"])\r\n                    setTotalR0(json[\"totalR0\"])\r\n                    setTotalR1(json[\"totalR1\"])\r\n                    setTotalR2(json[\"totalR2\"])\r\n                    setTotalHold(json[\"totalHold\"])\r\n                    setTotalDeleted(json[\"totalDeleted\"])\r\n                    setTotalStock(json[\"totalStock\"])\r\n                    \r\n                    setTotalHeader(<td  className=\"statusTable__header\" style={{backgroundColor:\"blue\", borderRadius:\"0 1em 0 0\"}}>Total</td>)\r\n                    setTotalStockTD(<td className=\"statusTable__state__stock\" style={{fontWeight:\"bold\", color:\"black\", borderRadius:\"0 0 1em 0\"}}>{totalStock}</td>)\r\n\r\n                    setLoading(false)\r\n                }) \r\n            }else{\r\n                fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/updateStatus\")\r\n                    .then(response => response.json())\r\n                    .then(json => {\r\n                        setDesignR0(json[\"designR0\"])\r\n                    setDesignR1(json[\"designR1\"])\r\n                    setDesignR2(json[\"designR2\"])\r\n                    setDesignHold(json[\"designHold\"])\r\n                    setDesignDeleted(json[\"designDeleted\"])\r\n                    setDesignStock(json[\"designStock\"])\r\n                    setStressR0(json[\"stressR0\"])\r\n                    setStressR1(json[\"stressR1\"])\r\n                    setStressR2(json[\"stressR2\"])\r\n                    setStressHold(json[\"stressHold\"])\r\n                    setStressDeleted(json[\"stressDeleted\"])\r\n                    setStressStock(json[\"stressStock\"])\r\n                    setSupportsR0(json[\"supportsR0\"])\r\n                    setSupportsR1(json[\"supportsR1\"])\r\n                    setSupportsR2(json[\"supportsR2\"])\r\n                    setSupportsHold(json[\"supportsHold\"])\r\n                    setSupportsDeleted(json[\"supportsDeleted\"])\r\n                    setSupportsStock(json[\"supportsStock\"])\r\n                    setMaterialsR0(json[\"materialsR0\"])\r\n                    setMaterialsR1(json[\"materialsR1\"])\r\n                    setMaterialsR2(json[\"materialsR2\"])\r\n                    setMaterialsHold(json[\"materialsHold\"])\r\n                    setMaterialsDeleted(json[\"materialsDeleted\"])\r\n                    setMaterialsStock(json[\"materialsStock\"])\r\n                    setIssuerR0(json[\"issuerR0\"])\r\n                    setIssuerR1(json[\"issuerR1\"])\r\n                    setIssuerR2(json[\"issuerR2\"])\r\n                    setIssuerHold(json[\"issuerHold\"])\r\n                    setIssuerDeleted(json[\"issuerDeleted\"])\r\n                    setIssuerStock(json[\"issuerStock\"])\r\n                    setToIssueR0(json[\"toIssueR0\"])\r\n                    setToIssueR1(json[\"toIssueR1\"])\r\n                    setToIssueR2(json[\"toIssueR2\"])\r\n                    setToIssueHold(json[\"toIssueHold\"])\r\n                    setToIssueDeleted(json[\"toIssueDeleted\"])\r\n                    setToIssueStock(json[\"toIssueStock\"])\r\n                    setIssuedR0(json[\"issuedR0\"])\r\n                    setIssuedR1(json[\"issuedR1\"])\r\n                    setIssuedR2(json[\"issuedR2\"])\r\n                    setIssuedDeleted(json[\"issuedDeleted\"])\r\n                    setIssuedStock(json[\"issuedStock\"])\r\n                    setTotalR0(json[\"totalR0\"])\r\n                    setTotalR1(json[\"totalR1\"])\r\n                    setTotalR2(json[\"totalR2\"])\r\n                    setTotalHold(json[\"totalHold\"])\r\n                    setTotalDeleted(json[\"totalDeleted\"])\r\n                    setTotalStock(json[\"totalStock\"])\r\n                    setModel(json[\"modelCount\"])\r\n                    }) \r\n                    const options = {\r\n                        method: \"GET\",\r\n                    }\r\n                    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/currentProgressISO\", options)\r\n                    .then(response => response.json())\r\n                    .then(async json =>{\r\n                         await setProgressIso([json.progressISO, json.realprogressISO])\r\n                    })\r\n                    \r\n                    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/currentProgress\", options)\r\n                    .then(response => response.json())\r\n                    .then(async json =>{\r\n                         await setProgress([json.progress, json.realprogress])\r\n                    })\r\n                    if(props.currentRole === \"SpecialityLead\"){\r\n                        await setRealProgressTD(<td  className=\"statusTable__header\" style={{backgroundColor:\"#0070ed\"}}>R.P.</td>)\r\n                        await setRealProgressIsoTD(<td  className=\"statusTable__header\" style={{backgroundColor:\"#0070ed\", borderRadius:\"0 1em 0 0\"}}>R.P. ISO</td>)\r\n                        await setRealProgressTDValue(<td rowSpan=\"6\" className=\"statusTable__state\">{progress[1]}%</td>)\r\n                        await setRealProgressIsoTDValue(<td rowSpan=\"6\" className=\"statusTable__state\" style={{borderRadius:\"0 0 1em 0\"}}>{progressIso[1]}%</td>)\r\n                        await setpISOHeaderTD(<td  className=\"statusTable__header\" style={{backgroundColor:\"#0070ed\"}}>P.ISO</td>)\r\n                        await setpISOValueTD(<td rowSpan=\"6\" className=\"statusTable__state\">{progressIso[0]}%</td>)\r\n                    }else{\r\n                        await setRealProgressTD(null)\r\n                        await setRealProgressIsoTD(null)\r\n                        await setRealProgressTDValue(null)\r\n                        await setRealProgressIsoTDValue(null)\r\n                        await setpISOHeaderTD(<td  className=\"statusTable__header\" style={{backgroundColor:\"#0070ed\", borderRadius:\"0 1em 0 0\"}}>P.ISO</td>)\r\n                        await setpISOValueTD(<td rowSpan=\"6\" className=\"statusTable__state\" style={{borderRadius:\"0 0 1em 0\", borderCollapse:\"collapse\"}}>{progressIso[0]}%</td>)\r\n                    }\r\n                    await setProgressHeader(<td  className=\"statusTable__header\" style={{backgroundColor:\"#0070ed\"}}>P.</td>)\r\n                    await setProgressTD(<td rowSpan=\"6\" className=\"statusTable__state\">{progress[0]}%</td> )\r\n                    await setTotalHeader(<td  className=\"statusTable__header\">Total</td>)\r\n                    await setTotalStockTD(<td className=\"statusTable__state__stock\" style={{fontWeight:\"bold\", color:\"black\"}}>{totalStock}</td>)\r\n            }\r\n\r\n            \r\n            await setLoading(false)\r\n        }\r\n        \r\n        \r\n    },[loading])\r\n\r\n    useEffect(async ()=>{\r\n        await setLoading(true)\r\n    }, [props.updateData, props.currentRole])\r\n\r\n    useEffect(async ()=>{\r\n        setTimeout(() => setLoading(true), 3000);\r\n    }, [])\r\n\r\n    return (\r\n        \r\n        <td className=\"statusTable__td\">\r\n            <table className=\"statusTable__table\">\r\n                <tbody className=\"statusTable__body\">\r\n                    <tr>\r\n                        <td  className=\"statusTable__header\" style={{backgroundColor: \"purple\", borderRadius:\"1em 0 0 0\"}}>M:{model}</td>\r\n                        <td  className=\"statusTable__header\" >Design</td>\r\n                        <td  className=\"statusTable__header\" >Stress</td>\r\n                        <td  className=\"statusTable__header\" >Supports</td>\r\n                        <td  className=\"statusTable__header\" >Materials</td>\r\n                        <td  className=\"statusTable__header\" >Issuer</td>\r\n                        <td  className=\"statusTable__header\" >To issue</td>\r\n                        <td  className=\"statusTable__header\" >Issued</td>\r\n                        {totalHeader}\r\n                        {progressHeader}\r\n                        {pISOHeaderTD}\r\n                        {realProgressTD}\r\n                        {realProgressIsoTD}\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"statusTable__header\" style={{backgroundColor:\"white\", color:\"black\", fontWeight:\"bold\"}}>R0</td>\r\n                        <td className=\"statusTable__state\">{designR0}</td>\r\n                        <td className=\"statusTable__state\">{stressR0}</td>\r\n                        <td className=\"statusTable__state\">{supportsR0}</td>\r\n                        <td className=\"statusTable__state\">{materialsR0}</td>\r\n                        <td className=\"statusTable__state\">{issuerR0}</td>\r\n                        <td className=\"statusTable__state\">{toIssueR0}</td>\r\n                        <td className=\"statusTable__state\">{issuedR0}</td>   \r\n                        <td className=\"statusTable__state\">{totalR0}</td>  \r\n                        {progressTD} \r\n                        {pISOValueTD}  \r\n                        {realProgressTDValue}\r\n                        {realProgressIsoTDValue} \r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"statusTable__header\" style={{backgroundColor:\"#d1ebf7\", color:\"black\", fontWeight:\"bold\"}}>R1</td>\r\n                        <td className=\"statusTable__state_R1\">{designR1}</td>\r\n                        <td className=\"statusTable__state_R1\">{stressR1}</td>\r\n                        <td className=\"statusTable__state_R1\">{supportsR1}</td>\r\n                        <td className=\"statusTable__state_R1\">{materialsR1}</td>\r\n                        <td className=\"statusTable__state_R1\">{issuerR1}</td>\r\n                        <td className=\"statusTable__state_R1\">{toIssueR1}</td>\r\n                        <td className=\"statusTable__state_R1\">{issuedR1}</td>   \r\n                        <td className=\"statusTable__state_R1\">{totalR1}</td> \r\n                  </tr>\r\n                  <tr>\r\n                        <td className=\"statusTable__header\" style={{backgroundColor:\"white\", color:\"black\", fontWeight:\"bold\"}}>R2</td>\r\n                        <td className=\"statusTable__state_R2\">{designR2}</td>\r\n                        <td className=\"statusTable__state_R2\">{stressR2}</td>\r\n                        <td className=\"statusTable__state_R2\">{supportsR2}</td>\r\n                        <td className=\"statusTable__state_R2\">{materialsR2}</td>\r\n                        <td className=\"statusTable__state_R2\">{issuerR2}</td>\r\n                        <td className=\"statusTable__state_R2\">{toIssueR2}</td>\r\n                        <td className=\"statusTable__state_R2\">{issuedR2}</td>   \r\n                        <td className=\"statusTable__state_R2\">{totalR2}</td> \r\n                  </tr>\r\n                  <tr>\r\n                        <td className=\"statusTable__header\" style={{backgroundColor:\"#ff3358\", color:\"black\", fontWeight:\"bold\"}}>On hold</td>\r\n                        <td className=\"statusTable__state__hold\">{designHold}</td>\r\n                        <td className=\"statusTable__state__hold\">{stressHold}</td>\r\n                        <td className=\"statusTable__state__hold\">{supportsHold}</td>\r\n                        <td className=\"statusTable__state__hold\">{materialsHold}</td>\r\n                        <td className=\"statusTable__state__hold\">{issuerHold}</td>\r\n                        <td className=\"statusTable__state__hold\">{toIssueHold}</td>\r\n                        <td className=\"statusTable__state__hold\">-</td>   \r\n                        <td className=\"statusTable__state__hold\">{totalHold}</td> \r\n                  </tr>\r\n                  <tr>\r\n                        <td className=\"statusTable__header\" style={{backgroundColor:\"#C0C0C0\", color:\"black\", fontWeight:\"bold\"}}>Deleted</td>\r\n                        <td className=\"statusTable__state__deleted\">{designDeleted}</td>\r\n                        <td className=\"statusTable__state__deleted\">{stressDeleted}</td>\r\n                        <td className=\"statusTable__state__deleted\">{supportsDeleted}</td>\r\n                        <td className=\"statusTable__state__deleted\">{materialsDeleted}</td>\r\n                        <td className=\"statusTable__state__deleted\">{issuerDeleted}</td>\r\n                        <td className=\"statusTable__state__deleted\">{toIssueDeleted}</td>\r\n                        <td className=\"statusTable__state__deleted\">{issuedDeleted}</td>   \r\n                        <td className=\"statusTable__state__deleted\">{totalDeleted}</td> \r\n                  </tr>\r\n                  <tr>\r\n                        <td className=\"statusTable__header\" style={{backgroundColor:\"#94dcaa\", borderRadius:\"0 0 0 1em\", color:\"black\", fontWeight:\"bold\", border: \"0px solid black\"}}>Stock</td>\r\n                        <td className=\"statusTable__state__stock\">{designStock}</td>\r\n                        <td className=\"statusTable__state__stock\">{stressStock}</td>\r\n                        <td className=\"statusTable__state__stock\">{supportsStock}</td>\r\n                        <td className=\"statusTable__state__stock\">{materialsStock}</td>\r\n                        <td className=\"statusTable__state__stock\">{issuerStock}</td>\r\n                        <td className=\"statusTable__state__stock\">{toIssueStock}</td>\r\n                        <td className=\"statusTable__state__stock\">{issuedStock}</td>   \r\n                        {totalStockTD}\r\n                  </tr>\r\n                </tbody>\r\n            </table>\r\n        </td>\r\n    );\r\n};\r\n\r\nexport default StateTable;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instrumentationModelledDataTable\\instrumentationModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\alert\\alert.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instrumentationTypesDataTable\\instrumentationTypesDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navBtns\\navBtns.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotInstrumentation\\progressPlotInstrumentation.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportBtns\\reportBtns.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\actionBtns\\actionBtns.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\datatable\\datatable.js",["1257","1258","1259"],"import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Table } from 'antd';\r\nimport './datatable.css'\r\nimport { Link } from 'react-router-dom';\r\nimport RenamePopUp from '../renamePopUp/renamePopUp';\r\nimport CommentPopUp from '../commentPopUp/commentPopUp';\r\nimport CancelRevPopUp from '../cancelRevPopUp/cancelRevPopUp';\r\n\r\n\r\nconst CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n    \r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\nclass DataTable extends React.Component{\r\n  state = {\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    data: [],\r\n    displayData: [],\r\n    filterData: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n    tab: this.props.currentTab,\r\n    role: this.props.currentRole,\r\n    selectedRows: [],\r\n    selectedRowsKeys: [],\r\n    updateData: this.props.updateData,\r\n    username: \"\",\r\n    acronyms : null,\r\n    filters: [],\r\n    cancellable: false\r\n  };\r\n\r\n  unlock(filename){\r\n    this.props.unlock(filename)\r\n  }\r\n\r\n  rename(newName, oldName){\r\n    this.props.rename(newName, oldName)\r\n  }\r\n\r\n  cancelRev(filename){\r\n    this.props.cancelRev(filename)\r\n  }\r\n\r\n  async sendHold(fileName){\r\n    this.props.sendHold(fileName)\r\n  }\r\n \r\n\r\n  componentDidMount(){\r\n\r\n    \r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/roles/acronyms\")\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        let dict = {}\r\n\r\n        for(let i = 0; i < json.length; i++){\r\n          dict[json[i].name] = json[i].code\r\n        }\r\n        this.setState({\r\n          acronyms: dict\r\n        })\r\n      })\r\n\r\n      let body \r\n      if(this.props.currentTab === \"Issued\"){\r\n        body ={\r\n          currentTab : \"LDE/IsoControl\"\r\n        }\r\n      }else{\r\n        body ={\r\n          currentTab : this.props.currentTab\r\n        }\r\n      }\r\n      const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n      fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/files\", options)\r\n          .then(response => response.json())\r\n          .then(async json => {\r\n                  var rows = []\r\n                  let row = null\r\n                  let pButton, iButton, rButton, bButton, cButton, retButton, excludeHoldButton, rToLOSButton, cancelRevButton\r\n                   = null\r\n                  \r\n                  for(let i = 0; i < json.rows.length; i++){\r\n\r\n                    if(json.rows[i].last_update){\r\n                      json.rows[i].updated_at = json.rows[i].last_update\r\n                    }\r\n\r\n                    switch(json.rows[i].spo){\r\n                      case 0:\r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      case 1:\r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"yellow\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      case 2:\r\n                        pButton = <button className=\"btn btn-success\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break; \r\n                      case 3:\r\n                        pButton = <button className=\"btn btn-danger\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      case 4:\r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"orange\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      case 5:\r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendCancelInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"#696969\", color:\"white\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      default:  \r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>      \r\n                    }\r\n                    switch(json.rows[i].sit){\r\n                      case 0:\r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      case 1:\r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"yellow\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      case 2:\r\n                        iButton = <button className=\"btn btn-success\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break; \r\n                      case 3:\r\n                        iButton = <button className=\"btn btn-danger\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      case 4:\r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"orange\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      case 5:\r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendCancelInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"#696969\", color:\"white\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      default:  \r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>      \r\n                    }\r\n                    \r\n                    let revision = \"\"\r\n                    if(this.props.currentTab === \"Issued\"){\r\n                      revision = \"R\" + String(json.rows[i].revision - 1) + \" - \" + json.rows[i].transmittal + \"/\" + json.rows[i].issued_date\r\n                    }else{\r\n                      revision = \"*R\" + json.rows[i].revision\r\n                    }\r\n\r\n                    if(this.props.currentTab === \"Issued\" && json.rows[i].requested === 2 && this.props.currentRole === \"SpecialityLead\"){\r\n                      const optionsD = {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/pdf\"\r\n                        }\r\n                      }\r\n                      await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/isCancellable/\" + json.rows[i].filename, optionsD)\r\n                      .then(response => response.json())\r\n                      .then(async json => {\r\n                        if(json.cancellable){\r\n                          await this.setState({cancellable: true})\r\n                        }\r\n                      })\r\n                    }\r\n\r\n                    if(json.rows[i].requested === 1){\r\n                      rButton = <button className=\"btn btn-danger\" disabled style={{backgroundColor:\"yellow\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>R</button>\r\n                    }else if(json.rows[i].requested !== 1 && json.rows[i].requested !== 2){\r\n                      rButton = <button className=\"btn btn-warning\" disabled style={{backgroundColor:\"white\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>R</button>\r\n                    }else if(json.rows[i].requested === 2){\r\n                      rButton = <button className=\"btn btn-success\" disabled style={{fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>R</button>\r\n                    }\r\n\r\n                    if(json.rows[i].blocked === 1){\r\n                      if(json.rows[i].revision === 0 && json.rows[i].issued !== 1){\r\n                        if(secureStorage.getItem('user') === \"super@user.com\"){\r\n                          bButton =  <RenamePopUp filename={json.rows[i].filename} rename={this.rename.bind(this)} />\r\n                        }else{\r\n                          bButton = <button className=\"btn btn-danger\" disabled style={{backgroundColor:\"red\", fontSize:\"10px\", borderColor:\"red\", padding:\"2px 5px 2px 5px\", marginRight:\"5px\"}}>LOCKED</button>\r\n                        }\r\n                      }else{\r\n                        if(secureStorage.getItem('user') === \"super@user.com\"){\r\n                          bButton = null\r\n                        }else{\r\n                          bButton = null\r\n                        }\r\n                        \r\n                      }\r\n                    }else{\r\n                      bButton = null\r\n                    }\r\n\r\n                    if(json.rows[i].returned === 1){\r\n                      retButton = <button className=\"btn btn-danger\" disabled style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>R</button>\r\n                    }else{\r\n                      retButton = null\r\n                    }\r\n\r\n                    if(json.rows[i].comments){\r\n                      cButton = <CommentPopUp comments={json.rows[i].comments} filename={json.rows[i].filename} updated={json.rows[i].updated_at}/>\r\n                    }else{\r\n                      cButton = null\r\n                    }\r\n\r\n                    if(json.rows[i].onhold === 2){\r\n                      excludeHoldButton = <button className=\"btn btn-warning\" onClick={() => this.sendHold(json.rows[i].filename)} style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>H</button>\r\n                    }else{\r\n                      excludeHoldButton = null\r\n                    }\r\n\r\n                    if(this.props.currentRole === \"SpecialityLead\" && json.rows[i].requested !== 2 && json.rows[i].issued !== 0 && this.state.tab === \"Issued\"){\r\n                      rToLOSButton = <button className=\"btn btn-danger\" onClick={() => this.returnToLOS(json.rows[i].filename)} style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", width:\"75px\", marginLeft:\"5px\"}}>Return</button>\r\n                    }else{\r\n                      rToLOSButton = null\r\n                    }\r\n                    if(this.state.cancellable){\r\n                      cancelRevButton = <CancelRevPopUp iso = {json.rows[i].filename} cancelRev={this.cancelRev.bind(this)}/>\r\n                      await this.setState({cancellable: false})\r\n                    }else{\r\n                      cancelRevButton = null\r\n                    }\r\n\r\n                    if(!json.rows[i].updated_at){\r\n                      if(json.rows[i].claimed === 1){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:\"None\", revision: \"None\", date: \"None\", from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button className=\"btn btn-success\"  disabled style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:\"None\", revision: \"None\", date: \"None\", from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton}</div>}\r\n                      }\r\n                    }else{\r\n\r\n                    if(json.rows[i].verifydesign === 1 && json.rows[i].user !== \"None\"){\r\n                      if(this.props.currentRole === \"SpecialityLead\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button disabled className=\"btn btn-sm btn-warning\" style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight:\"5px\"}}>PENDING</button> <button className=\"btn btn-danger\" style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}} onClick={() => this.props.forceUnclaim(json.rows[i].filename)}>F. UNCLAIM</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button disabled className=\"btn btn-sm btn-warning\" style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight:\"5px\"}}>PENDING</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }\r\n                    }else if(json.rows[i].verifydesign === 1 && json.rows[i].user === \"None\"){\r\n                      row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button disabled className=\"btn btn-sm btn-warning\" style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight:\"5px\"}}>PENDING</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                    }else if(json.rows[i].claimed === 1){\r\n                      if(json.rows[i].issued === 1 && this.props.currentTab === \"Issued\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code,  revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button className=\"btn btn-success\"  disabled style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else if (json.rows[i].issued !== 1 && this.props.currentTab === \"LDE/IsoControl\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> ,type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button className=\"btn btn-success\"  disabled style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else if(this.props.currentTab === \"LDE/IsoControl\" && json.rows[i].issued === 1){\r\n                        row = null\r\n                      }else if(this.props.currentTab === \"Issued\" && json.rows[i].issued !== 1){\r\n                        row = null\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button className=\"btn btn-success\"  disabled style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                        if(secureStorage.getItem(\"role\") === \"SpecialityLead\" && secureStorage.getItem(\"tab\") !== \"LDE/IsoControl\"){\r\n                          row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button className=\"btn btn-success\"  disabled style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> <button className=\"btn btn-danger\" style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}} onClick={() => this.props.forceUnclaim(json.rows[i].filename)}>F. UNCLAIM</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                        }\r\n                      }\r\n                    }else if(json.rows[i].user !== \"None\"){           \r\n                      if(json.rows[i].issued === 1 && this.props.currentTab === \"Issued\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> {pButton} {iButton} {rButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else if (json.rows[i].issued !== 1 && this.props.currentTab === \"LDE/IsoControl\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else if(this.props.currentTab === \"LDE/IsoControl\" && json.rows[i].issued === 1){\r\n                        row = null\r\n                      }else if(this.props.currentTab === \"Issued\" && json.rows[i].issued !== 1){\r\n                        row = null\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }\r\n\r\n                    }else{                \r\n                      if(json.rows[i].issued === 1 && this.props.currentTab === \"Issued\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div style={{display:\"flex\"}}> {pButton} {iButton} {rButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else if (json.rows[i].issued !== 1 && this.props.currentTab === \"LDE/IsoControl\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div style={{display:\"flex\"}}> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else if(this.props.currentTab === \"LDE/IsoControl\" && json.rows[i].issued === 1){\r\n                        row = null\r\n                      }else if(this.props.currentTab === \"Issued\" && json.rows[i].issued !== 1){\r\n                        row = null\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div style={{display:\"flex\"}}> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }                   \r\n                    }\r\n                  }\r\n                    if(row){\r\n                      if(i % 2 === 0){\r\n                        row[\"color\"] = \"#fff\"\r\n                      }else{\r\n                        row[\"color\"] = \"#eee\"\r\n                      }\r\n                       \r\n                      rows.push(row)\r\n                    }\r\n                   \r\n                    \r\n                    }\r\n                    const filterRow = [{key:0, id: <div><input type=\"text\" className=\"filter__input\" placeholder=\"ISO ID\" onChange={(e) => this.filter(0, e.target.value)}/></div>, type: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Type\" onChange={(e) => this.filter(1, e.target.value)}/></div>, revision: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Revision\" onChange={(e) => this.filter(2,e.target.value)}/></div>, date: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Date\" onChange={(e) => this.filter(3,e.target.value)}/></div>, from: <div><input type=\"text\" className=\"filter__input\" placeholder=\"From\" onChange={(e) => this.filter(4,e.target.value)}/></div>, to: <div><input type=\"text\" className=\"filter__input\" placeholder=\"To\" onChange={(e) => this.filter(5,e.target.value)}/></div>, user: <div><input type=\"text\" className=\"filter__input\" placeholder=\"User\" onChange={(e) => this.filter(6,e.target.value)}/></div>, actions: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Actions\" onChange={(e) => this.filter(7,e.target.value)}/></div>}]\r\n                \r\n                    this.setState({data : rows, displayData: rows});\r\n                    await this.setState({filters : filterRow})\r\n              }\r\n          )\r\n          .catch(error => {\r\n              console.log(error);\r\n          })\r\n\r\n        \r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n\r\n    if(prevProps !== this.props){\r\n      \r\n      fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/roles/acronyms\")\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        let dict = {}\r\n\r\n        for(let i = 0; i < json.length; i++){\r\n          dict[json[i].name] = json[i].code\r\n        }\r\n        this.setState({\r\n          acronyms: dict\r\n        })\r\n      })\r\n\r\n      let body \r\n      if(this.props.currentTab === \"Issued\"){\r\n        body ={\r\n          currentTab : \"LDE/IsoControl\"\r\n        }\r\n      }else{\r\n        body ={\r\n          currentTab : this.props.currentTab\r\n        }\r\n      }\r\n      const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n      fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/files\", options)\r\n          .then(response => response.json())\r\n          .then(async json => {\r\n                  var rows = []\r\n                  let row = null\r\n                  let pButton, iButton, rButton, bButton, cButton, retButton, excludeHoldButton, rToLOSButton, cancelRevButton\r\n                   = null\r\n                  \r\n                  for(let i = 0; i < json.rows.length; i++){\r\n                    if(json.rows[i].last_update){\r\n                      json.rows[i].updated_at = json.rows[i].last_update\r\n                    }\r\n                    switch(json.rows[i].spo){\r\n                      case 0:\r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      case 1:\r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"yellow\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      case 2:\r\n                        pButton = <button className=\"btn btn-success\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break; \r\n                      case 3:\r\n                        pButton = <button className=\"btn btn-danger\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      case 4:\r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"orange\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      case 5:\r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendCancelInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"#696969\", color:\"white\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      default:  \r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>      \r\n                    }\r\n                    switch(json.rows[i].sit){\r\n                      case 0:\r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      case 1:\r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"yellow\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      case 2:\r\n                        iButton = <button className=\"btn btn-success\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break; \r\n                      case 3:\r\n                        iButton = <button className=\"btn btn-danger\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      case 4:\r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"orange\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      case 5:\r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendCancelInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"#696969\", color:\"white\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      default:  \r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>      \r\n                    }\r\n                    \r\n                    let revision = \"\"\r\n                    if(this.props.currentTab === \"Issued\"){\r\n                      revision = \"R\" + String(json.rows[i].revision - 1) + \" - \" + json.rows[i].transmittal + \"/\" + json.rows[i].issued_date\r\n                    }else{\r\n                      revision = \"*R\" + json.rows[i].revision\r\n                    }\r\n\r\n                    if(this.props.currentTab === \"Issued\" && json.rows[i].requested === 2 && this.props.currentRole === \"SpecialityLead\"){\r\n                      const optionsD = {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/pdf\"\r\n                        }\r\n                      }\r\n                      let fn = json.rows[i].filename\r\n                      await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/isCancellable/\" + json.rows[i].filename, optionsD)\r\n                      .then(response => response.json())\r\n                      .then(async json => {\r\n                        if(json.cancellable === true){\r\n                          await this.setState({cancellable: true})\r\n                        }\r\n                      })\r\n                    }\r\n\r\n                    if(json.rows[i].requested === 1){\r\n                      rButton = <button className=\"btn btn-danger\" disabled style={{backgroundColor:\"yellow\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>R</button>\r\n                    }else if(json.rows[i].requested !== 1 && json.rows[i].requested !== 2){\r\n                      rButton = <button className=\"btn btn-warning\" disabled style={{backgroundColor:\"white\", fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>R</button>\r\n                    }else if(json.rows[i].requested === 2){\r\n                      rButton = <button className=\"btn btn-success\" disabled style={{fontSize:\"10px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>R</button>\r\n                    }\r\n\r\n                    if(json.rows[i].blocked === 1){\r\n                      if(json.rows[i].revision === 0 && json.rows[i].issued !== 1){\r\n                        if(secureStorage.getItem('user') === \"super@user.com\"){\r\n                          bButton =  <RenamePopUp filename={json.rows[i].filename} rename={this.rename.bind(this)} />\r\n                        }else{\r\n                          bButton = <button className=\"btn btn-danger\" disabled style={{backgroundColor:\"red\", fontSize:\"10px\", borderColor:\"red\", padding:\"2px 5px 2px 5px\", marginRight:\"5px\"}}>LOCKED</button>\r\n                        }\r\n                      }else{\r\n                        if(secureStorage.getItem('user') === \"super@user.com\"){\r\n                          bButton = null\r\n                        }else{\r\n                          bButton = null\r\n                        }\r\n                        \r\n                      }\r\n                    }else{\r\n                      bButton = null\r\n                    }\r\n\r\n                    if(json.rows[i].returned === 1){\r\n                      retButton = <button className=\"btn btn-danger\" disabled style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>R</button>\r\n                    }else{\r\n                      retButton = null\r\n                    }\r\n\r\n                    if(json.rows[i].comments){\r\n                      cButton = <CommentPopUp comments={json.rows[i].comments} filename={json.rows[i].filename} updated={json.rows[i].updated_at}/>\r\n                    }else{\r\n                      cButton = null\r\n                    }\r\n\r\n                    if(json.rows[i].onhold === 2){\r\n                      excludeHoldButton = <button className=\"btn btn-warning\" onClick={() => this.sendHold(json.rows[i].filename)} style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>H</button>\r\n                    }else{\r\n                      excludeHoldButton = null\r\n                    }\r\n\r\n                    if(this.props.currentRole === \"SpecialityLead\" && json.rows[i].requested !== 2 && json.rows[i].issued !== 0 && this.state.tab === \"Issued\"){\r\n                      rToLOSButton = <button className=\"btn btn-danger\" onClick={() => this.returnToLOS(json.rows[i].filename)} style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", width:\"75px\", marginLeft:\"5px\"}}>Return</button>\r\n                    }else{\r\n                      rToLOSButton = null\r\n                    }\r\n\r\n                    if(this.state.cancellable === true){\r\n                      cancelRevButton = <CancelRevPopUp iso = {json.rows[i].filename} cancelRev={this.cancelRev.bind(this)}/>\r\n                      await this.setState({cancellable: false})\r\n                    }else{\r\n                      cancelRevButton = null\r\n                    }\r\n\r\n                    if(!json.rows[i].updated_at){\r\n                      if(json.rows[i].claimed === 1){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:\"None\", revision: \"None\", date: \"None\", from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button className=\"btn btn-success\"  disabled style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:\"None\", revision: \"None\", date: \"None\", from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton}</div>}\r\n                      }\r\n                    }else{\r\n\r\n                    if(json.rows[i].verifydesign === 1 && json.rows[i].user !== \"None\"){\r\n                      if(this.props.currentRole === \"SpecialityLead\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button disabled className=\"btn btn-sm btn-warning\" style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight:\"5px\"}}>PENDING</button> <button className=\"btn btn-danger\" style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}} onClick={() => this.props.forceUnclaim(json.rows[i].filename)}>F. UNCLAIM</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button disabled className=\"btn btn-sm btn-warning\" style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight:\"5px\"}}>PENDING</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }\r\n                    }else if(json.rows[i].verifydesign === 1 && json.rows[i].user === \"None\"){\r\n                      row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button disabled className=\"btn btn-sm btn-warning\" style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight:\"5px\"}}>PENDING</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                    }else if(json.rows[i].claimed === 1){\r\n                      if(json.rows[i].issued === 1 && this.props.currentTab === \"Issued\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code,  revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button className=\"btn btn-success\"  disabled style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else if (json.rows[i].issued !== 1 && this.props.currentTab === \"LDE/IsoControl\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> ,type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button className=\"btn btn-success\"  disabled style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else if(this.props.currentTab === \"LDE/IsoControl\" && json.rows[i].issued === 1){\r\n                        row = null\r\n                      }else if(this.props.currentTab === \"Issued\" && json.rows[i].issued !== 1){\r\n                        row = null\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button className=\"btn btn-success\"  disabled style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                        if(secureStorage.getItem(\"role\") === \"SpecialityLead\" && secureStorage.getItem(\"tab\") !== \"LDE/IsoControl\"){\r\n                          row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> <button className=\"btn btn-success\"  disabled style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> <button className=\"btn btn-danger\" style={{fontSize:\"10px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}} onClick={() => this.props.forceUnclaim(json.rows[i].filename)}>F. UNCLAIM</button> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                        }\r\n                      }\r\n                    }else if(json.rows[i].user !== \"None\"){           \r\n                      if(json.rows[i].issued === 1 && this.props.currentTab === \"Issued\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> {pButton} {iButton} {rButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else if (json.rows[i].issued !== 1 && this.props.currentTab === \"LDE/IsoControl\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else if(this.props.currentTab === \"LDE/IsoControl\" && json.rows[i].issued === 1){\r\n                        row = null\r\n                      }else if(this.props.currentTab === \"Issued\" && json.rows[i].issued !== 1){\r\n                        row = null\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div style={{display:\"flex\"}}> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }\r\n\r\n                    }else{                \r\n                      if(json.rows[i].issued === 1 && this.props.currentTab === \"Issued\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div style={{display:\"flex\"}}> {pButton} {iButton} {rButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else if (json.rows[i].issued !== 1 && this.props.currentTab === \"LDE/IsoControl\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div style={{display:\"flex\"}}> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }else if(this.props.currentTab === \"LDE/IsoControl\" && json.rows[i].issued === 1){\r\n                        row = null\r\n                      }else if(this.props.currentTab === \"Issued\" && json.rows[i].issued !== 1){\r\n                        row = null\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type:json.rows[i].code, revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div style={{display:\"flex\"}}> {pButton} {iButton} {bButton} {retButton} {excludeHoldButton} {cButton} {rToLOSButton} {cancelRevButton}</div>}\r\n                      }                   \r\n                    }\r\n                  }\r\n                    if(row){\r\n                      if(i % 2 === 0){\r\n                        row[\"color\"] = \"#fff\"\r\n                      }else{\r\n                        row[\"color\"] = \"#eee\"\r\n                      }\r\n                       \r\n                      rows.push(row)\r\n                    }\r\n                    \r\n                    }\r\n               \r\n                    this.setState({data : rows});\r\n\r\n                    let auxDisplayData = this.state.data\r\n                    let resultData = []\r\n                    let fil, exists = null\r\n                    for(let i = 0; i < auxDisplayData.length; i++){\r\n                      exists = true\r\n                      for(let column = 0; column < Object.keys(auxDisplayData[i]).length-2; column ++){\r\n                        fil = Object.keys(auxDisplayData[i])[column+1]\r\n                        if(fil === \"id\"){\r\n                          if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].props.children.includes(this.state.filterData[column])){\r\n                            exists = false\r\n                          }\r\n                        }else if(fil === \"actions\"){\r\n                          \r\n                          if(auxDisplayData[i][fil].props.children[5]){\r\n                            if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && auxDisplayData[i][fil].props.children[1].props.children === \"CLAIMED\"){\r\n                              let claimed = \"claimed\"\r\n                              if(!claimed.includes(this.state.filterData[column].toLocaleLowerCase())){\r\n                                exists = false\r\n                              }\r\n                            }else if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && auxDisplayData[i][fil].props.children[1].props.children === \"PENDING\"){\r\n                              let pending = \"pending\"\r\n                              if(!pending.includes(this.state.filterData[column].toLocaleLowerCase())){\r\n                                exists = false\r\n                              }\r\n                            }\r\n                          }else{\r\n                            if(this.state.filterData[column] !== \"\" && this.state.filterData[column]){\r\n                              exists = false\r\n                            }\r\n                          }\r\n                          \r\n                        }else{\r\n                          if(auxDisplayData[i][fil]){\r\n                            if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].includes(this.state.filterData[column])){\r\n                              exists = false\r\n                            }\r\n                          }\r\n                          \r\n                        }\r\n                        \r\n                      }\r\n                      if(exists){\r\n                        resultData.push(auxDisplayData[i])\r\n                      }\r\n                    }\r\n                    await this.setState({displayData: resultData})\r\n\r\n              }\r\n          )\r\n          .catch(error => {\r\n              console.log(error);\r\n          })\r\n      }\r\n\r\n  }\r\n\r\n  async filter(column, value){\r\n    let fd = this.state.filterData\r\n    fd[column] = value\r\n    await this.setState({filterData: fd})\r\n\r\n    let auxDisplayData = this.state.data\r\n    let resultData = []\r\n    let fil, exists = null\r\n    for(let i = 0; i < auxDisplayData.length; i++){\r\n      exists = true\r\n      for(let column = 0; column < Object.keys(auxDisplayData[i]).length-2; column ++){\r\n        fil = Object.keys(auxDisplayData[i])[column+1]\r\n        if(fil === \"id\"){\r\n          if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].props.children.includes(this.state.filterData[column])){\r\n            exists = false\r\n          }\r\n        }else if(fil === \"actions\"){\r\n          \r\n          if(auxDisplayData[i][fil].props.children[5]){\r\n            if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && auxDisplayData[i][fil].props.children[1].props.children === \"CLAIMED\"){\r\n              let claimed = \"claimed\"\r\n              if(!claimed.includes(this.state.filterData[column].toLocaleLowerCase())){\r\n                exists = false\r\n              }\r\n            }else if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && auxDisplayData[i][fil].props.children[1].props.children === \"PENDING\"){\r\n              let pending = \"pending\"\r\n              if(!pending.includes(this.state.filterData[column].toLocaleLowerCase())){\r\n                exists = false\r\n              }\r\n            }\r\n          }else{\r\n            if(this.state.filterData[column] !== \"\" && this.state.filterData[column]){\r\n              exists = false\r\n            }\r\n          }\r\n          \r\n        }else{\r\n          if(auxDisplayData[i][fil]){\r\n            if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].includes(this.state.filterData[column])){\r\n              exists = false\r\n            }\r\n          }\r\n          \r\n        }\r\n        \r\n      }\r\n      if(exists){\r\n        resultData.push(auxDisplayData[i])\r\n      }\r\n    }\r\n    await this.setState({displayData: resultData})\r\n  }\r\n  \r\n\r\n  getMaster(fileName){\r\n    const options = {\r\n      method: \"GET\",\r\n      headers: {\r\n          \"Content-Type\": \"application/pdf\"\r\n      }\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getMaster/\"+fileName, options)\r\n    .then(res => res.blob())\r\n    .then(response => {\r\n      const file = new Blob([response], {\r\n        type: \"application/pdf\"\r\n      });\r\n      //Build a URL from the file\r\n      const fileURL = URL.createObjectURL(file);\r\n      //Open the URL on new Window\r\n      let w = window.open(fileURL);\r\n\r\n        w.addEventListener(\"load\", function() {\r\n          setTimeout(()=> w.document.title = fileName\r\n          , 300);\r\n\r\n\r\n        });\r\n\r\n        // create <a> tag dinamically\r\n        var fileLink = document.createElement('a');\r\n        fileLink.href = fileURL;\r\n\r\n        // it forces the name of the downloaded file\r\n        fileLink.download = fileName;\r\n\r\n        // triggers the click event\r\n        fileLink.click();\r\n\r\n\r\n      \r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  async returnToLOS(fileName){\r\n    this.props.returnToLOS(fileName)\r\n  }\r\n\r\n  \r\n  getColumnSearchProps = dataIndex => ({\r\n    render: text => \r\n    text\r\n      \r\n  });\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys, selectedRows) => {\r\n    let ids = []\r\n    for(let i = 0; i < selectedRows.length; i++){\r\n      ids.push(selectedRows[i].id.props.children)\r\n    }\r\n    this.setState({\r\n      selectedRowsKeys: selectedRowKeys,\r\n      selectedRows: selectedRows\r\n    })\r\n    //this.setState({ selectedRows: selectedRows });\r\n    this.props.onChange(ids);\r\n    \r\n  };\r\n  \r\n\r\n  render() {\r\n    const selectedRows = this.state.selectedRows;\r\n    const selectedRowsKeys = this.state.selectedRowsKeys;\r\n    const rowSelection = {\r\n      onChange: (selectedRowKeys, selectedRows) => {\r\n        this.onSelectChange(selectedRowKeys, selectedRows);\r\n      },\r\n      getCheckboxProps: (record) => record.actions.props.children[5] ?(\r\n        {\r\n        \r\n        disabled: (record.actions.props.children[1].props.children === 'CLAIMED'| (record.actions.props.children[1].props.children === 'PENDING' && (secureStorage.getItem(\"role\") !== \"DesignLead\" && secureStorage.getItem(\"role\") !== \"StressLead\" && secureStorage.getItem(\"role\") !== \"SupportsLead\" && secureStorage.getItem(\"role\") !== \"SpecialityLead\")) | (record.actions.props.children[1].props.children !== 'PENDING' && this.props.currentTab !== \"Issued\" && (secureStorage.getItem(\"role\") === \"DesignLead\" | secureStorage.getItem(\"role\") === \"StressLead\" | secureStorage.getItem(\"role\") === \"SupportsLead\") || record.actions.props.children[5].props.children === \"R\") && this.props.currentTab !== \"Issued\"),\r\n        // Column configuration not to be checked\r\n        name: record.name,\r\n      }) : ({\r\n        disabled: (record.actions.props.children[1].props.children === 'CLAIMED'| (record.actions.props.children[1].props.children === 'PENDING' && (secureStorage.getItem(\"role\") !== \"DesignLead\" && secureStorage.getItem(\"role\") !== \"StressLead\" && secureStorage.getItem(\"role\") !== \"SupportsLead\" && secureStorage.getItem(\"role\") !== \"SpecialityLead\")) | (record.actions.props.children[1].props.children !== 'PENDING' && (secureStorage.getItem(\"role\") === \"DesignLead\" | secureStorage.getItem(\"role\") === \"StressLead\" | secureStorage.getItem(\"role\") === \"SupportsLead\")) && this.props.currentTab !== \"Issued\"),\r\n        // Column configuration not to be checked\r\n        name: record.name,\r\n      }),\r\n    };\r\n\r\n    const rowSelectionFilter = {\r\n      onChange: (selectedRowKeys, selectedRows) => {\r\n        this.onSelectChange(selectedRowKeys, selectedRows);\r\n      },\r\n      getCheckboxProps: (record) => ({\r\n        disabled: true,\r\n        // Column configuration not to be checked\r\n        name: record.name,\r\n      }),\r\n    };\r\n\r\n    if(localStorage.getItem(\"update\") === \"true\"){\r\n      this.setState({\r\n        selectedRows: [],\r\n        selectedRowsKeys: []\r\n      })\r\n      rowSelection.selectedRowKeys = []\r\n      rowSelection.selectedRows = []\r\n      localStorage.setItem(\"update\", false)\r\n    }else{\r\n      rowSelection.selectedRowKeys = selectedRowsKeys \r\n      rowSelection.selectedRows = selectedRows;\r\n    }  \r\n    \r\n    \r\n    let columns = [\r\n      {\r\n        title: <center className=\"dataTable__header__text\">ISO ID</center>,\r\n        dataIndex: 'id',\r\n        key: 'id',\r\n        ...this.getColumnSearchProps('id'),\r\n        sorter:{\r\n          compare: (a, b) => a.id.props.children.localeCompare(b.id.props.children),\r\n        },\r\n        width:\"230px\"\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Type</center>,\r\n        dataIndex: 'type',\r\n        key: 'type',\r\n        ...this.getColumnSearchProps('type'),\r\n        sorter:{\r\n          compare: (a, b) => { return a.type.localeCompare(b.type)},\r\n        },\r\n        width:\"70px\"\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Revision</center>,\r\n        dataIndex: 'revision',\r\n        key: 'revision',\r\n        ...this.getColumnSearchProps('revision'),\r\n        sorter:{\r\n          compare: (a, b) => a.id.props.children.localeCompare(b.id.props.children),\r\n        },\r\n        width:\"100px\"\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">Date</div>,\r\n        dataIndex: 'date',\r\n        key: 'date',\r\n        ...this.getColumnSearchProps('date'),\r\n        sorter: {\r\n          compare: (a, b) => a.date.replace(/\\D/g,'') - b.date.replace(/\\D/g,''),\r\n        },\r\n        width:\"150px\"\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">From</div>,\r\n        dataIndex: 'from',\r\n        key: 'from',\r\n        ...this.getColumnSearchProps('from'),\r\n        sorter: {\r\n          compare: (a, b) => { return a.from.localeCompare(b.from)},\r\n        },\r\n        width:\"100px\"\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">To</div>,\r\n        dataIndex: 'to',\r\n        key: 'to',\r\n        ...this.getColumnSearchProps('to'),\r\n        sorter: {\r\n          compare: (a, b) => { return a.to.localeCompare(b.to)},\r\n        },\r\n        width:\"120px\"\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">User</div>,\r\n        dataIndex: 'user',\r\n        key: 'user',\r\n        ...this.getColumnSearchProps('user'),\r\n        sorter: {\r\n          compare: (a, b) => { return a.user.localeCompare(b.user)},\r\n        },        \r\n        width:\"350px\"\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">Actions</div>,\r\n        dataIndex: 'actions',\r\n        key: 'actions',\r\n        ...this.getColumnSearchProps('actions'),\r\n      },\r\n    ];\r\n\r\n    if(process.env.REACT_APP_PROGRESS === \"0\"){\r\n      columns = [{\r\n        title: <center className=\"dataTable__header__text\">ISO ID</center>,\r\n        dataIndex: 'id',\r\n        key: 'id',\r\n        ...this.getColumnSearchProps('id'),\r\n        sorter:{\r\n          compare: (a, b) => a.id.props.children.localeCompare(b.id.props.children),\r\n        },\r\n        width:\"230px\"\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Revision</center>,\r\n        dataIndex: 'revision',\r\n        key: 'revision',\r\n        ...this.getColumnSearchProps('revision'),\r\n        sorter:{\r\n          compare: (a, b) => a.id.props.children.localeCompare(b.id.props.children),\r\n        },\r\n        width:\"100px\"\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">Date</div>,\r\n        dataIndex: 'date',\r\n        key: 'date',\r\n        ...this.getColumnSearchProps('date'),\r\n        sorter: {\r\n          compare: (a, b) => a.date.replace(/\\D/g,'') - b.date.replace(/\\D/g,''),\r\n        },\r\n        width:\"150px\"\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">From</div>,\r\n        dataIndex: 'from',\r\n        key: 'from',\r\n        ...this.getColumnSearchProps('from'),\r\n        sorter: {\r\n          compare: (a, b) => { return a.from.localeCompare(b.from)},\r\n        },\r\n        width:\"100px\"\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">To</div>,\r\n        dataIndex: 'to',\r\n        key: 'to',\r\n        ...this.getColumnSearchProps('to'),\r\n        sorter: {\r\n          compare: (a, b) => { return a.to.localeCompare(b.to)},\r\n        },\r\n        width:\"120px\"\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">User</div>,\r\n        dataIndex: 'user',\r\n        key: 'user',\r\n        ...this.getColumnSearchProps('user'),\r\n        sorter: {\r\n          compare: (a, b) => { return a.user.localeCompare(b.user)},\r\n        },\r\n        width:\"350px\"\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">Actions</div>,\r\n        dataIndex: 'actions',\r\n        key: 'actions',\r\n        ...this.getColumnSearchProps('actions'),\r\n      },\r\n    ];\r\n    }\r\n\r\n    if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n      if(this.props.currentTab === \"Issued\"){\r\n        columns[2].width= \"190px\"\r\n      }\r\n    }else{\r\n      if(this.props.currentTab === \"Issued\"){\r\n        columns[1].width= \"190px\"\r\n      }\r\n    }\r\n\r\n    var totalElements = null;\r\n    if (this.state.data.length === 0){\r\n      totalElements = null;\r\n    }else{\r\n      totalElements = (<div style={{position: \"absolute\", bottom: 25, left:0}}>\r\n      <b>Total elements: {this.state.data.length}</b>\r\n     </div>);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {this.state.updateData}\r\n        <div className=\"dataTable__container\">\r\n        <Table className=\"customTable\" bordered = {true} rowSelection={{type: 'checkbox', ...rowSelection}} style={{ height: '430px', fontSize:\"16px\"}} columns={columns} dataSource={this.state.displayData} scroll={{y:330}} pagination={{disabled:true, defaultPageSize:5000, hideOnSinglePage:true}} size=\"small\" rowClassName= {(record) => record.color.replace('#', '')}/>\r\n        <Table className=\"filter__table\"  pagination={{disabled:true}} rowSelection={{type: 'checkbox', ...rowSelectionFilter}} scroll={{y:400}} showHeader = {false} bordered = {true} columns={columns} dataSource={this.state.filters} size=\"small\"/> \r\n          {totalElements}\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataTable;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instExcelEdit\\instExcelEdit.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\dragAndDrop\\dragAndDrop.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\myTrayBtn\\myTrayBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\instExcel\\instExcel.js",["1260"],"import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { HotTable } from '@handsontable/react';\r\nimport 'handsontable/dist/handsontable.full.css';\r\n\r\nclass InstExcel extends React.Component{\r\n  state = {\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    typesData: [],\r\n    stepsData: [],\r\n    progressData: [],\r\n    tab: this.props.currentTab,\r\n    selectedRows: [],\r\n    selectedRowsKeys: [],\r\n    updateData: this.props.updateData,\r\n    username: \"\",\r\n    acronyms : null,\r\n    steps: []\r\n  };\r\n\r\n  async componentDidMount(){\r\n\r\n    const options = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n    }\r\n\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/instrumentation/types\", options)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      var rows = []\r\n      var row = null\r\n      rows.push({\"Code\": \"Code\", \"Name\": \"Name\", \"Weight\": \"Weight\"})\r\n      for(let i = 0; i < json.rows.length; i++){\r\n\r\n          row = {\"Code\": json.rows[i].code, \"Name\": json.rows[i].name, \"Weight\": json.rows[i].weight, id: json.rows[i].id}\r\n\r\n          for(let j = 0; j < this.state.steps.length; j++){\r\n            let currentStep = this.state.steps[j].toString()\r\n            row[currentStep] = json.rows[i][currentStep]\r\n          }\r\n          rows.push(row)\r\n      }\r\n      this.setState({typesData : rows, selectedRows: []});\r\n\r\n  }) \r\n\r\n  fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/instrumentation/steps\", options)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      var rows = []\r\n      var row = null\r\n      rows.push({\"Name\":\"Name\", \"Percentage\":\"Percentage\"})\r\n      for(let i = 0; i < json.rows.length; i++){\r\n          row = {\"Name\": json.rows[i].name, \"Percentage\": json.rows[i].percentage, id: json.rows[i].id}\r\n\r\n          rows.push(row)\r\n      }\r\n      this.setState({stepsData : rows, selectedRows: []});\r\n\r\n  })\r\n\r\n  fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/ginsts\", options)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      var rows = []\r\n      var row = null\r\n      rows.push({\"Week\": \"Week\", \"Estimated\": \"Estimated\"})\r\n      for(let i = 0; i < json.rows.length; i++){\r\n          row = {\"Week\": json.rows[i].week, \"Estimated\": json.rows[i].estimated, id: json.rows[i].id}\r\n\r\n          rows.push(row)\r\n      }\r\n      this.setState({progressData : rows, selectedRows: []});\r\n\r\n  })\r\n  }\r\n\r\n  addRowTypes(){\r\n    let rows = this.state.typesData\r\n    rows.push({\"Code\": \"\", \"Name\":\"\", \"Weight\": \"\"})\r\n    this.setState({typesData: rows})\r\n  }\r\n  \r\n  submitChangesTypes(){\r\n    const body = {\r\n      rows: this.state.typesData,\r\n    }\r\n    const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submit/instrumentation/types\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n\r\n    })\r\n    this.props.success()\r\n  }\r\n\r\n  addRowSteps(){\r\n    let rows = this.state.stepsData\r\n    rows.push({\"Name\": \"\", \"Percentage\":\"\"})\r\n    this.setState({stepsData: rows})\r\n  }\r\n\r\n  submitChangesSteps(){\r\n    const body = {\r\n      rows: this.state.stepsData,\r\n    }\r\n    const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submit/instrumentation/steps\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n\r\n    })\r\n    this.props.success()\r\n  }\r\n\r\n  addRowProgress(){\r\n    let rows = this.state.progressData\r\n    rows.push({\"Week\": \"\", \"Estimated\": \"\"})\r\n    this.setState({progressData: rows})\r\n  }\r\n\r\n  submitChangesProgress(){\r\n    const body = {\r\n      rows: this.state.progressData,\r\n    }\r\n    const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submit/instrumentation/progress\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n\r\n    })\r\n    this.props.success()\r\n  }\r\n\r\n  \r\n\r\n \r\n\r\n  render() {\r\n\r\n    const typesSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 200,\r\n        //... other options\r\n      }\r\n  \r\n      const stepsSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 200,\r\n        //... other options\r\n      }\r\n  \r\n      const progressSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 195,\r\n        //... other options\r\n      }\r\n\r\n      return (\r\n        <div className=\"row\" style={{float:\"left\"}}>\r\n           \r\n          <div className=\"column\" style={{marginLeft:\"300px\"}}>\r\n\r\n            <div id=\"hot-app\">\r\n              <HotTable\r\n                data={this.state.typesData}\r\n                colHeaders={true}\r\n                rowHeaders={true}\r\n                width=\"675\"\r\n                height=\"500\"\r\n                settings={typesSettings} \r\n                manualColumnResize={true}\r\n                manualRowResize={true}\r\n                columns= {[{ data: \"Code\"}, { data: \"Name\"}, {data: \"Weight\", type:\"numeric\"}]}\r\n                filters={true}\r\n                dropdownMenu= {[\r\n                    'make_read_only',\r\n                    '---------',\r\n                    'alignment',\r\n                    '---------',\r\n                    'filter_by_condition',\r\n                    '---------',\r\n                    'filter_operators',\r\n                    '---------',\r\n                    'filter_by_condition2',\r\n                    '---------',\r\n                    'filter_by_value',\r\n                    '---------',\r\n                    'filter_action_bar',\r\n                  ]}\r\n              />\r\n              <br></br>\r\n              <center>\r\n                  <button class=\"btn btn-sm btn-info\" onClick={() => this.addRowTypes()} style={{marginRight:\"5px\", fontSize:\"16px\",width:\"60px\", borderRadius:\"10px\"}}>Add</button>\r\n                  <button class=\"btn btn-sm btn-success\" onClick={() => this.submitChangesTypes()} style={{marginRight:\"5px\", fontSize:\"16px\", width:\"60px\", borderRadius:\"10px\"}}>Save</button>\r\n              </center>\r\n            </div>\r\n          </div>\r\n         \r\n          <div className=\"column\" style={{marginLeft:\"20px\"}}>\r\n            <div id=\"hot-app\">\r\n              <HotTable\r\n                data={this.state.progressData}\r\n                colHeaders={true}\r\n                rowHeaders={true}\r\n                width=\"465\"\r\n                height=\"500\"\r\n                settings={progressSettings} \r\n                manualColumnResize={true}\r\n                manualRowResize={true}\r\n                columns= {[{ data: \"Week\", type:\"numeric\"}, {data: \"Estimated\", type:\"numeric\"}]}\r\n                filters={true}\r\n                dropdownMenu= {[\r\n                    'make_read_only',\r\n                    '---------',\r\n                    'alignment',\r\n                    '---------',\r\n                    'filter_by_condition',\r\n                    '---------',\r\n                    'filter_operators',\r\n                    '---------',\r\n                    'filter_by_condition2',\r\n                    '---------',\r\n                    'filter_by_value',\r\n                    '---------',\r\n                    'filter_action_bar',\r\n                  ]}\r\n              />\r\n              <br></br>\r\n              <center>\r\n                  <button class=\"btn btn-sm btn-info\" onClick={() => this.addRowProgress()} style={{marginRight:\"5px\", fontSize:\"16px\",width:\"60px\", borderRadius:\"10px\"}}>Add</button>\r\n                  <button class=\"btn btn-sm btn-success\" onClick={() => this.submitChangesProgress()} style={{marginRight:\"5px\", fontSize:\"16px\", width:\"60px\", borderRadius:\"10px\"}}>Save</button>\r\n              </center>\r\n              <br></br>\r\n            </div>\r\n          </div>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default InstExcel;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\onHoldTable\\onHoldTable.js",["1261","1262","1263","1264","1265","1266","1267","1268","1269"],"import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Table } from 'antd';\r\nimport './onHoldTable.css'\r\nimport { Link } from 'react-router-dom';\r\nimport CommentPopUp from '../commentPopUp/commentPopUp';\r\nimport HoldsPopUp from '../holdsPopUp/holdsPopUp';\r\n\r\nclass OnHoldTable extends React.Component{\r\n  state = {\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    data: [],\r\n    displayData: [],\r\n    filterData: [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n    tab: this.props.currentTab,\r\n    selectedRows: [],\r\n    selectedRowsKeys: [],\r\n    updateData: this.props.updateData,\r\n    username: \"\",\r\n    acronyms : null,\r\n    filters: [],\r\n    currentRole: this.props.currentRole\r\n  };\r\n\r\n\r\n  componentDidMount(){\r\n    \r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/roles/acronyms\")\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      let dict = {}\r\n\r\n      for(let i = 0; i < json.length; i++){\r\n        dict[json[i].name] = json[i].code\r\n      }\r\n      this.setState({\r\n        acronyms: dict\r\n      })\r\n    })\r\n\r\n    if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n      const options = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n      }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/holds\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                    var rows = []\r\n                   \r\n                    for(let i = 0; i < json.rows.length; i++){\r\n                      if(json.rows[i].onhold !== 2){\r\n                        if(json.rows[i].filename){\r\n                          var holds = [json.rows[i].hold1, json.rows[i].hold2, json.rows[i].hold3, json.rows[i].hold4, json.rows[i].hold5, json.rows[i].hold6, json.rows[i].hold7, json.rows[i].hold8, json.rows[i].hold9, json.rows[i].hold10]\r\n                          var descriptions = [json.rows[i].description1, json.rows[i].description2, json.rows[i].description3, json.rows[i].description4, json.rows[i].description5, json.rows[i].description6, json.rows[i].description7, json.rows[i].description8, json.rows[i].description9, json.rows[i].description10]\r\n      \r\n                          let user = null\r\n                          if(json.rows[i].role && json.rows[i].user){\r\n                            user = <div style={{textAlign:\"left\", display:\"flex\"}}>{this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user}</div>\r\n                          }\r\n                          var row = null\r\n                          if(this.state.currentRole === \"SpecialityLead\"){\r\n                            row = {key:i,  id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type: json.rows[i].code, revision: \"*R\" + json.rows[i].revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].to, user: user, holds: <div><HoldsPopUp isoid={json.rows[i].isoid} holds = {holds} descriptions = {descriptions}/> <button class=\"csp_exclude_btn btn-sm btn-warning\" onClick={() => this.excludeHold(json.rows[i].filename)}>EXCLUDE</button></div>}\r\n                          }else{\r\n                            row = {key:i,  id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type: json.rows[i].code, revision: \"*R\" + json.rows[i].revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].to, user: user, holds: <div><HoldsPopUp isoid={json.rows[i].isoid} holds = {holds} descriptions = {descriptions}/> </div>}\r\n                          }\r\n                          \r\n                      \r\n                          rows.push(row)   \r\n                        }else{\r\n                          var holds = [json.rows[i].hold1, json.rows[i].hold2, json.rows[i].hold3, json.rows[i].hold4, json.rows[i].hold5, json.rows[i].hold6, json.rows[i].hold7, json.rows[i].hold8, json.rows[i].hold9, json.rows[i].hold10]\r\n                          var descriptions = [json.rows[i].description1, json.rows[i].description2, json.rows[i].description3, json.rows[i].description4, json.rows[i].description5, json.rows[i].description6, json.rows[i].description7, json.rows[i].description8, json.rows[i].description9, json.rows[i].description10]\r\n  \r\n                          var row = {key:i,  id: json.rows[i].isoid, type: \"\", revision: \"\", date: \"\", from: \"\", user: \"\", holds: <HoldsPopUp isoid={json.rows[i].isoid} holds = {holds} descriptions = {descriptions}/>}\r\n                          \r\n                          rows.push(row) \r\n                        }\r\n                      }\r\n                                     \r\n                    }\r\n                    \r\n                    const filterRow = [{key:0, id: <div><input type=\"text\" className=\"filter__input\" placeholder=\"ISO ID\" onChange={(e) => this.filter(0, e.target.value)}/></div>, type: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Type\" onChange={(e) => this.filter(1, e.target.value)}/></div>, revision: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Revision\" onChange={(e) => this.filter(2,e.target.value)}/></div>, date: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Date\" onChange={(e) => this.filter(3,e.target.value)}/></div>, from: <div><input type=\"text\" className=\"filter__input\" placeholder=\"From\" onChange={(e) => this.filter(4,e.target.value)}/></div>, user: <div><input type=\"text\" className=\"filter__input\" placeholder=\"User\" onChange={(e) => this.filter(5,e.target.value)}/></div>}]\r\n                \r\n                    this.setState({data : rows, selectedRows: [], displayData: rows});\r\n                    await this.setState({filters : filterRow})\r\n    \r\n                }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })  \r\n      }else{\r\n        \r\n        \r\n        const body ={\r\n          currentTab : this.props.currentTab\r\n        }\r\n        const options = {\r\n          method: \"POST\",\r\n          headers: {\r\n              \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify(body)\r\n        }\r\n          fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/files\", options)\r\n              .then(response => response.json())\r\n              .then(async json => {\r\n                      var rows = []\r\n                      for(let i = 0; i < json.rows.length; i++){\r\n                          var row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type: json.rows[i].code, revision: \"*R\" + json.rows[i].revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, user: <div style={{textAlign:\"left\", display:\"flex\"}}>{this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user} <CommentPopUp comments={json.rows[i].comments} filename={json.rows[i].filename} updated={json.rows[i].updated_at}/></div>}\r\n                      \r\n                          rows.push(row)                \r\n                      }\r\n                      \r\n                      const filterRow = [{key:0, id: <div><input type=\"text\" className=\"filter__input\" placeholder=\"ISO ID\" onChange={(e) => this.filter(0, e.target.value)}/></div>, type: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Type\" onChange={(e) => this.filter(1, e.target.value)}/></div>, revision: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Revision\" onChange={(e) => this.filter(2,e.target.value)}/></div>, date: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Date\" onChange={(e) => this.filter(3,e.target.value)}/></div>, from: <div><input type=\"text\" className=\"filter__input\" placeholder=\"From\" onChange={(e) => this.filter(4,e.target.value)}/></div>, user: <div><input type=\"text\" className=\"filter__input\" placeholder=\"User\" onChange={(e) => this.filter(5,e.target.value)}/></div>}]\r\n                \r\n                    this.setState({data : rows, selectedRows: [], displayData: rows});\r\n                    await this.setState({filters : filterRow})\r\n\r\n                  }\r\n          )\r\n          .catch(error => {\r\n              console.log(error);\r\n          })\r\n        }\r\n\r\n    \r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n\r\n    if(prevProps !== this.props){\r\n      if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n        const options = {\r\n          method: \"GET\",\r\n          headers: {\r\n              \"Content-Type\": \"application/json\"\r\n          },\r\n        }\r\n          fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/holds\", options)\r\n              .then(response => response.json())\r\n              .then(async json => {\r\n                      var rows = []\r\n                     \r\n                      for(let i = 0; i < json.rows.length; i++){\r\n                        if(json.rows[i].onhold !== 2){\r\n                          if(json.rows[i].filename){\r\n                            var holds = [json.rows[i].hold1, json.rows[i].hold2, json.rows[i].hold3, json.rows[i].hold4, json.rows[i].hold5, json.rows[i].hold6, json.rows[i].hold7, json.rows[i].hold8, json.rows[i].hold9, json.rows[i].hold10]\r\n                            var descriptions = [json.rows[i].description1, json.rows[i].description2, json.rows[i].description3, json.rows[i].description4, json.rows[i].description5, json.rows[i].description6, json.rows[i].description7, json.rows[i].description8, json.rows[i].description9, json.rows[i].description10]\r\n        \r\n                            let user = null\r\n                          if(json.rows[i].role && json.rows[i].user){\r\n                            user = <div style={{textAlign:\"left\", display:\"flex\"}}>{this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user}</div>\r\n                          }\r\n                            if(this.state.currentRole === \"SpecialityLead\"){\r\n                              row = {key:i,  id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type: json.rows[i].code, revision: \"*R\" + json.rows[i].revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].to, user: user, holds: <div><HoldsPopUp isoid={json.rows[i].isoid} holds = {holds} descriptions = {descriptions}/> <button class=\"csp_exclude_btn btn-sm btn-warning\" onClick={() => this.excludeHold(json.rows[i].filename)}>EXCLUDE</button></div>}\r\n                            }else{\r\n                              row = {key:i,  id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type: json.rows[i].code, revision: \"*R\" + json.rows[i].revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].to, user: user, holds: <div><HoldsPopUp isoid={json.rows[i].isoid} holds = {holds} descriptions = {descriptions}/> </div>}\r\n                            }\r\n                        \r\n                            rows.push(row)   \r\n                          }else{\r\n                            var holds = [json.rows[i].hold1, json.rows[i].hold2, json.rows[i].hold3, json.rows[i].hold4, json.rows[i].hold5, json.rows[i].hold6, json.rows[i].hold7, json.rows[i].hold8, json.rows[i].hold9, json.rows[i].hold10]\r\n                            var descriptions = [json.rows[i].description1, json.rows[i].description2, json.rows[i].description3, json.rows[i].description4, json.rows[i].description5, json.rows[i].description6, json.rows[i].description7, json.rows[i].description8, json.rows[i].description9, json.rows[i].description10]\r\n    \r\n                            var row = {key:i,  id: json.rows[i].isoid, type: \"\", revision: \"\", date: \"\", from: \"\", user: \"\", holds: <HoldsPopUp isoid={json.rows[i].isoid} holds = {holds} descriptions = {descriptions}/>}\r\n                            \r\n                            rows.push(row) \r\n                          }\r\n                        }\r\n                                       \r\n                      }\r\n                      \r\n                      const filterRow = [{key:0, id: <div><input type=\"text\" className=\"filter__input\" placeholder=\"ISO ID\" onChange={(e) => this.filter(0, e.target.value)}/></div>, type: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Type\" onChange={(e) => this.filter(1, e.target.value)}/></div>, revision: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Revision\" onChange={(e) => this.filter(2,e.target.value)}/></div>, date: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Date\" onChange={(e) => this.filter(3,e.target.value)}/></div>, from: <div><input type=\"text\" className=\"filter__input\" placeholder=\"From\" onChange={(e) => this.filter(4,e.target.value)}/></div>, user: <div><input type=\"text\" className=\"filter__input\" placeholder=\"User\" onChange={(e) => this.filter(5,e.target.value)}/></div>}]\r\n                  \r\n                      this.setState({data : rows, selectedRows: [], displayData: rows});\r\n                      await this.setState({filters : filterRow})\r\n      \r\n                  }\r\n              )\r\n              .catch(error => {\r\n                  console.log(error);\r\n              })  \r\n        }else{\r\n          \r\n          \r\n          const body ={\r\n            currentTab : this.props.currentTab\r\n          }\r\n          const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n          }\r\n            fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/files\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n                        var rows = []\r\n                        for(let i = 0; i < json.rows.length; i++){\r\n                            var row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , type: json.rows[i].code, revision: \"*R\" + json.rows[i].revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, user: <div style={{textAlign:\"left\", display:\"flex\"}}>{this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user} <CommentPopUp comments={json.rows[i].comments} filename={json.rows[i].filename} updated={json.rows[i].updated_at}/></div>}\r\n                        \r\n                            rows.push(row)                \r\n                        }\r\n                        \r\n                        const filterRow = [{key:0, id: <div><input type=\"text\" className=\"filter__input\" placeholder=\"ISO ID\" onChange={(e) => this.filter(0, e.target.value)}/></div>, type: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Type\" onChange={(e) => this.filter(1, e.target.value)}/></div>, revision: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Revision\" onChange={(e) => this.filter(2,e.target.value)}/></div>, date: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Date\" onChange={(e) => this.filter(3,e.target.value)}/></div>, from: <div><input type=\"text\" className=\"filter__input\" placeholder=\"From\" onChange={(e) => this.filter(4,e.target.value)}/></div>, user: <div><input type=\"text\" className=\"filter__input\" placeholder=\"User\" onChange={(e) => this.filter(5,e.target.value)}/></div>}]\r\n                  \r\n                      this.setState({data : rows, selectedRows: [], displayData: rows});\r\n                      await this.setState({filters : filterRow})\r\n  \r\n                    }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n          }\r\n      }\r\n\r\n  }\r\n\r\n  async excludeHold(fileName){\r\n    this.props.excludeHold(fileName)\r\n  }\r\n\r\n  getMaster(fileName){\r\n    const options = {\r\n      method: \"GET\",\r\n      headers: {\r\n          \"Content-Type\": \"application/pdf\"\r\n      }\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getMaster/\"+fileName, options)\r\n    .then(res => res.blob())\r\n    .then(response => {\r\n      const file = new Blob([response], {\r\n        type: \"application/pdf\"\r\n      });\r\n      //Build a URL from the file\r\n      const fileURL = URL.createObjectURL(file);\r\n      //Open the URL on new Window\r\n      let w = window.open(fileURL);\r\n\r\n        w.addEventListener(\"load\", function() {\r\n          setTimeout(()=> w.document.title = fileName\r\n          , 300);\r\n\r\n\r\n        });\r\n\r\n        // create <a> tag dinamically\r\n        var fileLink = document.createElement('a');\r\n        fileLink.href = fileURL;\r\n\r\n        // it forces the name of the downloaded file\r\n        fileLink.download = fileName;\r\n\r\n        // triggers the click event\r\n        fileLink.click();\r\n\r\n\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  async filter(column, value){\r\n    let fd = this.state.filterData\r\n    fd[column] = value\r\n    await this.setState({filterData: fd})\r\n\r\n    let auxDisplayData = this.state.data\r\n    let resultData = []\r\n    let fil, exists = null\r\n    for(let i = 0; i < auxDisplayData.length; i++){\r\n      exists = true\r\n      for(let column = 0; column < Object.keys(auxDisplayData[i]).length-1; column ++){\r\n        fil = Object.keys(auxDisplayData[i])[column+1]\r\n        if(fil === \"id\" && auxDisplayData[i][fil].props){\r\n          if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].props.children.includes(this.state.filterData[column])){\r\n            exists = false\r\n          }  \r\n        }else if(fil === \"user\" && process.env.REACT_APP_PROGRESS === \"0\"){\r\n          if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].props.children[0].includes(this.state.filterData[column])){\r\n            exists = false\r\n          } \r\n        }else{\r\n          if(auxDisplayData[i][fil]){\r\n            if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].includes(this.state.filterData[column])){\r\n              exists = false\r\n            }\r\n          }\r\n          \r\n        }     \r\n        \r\n      }\r\n      if(exists){\r\n        resultData.push(auxDisplayData[i])\r\n      }\r\n    }\r\n    await this.setState({displayData: resultData})\r\n  }\r\n\r\n  \r\n  getColumnSearchProps = dataIndex => ({\r\n    \r\n    render: text => \r\n    text\r\n      \r\n  });\r\n\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys, selectedRows) => {\r\n    let ids = []\r\n    for(let i = 0; i < selectedRows.length; i++){\r\n      ids.push(selectedRows[i].id.props.children)\r\n    }\r\n    this.setState({\r\n      selectedRowsKeys: selectedRowKeys,\r\n      selectedRows: selectedRows\r\n    })\r\n    //this.setState({ selectedRows: selectedRows });\r\n    this.props.onChange(ids);\r\n    \r\n  };\r\n  \r\n\r\n  render() {\r\n    const selectedRows = this.state.selectedRows;\r\n    const selectedRowsKeys = this.state.selectedRowsKeys;\r\n    const rowSelection = {\r\n      onChange: (selectedRowKeys, selectedRows) => {\r\n        this.onSelectChange(selectedRowKeys, selectedRows);\r\n      },\r\n      getCheckboxProps: (record) => (      \r\n        {\r\n        \r\n        // Column configuration not to be checked\r\n        name: record.name,\r\n      }),\r\n    };\r\n\r\n    const rowSelectionFilter = {\r\n      onChange: (selectedRowKeys, selectedRows) => {\r\n        this.onSelectChange(selectedRowKeys, selectedRows);\r\n      },\r\n      getCheckboxProps: (record) => ({\r\n        disabled: true,\r\n        // Column configuration not to be checked\r\n        name: record.name,\r\n      }),\r\n    };\r\n    if(localStorage.getItem(\"update\") === \"true\"){\r\n      this.setState({\r\n        selectedRows: [],\r\n        selectedRowsKeys: []\r\n      })\r\n      rowSelection.selectedRowKeys = []\r\n      rowSelection.selectedRows = []\r\n      localStorage.setItem(\"update\", false)\r\n    }else{\r\n      rowSelection.selectedRowKeys = selectedRowsKeys \r\n      rowSelection.selectedRows = selectedRows;\r\n    }  \r\n    \r\n    \r\n    let columns = [\r\n      {\r\n        title: <center className=\"dataTable__header__text\">ISO ID</center>,\r\n        dataIndex: 'id',\r\n        key: 'id',\r\n        ...this.getColumnSearchProps('id'),\r\n        \r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">Type</div>,\r\n        dataIndex: 'type',\r\n        key: 'type',\r\n        ...this.getColumnSearchProps('type'),\r\n        sorter: {\r\n          compare: (a, b) => { return a.type.localeCompare(b.type)},\r\n        },\r\n        width: \"160px\"\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Revision</center>,\r\n        dataIndex: 'revision',\r\n        key: 'revision',\r\n        ...this.getColumnSearchProps('revision'),\r\n        sorter:{\r\n          compare: (a, b) => a.revision.localeCompare(b.revision),\r\n        },\r\n        width: \"160px\"\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">Date</div>,\r\n        dataIndex: 'date',\r\n        key: 'date',\r\n        ...this.getColumnSearchProps('date'),\r\n        sorter: {\r\n          compare: (a, b) => a.date.replace(/\\D/g,'') - b.date.replace(/\\D/g,''),\r\n        },\r\n        sortOrder: 'descend'\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">From</div>,\r\n        dataIndex: 'from',\r\n        key: 'from',\r\n        ...this.getColumnSearchProps('from'),\r\n        sorter: {\r\n          compare: (a, b) => { return a.from.localeCompare(b.from)},\r\n        },\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">User</div>,\r\n        dataIndex: 'user',\r\n        key: 'user',\r\n        ...this.getColumnSearchProps('user'),\r\n        width: \"500px\"\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">Holds</div>,\r\n        dataIndex: 'holds',\r\n        key: 'holds',\r\n        width: \"150px\"\r\n      },\r\n    ];\r\n\r\n    \r\n\r\n    if(process.env.REACT_APP_PROGRESS === \"0\"){\r\n      columns = [\r\n        {\r\n          title: <center className=\"dataTable__header__text\">ISO ID</center>,\r\n          dataIndex: 'id',\r\n          key: 'id',\r\n          ...this.getColumnSearchProps('id'),\r\n          sorter:{\r\n            compare: (a, b) => a.id.props.children.localeCompare(b.id.props.children),\r\n          },\r\n        },\r\n        {\r\n          title: <center className=\"dataTable__header__text\">Revision</center>,\r\n          dataIndex: 'revision',\r\n          key: 'revision',\r\n          ...this.getColumnSearchProps('revision'),\r\n          sorter:{\r\n            compare: (a, b) => a.revision.localeCompare(b.revision),\r\n          },\r\n        },\r\n        {\r\n          title: <div className=\"dataTable__header__text\">Date</div>,\r\n          dataIndex: 'date',\r\n          key: 'date',\r\n          ...this.getColumnSearchProps('date'),\r\n          sorter: {\r\n            compare: (a, b) => a.date.replace(/\\D/g,'') - b.date.replace(/\\D/g,''),\r\n          },\r\n        },\r\n        {\r\n          title: <div className=\"dataTable__header__text\">From</div>,\r\n          dataIndex: 'from',\r\n          key: 'from',\r\n          ...this.getColumnSearchProps('from'),\r\n          sorter: {\r\n            compare: (a, b) => { return a.from.localeCompare(b.from)},\r\n          },\r\n        },\r\n        {\r\n          title: <div className=\"dataTable__header__text\">User</div>,\r\n          dataIndex: 'user',\r\n          key: 'user',\r\n          ...this.getColumnSearchProps('user'),\r\n        },\r\n      ];\r\n    }\r\n    \r\n\r\n    var totalElements = null\r\n    if (this.state.data.length === 0){\r\n      totalElements = null;\r\n    }else{\r\n      totalElements = (<div style={{position: \"absolute\", bottom: 25, left:0}}>\r\n      <b>Total elements: {this.state.data.length}</b>\r\n     </div>);\r\n    }\r\n\r\n    let table = null\r\n    if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n      table = <Table className=\"customTable\" bordered = {true} columns={columns} style={{ height: '430px' }}  dataSource={this.state.displayData} scroll={{y:330}} pagination={{disabled:true, defaultPageSize:5000, hideOnSinglePage:true}} size=\"small\"/>\r\n    }else{\r\n      table = <Table className=\"customTable\" bordered = {true} rowSelection={{type: 'checkbox', ...rowSelection}} columns={columns} style={{ height: '430px' }}  dataSource={this.state.displayData} scroll={{y:330}} pagination={{disabled:true, defaultPageSize:5000, hideOnSinglePage:true}} size=\"small\"/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {this.state.updateData}\r\n        <div className=\"dataTable__container\">\r\n          {table}\r\n          <Table className=\"filter__table\" pagination={{disabled:true}}  scroll={{y:330}} showHeader = {false} bordered = {true} columns={columns} dataSource={this.state.filters} size=\"small\"/> \r\n          {totalElements}\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OnHoldTable;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\myTrayTable\\myTrayTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\binTable\\binTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\historyDataTable\\historyDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\statusDataTable\\statusDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\checkInTable\\checkInTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\selectPag\\selectPag.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\procInstTable\\procInstTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\binBtn\\binBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportBoxBtns\\reportBoxBtns.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\procInsBtn\\procInsBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportsBtn\\reportsBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressBtn\\progressBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\onHoldBtn\\onHoldBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\modelledBtn\\modelledBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\usersDataTable\\usersDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipModelledDataTable\\equipModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlot\\progressPlot.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\modelledDataTable\\modelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotEquipments\\progressPlotEquipments.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\issuedBtn\\issuedBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipTypesDataTable\\equipTypesDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipEstimatedDataTable\\equipEstimatedDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipExcelEdit\\equipExcelEdit.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerKeyParams\\csptrackerKeyParams.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\equipExcel\\equipExcel.js",["1270"],"import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { HotTable } from '@handsontable/react';\r\nimport 'handsontable/dist/handsontable.full.css';\r\nimport \"./equipExcel.css\"\r\n\r\nclass EquipExcel extends React.Component{\r\n  state = {\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    typesData: [],\r\n    stepsData: [],\r\n    progressData: [],\r\n    tab: this.props.currentTab,\r\n    selectedRows: [],\r\n    selectedRowsKeys: [],\r\n    updateData: this.props.updateData,\r\n    username: \"\",\r\n    acronyms : null,\r\n    steps: []\r\n  };\r\n\r\n  async componentDidMount(){\r\n\r\n    const options = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n    }\r\n\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/equipments/types\", options)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      var rows = []\r\n      var row = null\r\n      rows.push({\"Code\": \"Code\", \"Name\": \"Name\", \"Weight\": \"Weight\"})\r\n      for(let i = 0; i < json.rows.length; i++){\r\n\r\n          row = {\"Code\": json.rows[i].code, \"Name\": json.rows[i].name, \"Weight\": json.rows[i].weight, id: json.rows[i].id}\r\n\r\n          for(let j = 0; j < this.state.steps.length; j++){\r\n            let currentStep = this.state.steps[j].toString()\r\n            row[currentStep] = json.rows[i][currentStep]\r\n          }\r\n          rows.push(row)\r\n      }\r\n      this.setState({typesData : rows, selectedRows: []});\r\n\r\n  }) \r\n\r\n  fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/equipments/steps\", options)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      var rows = []\r\n      var row = null\r\n      rows.push({\"Name\":\"Name\", \"Percentage\":\"Percentage\"})\r\n      for(let i = 0; i < json.rows.length; i++){\r\n          row = {\"Name\": json.rows[i].name, \"Percentage\": json.rows[i].percentage, id: json.rows[i].id}\r\n\r\n          rows.push(row)\r\n      }\r\n      this.setState({stepsData : rows, selectedRows: []});\r\n\r\n  })\r\n\r\n  fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/gequips\", options)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      var rows = []\r\n      var row = null\r\n      rows.push({\"Week\": \"Week\", \"Estimated\": \"Estimated\"})\r\n      for(let i = 0; i < json.rows.length; i++){\r\n          row = {\"Week\": json.rows[i].week, \"Estimated\": json.rows[i].estimated, id: json.rows[i].id}\r\n\r\n          rows.push(row)\r\n      }\r\n      this.setState({progressData : rows, selectedRows: []});\r\n\r\n  })\r\n  }\r\n\r\n  addRowTypes(){\r\n    let rows = this.state.typesData\r\n    rows.push({\"Code\": \"\", \"Name\":\"\", \"Weight\": \"\"})\r\n    this.setState({typesData: rows})\r\n  }\r\n  \r\n  submitChangesTypes(){\r\n    const body = {\r\n      rows: this.state.typesData,\r\n    }\r\n    const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submit/equipments/types\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n\r\n    })\r\n    this.props.success()\r\n  }\r\n\r\n  addRowSteps(){\r\n    let rows = this.state.stepsData\r\n    rows.push({\"Name\": \"\", \"Percentage\":\"\"})\r\n    this.setState({stepsData: rows})\r\n  }\r\n\r\n  submitChangesSteps(){\r\n    const body = {\r\n      rows: this.state.stepsData,\r\n    }\r\n    const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submit/equipments/steps\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n\r\n    })\r\n    this.props.success()\r\n  }\r\n\r\n  addRowProgress(){\r\n    let rows = this.state.progressData\r\n    rows.push({\"Week\": \"\", \"Estimated\": \"\"})\r\n    this.setState({progressData: rows})\r\n  }\r\n\r\n  submitChangesProgress(){\r\n    const body = {\r\n      rows: this.state.progressData,\r\n    }\r\n    const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submit/equipments/progress\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n\r\n    })\r\n    this.props.success()\r\n  }\r\n\r\n  \r\n\r\n \r\n\r\n  render() {\r\n\r\n    const typesSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 200,\r\n        //... other options\r\n      }\r\n  \r\n      const stepsSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 200,\r\n        //... other options\r\n      }\r\n  \r\n      const progressSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 195,\r\n        //... other options\r\n      }\r\n\r\n      return (\r\n        <div className=\"row\" style={{float:\"left\"}}>\r\n           \r\n          <div className=\"column\" style={{marginLeft:\"300px\"}}>\r\n\r\n            <div id=\"hot-app\">\r\n              <HotTable\r\n                data={this.state.typesData}\r\n                colHeaders={true}\r\n                rowHeaders={true}\r\n                width=\"675\"\r\n                height=\"500\"\r\n                settings={typesSettings} \r\n                manualColumnResize={true}\r\n                manualRowResize={true}\r\n                columns= {[{ data: \"Code\"}, { data: \"Name\"}, {data: \"Weight\", type:\"numeric\"}]}\r\n                filters={true}\r\n                dropdownMenu= {[\r\n                    'make_read_only',\r\n                    '---------',\r\n                    'alignment',\r\n                    '---------',\r\n                    'filter_by_condition',\r\n                    '---------',\r\n                    'filter_operators',\r\n                    '---------',\r\n                    'filter_by_condition2',\r\n                    '---------',\r\n                    'filter_by_value',\r\n                    '---------',\r\n                    'filter_action_bar',\r\n                  ]}\r\n              />\r\n              <br></br>\r\n              <center>\r\n                  <button class=\"btn btn-sm btn-info\" onClick={() => this.addRowTypes()} style={{marginRight:\"5px\", fontSize:\"16px\",width:\"60px\", borderRadius:\"10px\"}}>Add</button>\r\n                  <button class=\"btn btn-sm btn-success\" onClick={() => this.submitChangesTypes()} style={{marginRight:\"5px\", fontSize:\"16px\", width:\"60px\", borderRadius:\"10px\"}}>Save</button>\r\n              </center>\r\n            </div>\r\n          </div>\r\n         \r\n          <div className=\"column\" style={{marginLeft:\"20px\"}}>\r\n            <div id=\"hot-app\">\r\n              <HotTable\r\n                data={this.state.progressData}\r\n                colHeaders={true}\r\n                rowHeaders={true}\r\n                width=\"465\"\r\n                height=\"500\"\r\n                settings={progressSettings} \r\n                manualColumnResize={true}\r\n                manualRowResize={true}\r\n                columns= {[{ data: \"Week\", type:\"numeric\"}, {data: \"Estimated\", type:\"numeric\"}]}\r\n                filters={true}\r\n                dropdownMenu= {[\r\n                    'make_read_only',\r\n                    '---------',\r\n                    'alignment',\r\n                    '---------',\r\n                    'filter_by_condition',\r\n                    '---------',\r\n                    'filter_operators',\r\n                    '---------',\r\n                    'filter_by_condition2',\r\n                    '---------',\r\n                    'filter_by_value',\r\n                    '---------',\r\n                    'filter_action_bar',\r\n                  ]}\r\n              />\r\n              <br></br>\r\n              <center>\r\n                  <button class=\"btn btn-sm btn-info\" onClick={() => this.addRowProgress()} style={{marginRight:\"5px\", fontSize:\"16px\",width:\"60px\", borderRadius:\"10px\"}}>Add</button>\r\n                  <button class=\"btn btn-sm btn-success\" onClick={() => this.submitChangesProgress()} style={{marginRight:\"5px\", fontSize:\"16px\", width:\"60px\", borderRadius:\"10px\"}}>Save</button>\r\n              </center>\r\n              <br></br>\r\n            </div>\r\n          </div>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default EquipExcel;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerViewDataTable\\qtrackerViewDataTable.js",["1271","1272"],"import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Table } from 'antd';\r\nimport QtrackerNWCSpecPopUp from '../qtrackerNWCSpecPopUp/qtrackerNWCSpecPopUp';\r\nimport QtrackerNVNSpecPopUp from '../qtrackerNVNSpecPopUp/qtrackerNVNSpecPopUp';\r\nimport QtrackerNRISpecPopUp from '../qtrackerNRISpecPopUp/qtrackerNRISpecPopUp';\r\nimport QtrackerNRBSpecPopUp from '../qtrackerNRBSpecPopUp/qtrackerNRBSpecPopUp';\r\nimport QtrackerNRIDSSpecPopUp from '../qtrackerNRIDSSpecPopUp/qtrackerNRIDSSpecPopUp';\r\nimport QtrackerRPSpecPopUp from '../qtrackerRPSpecPopUp/qtrackerRPSpecPopUp';\r\nimport './qtrackerViewDataTable.css'\r\nimport AttachIcon from \"../../assets/images/attach.png\"\r\n\r\nconst CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\nclass QTrackerViewDataTable extends React.Component{\r\n  state = {\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    data: [],\r\n    displayData: [],\r\n    filterData: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n    observations: {},\r\n    tab: this.props.currentTab,\r\n    selectedRows: [],\r\n    selectedRowsKeys: [],\r\n    updateData: this.props.updateData,\r\n    username: \"\",\r\n    acronyms : null,\r\n    steps: [],\r\n    filters: []\r\n  };\r\n\r\n  async statusChange(incidence_number, status, type){\r\n    let status_id\r\n    if(status === \"pending\"){\r\n      status_id = 0\r\n    }else if(status === \"progress\"){\r\n      status_id = 1\r\n    }else if(status === \"ready\"){\r\n      status_id = 2\r\n    }else if(status === \"rejected\"){\r\n      status_id = 3\r\n    }\r\n\r\n   await this.props.updateStatus([incidence_number, status_id, type])  \r\n  }\r\n\r\n  async componentDidMount(){\r\n\r\n    const options = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n    }\r\n\r\n    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNWC\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n          var rows = []\r\n          var row = null\r\n            for(let i = 0; i < json.rows.length; i++){\r\n\r\n                if(json.rows[i].attach === 1){\r\n                  if(json.rows[i].accept_reject_date != null){\r\n                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNWCSpecPopUp incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19).toString().substring(0,10)}\r\n                  }else{\r\n                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNWCSpecPopUp incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: \"\"}\r\n                  }\r\n                }else{\r\n                  if(json.rows[i].accept_reject_date != null){\r\n                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNWCSpecPopUp incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)}\r\n                  }else{\r\n                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNWCSpecPopUp incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/>, ar_date: \"\"}\r\n                  }\r\n                }\r\n\r\n                if(secureStorage.getItem(\"role\") === \"3D Admin\"){\r\n                  if(json.rows[i].status === 0){\r\n                      row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NWC\")} >\r\n                      <option value=\"pending\" selected>Pending</option>\r\n                      <option value=\"progress\">In progress</option>\r\n                      <option value=\"ready\">Ready</option>\r\n                      <option value=\"rejected\">Rejected</option>\r\n                    </select>\r\n                      row.color = \"#www\"\r\n                  }else if(json.rows[i].status === 1){\r\n                    row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NWC\")}>\r\n                    <option value=\"pending\">Pending</option>\r\n                    <option value=\"progress\" selected style={{backgroundColor:\"#yyy\"}}>In progress</option>\r\n                    <option value=\"ready\">Ready</option>\r\n                    <option value=\"rejected\">Rejected</option>\r\n                  </select>\r\n                      row.color = \"#yyy\"\r\n                  }else if(json.rows[i].status === 2){\r\n                    row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NWC\")}>\r\n                    <option value=\"pending\">Pending</option>\r\n                    <option value=\"progress\">In progress</option>\r\n                    <option value=\"ready\" selected>Ready</option>\r\n                    <option value=\"rejected\">Rejected</option>\r\n                    </select>\r\n                      row.color = \"#ggg\"\r\n                  }else{\r\n                    row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NWC\")}>\r\n                    <option value=\"pending\">Pending</option>\r\n                    <option value=\"progress\">In progress</option>\r\n                    <option value=\"ready\">Ready</option>\r\n                    <option value=\"rejected\" selected>Rejected</option>\r\n                   </select>\r\n                      row.color = \"#rrr\"\r\n                  }\r\n\r\n                  row.observations = <input style={{width: \"310px\"}} type=\"text\" defaultValue={json.rows[i].observations} style={{width: \"310px\"}} onChange={(event)=>this.updateObservations(json.rows[i].incidence_number, event.target.value)}/>\r\n\r\n                }else{\r\n                  if(json.rows[i].status === 0){\r\n                    row.status = \"Pending\"\r\n                    row.color = \"#www\"\r\n                  }else if(json.rows[i].status === 1){\r\n                      row.status = \"In progress\"\r\n                      row.color = \"#yyy\"\r\n                  }else if(json.rows[i].status === 2){\r\n                      row.status = \"Ready\"\r\n                      row.color = \"#ggg\"\r\n                  }else{\r\n                      row.status = \"Rejected\"\r\n                      row.color = \"#rrr\"\r\n                  }\r\n\r\n                  row.observations = json.rows[i].observations\r\n                }\r\n                \r\n                rows.push(row)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNVN\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n            var row = null\r\n                for(let i = 0; i < json.rows.length; i++){\r\n                  if(json.rows[i].attach === 1){\r\n                    if(json.rows[i].accept_reject_date != null){\r\n                      row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNVNSpecPopUp name={json.rows[i].name} incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19).toString().substring(0,10)}\r\n                    }else{\r\n                      row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNVNSpecPopUp name={json.rows[i].name} incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: \"\"}\r\n                    }\r\n                  }else{\r\n                    if(json.rows[i].accept_reject_date != null){\r\n                      row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNVNSpecPopUp name={json.rows[i].name} incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)}\r\n                    }else{\r\n                      row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNVNSpecPopUp name={json.rows[i].name} incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/>, ar_date: \"\"}\r\n                    }\r\n                  }\r\n                    if(secureStorage.getItem(\"role\") === \"3D Admin\"){\r\n                      if(json.rows[i].status === 0){\r\n                          row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NVN\")} >\r\n                          <option value=\"pending\" selected>Pending</option>\r\n                          <option value=\"progress\">In progress</option>\r\n                          <option value=\"ready\">Ready</option>\r\n                          <option value=\"rejected\">Rejected</option>\r\n                        </select>\r\n                          row.color = \"#www\"\r\n                      }else if(json.rows[i].status === 1){\r\n                        row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NVN\")}>\r\n                        <option value=\"pending\">Pending</option>\r\n                        <option value=\"progress\" selected style={{backgroundColor:\"#yyy\"}}>In progress</option>\r\n                        <option value=\"ready\">Ready</option>\r\n                        <option value=\"rejected\">Rejected</option>\r\n                      </select>\r\n                          row.color = \"#yyy\"\r\n                      }else if(json.rows[i].status === 2){\r\n                        row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NVN\")}>\r\n                        <option value=\"pending\">Pending</option>\r\n                        <option value=\"progress\">In progress</option>\r\n                        <option value=\"ready\" selected>Ready</option>\r\n                        <option value=\"rejected\">Rejected</option>\r\n                        </select>\r\n                          row.color = \"#ggg\"\r\n                      }else{\r\n                        row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NVN\")}>\r\n                        <option value=\"pending\">Pending</option>\r\n                        <option value=\"progress\">In progress</option>\r\n                        <option value=\"ready\">Ready</option>\r\n                        <option value=\"rejected\" selected>Rejected</option>\r\n                       </select>\r\n                          row.color = \"#rrr\"\r\n                      }\r\n                      row.observations = <input type=\"text\" defaultValue={json.rows[i].observations} style={{width: \"310px\"}} onChange={(event)=>this.updateObservations(json.rows[i].incidence_number, event.target.value)}/>\r\n\r\n                    }else{\r\n                      if(json.rows[i].status === 0){\r\n                        row.status = \"Pending\"\r\n                        row.color = \"#www\"\r\n                      }else if(json.rows[i].status === 1){\r\n                          row.status = \"In progress\"\r\n                          row.color = \"#yyy\"\r\n                      }else if(json.rows[i].status === 2){\r\n                          row.status = \"Ready\"\r\n                          row.color = \"#ggg\"\r\n                      }else{\r\n                          row.status = \"Rejected\"\r\n                          row.color = \"#rrr\"\r\n                      }\r\n\r\n                      row.observations = json.rows[i].observations\r\n                    }\r\n                    rows.push(row)\r\n                }\r\n                \r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNRI\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n                var row = null\r\n                    for(let i = 0; i < json.rows.length; i++){\r\n                      if(json.rows[i].attach === 1){\r\n                        if(json.rows[i].accept_reject_date != null){\r\n                          row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19).toString().substring(0,10)}\r\n                        }else{\r\n                          row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: \"\"}\r\n                        }\r\n                      }else{\r\n                        if(json.rows[i].accept_reject_date != null){\r\n                          row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)}\r\n                        }else{\r\n                          row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/>, ar_date: \"\"}\r\n                        }\r\n                      }\r\n                        if(secureStorage.getItem(\"role\") === \"3D Admin\"){\r\n                          if(json.rows[i].status === 0){\r\n                              row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRI\")} >\r\n                              <option value=\"pending\" selected>Pending</option>\r\n                              <option value=\"progress\">In progress</option>\r\n                              <option value=\"ready\">Ready</option>\r\n                              <option value=\"rejected\">Rejected</option>\r\n                            </select>\r\n                              row.color = \"#www\"\r\n                          }else if(json.rows[i].status === 1){\r\n                            row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRI\")}>\r\n                            <option value=\"pending\">Pending</option>\r\n                            <option value=\"progress\" selected style={{backgroundColor:\"#yyy\"}}>In progress</option>\r\n                            <option value=\"ready\">Ready</option>\r\n                            <option value=\"rejected\">Rejected</option>\r\n                          </select>\r\n                              row.color = \"#yyy\"\r\n                          }else if(json.rows[i].status === 2){\r\n                            row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRI\")}>\r\n                            <option value=\"pending\">Pending</option>\r\n                            <option value=\"progress\">In progress</option>\r\n                            <option value=\"ready\" selected>Ready</option>\r\n                            <option value=\"rejected\">Rejected</option>\r\n                            </select>\r\n                              row.color = \"#ggg\"\r\n                          }else{\r\n                            row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRI\")}>\r\n                            <option value=\"pending\">Pending</option>\r\n                            <option value=\"progress\">In progress</option>\r\n                            <option value=\"ready\">Ready</option>\r\n                            <option value=\"rejected\" selected>Rejected</option>\r\n                           </select>\r\n                              row.color = \"#rrr\"\r\n                          }\r\n                          row.observations = <input type=\"text\" defaultValue={json.rows[i].observations} style={{width: \"310px\"}} onChange={(event)=>this.updateObservations(json.rows[i].incidence_number, event.target.value)}/>\r\n\r\n                        }else{\r\n                          if(json.rows[i].status === 0){\r\n                            row.status = \"Pending\"\r\n                            row.color = \"#www\"\r\n                          }else if(json.rows[i].status === 1){\r\n                              row.status = \"In progress\"\r\n                              row.color = \"#yyy\"\r\n                          }else if(json.rows[i].status === 2){\r\n                              row.status = \"Ready\"\r\n                              row.color = \"#ggg\"\r\n                          }else{\r\n                              row.status = \"Rejected\"\r\n                              row.color = \"#rrr\"\r\n                          }\r\n\r\n                          row.observations = json.rows[i].observations\r\n                        }\r\n                        rows.push(row)\r\n                    }\r\n                    \r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNRB\", options)\r\n                    .then(response => response.json())\r\n                    .then(async json => {\r\n                    var row = null\r\n                        for(let i = 0; i < json.rows.length; i++){\r\n                          if(json.rows[i].attach === 1){\r\n                            if(json.rows[i].accept_reject_date != null){\r\n                              row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19).toString().substring(0,10)}\r\n                            }else{\r\n                              row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: \"\"}\r\n                            }\r\n                          }else{\r\n                            if(json.rows[i].accept_reject_date != null){\r\n                              row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)}\r\n                            }else{\r\n                              row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/>, ar_date: \"\"}\r\n                            }\r\n                          }\r\n                            if(secureStorage.getItem(\"role\") === \"3D Admin\"){\r\n                              if(json.rows[i].status === 0){\r\n                                  row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRB\")} >\r\n                                  <option value=\"pending\" selected>Pending</option>\r\n                                  <option value=\"progress\">In progress</option>\r\n                                  <option value=\"ready\">Ready</option>\r\n                                  <option value=\"rejected\">Rejected</option>\r\n                                </select>\r\n                                  row.color = \"#www\"\r\n                              }else if(json.rows[i].status === 1){\r\n                                row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRB\")}>\r\n                                <option value=\"pending\">Pending</option>\r\n                                <option value=\"progress\" selected style={{backgroundColor:\"#yyy\"}}>In progress</option>\r\n                                <option value=\"ready\">Ready</option>\r\n                                <option value=\"rejected\">Rejected</option>\r\n                              </select>\r\n                                  row.color = \"#yyy\"\r\n                              }else if(json.rows[i].status === 2){\r\n                                row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRB\")}>\r\n                                <option value=\"pending\">Pending</option>\r\n                                <option value=\"progress\">In progress</option>\r\n                                <option value=\"ready\" selected>Ready</option>\r\n                                <option value=\"rejected\">Rejected</option>\r\n                                </select>\r\n                                  row.color = \"#ggg\"\r\n                              }else{\r\n                                row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRB\")}>\r\n                                <option value=\"pending\">Pending</option>\r\n                                <option value=\"progress\">In progress</option>\r\n                                <option value=\"ready\">Ready</option>\r\n                                <option value=\"rejected\" selected>Rejected</option>\r\n                               </select>\r\n                                  row.color = \"#rrr\"\r\n                              }\r\n\r\n                              row.observations = <input type=\"text\" defaultValue={json.rows[i].observations} style={{width: \"310px\"}} onChange={(event)=>this.updateObservations(json.rows[i].incidence_number, event.target.value)}/>\r\n                            \r\n                            }else{\r\n                              if(json.rows[i].status === 0){\r\n                                row.status = \"Pending\"\r\n                                row.color = \"#www\"\r\n                              }else if(json.rows[i].status === 1){\r\n                                  row.status = \"In progress\"\r\n                                  row.color = \"#yyy\"\r\n                              }else if(json.rows[i].status === 2){\r\n                                  row.status = \"Ready\"\r\n                                  row.color = \"#ggg\"\r\n                              }else{\r\n                                  row.status = \"Rejected\"\r\n                                  row.color = \"#rrr\"\r\n                              }\r\n\r\n                              row.observations = json.rows[i].observations\r\n                            }\r\n                            rows.push(row)\r\n                        }\r\n                        \r\n                        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNRIDS\", options)\r\n                        .then(response => response.json())\r\n                        .then(async json => {\r\n                        var row = null\r\n                            for(let i = 0; i < json.rows.length; i++){\r\n                              if(json.rows[i].accept_reject_date != null){\r\n                                row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNRIDSSpecPopUp incidence_number={json.rows[i].incidence_number} name={json.rows[i].name}/>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)}\r\n                              }else{\r\n                                row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNRIDSSpecPopUp incidence_number={json.rows[i].incidence_number} name={json.rows[i].name}/>, ar_date: \"\"}\r\n                              }\r\n                                if(secureStorage.getItem(\"role\") === \"3D Admin\"){\r\n                                  if(json.rows[i].status === 0){\r\n                                      row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRIDS\")} >\r\n                                      <option value=\"pending\" selected>Pending</option>\r\n                                      <option value=\"progress\">In progress</option>\r\n                                      <option value=\"ready\">Ready</option>\r\n                                      <option value=\"rejected\">Rejected</option>\r\n                                    </select>\r\n                                      row.color = \"#www\"\r\n                                  }else if(json.rows[i].status === 1){\r\n                                    row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRIDS\")}>\r\n                                    <option value=\"pending\">Pending</option>\r\n                                    <option value=\"progress\" selected style={{backgroundColor:\"#yyy\"}}>In progress</option>\r\n                                    <option value=\"ready\">Ready</option>\r\n                                    <option value=\"rejected\">Rejected</option>\r\n                                  </select>\r\n                                      row.color = \"#yyy\"\r\n                                  }else if(json.rows[i].status === 2){\r\n                                    row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRIDS\")}>\r\n                                    <option value=\"pending\">Pending</option>\r\n                                    <option value=\"progress\">In progress</option>\r\n                                    <option value=\"ready\" selected>Ready</option>\r\n                                    <option value=\"rejected\">Rejected</option>\r\n                                    </select>\r\n                                      row.color = \"#ggg\"\r\n                                  }else{\r\n                                    row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRIDS\")}>\r\n                                    <option value=\"pending\">Pending</option>\r\n                                    <option value=\"progress\">In progress</option>\r\n                                    <option value=\"ready\">Ready</option>\r\n                                    <option value=\"rejected\" selected>Rejected</option>\r\n                                   </select>\r\n                                      row.color = \"#rrr\"\r\n                                  }\r\n                                  row.observations = <input type=\"text\" defaultValue={json.rows[i].observations} style={{width: \"310px\"}} onChange={(event)=>this.updateObservations(json.rows[i].incidence_number, event.target.value)}/>\r\n\r\n                                }else{\r\n                                  if(json.rows[i].status === 0){\r\n                                    row.status = \"Pending\"\r\n                                    row.color = \"#www\"\r\n                                  }else if(json.rows[i].status === 1){\r\n                                      row.status = \"In progress\"\r\n                                      row.color = \"#yyy\"\r\n                                  }else if(json.rows[i].status === 2){\r\n                                      row.status = \"Ready\"\r\n                                      row.color = \"#ggg\"\r\n                                  }else{\r\n                                      row.status = \"Rejected\"\r\n                                      row.color = \"#rrr\"\r\n                                  }\r\n                                  row.observations = json.rows[i].observations\r\n                                }\r\n                                rows.push(row)\r\n                            }\r\n                            \r\n                            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getRP\", options)\r\n                            .then(response => response.json())\r\n                            .then(async json => {\r\n                            var row = null\r\n                                for(let i = 0; i < json.rows.length; i++){\r\n                                  if(json.rows[i].accept_reject_date != null){\r\n                                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerRPSpecPopUp incidence_number={json.rows[i].incidence_number} items={json.rows[i].items_to_report} scope={json.rows[i].scope} description={json.rows[i].description}/>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)}\r\n                                  }else{\r\n                                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerRPSpecPopUp incidence_number={json.rows[i].incidence_number} items={json.rows[i].items_to_report} scope={json.rows[i].scope} description={json.rows[i].description}/>, ar_date: \"\"}\r\n                                  }\r\n                                    if(secureStorage.getItem(\"role\") === \"3D Admin\"){\r\n                                      if(json.rows[i].status === 0){\r\n                                          row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"RP\")} >\r\n                                          <option value=\"pending\" selected>Pending</option>\r\n                                          <option value=\"progress\">In progress</option>\r\n                                          <option value=\"ready\">Ready</option>\r\n                                          <option value=\"rejected\">Rejected</option>\r\n                                        </select>\r\n                                          row.color = \"#www\"\r\n                                      }else if(json.rows[i].status === 1){\r\n                                        row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"RP\")}>\r\n                                        <option value=\"pending\">Pending</option>\r\n                                        <option value=\"progress\" selected style={{backgroundColor:\"#yyy\"}}>In progress</option>\r\n                                        <option value=\"ready\">Ready</option>\r\n                                        <option value=\"rejected\">Rejected</option>\r\n                                      </select>\r\n                                          row.color = \"#yyy\"\r\n                                      }else if(json.rows[i].status === 2){\r\n                                        row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"RP\")}>\r\n                                        <option value=\"pending\">Pending</option>\r\n                                        <option value=\"progress\">In progress</option>\r\n                                        <option value=\"ready\" selected>Ready</option>\r\n                                        <option value=\"rejected\">Rejected</option>\r\n                                        </select>\r\n                                          row.color = \"#ggg\"\r\n                                      }else{\r\n                                        row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"RP\")}>\r\n                                        <option value=\"pending\">Pending</option>\r\n                                        <option value=\"progress\">In progress</option>\r\n                                        <option value=\"ready\">Ready</option>\r\n                                        <option value=\"rejected\" selected>Rejected</option>\r\n                                       </select>\r\n                                          row.color = \"#rrr\"\r\n                                      }\r\n                                      row.observations = <input type=\"text\" defaultValue={json.rows[i].observations} style={{width: \"310px\"}} onChange={(event)=>this.updateObservations(json.rows[i].incidence_number, event.target.value)}/>\r\n\r\n                                    }else{\r\n                                      if(json.rows[i].status === 0){\r\n                                        row.status = \"Pending\"\r\n                                        row.color = \"#www\"\r\n                                      }else if(json.rows[i].status === 1){\r\n                                          row.status = \"In progress\"\r\n                                          row.color = \"#yyy\"\r\n                                      }else if(json.rows[i].status === 2){\r\n                                          row.status = \"Ready\"\r\n                                          row.color = \"#ggg\"\r\n                                      }else{\r\n                                          row.status = \"Rejected\"\r\n                                          row.color = \"#rrr\"\r\n                                      }\r\n                                      row.observations = json.rows[i].observations\r\n                                    }\r\n                                    rows.push(row)\r\n                                }\r\n\r\n                                // Sort the array based on the second element\r\n                                rows.sort(function(first, second) {\r\n                                  return second.created_at.localeCompare(first.created_at);\r\n                                });\r\n                                const filterRow = [{incidence_number: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Reference\" onChange={(e) => this.filter(0, e.target.value)}/></div>, user: <div><input type=\"text\" className=\"filter__input\" placeholder=\"User\" onChange={(e) => this.filter(1, e.target.value)}/></div>, created_at: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Date\" onChange={(e) => this.filter(2,e.target.value)}/></div>, ar_date: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Date\" onChange={(e) => this.filter(3,e.target.value)}/></div>, status: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Status\" onChange={(e) => this.filter(4,e.target.value)}/></div>}]\r\n                \r\n                                this.setState({data : rows, displayData: rows});\r\n                                await this.setState({filters : filterRow})\r\n\r\n                            })\r\n\r\n                        })\r\n\r\n                    })\r\n\r\n                })\r\n\r\n            })\r\n            \r\n        })\r\n\r\n  }\r\n\r\n\r\n  async componentDidUpdate(prevProps, prevState){\r\n    \r\n    if(prevProps !== this.props){\r\n\r\n      const options = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n    }\r\n\r\n    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNWC\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n          var rows = []\r\n          var row = null\r\n            for(let i = 0; i < json.rows.length; i++){\r\n                if(json.rows[i].attach === 1){\r\n                  if(json.rows[i].accept_reject_date != null){\r\n                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNWCSpecPopUp incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19).toString().substring(0,10)}\r\n                  }else{\r\n                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNWCSpecPopUp incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: \"\"}\r\n                  }\r\n                }else{\r\n                  if(json.rows[i].accept_reject_date != null){\r\n                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNWCSpecPopUp incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)}\r\n                  }else{\r\n                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNWCSpecPopUp incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/>, ar_date: \"\"}\r\n                  }\r\n                }\r\n\r\n                if(secureStorage.getItem(\"role\") === \"3D Admin\"){\r\n                  if(json.rows[i].status === 0){\r\n                      row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NWC\")} >\r\n                      <option value=\"pending\" selected>Pending</option>\r\n                      <option value=\"progress\">In progress</option>\r\n                      <option value=\"ready\">Ready</option>\r\n                      <option value=\"rejected\">Rejected</option>\r\n                    </select>\r\n                      row.color = \"#www\"\r\n                  }else if(json.rows[i].status === 1){\r\n                    row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NWC\")}>\r\n                    <option value=\"pending\">Pending</option>\r\n                    <option value=\"progress\" selected style={{backgroundColor:\"#yyy\"}}>In progress</option>\r\n                    <option value=\"ready\">Ready</option>\r\n                    <option value=\"rejected\">Rejected</option>\r\n                  </select>\r\n                      row.color = \"#yyy\"\r\n                  }else if(json.rows[i].status === 2){\r\n                    row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NWC\")}>\r\n                    <option value=\"pending\">Pending</option>\r\n                    <option value=\"progress\">In progress</option>\r\n                    <option value=\"ready\" selected>Ready</option>\r\n                    <option value=\"rejected\">Rejected</option>\r\n                    </select>\r\n                      row.color = \"#ggg\"\r\n                  }else{\r\n                    row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NWC\")}>\r\n                    <option value=\"pending\">Pending</option>\r\n                    <option value=\"progress\">In progress</option>\r\n                    <option value=\"ready\">Ready</option>\r\n                    <option value=\"rejected\" selected>Rejected</option>\r\n                   </select>\r\n                      row.color = \"#rrr\"\r\n                  }\r\n                  row.observations = <input type=\"text\" defaultValue={json.rows[i].observations} style={{width: \"310px\"}} onChange={(event)=>this.updateObservations(json.rows[i].incidence_number, event.target.value)}/>\r\n\r\n                }else{\r\n                  if(json.rows[i].status === 0){\r\n                    row.status = \"Pending\"\r\n                    row.color = \"#www\"\r\n                  }else if(json.rows[i].status === 1){\r\n                      row.status = \"In progress\"\r\n                      row.color = \"#yyy\"\r\n                  }else if(json.rows[i].status === 2){\r\n                      row.status = \"Ready\"\r\n                      row.color = \"#ggg\"\r\n                  }else{\r\n                      row.status = \"Rejected\"\r\n                      row.color = \"#rrr\"\r\n                  }\r\n                  row.observations = json.rows[i].observations\r\n                }\r\n                \r\n                rows.push(row)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNVN\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n            var row = null\r\n                for(let i = 0; i < json.rows.length; i++){\r\n                  if(json.rows[i].attach === 1){\r\n                    if(json.rows[i].accept_reject_date != null){\r\n                      row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNVNSpecPopUp name={json.rows[i].name} incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19).toString().substring(0,10)}\r\n                    }else{\r\n                      row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNVNSpecPopUp name={json.rows[i].name} incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: \"\"}\r\n                    }\r\n                  }else{\r\n                    if(json.rows[i].accept_reject_date != null){\r\n                      row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNVNSpecPopUp name={json.rows[i].name} incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)}\r\n                    }else{\r\n                      row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNVNSpecPopUp name={json.rows[i].name} incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/>, ar_date: \"\"}\r\n                    }\r\n                  }\r\n                    if(secureStorage.getItem(\"role\") === \"3D Admin\"){\r\n                      if(json.rows[i].status === 0){\r\n                          row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NVN\")} >\r\n                          <option value=\"pending\" selected>Pending</option>\r\n                          <option value=\"progress\">In progress</option>\r\n                          <option value=\"ready\">Ready</option>\r\n                          <option value=\"rejected\">Rejected</option>\r\n                        </select>\r\n                          row.color = \"#www\"\r\n                      }else if(json.rows[i].status === 1){\r\n                        row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NVN\")}>\r\n                        <option value=\"pending\">Pending</option>\r\n                        <option value=\"progress\" selected style={{backgroundColor:\"#yyy\"}}>In progress</option>\r\n                        <option value=\"ready\">Ready</option>\r\n                        <option value=\"rejected\">Rejected</option>\r\n                      </select>\r\n                          row.color = \"#yyy\"\r\n                      }else if(json.rows[i].status === 2){\r\n                        row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NVN\")}>\r\n                        <option value=\"pending\">Pending</option>\r\n                        <option value=\"progress\">In progress</option>\r\n                        <option value=\"ready\" selected>Ready</option>\r\n                        <option value=\"rejected\">Rejected</option>\r\n                        </select>\r\n                          row.color = \"#ggg\"\r\n                      }else{\r\n                        row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NVN\")}>\r\n                        <option value=\"pending\">Pending</option>\r\n                        <option value=\"progress\">In progress</option>\r\n                        <option value=\"ready\">Ready</option>\r\n                        <option value=\"rejected\" selected>Rejected</option>\r\n                       </select>\r\n                          row.color = \"#rrr\"\r\n                      }\r\n                      row.observations = <input type=\"text\" defaultValue={json.rows[i].observations} style={{width: \"310px\"}} onChange={(event)=>this.updateObservations(json.rows[i].incidence_number, event.target.value)}/>\r\n\r\n                    }else{\r\n                      if(json.rows[i].status === 0){\r\n                        row.status = \"Pending\"\r\n                        row.color = \"#www\"\r\n                      }else if(json.rows[i].status === 1){\r\n                          row.status = \"In progress\"\r\n                          row.color = \"#yyy\"\r\n                      }else if(json.rows[i].status === 2){\r\n                          row.status = \"Ready\"\r\n                          row.color = \"#ggg\"\r\n                      }else{\r\n                          row.status = \"Rejected\"\r\n                          row.color = \"#rrr\"\r\n                      }\r\n                      row.observations = json.rows[i].observations\r\n                    }\r\n                    rows.push(row)\r\n                }\r\n                \r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNRI\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n                var row = null\r\n                    for(let i = 0; i < json.rows.length; i++){\r\n                      if(json.rows[i].attach === 1){\r\n                        if(json.rows[i].accept_reject_date != null){\r\n                          row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19).toString().substring(0,10)}\r\n                        }else{\r\n                          row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: \"\"}\r\n                        }\r\n                      }else{\r\n                        if(json.rows[i].accept_reject_date != null){\r\n                          row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)}\r\n                        }else{\r\n                          row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/>, ar_date: \"\"}\r\n                        }\r\n                      }\r\n                        if(secureStorage.getItem(\"role\") === \"3D Admin\"){\r\n                          if(json.rows[i].status === 0){\r\n                              row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRI\")} >\r\n                              <option value=\"pending\" selected>Pending</option>\r\n                              <option value=\"progress\">In progress</option>\r\n                              <option value=\"ready\">Ready</option>\r\n                              <option value=\"rejected\">Rejected</option>\r\n                            </select>\r\n                              row.color = \"#www\"\r\n                          }else if(json.rows[i].status === 1){\r\n                            row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRI\")}>\r\n                            <option value=\"pending\">Pending</option>\r\n                            <option value=\"progress\" selected style={{backgroundColor:\"#yyy\"}}>In progress</option>\r\n                            <option value=\"ready\">Ready</option>\r\n                            <option value=\"rejected\">Rejected</option>\r\n                          </select>\r\n                              row.color = \"#yyy\"\r\n                          }else if(json.rows[i].status === 2){\r\n                            row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRI\")}>\r\n                            <option value=\"pending\">Pending</option>\r\n                            <option value=\"progress\">In progress</option>\r\n                            <option value=\"ready\" selected>Ready</option>\r\n                            <option value=\"rejected\">Rejected</option>\r\n                            </select>\r\n                              row.color = \"#ggg\"\r\n                          }else{\r\n                            row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRI\")}>\r\n                            <option value=\"pending\">Pending</option>\r\n                            <option value=\"progress\">In progress</option>\r\n                            <option value=\"ready\">Ready</option>\r\n                            <option value=\"rejected\" selected>Rejected</option>\r\n                           </select>\r\n                              row.color = \"#rrr\"\r\n                          }\r\n                          row.observations = <input type=\"text\" defaultValue={json.rows[i].observations} style={{width: \"310px\"}} onChange={(event)=>this.updateObservations(json.rows[i].incidence_number, event.target.value)}/>\r\n\r\n                        }else{\r\n                          if(json.rows[i].status === 0){\r\n                            row.status = \"Pending\"\r\n                            row.color = \"#www\"\r\n                          }else if(json.rows[i].status === 1){\r\n                              row.status = \"In progress\"\r\n                              row.color = \"#yyy\"\r\n                          }else if(json.rows[i].status === 2){\r\n                              row.status = \"Ready\"\r\n                              row.color = \"#ggg\"\r\n                          }else{\r\n                              row.status = \"Rejected\"\r\n                              row.color = \"#rrr\"\r\n                          }\r\n                          row.observations = json.rows[i].observations\r\n                        }\r\n                        rows.push(row)\r\n                    }\r\n                    \r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNRB\", options)\r\n                    .then(response => response.json())\r\n                    .then(async json => {\r\n                    var row = null\r\n                        for(let i = 0; i < json.rows.length; i++){\r\n                          if(json.rows[i].attach === 1){\r\n                            if(json.rows[i].accept_reject_date != null){\r\n                              row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19).toString().substring(0,10)}\r\n                            }else{\r\n                              row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <div><QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/><img src={AttachIcon} alt=\"att\" className=\"attach__icon\" style={{marginRight:\"0px\"}}></img></div>, ar_date: \"\"}\r\n                            }\r\n                          }else{\r\n                            if(json.rows[i].accept_reject_date != null){\r\n                              row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)}\r\n                            }else{\r\n                              row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/>, ar_date: \"\"}\r\n                            }\r\n                          }\r\n                            if(secureStorage.getItem(\"role\") === \"3D Admin\"){\r\n                              if(json.rows[i].status === 0){\r\n                                  row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRB\")} >\r\n                                  <option value=\"pending\" selected>Pending</option>\r\n                                  <option value=\"progress\">In progress</option>\r\n                                  <option value=\"ready\">Ready</option>\r\n                                  <option value=\"rejected\">Rejected</option>\r\n                                </select>\r\n                                  row.color = \"#www\"\r\n                              }else if(json.rows[i].status === 1){\r\n                                row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRB\")}>\r\n                                <option value=\"pending\">Pending</option>\r\n                                <option value=\"progress\" selected style={{backgroundColor:\"#yyy\"}}>In progress</option>\r\n                                <option value=\"ready\">Ready</option>\r\n                                <option value=\"rejected\">Rejected</option>\r\n                              </select>\r\n                                  row.color = \"#yyy\"\r\n                              }else if(json.rows[i].status === 2){\r\n                                row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRB\")}>\r\n                                <option value=\"pending\">Pending</option>\r\n                                <option value=\"progress\">In progress</option>\r\n                                <option value=\"ready\" selected>Ready</option>\r\n                                <option value=\"rejected\">Rejected</option>\r\n                                </select>\r\n                                  row.color = \"#ggg\"\r\n                              }else{\r\n                                row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRB\")}>\r\n                                <option value=\"pending\">Pending</option>\r\n                                <option value=\"progress\">In progress</option>\r\n                                <option value=\"ready\">Ready</option>\r\n                                <option value=\"rejected\" selected>Rejected</option>\r\n                               </select>\r\n                                  row.color = \"#rrr\"\r\n                              }\r\n                              row.observations = <input type=\"text\" defaultValue={json.rows[i].observations} style={{width: \"310px\"}} onChange={(event)=>this.updateObservations(json.rows[i].incidence_number, event.target.value)}/>\r\n\r\n                            }else{\r\n                              if(json.rows[i].status === 0){\r\n                                row.status = \"Pending\"\r\n                                row.color = \"#www\"\r\n                              }else if(json.rows[i].status === 1){\r\n                                  row.status = \"In progress\"\r\n                                  row.color = \"#yyy\"\r\n                              }else if(json.rows[i].status === 2){\r\n                                  row.status = \"Ready\"\r\n                                  row.color = \"#ggg\"\r\n                              }else{\r\n                                  row.status = \"Rejected\"\r\n                                  row.color = \"#rrr\"\r\n                              }\r\n                              row.observations = json.rows[i].observations\r\n                            }\r\n                            rows.push(row)\r\n                        }\r\n                        \r\n                        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNRIDS\", options)\r\n                        .then(response => response.json())\r\n                        .then(async json => {\r\n                        var row = null\r\n                            for(let i = 0; i < json.rows.length; i++){\r\n                              if(json.rows[i].accept_reject_date != null){\r\n                                row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNRIDSSpecPopUp incidence_number={json.rows[i].incidence_number} name={json.rows[i].name}/>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)}\r\n                              }else{\r\n                                row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNRIDSSpecPopUp incidence_number={json.rows[i].incidence_number} name={json.rows[i].name}/>, ar_date: \"\"}\r\n                              }\r\n                                if(secureStorage.getItem(\"role\") === \"3D Admin\"){\r\n                                  if(json.rows[i].status === 0){\r\n                                      row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRIDS\")} >\r\n                                      <option value=\"pending\" selected>Pending</option>\r\n                                      <option value=\"progress\">In progress</option>\r\n                                      <option value=\"ready\">Ready</option>\r\n                                      <option value=\"rejected\">Rejected</option>\r\n                                    </select>\r\n                                      row.color = \"#www\"\r\n                                  }else if(json.rows[i].status === 1){\r\n                                    row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRIDS\")}>\r\n                                    <option value=\"pending\">Pending</option>\r\n                                    <option value=\"progress\" selected style={{backgroundColor:\"#yyy\"}}>In progress</option>\r\n                                    <option value=\"ready\">Ready</option>\r\n                                    <option value=\"rejected\">Rejected</option>\r\n                                  </select>\r\n                                      row.color = \"#yyy\"\r\n                                  }else if(json.rows[i].status === 2){\r\n                                    row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRIDS\")}>\r\n                                    <option value=\"pending\">Pending</option>\r\n                                    <option value=\"progress\">In progress</option>\r\n                                    <option value=\"ready\" selected>Ready</option>\r\n                                    <option value=\"rejected\">Rejected</option>\r\n                                    </select>\r\n                                      row.color = \"#ggg\"\r\n                                  }else{\r\n                                    row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"NRIDS\")}>\r\n                                    <option value=\"pending\">Pending</option>\r\n                                    <option value=\"progress\">In progress</option>\r\n                                    <option value=\"ready\">Ready</option>\r\n                                    <option value=\"rejected\" selected>Rejected</option>\r\n                                   </select>\r\n                                      row.color = \"#rrr\"\r\n                                  }\r\n                                  row.observations = <input type=\"text\" defaultValue={json.rows[i].observations} style={{width: \"310px\"}} onChange={(event)=>this.updateObservations(json.rows[i].incidence_number, event.target.value)}/>\r\n\r\n                                }else{\r\n                                  if(json.rows[i].status === 0){\r\n                                    row.status = \"Pending\"\r\n                                    row.color = \"#www\"\r\n                                  }else if(json.rows[i].status === 1){\r\n                                      row.status = \"In progress\"\r\n                                      row.color = \"#yyy\"\r\n                                  }else if(json.rows[i].status === 2){\r\n                                      row.status = \"Ready\"\r\n                                      row.color = \"#ggg\"\r\n                                  }else{\r\n                                      row.status = \"Rejected\"\r\n                                      row.color = \"#rrr\"\r\n                                  }\r\n                                  row.observations = json.rows[i].observations\r\n                                }\r\n                                rows.push(row)\r\n                            }\r\n                            \r\n                            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getRP\", options)\r\n                            .then(response => response.json())\r\n                            .then(async json => {\r\n                            var row = null\r\n                                for(let i = 0; i < json.rows.length; i++){\r\n                                  if(json.rows[i].accept_reject_date != null){\r\n                                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerRPSpecPopUp incidence_number={json.rows[i].incidence_number} items={json.rows[i].items_to_report} scope={json.rows[i].scope} description={json.rows[i].description}/>, ar_date: json.rows[i].accept_reject_date.toString().substring(0,10) + \" \"+ json.rows[i].accept_reject_date.toString().substring(11,19)}\r\n                                  }else{\r\n                                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, description: json.rows[i].description, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerRPSpecPopUp incidence_number={json.rows[i].incidence_number} items={json.rows[i].items_to_report} scope={json.rows[i].scope} description={json.rows[i].description}/>, ar_date: \"\"}\r\n                                  }\r\n                                    if(secureStorage.getItem(\"role\") === \"3D Admin\"){\r\n                                      if(json.rows[i].status === 0){\r\n                                          row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"RP\")} >\r\n                                          <option value=\"pending\" selected>Pending</option>\r\n                                          <option value=\"progress\">In progress</option>\r\n                                          <option value=\"ready\">Ready</option>\r\n                                          <option value=\"rejected\">Rejected</option>\r\n                                        </select>\r\n                                          row.color = \"#www\"\r\n                                      }else if(json.rows[i].status === 1){\r\n                                        row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"RP\")}>\r\n                                        <option value=\"pending\">Pending</option>\r\n                                        <option value=\"progress\" selected style={{backgroundColor:\"#yyy\"}}>In progress</option>\r\n                                        <option value=\"ready\">Ready</option>\r\n                                        <option value=\"rejected\">Rejected</option>\r\n                                      </select>\r\n                                          row.color = \"#yyy\"\r\n                                      }else if(json.rows[i].status === 2){\r\n                                        row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"RP\")}>\r\n                                        <option value=\"pending\">Pending</option>\r\n                                        <option value=\"progress\">In progress</option>\r\n                                        <option value=\"ready\" selected>Ready</option>\r\n                                        <option value=\"rejected\">Rejected</option>\r\n                                        </select>\r\n                                          row.color = \"#ggg\"\r\n                                      }else{\r\n                                        row.status = <select name=\"status\" id=\"status\" onChange={(event)=> this.statusChange(json.rows[i].incidence_number, event.target.value, \"RP\")}>\r\n                                        <option value=\"pending\">Pending</option>\r\n                                        <option value=\"progress\">In progress</option>\r\n                                        <option value=\"ready\">Ready</option>\r\n                                        <option value=\"rejected\" selected>Rejected</option>\r\n                                       </select>\r\n                                          row.color = \"#rrr\"\r\n                                      }\r\n                                      row.observations = <input type=\"text\" defaultValue={json.rows[i].observations} style={{width: \"310px\"}} onChange={(event)=>this.updateObservations(json.rows[i].incidence_number, event.target.value)}/>\r\n\r\n                                    }else{\r\n                                      if(json.rows[i].status === 0){\r\n                                        row.status = \"Pending\"\r\n                                        row.color = \"#www\"\r\n                                      }else if(json.rows[i].status === 1){\r\n                                          row.status = \"In progress\"\r\n                                          row.color = \"#yyy\"\r\n                                      }else if(json.rows[i].status === 2){\r\n                                          row.status = \"Ready\"\r\n                                          row.color = \"#ggg\"\r\n                                      }else{\r\n                                          row.status = \"Rejected\"\r\n                                          row.color = \"#rrr\"\r\n                                      }\r\n                                      row.observations = json.rows[i].observations\r\n                                    }\r\n                                    rows.push(row)\r\n                                }\r\n\r\n                                // Sort the array based on the second element\r\n                                rows.sort(function(first, second) {\r\n                                  return second.created_at.localeCompare(first.created_at);\r\n                                });\r\n                                const filterRow = [{incidence_number: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Reference\" onChange={(e) => this.filter(0, e.target.value)}/></div>, user: <div><input type=\"text\" className=\"filter__input\" placeholder=\"User\" onChange={(e) => this.filter(1, e.target.value)}/></div>, created_at: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Date\" onChange={(e) => this.filter(2,e.target.value)}/></div>, ar_date: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Date\" onChange={(e) => this.filter(3,e.target.value)}/></div>, status: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Status\" onChange={(e) => this.filter(4,e.target.value)}/></div>}]\r\n                \r\n                                this.setState({data : rows, displayData: rows});\r\n                                await this.setState({filters : filterRow})\r\n\r\n                            })\r\n\r\n                        })\r\n\r\n                    })\r\n\r\n                })\r\n\r\n            })\r\n            \r\n        })\r\n\r\n      }\r\n    \r\n\r\n  }\r\n  \r\n\r\n  async filter(column, value){\r\n    let fd = this.state.filterData\r\n    fd[column] = value\r\n    await this.setState({filterData: fd})\r\n\r\n    let auxDisplayData = this.state.data\r\n    let resultData = []\r\n    let fil, exists = null\r\n    for(let i = 0; i < auxDisplayData.length; i++){\r\n      exists = true\r\n      for(let column = 0; column < Object.keys(auxDisplayData[i]).length-1; column ++){\r\n        \r\n        fil = Object.keys(auxDisplayData[i])[column]\r\n        if(fil === \"specifications\"){\r\n          fil = \"status\"\r\n        }\r\n        if(fil === \"status\"){\r\n          if(auxDisplayData[i][fil].props){\r\n            for(let p = 0; p < auxDisplayData[i][fil].props.children.length; p++){\r\n              if(auxDisplayData[i][fil].props.children[p].props.selected){\r\n                if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].props.children[p].props.children.includes(this.state.filterData[column])){\r\n                  exists = false\r\n                }\r\n              }\r\n            }\r\n          }else if(auxDisplayData[i][fil]){\r\n            if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].includes(this.state.filterData[column])){\r\n              exists = false\r\n            }\r\n          }else{\r\n            if(this.state.filterData[column] !== \"\" && this.state.filterData[column]){\r\n              exists = false\r\n            }\r\n          }\r\n          \r\n        }else{\r\n          if(auxDisplayData[i][fil]){\r\n            if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].includes(this.state.filterData[column])){\r\n              exists = false\r\n            }\r\n          }\r\n          \r\n        }\r\n        \r\n      }\r\n      if(exists){\r\n        resultData.push(auxDisplayData[i])\r\n      }\r\n    }\r\n    await this.setState({displayData: resultData})\r\n  }\r\n\r\n  async updateObservations(incidence_number, observations){\r\n    let observationsAux = this.state.observations\r\n    observationsAux[incidence_number] = observations\r\n    await this.setState({observations: observationsAux})\r\n    this.props.updateObservations(this.state.observations)\r\n  }\r\n\r\n  \r\n  getColumnSearchProps = dataIndex => ({\r\n    \r\n    render: text => \r\n      \r\n      text\r\n    \r\n      \r\n  });\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys, selectedRows) => {\r\n    let ids = []\r\n    for(let i = 0; i < selectedRows.length; i++){\r\n      ids.push(selectedRows[i].id.props.children)\r\n    }\r\n    this.setState({\r\n      selectedRowsKeys: selectedRowKeys,\r\n      selectedRows: selectedRows\r\n    })\r\n    //this.setState({ selectedRows: selectedRows });\r\n    this.props.onChange(ids);\r\n    \r\n  };\r\n  \r\n\r\n  render() {\r\n\r\n    const columns = [\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Reference</center>,\r\n        dataIndex: 'incidence_number',\r\n        key: 'incidence_number',\r\n        ...this.getColumnSearchProps('incidence_number'),\r\n        sorter:{\r\n          compare: (a, b) => a.incidence_number.localeCompare(b.incidence_number),\r\n        },\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">User</center>,\r\n        dataIndex: 'user',\r\n        key: 'user',\r\n        ...this.getColumnSearchProps('user'),\r\n        sorter:{\r\n          compare: (a, b) => a.user.localeCompare(b.user),\r\n        },\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Description</center>,\r\n        dataIndex: 'description',\r\n        key: 'description',\r\n        ...this.getColumnSearchProps('description'),\r\n        sorter:{\r\n          compare: (a, b) => a.description.localeCompare(b.description),\r\n        },\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">Date</div>,\r\n        dataIndex: 'created_at',\r\n        key: 'created_at',\r\n        ...this.getColumnSearchProps('created_at'),\r\n        sorter: {\r\n          compare: (a, b) => { return a.created_at.localeCompare(b.created_at)},\r\n        },\r\n        \r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Actions</center>,\r\n        dataIndex: 'specifications',\r\n        key: 'specifications',\r\n        ...this.getColumnSearchProps('specifications'),\r\n        width: \"120px\"\r\n      },  \r\n      {\r\n        title: <center className=\"dataTable__header__text\">Observations</center>,\r\n        dataIndex: 'observations',\r\n        key: 'observations',\r\n        ...this.getColumnSearchProps('observations'),\r\n      },  \r\n      {\r\n        title: <center className=\"dataTable__header__text\">Accepted/Rejected Date</center>,\r\n        dataIndex: 'ar_date',\r\n        key: 'ar_date',\r\n        ...this.getColumnSearchProps('ar_date'),\r\n        width: \"250px\",\r\n        sorter: {\r\n          compare: (a, b) => { return a.ar_date.localeCompare(b.ar_date)},\r\n        },\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Status</center>,\r\n        dataIndex: 'status',\r\n        key: 'status',\r\n        ...this.getColumnSearchProps('status'),\r\n        sorter:{\r\n          compare: (a, b) => a.status.localeCompare(b.status),\r\n        },\r\n        width: '160px'\r\n      },\r\n    ]\r\n\r\n    var totalElements = null;\r\n    if (this.state.data.length === 0){\r\n      totalElements = null;\r\n    }else{\r\n      totalElements = (<div style={{position: \"absolute\", bottom: 25, left:0}}>\r\n      <b>Total elements: {this.state.data.length}</b>\r\n     </div>);\r\n    }\r\n    return (\r\n      <div>\r\n        {this.state.updateData}\r\n        <div className=\"estimatedDataTable__container\" style={{width:\"auto\"}}>\r\n        <Table className=\"customTable\" bordered = {true} columns={columns} dataSource={this.state.displayData} style={{ height: '500px' }} scroll={{y:400}} pagination={{disabled:true, defaultPageSize:5000, hideOnSinglePage:true}} size=\"small\"\r\n         rowClassName= {(record) => record.color.replace('#', '')}/>\r\n          <Table className=\"filter__table\" pagination={{disabled:true}} scroll={{y:400}} showHeader = {false} bordered = {true} columns={columns} dataSource={this.state.filters} size=\"small\"/> \r\n          {totalElements}\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QTrackerViewDataTable;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerRequestsDataTable\\csptrackerRequestsDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\deleteUserConfPopUp\\deleteUserConfPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\manageRolesPopUp\\manageRolesPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadElectricalEstimatedPopUp\\uploadElectricalEstimatedPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateBOMPopUp\\updateBOMPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadPipesEstimatedPopUp\\uploadPipesEstimatedPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadCivilModelledPopUp\\uploadCivilModelledPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadElectricalModelledPopUp\\uploadElectricalModelledPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadCivilEstimtedPopUp\\uploadCivilEstimtedPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadInstrumentationModelledPopUp\\uploadInstrumentationModelledPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadInstrumentationEstimatedPopUp\\uploadInstrumentationEstimatedPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadEquisEstimatedPopUp\\uploadEquisEstimatedPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadEquisModelledPopUp\\uploadEquisModelledPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadReportPopUp\\uploadReportPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRIDSSpecPopUp\\qtrackerNRIDSSpecPopUp.js",["1273"],"import React, { Component } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class QtrackerNRIDSSpecPopUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible : false,\r\n            content: null,\r\n        }\r\n    }\r\n\r\n    getAttach(fileName){\r\n\r\n        const options = {\r\n          method: \"GET\",\r\n          headers: {\r\n              \"Content-Type\": \"application/pdf\"\r\n          }\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getAttach/\"+fileName, options)\r\n        .then(res => res.blob())\r\n        .then(response => {\r\n          const file = new Blob([response], {\r\n            type: \"application/pdf\"\r\n          });\r\n          //Build a URL from the file\r\n          const fileURL = URL.createObjectURL(file);\r\n          //Open the URL on new Window\r\n          let w = window.open(fileURL);\r\n    \r\n            w.addEventListener(\"load\", function() {\r\n              setTimeout(()=> w.document.title = fileName\r\n              , 300);\r\n    \r\n    \r\n            });\r\n    \r\n            // create <a> tag dinamically\r\n            var fileLink = document.createElement('a');\r\n            fileLink.href = fileURL;\r\n    \r\n            // it forces the name of the downloaded file\r\n            fileLink.download = fileName;\r\n    \r\n            // triggers the click event\r\n            fileLink.click();\r\n    \r\n    \r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n      }\r\n\r\n    openModal() {\r\n\r\n        this.setState({\r\n            visible : true\r\n        });\r\n    }\r\n\r\n    closeModal() {\r\n        this.setState({\r\n            visible : false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginRight:\"5px\", marginLeft:\"5px\", float:\"left\"}}>\r\n                <button class=\"btn btn-info\" style={{fontSize:\"16px\", padding:\"2px 5px 2px 5px\"}} onClick={() => this.openModal()}>Details</button>\r\n                <div>\r\n                    <Modal visible={this.state.visible} width=\"700\" height=\"400\" effect=\"fadeInUp\" onClickAway={() => this.closeModal()}>\r\n                    <center className=\"popUp__title\"><h3><strong>{this.props.incidence_number}</strong></h3></center>\r\n                    \r\n                    <table className=\"specs__container\">\r\n                        <tr className=\"specs__row\">                   \r\n                        <td style={{border: \"0.28px solid #D2D2D2\", width:\"150px\", verticalAlign:\"middle\", textAlign:\"center\", borderRadius:\"5px 0px 0px 5px\"}}>\r\n                            <p className=\"specs__spec__text\">NAME</p>\r\n                        </td>\r\n                        <td style={{border: \"0.28px solid #D2D2D2\", width:\"465px\", verticalAlign:\"middle\", borderRadius:\"0px 5px 5px 0px\"}}>\r\n                            <p className=\"specs__description__text\">{this.props.name}</p>\r\n                        </td>              \r\n                        </tr>\r\n\r\n                        {this.state.descriptionComponent} \r\n                        {this.state.attachComponent}\r\n                    </table>            \r\n                                \r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerRPSpecPopUp\\qtrackerRPSpecPopUp.js",["1274"],"import React, { Component } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class QtrackerRPSpecPopUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible : false,\r\n            content: null,\r\n        }\r\n    }\r\n\r\n    getAttach(fileName){\r\n\r\n        const options = {\r\n          method: \"GET\",\r\n          headers: {\r\n              \"Content-Type\": \"application/pdf\"\r\n          }\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getAttach/\"+fileName, options)\r\n        .then(res => res.blob())\r\n        .then(response => {\r\n          const file = new Blob([response], {\r\n            type: \"application/pdf\"\r\n          });\r\n          //Build a URL from the file\r\n          const fileURL = URL.createObjectURL(file);\r\n          //Open the URL on new Window\r\n          let w = window.open(fileURL);\r\n    \r\n            w.addEventListener(\"load\", function() {\r\n              setTimeout(()=> w.document.title = fileName\r\n              , 300);\r\n    \r\n    \r\n            });\r\n    \r\n            // create <a> tag dinamically\r\n            var fileLink = document.createElement('a');\r\n            fileLink.href = fileURL;\r\n    \r\n            // it forces the name of the downloaded file\r\n            fileLink.download = fileName;\r\n    \r\n            // triggers the click event\r\n            fileLink.click();\r\n    \r\n    \r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n      }\r\n\r\n    openModal() {\r\n\r\n        this.setState({\r\n            visible : true\r\n        });\r\n    }\r\n\r\n    closeModal() {\r\n        this.setState({\r\n            visible : false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginRight:\"5px\", marginLeft:\"5px\", float:\"left\"}}>\r\n                <button class=\"btn btn-info\" style={{fontSize:\"16px\", padding:\"2px 5px 2px 5px\"}} onClick={() => this.openModal()}>Details</button>\r\n                <div>\r\n                    <Modal visible={this.state.visible} width=\"700\" height=\"400\" effect=\"fadeInUp\" onClickAway={() => this.closeModal()}>\r\n                    <center className=\"popUp__title\"><h3><strong>{this.props.incidence_number}</strong></h3></center>\r\n                    \r\n                    <table className=\"specs__container\">\r\n                        <tr className=\"specs__row\">                   \r\n                        <td style={{border: \"0.28px solid #D2D2D2\", width:\"150px\", verticalAlign:\"middle\", textAlign:\"center\", borderRadius:\"5px 0px 0px 0px\"}}>\r\n                            <p className=\"specs__spec__text\">ITEMS</p>\r\n                        </td>\r\n                        <td style={{border: \"0.28px solid #D2D2D2\", width:\"465px\", verticalAlign:\"middle\", borderRadius:\"0px 5px 0px 0px\"}}>\r\n                            <p className=\"specs__description__text\">{this.props.items}</p>\r\n                        </td>              \r\n                        </tr>\r\n                        <tr className=\"specs__row\">                   \r\n                        <td style={{border: \"0.28px solid #D2D2D2\", width:\"150px\", verticalAlign:\"middle\", textAlign:\"center\"}}>\r\n                            <p className=\"specs__spec__text\">SCOPE</p>\r\n                        </td>\r\n                        <td style={{border: \"0.28px solid #D2D2D2\", width:\"465px\", verticalAlign:\"middle\"}}>\r\n                            <p className=\"specs__description__text\">{this.props.scope}</p>\r\n                        </td>              \r\n                        </tr>\r\n                        <tr className=\"specs__row\">                   \r\n                        <td style={{border: \"0.28px solid #D2D2D2\", width:\"150px\", verticalAlign:\"middle\", textAlign:\"center\", borderRadius:\"5px 0px 0px 0px\"}}>\r\n                            <p className=\"specs__spec__text\">DESCRIPTION</p>\r\n                        </td>\r\n                        <td style={{border: \"0.28px solid #D2D2D2\", width:\"465px\", verticalAlign:\"middle\", borderRadius:\"0px 5px 0px 0px\"}}>\r\n                            <p className=\"specs__description__text\">{this.props.description}</p>\r\n                        </td>              \r\n                        </tr>\r\n                    </table>            \r\n                                \r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRISpecPopUp\\qtrackerNRISpecPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRBSpecPopUp\\qtrackerNRBSpecPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNVNSpecPopUp\\qtrackerNVNSpecPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNWCSpecPopUp\\qtrackerNWCSpecPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\byPassPopUp\\byPassPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\commentPopUp\\commentPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\revisionPopUp\\revisionPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadPopUp\\uploadPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadProcInst\\uploadProcInst.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\holdsPopUp\\holdsPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\cancelRevPopUp\\cancelRevPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\renamePopUp\\renamePopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\newRevPopUp\\newRevPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateMassivePopUp\\updateMassivePopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\addUserPopUp\\addUserPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\holdComment\\holdComment.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\actionExtra\\actionExtra.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\cancelIso\\cancelIso.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\forceClaimPopUp\\forceClaimPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerRequestPopUp\\csptrackerRequestPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\elecExcelEdit\\elecExcelEdit.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\csptrackerDataTable\\csptrackerDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\elecExcel\\elecExcel.js",["1275"],"import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { HotTable } from '@handsontable/react';\r\nimport 'handsontable/dist/handsontable.full.css';\r\n\r\nclass ElecExcel extends React.Component{\r\n  state = {\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    typesData: [],\r\n    stepsData: [],\r\n    progressData: [],\r\n    tab: this.props.currentTab,\r\n    selectedRows: [],\r\n    selectedRowsKeys: [],\r\n    updateData: this.props.updateData,\r\n    username: \"\",\r\n    acronyms : null,\r\n    steps: []\r\n  };\r\n\r\n  async componentDidMount(){\r\n\r\n    const options = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n    }\r\n\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/electrical/types\", options)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      var rows = []\r\n      var row = null\r\n      rows.push({\"Code\": \"Code\", \"Name\": \"Name\", \"Weight\": \"Weight\"})\r\n      for(let i = 0; i < json.rows.length; i++){\r\n\r\n          row = {\"Code\": json.rows[i].code, \"Name\": json.rows[i].name, \"Weight\": json.rows[i].weight, id: json.rows[i].id}\r\n\r\n          for(let j = 0; j < this.state.steps.length; j++){\r\n            let currentStep = this.state.steps[j].toString()\r\n            row[currentStep] = json.rows[i][currentStep]\r\n          }\r\n          rows.push(row)\r\n      }\r\n      this.setState({typesData : rows, selectedRows: []});\r\n\r\n  }) \r\n\r\n  fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/electrical/steps\", options)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      var rows = []\r\n      var row = null\r\n      rows.push({\"Name\":\"Name\", \"Percentage\":\"Percentage\"})\r\n      for(let i = 0; i < json.rows.length; i++){\r\n          row = {\"Name\": json.rows[i].name, \"Percentage\": json.rows[i].percentage, id: json.rows[i].id}\r\n\r\n          rows.push(row)\r\n      }\r\n      this.setState({stepsData : rows, selectedRows: []});\r\n\r\n  })\r\n\r\n  fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/gelecs\", options)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      var rows = []\r\n      var row = null\r\n      rows.push({\"Week\": \"Week\", \"Estimated\": \"Estimated\"})\r\n      for(let i = 0; i < json.rows.length; i++){\r\n          row = {\"Week\": json.rows[i].week, \"Estimated\": json.rows[i].estimated, id: json.rows[i].id}\r\n\r\n          rows.push(row)\r\n      }\r\n      this.setState({progressData : rows, selectedRows: []});\r\n\r\n  })\r\n  }\r\n\r\n  addRowTypes(){\r\n    let rows = this.state.typesData\r\n    rows.push({\"Code\": \"\", \"Name\":\"\", \"Weight\": \"\"})\r\n    this.setState({typesData: rows})\r\n  }\r\n  \r\n  submitChangesTypes(){\r\n    const body = {\r\n      rows: this.state.typesData,\r\n    }\r\n    const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submit/electrical/types\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n\r\n    })\r\n    this.props.success()\r\n  }\r\n\r\n  addRowSteps(){\r\n    let rows = this.state.stepsData\r\n    rows.push({\"Name\": \"\", \"Percentage\":\"\"})\r\n    this.setState({stepsData: rows})\r\n  }\r\n\r\n  submitChangesSteps(){\r\n    const body = {\r\n      rows: this.state.stepsData,\r\n    }\r\n    const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submit/electrical/steps\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n\r\n    })\r\n    this.props.success()\r\n  }\r\n\r\n  addRowProgress(){\r\n    let rows = this.state.progressData\r\n    rows.push({\"Week\": \"\", \"Estimated\": \"\"})\r\n    this.setState({progressData: rows})\r\n  }\r\n\r\n  submitChangesProgress(){\r\n    const body = {\r\n      rows: this.state.progressData,\r\n    }\r\n    const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submit/electrical/progress\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n\r\n    })\r\n    this.props.success()\r\n  }\r\n\r\n  \r\n\r\n \r\n\r\n  render() {\r\n\r\n    const typesSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 200,\r\n        //... other options\r\n      }\r\n  \r\n      const stepsSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 200,\r\n        //... other options\r\n      }\r\n  \r\n      const progressSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 195,\r\n        //... other options\r\n      }\r\n\r\n      return (\r\n        <div className=\"row\" style={{float:\"left\"}}>\r\n           \r\n          <div className=\"column\" style={{marginLeft:\"300px\"}}>\r\n\r\n            <div id=\"hot-app\">\r\n              <HotTable\r\n                data={this.state.typesData}\r\n                colHeaders={true}\r\n                rowHeaders={true}\r\n                width=\"675\"\r\n                height=\"500\"\r\n                settings={typesSettings} \r\n                manualColumnResize={true}\r\n                manualRowResize={true}\r\n                columns= {[{ data: \"Code\"}, { data: \"Name\"}, {data: \"Weight\", type:\"numeric\"}]}\r\n                filters={true}\r\n                dropdownMenu= {[\r\n                    'make_read_only',\r\n                    '---------',\r\n                    'alignment',\r\n                    '---------',\r\n                    'filter_by_condition',\r\n                    '---------',\r\n                    'filter_operators',\r\n                    '---------',\r\n                    'filter_by_condition2',\r\n                    '---------',\r\n                    'filter_by_value',\r\n                    '---------',\r\n                    'filter_action_bar',\r\n                  ]}\r\n              />\r\n              <br></br>\r\n              <center>\r\n                  <button class=\"btn btn-sm btn-info\" onClick={() => this.addRowTypes()} style={{marginRight:\"5px\", fontSize:\"16px\",width:\"60px\", borderRadius:\"10px\"}}>Add</button>\r\n                  <button class=\"btn btn-sm btn-success\" onClick={() => this.submitChangesTypes()} style={{marginRight:\"5px\", fontSize:\"16px\", width:\"60px\", borderRadius:\"10px\"}}>Save</button>\r\n              </center>\r\n            </div>\r\n          </div>\r\n         \r\n          <div className=\"column\" style={{marginLeft:\"20px\"}}>\r\n            <div id=\"hot-app\">\r\n              <HotTable\r\n                data={this.state.progressData}\r\n                colHeaders={true}\r\n                rowHeaders={true}\r\n                width=\"465\"\r\n                height=\"500\"\r\n                settings={progressSettings} \r\n                manualColumnResize={true}\r\n                manualRowResize={true}\r\n                columns= {[{ data: \"Week\", type:\"numeric\"}, {data: \"Estimated\", type:\"numeric\"}]}\r\n                filters={true}\r\n                dropdownMenu= {[\r\n                    'make_read_only',\r\n                    '---------',\r\n                    'alignment',\r\n                    '---------',\r\n                    'filter_by_condition',\r\n                    '---------',\r\n                    'filter_operators',\r\n                    '---------',\r\n                    'filter_by_condition2',\r\n                    '---------',\r\n                    'filter_by_value',\r\n                    '---------',\r\n                    'filter_action_bar',\r\n                  ]}\r\n              />\r\n              <br></br>\r\n              <center>\r\n                  <button class=\"btn btn-sm btn-info\" onClick={() => this.addRowProgress()} style={{marginRight:\"5px\", fontSize:\"16px\",width:\"60px\", borderRadius:\"10px\"}}>Add</button>\r\n                  <button class=\"btn btn-sm btn-success\" onClick={() => this.submitChangesProgress()} style={{marginRight:\"5px\", fontSize:\"16px\", width:\"60px\", borderRadius:\"10px\"}}>Save</button>\r\n              </center>\r\n              <br></br>\r\n            </div>\r\n          </div>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ElecExcel;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\elecTypesDataTable\\elecTypesDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\electricalModelledDataTable\\electricalModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\electricalEstimatedDataTable\\electricalEstimatedDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progresPlotElecs\\progressPlotElecs.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\byPassDataTable\\byPassDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadBomIsocontrolPopUp\\uploadBomIsocontrolPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlGroupLineIdDataTable\\isoControlGroupLineIdDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlFullDataTable\\isoControlFullDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlModelledDataTable\\isoControlModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\isoControlNotModelledDataTable\\isoControlNotModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\loadingScreen\\loadingScreen.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\menuListPit\\menuListPit.js",["1276","1277"],"import React, { useState, useEffect } from 'react';\r\nimport MenuListPITList from \"../menuListPitList/menuListPitList\"\r\n\r\n\r\n\r\n\r\nconst MenuListPIT = (props) =>{\r\n\r\n    function success(){\r\n        props.success()\r\n    }\r\n\r\n    return(\r\n        <div style={{zoom:0.8}} class=\"panel__container\">\r\n            <div className=\"panel__heading__container\">\r\n                <h4>\r\n                    <text className=\"panel__heading__text\">PITRequests</text>\r\n                </h4>\r\n            </div>\r\n\r\n            <div className=\"elements__container\">\r\n                <div className=\"menu\" style={{paddingTop:\"10px\"}}>\r\n                    <MenuListPITList success={success.bind(this)}/>\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MenuListPIT;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\timeTrackDataTable\\timeTrackDataTable.js",["1278"],"import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Table } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass TimeTrackDataTable extends React.Component{\r\n  state = {\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    data: [],\r\n    displayData: [],\r\n    filterData: [\"\", \"\", \"\", \"\", \"\"],\r\n    tab: this.props.currentTab,\r\n    selectedRows: [],\r\n    selectedRowsKeys: [],\r\n    updateData: this.props.updateData,\r\n    username: \"\",\r\n    acronyms : null,\r\n    filters: []\r\n  };\r\n\r\n  \r\n\r\n  componentDidMount(){\r\n\r\n    const options = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n    }\r\n\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/timeTrack\", options)\r\n      .then(response => response.json())\r\n      .then(async json => {\r\n        var rows = []\r\n        var row = null\r\n        for(let i = 0; i < json.rows.length; i++){\r\n            row = {id: json.rows[i].filename.substring(0, json.rows[i].filename.length - 4), revision: \"*R\"+json.rows[i].revision, design: json.rows[i].design, stress: json.rows[i].stress, supports: json.rows[i].supports, materials: json.rows[i].materials, issuer: json.rows[i].issuer, isocontrol: json.rows[i].isocontrol}\r\n            \r\n            if(row){\r\n              if(i % 2 === 0){\r\n                row[\"color\"] = \"#fff\"\r\n              }else{\r\n                row[\"color\"] = \"#eee\"\r\n              }\r\n            }\r\n\r\n            rows.push(row)\r\n            \r\n        }\r\n    \r\n        let filterRow = [{id: <div><input type=\"text\" className=\"filter__input\" placeholder=\"ISO ID\" onChange={(e) => this.filter(0, e.target.value)}/></div>, revision: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Revision\" onChange={(e) => this.filter(1, e.target.value)}/></div>}]\r\n            \r\n        this.setState({data : rows, role: this.props.role, displayData: rows});\r\n        await this.setState({filters : filterRow})\r\n\r\n    }) \r\n  }\r\n\r\n  async filter(column, value){\r\n    let fd = this.state.filterData\r\n    fd[column] = value\r\n    await this.setState({filterData: fd})\r\n\r\n    let auxDisplayData = this.state.data\r\n    let resultData = []\r\n    let fil, exists = null\r\n    for(let i = 0; i < auxDisplayData.length; i++){\r\n      exists = true\r\n      for(let column = 0; column < Object.keys(auxDisplayData[i]).length-7; column ++){\r\n        fil = Object.keys(auxDisplayData[i])[column]\r\n        if(auxDisplayData[i][fil]){\r\n          if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].toString().includes(this.state.filterData[column])){\r\n            exists = false\r\n          }\r\n        }else{\r\n          \r\n          exists = false\r\n        }\r\n          \r\n        \r\n      }\r\n      if(exists){\r\n        resultData.push(auxDisplayData[i])\r\n      }\r\n    }\r\n    await this.setState({displayData: resultData})\r\n  }\r\n  \r\n  getColumnSearchProps = dataIndex => ({\r\n    \r\n    render: text => \r\n      \r\n      text\r\n    \r\n      \r\n  });\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys, selectedRows) => {\r\n    let ids = []\r\n    for(let i = 0; i < selectedRows.length; i++){\r\n      ids.push(selectedRows[i].id.props.children)\r\n    }\r\n    this.setState({\r\n      selectedRowsKeys: selectedRowKeys,\r\n      selectedRows: selectedRows\r\n    })\r\n    //this.setState({ selectedRows: selectedRows });\r\n    this.props.onChange(ids);\r\n    \r\n  };\r\n  \r\n\r\n  render() {\r\n\r\n    const columns = [\r\n      {\r\n        title: <center className=\"dataTable__header__text\">ISO ID</center>,\r\n        dataIndex: 'id',\r\n        key: 'id',\r\n        ...this.getColumnSearchProps('id'),\r\n        sorter:{\r\n            compare: (a, b) => a.id.props.children.localeCompare(b.id.props.children),\r\n        },\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Revision</center>,\r\n        dataIndex: 'revision',\r\n        key: 'revision',\r\n        ...this.getColumnSearchProps('revision'),\r\n        sorter:{\r\n            compare: (a, b) => a.revision.localeCompare(b.revision),\r\n        },\r\n        width: \"160px\",\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Design</center>,\r\n        dataIndex: 'design',\r\n        key: 'design',\r\n        ...this.getColumnSearchProps('design'),\r\n        sorter:{\r\n          compare: (a, b) => a.design - b.design,\r\n        },\r\n        width: \"160px\",\r\n\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Stress</center>,\r\n        dataIndex: 'stress',\r\n        key: 'stress',\r\n        ...this.getColumnSearchProps('stress'),\r\n        sorter:{\r\n          compare: (a, b) => a.stress - b.stress,\r\n        },\r\n        width: \"160px\",\r\n\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Supports</center>,\r\n        dataIndex: 'supports',\r\n        key: 'supports',\r\n        ...this.getColumnSearchProps('supports'),\r\n        sorter:{\r\n          compare: (a, b) => a.supports - b.supports,\r\n        },\r\n        width: \"160px\",\r\n\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Materials</center>,\r\n        dataIndex: 'materials',\r\n        key: 'materials',\r\n        ...this.getColumnSearchProps('materials'),\r\n        sorter:{\r\n          compare: (a, b) => a.materials - b.materials,\r\n        },\r\n        width: \"160px\",\r\n\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Issuer</center>,\r\n        dataIndex: 'issuer',\r\n        key: 'issuer',\r\n        ...this.getColumnSearchProps('issuer'),\r\n        sorter:{\r\n          compare: (a, b) => a.issuer - b.issuer,\r\n        },\r\n        width: \"160px\",\r\n\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">LOS/IsoControl</center>,\r\n        dataIndex: 'isocontrol',\r\n        key: 'isocontrol',\r\n        ...this.getColumnSearchProps('isocontrol'),\r\n        sorter:{\r\n          compare: (a, b) => a.isocontrol - b.isocontrol,\r\n        },\r\n        width: \"160px\",\r\n\r\n      },\r\n    ];\r\n\r\n    var totalElements = null;\r\n    if (this.state.data.length === 0){\r\n      totalElements = null;\r\n    }else{\r\n      totalElements = (<div style={{position: \"absolute\", bottom: 25, left:0}}>\r\n      <b>Total elements: {this.state.data.length}</b>\r\n     </div>);\r\n    }\r\n\r\n\r\n    return (\r\n      <div>\r\n        {this.state.updateData}\r\n        <div className=\"dataTable__container\" style={{float:\"top\", position:\"relative\"}}>\r\n        <Table className=\"customTable\" style={{ height: '430px' }} bordered = {true}  columns={columns} dataSource={this.state.displayData} scroll={{y:330}} pagination={{disabled:true, defaultPageSize:5000, hideOnSinglePage:true}} size=\"small\" rowClassName= {(record) => record.color.replace('#', '')}/>\r\n        <Table className=\"filter__table\" pagination={{disabled:true}} scroll={{y:400}} showHeader = {false} bordered = {true} columns={columns} dataSource={this.state.filters} size=\"small\"/>\r\n          {totalElements}\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TimeTrackDataTable;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotCurve\\progressPlotCurve.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingTypesDataTable\\pipingTypesDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotPiping\\progressPlotPiping.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingExcelEdit\\pipingExcelEdit.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingExcel\\pipingExcel.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\pipingEstimatedDataTable\\pipingEstimatedDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\loadingScreen3D\\loadingScreen3D.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\menuList\\menuList.js",["1279","1280","1281","1282"],"//Lista que muestra las diferentes aplicaciones de IsoTracker y su progreso\r\n\r\nimport './menuList.css'\r\nimport FileIcon from \"../../assets/images/file-icon.png\"\r\nimport ChartColorIcon from \"../../assets/images/chart-color-icon.png\"\r\nimport PipeIcon from \"../../assets/images/pipe-icon.png\"\r\nimport EquiIcon from \"../../assets/images/equi-icon.png\"\r\nimport StruIcon from \"../../assets/images/stru-icon.png\"\r\nimport ElecIcon from \"../../assets/images/elec-icon.png\"\r\nimport InstIcon from \"../../assets/images/inst-icon.png\"\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst MenuList = () =>{\r\n\r\n    //Existe un estado para cada opción del menu\r\n    const [isoIsShown, setIsoIsShown] = useState(false);\r\n    const [progIsShown, setProgIsShown] = useState(false);\r\n    const [pipeIsShown, setPipeIsShown] = useState(false);\r\n    const [equipIsShown, setEquipIsShown] = useState(false);\r\n    const [civIsShown, setCivIsShown] = useState(false);\r\n    const [instIsShown, setInstIsShown] = useState(false);\r\n    const [elecIsShown, setElecIsShown] = useState(false);\r\n\r\n    const [pipesWeight, setPipesWeight] = useState()\r\n    const [pipesProgress, setPipesProgress] = useState()\r\n    const [pipesProgressWidth, setPipesProgressWidth] = useState()\r\n\r\n    const [equisWeight, setEquisWeight] = useState()\r\n    const [equisProgress, setEquisProgress] = useState()\r\n    const [equisProgressWidth, setEquisProgressWidth] = useState()\r\n\r\n    const [civilsWeight, setCivilsWeight] = useState()\r\n    const [civilsProgress, setCivilsProgress] = useState()\r\n    const [civilsProgressWidth, setCivilsProgressWidth] = useState()\r\n\r\n    const [instsWeight, setInstsWeight] = useState()\r\n    const [instsProgress, setInstsProgress] = useState()\r\n    const [instsProgressWidth, setInstsProgressWidth] = useState()\r\n\r\n    const [elecsWeight, setElecsWeight] = useState()\r\n    const [elecsProgress, setElecsProgress] = useState()\r\n    const [elecsProgressWidth, setElecsProgressWidth] = useState()\r\n\r\n    const [totalWeight, setTotalWeight] = useState()\r\n    const [totalProgress, setTotalProgress] = useState()\r\n    const [totalProgressWidth, setTotalProgressWidth] = useState()\r\n\r\n    const [progressButtons, setProgressButtons] = useState()\r\n    const [refresh, setRefresh] = useState(false)\r\n\r\n\r\n    useEffect(async ()=>{\r\n\r\n            if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n            const options = {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n            }\r\n\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/pipingWeight\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n                    await setPipesWeight(json.weight)\r\n                    await setPipesProgress(json.progress)\r\n                    await setPipesProgressWidth(json.progress + \"%\")\r\n                }\r\n                )\r\n                .catch(error => {\r\n                    console.log(error);\r\n                })   \r\n\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/equipments/weight\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n                    await setEquisWeight(json.weight)\r\n                    await setEquisProgress(json.progress)\r\n                    await setEquisProgressWidth(json.progress+\"%\")\r\n                }\r\n                )\r\n                .catch(error => {\r\n                    console.log(error);\r\n                }) \r\n                \r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/civils/weight\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n                    await setCivilsWeight(json.weight)\r\n                    await setCivilsProgress(json.progress)\r\n                    await setCivilsProgressWidth(json.progress + \"%\")\r\n                }\r\n                )\r\n                .catch(error => {\r\n                    console.log(error);\r\n                }) \r\n                \r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/instrumentation/weight\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n                    await setInstsWeight(json.weight)\r\n                    await setInstsProgress(json.progress)\r\n                    await setInstsProgressWidth(json.progress + \"%\")\r\n                }\r\n                )\r\n                .catch(error => {\r\n                    console.log(error);\r\n                })   \r\n\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/electrical/weight\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n                    await setElecsWeight(json.weight)\r\n                    await setElecsProgress(json.progress)\r\n                    await setElecsProgressWidth(json.progress + \"%\")\r\n                }\r\n                )\r\n                .catch(error => {\r\n                    console.log(error);\r\n                })   \r\n                await setTotalWeight(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)\r\n                await setTotalProgress(((pipesWeight/totalWeight) * pipesProgress + (equisWeight/totalWeight) * equisProgress + (civilsWeight/totalWeight) * civilsProgress + (instsWeight/totalWeight) * instsProgress + (elecsWeight/totalWeight) * elecsProgress).toFixed(2))\r\n                await setTotalProgressWidth(totalProgress+\"%\")\r\n            }\r\n        \r\n    },[])   \r\n\r\n    //((pipesWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)) * pipesProgress + (equisWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)) * equisProgress + (civilsWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)) * civilsProgress + (instsWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)) * instsProgress + (elecsWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)) * elecsProgress).toFixed(2)\r\n\r\n    useEffect(async() =>{\r\n        if(process.env.REACT_APP_PROGRESS === \"1\"){\r\n            setProgressButtons(<div>\r\n                <div className=\"panel__content__container\">\r\n            <div>\r\n                <a href={\"/\"+process.env.REACT_APP_PROJECT+\"/3dprogress\"} style={{textDecoration: \"none\"}}>\r\n                    <h4  className=\"panel__icon__container\" onMouseEnter={() => setProgIsShown(true)} onMouseLeave={() => setProgIsShown(false)}><img src={ChartColorIcon} alt=\"chart\" className=\"panel__icon\"/>&nbsp;&nbsp;&nbsp;3D Progress (Weight: {pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight} | 100%)</h4>\r\n                </a>\r\n                <div class=\"progress\" style={{height: \"30px\"}}>\r\n                    <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"70\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{color: \"black\", fontSize: \"15px\", width: ((pipesWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)) * pipesProgress + (equisWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)) * equisProgress + (civilsWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)) * civilsProgress + (instsWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)) * instsProgress + (elecsWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)) * elecsProgress).toFixed(2)+\"%\", backgroundColor: \"#94dcaa\",textAlign: \"center\"}}>\r\n                        <span class=\"sr-only\"></span><strong>{(pipesProgress*(pipesWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)) + equisProgress*(equisWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)) + instsProgress*(instsWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)) + civilsProgress*(civilsWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)) + elecsProgress*(elecsWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight))).toFixed(2)}%</strong>                                         \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"panel__content__container\">\r\n            <div>\r\n                <a href={\"/\"+process.env.REACT_APP_PROJECT+\"/piping\"} style={{textDecoration: \"none\"}}>\r\n                    <h4 className=\"panel__icon__container\" onMouseEnter={() => setPipeIsShown(true)} onMouseLeave={() => setPipeIsShown(false)}><img src={PipeIcon} alt=\"pipe\" className=\"panel__icon\"/>&nbsp;&nbsp;&nbsp;Piping (Weight: {pipesWeight} | {(pipesWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)*100).toFixed(2)}%)</h4>        \r\n                </a>\r\n                <div class=\"progress\" style={{height: \"25px\"}}>\r\n                    <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"70\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{color: \"black\", fontSize: \"15px\", width: pipesProgressWidth, backgroundColor: \"#94dcaa\",textAlign: \"center\"}}>\r\n                        <span class=\"sr-only\"></span><strong>{pipesProgress}%</strong>                                       \r\n                    </div>\r\n                </div>          \r\n            </div>\r\n        </div>\r\n        <div className=\"panel__content__container\">\r\n            <div>\r\n                <a href={\"/\"+process.env.REACT_APP_PROJECT+\"/equipments\"}style={{textDecoration: \"none\"}}>\r\n                    <h4 className=\"panel__icon__container\" onMouseEnter={() => setEquipIsShown(true)} onMouseLeave={() => setEquipIsShown(false)}><img src={EquiIcon} alt=\"equi\" className=\"panel__icon\"/>&nbsp;&nbsp;&nbsp;Equipment (Weight: {equisWeight} | {(equisWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)*100).toFixed(2)}%)</h4>                   \r\n                </a>\r\n                <div class=\"progress\" style={{height: \"25px\"}}>\r\n                    <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"70\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{color: \"black\", fontSize: \"15px\", width: equisProgressWidth, backgroundColor: \"#94dcaa\",textAlign: \"center\"}}>\r\n                        <span class=\"sr-only\"></span><strong>{equisProgress}%</strong>                                         \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"panel__content__container\">\r\n            <div>\r\n                <a href={\"/\"+process.env.REACT_APP_PROJECT+\"/civil\"}style={{textDecoration: \"none\"}}>\r\n                    <h4  className=\"panel__icon__container\" onMouseEnter={() => setCivIsShown(true)} onMouseLeave={() => setCivIsShown(false)}><img src={StruIcon} alt=\"stru\" className=\"panel__icon\"/>&nbsp;&nbsp;&nbsp;Civil (Weight: {civilsWeight} | {(civilsWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)*100).toFixed(2)}%)</h4> \r\n                </a>\r\n                <div class=\"progress\" style={{height: \"25px\"}}>\r\n                    <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"70\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{color: \"black\", fontSize: \"15px\", width: civilsProgressWidth, backgroundColor: \"#94dcaa\",textAlign: \"center\"}}>\r\n                        <span class=\"sr-only\"></span><strong>{civilsProgress}%</strong>                                        \r\n                    </div>\r\n                </div>         \r\n            </div>\r\n        </div>\r\n        <div className=\"panel__content__container\">\r\n            <div >\r\n                <a href={\"/\"+process.env.REACT_APP_PROJECT+\"/instrumentation\"}style={{textDecoration: \"none\"}} className=\"panel__content__link\">\r\n                    <h4 className=\"panel__icon__container\" onMouseEnter={() => setInstIsShown(true)} onMouseLeave={() => setInstIsShown(false)}><img src={InstIcon} alt= \"inst\" className=\"panel__icon\"/>&nbsp;&nbsp;&nbsp;Instrumentation (Weight: {instsWeight} | {(instsWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)*100).toFixed(2)}%)</h4>         \r\n                </a>\r\n                <div class=\"progress\" style={{height: \"25px\"}}>\r\n                    <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"70\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{color: \"black\", fontSize: \"15px\", width: instsProgressWidth, backgroundColor: \"#94dcaa\",textAlign: \"center\"}}>\r\n                        <span class=\"sr-only\"></span><strong>{instsProgress}%</strong>                                         \r\n                    </div>\r\n                </div>   \r\n            </div>\r\n        </div>\r\n        <div className=\"panel__content__container\">\r\n            <div>\r\n                <a href={\"/\"+process.env.REACT_APP_PROJECT+\"/electrical\"} style={{textDecoration: \"none\"}} className=\"panel__content__link\">\r\n                    <h4 className=\"panel__icon__container\" onMouseEnter={() => setElecIsShown(true)} onMouseLeave={() => setElecIsShown(false)}><img src={ElecIcon} alt=\"inst\" className=\"panel__icon\"/>&nbsp;&nbsp;&nbsp;Electrical (Weight: {elecsWeight} | {(elecsWeight/(pipesWeight + equisWeight + instsWeight + civilsWeight + elecsWeight)*100).toFixed(2)}%)</h4>\r\n                </a>\r\n                <div class=\"progress\" style={{height: \"25px\"}}>\r\n                    <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"70\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{color: \"black\", fontSize: \"15px\", width: elecsProgressWidth, backgroundColor: \"#94dcaa\",textAlign: \"center\"}}>\r\n                        <span class=\"sr-only\"></span><strong>{elecsProgress}%</strong>                                         \r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>   </div>)\r\n        }else{\r\n            setProgressButtons(<div className=\"panel__content__container\">\r\n            <div>\r\n                <a href={\"/\"+process.env.REACT_APP_PROJECT+\"/isotracker\"} style={{textDecoration: \"none\"}}>\r\n                    <h4 className=\"panel__icon__container\" onMouseEnter={() => setIsoIsShown(true)} onMouseLeave={() => setIsoIsShown(false)} ><img src={FileIcon} alt=\"file\" className=\"panel__icon\"/>&nbsp;&nbsp;&nbsp;IsoTracker</h4>\r\n                    <div className=\"progress__bar\" role=\"progressbar\" aria-valuenow=\"70\" aria-valuemin=\"0\" aria-valuemax=\"100\">\r\n                        <span class=\"sr-only\"></span><strong>Open</strong>\r\n                    </div>\r\n                </a> \r\n            </div>\r\n        </div>)\r\n        }\r\n    },[totalProgressWidth, refresh, isoIsShown, progIsShown, pipeIsShown, equipIsShown, civIsShown, instIsShown, elecIsShown])\r\n\r\n    if(!refresh){\r\n        setRefresh(true)\r\n    }\r\n    \r\n\r\n    return(\r\n        <div class=\"panel__container\">\r\n            <div className=\"panel__heading__container\">\r\n                <h4>\r\n                    <text className=\"panel__heading__text\"><strong style={{fontWeight:\"700\"}}>3D</strong>Tracker</text>\r\n                </h4>\r\n            </div>\r\n\r\n            <div className=\"elements__container\">\r\n                <div className=\"menu\">\r\n                    <div className=\"panel__content__container__title\">\r\n                    <a href={\"/\"+process.env.REACT_APP_PROJECT+\"/isotracker\"} style={{textDecoration: \"none\"}}>\r\n                        <h4 className=\"click__text\">Click here to open</h4>\r\n                        <h4 className=\"iso__title__menu\">ISO<text style={{fontWeight:\"100\"}}>Tracker</text></h4>\r\n                        </a>\r\n                    </div>\r\n                        \r\n                    <h4 className=\"disciplines__text\">You can also click any of the items below to check disciplines.</h4>\r\n\r\n                    {progressButtons}\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MenuList;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navisTable\\navisTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilExcelEdit\\civilExcelEdit.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilTypesDataTable\\civilTypesDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilModelledDataTable\\civilModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilExcel\\civilExcel.js",["1283"],"import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { HotTable } from '@handsontable/react';\r\nimport 'handsontable/dist/handsontable.full.css';\r\n\r\n\r\nclass CivilExcel extends React.Component{\r\n  state = {\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    typesData: [],\r\n    stepsData: [],\r\n    progressData: [],\r\n    tab: this.props.currentTab,\r\n    selectedRows: [],\r\n    selectedRowsKeys: [],\r\n    updateData: this.props.updateData,\r\n    username: \"\",\r\n    acronyms : null,\r\n    steps: []\r\n  };\r\n\r\n  async componentDidMount(){\r\n\r\n    const options = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n    }\r\n\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/civils/types\", options)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      var rows = []\r\n      var row = null\r\n      rows.push({\"Code\": \"Code\", \"Name\": \"Name\", \"Weight\": \"Weight\"})\r\n      for(let i = 0; i < json.rows.length; i++){\r\n\r\n          row = {\"Code\": json.rows[i].code, \"Name\": json.rows[i].name, \"Weight\": json.rows[i].weight, id: json.rows[i].id}\r\n\r\n          for(let j = 0; j < this.state.steps.length; j++){\r\n            let currentStep = this.state.steps[j].toString()\r\n            row[currentStep] = json.rows[i][currentStep]\r\n          }\r\n          rows.push(row)\r\n      }\r\n      this.setState({typesData : rows, selectedRows: []});\r\n\r\n  }) \r\n\r\n  fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/civils/steps\", options)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      var rows = []\r\n      var row = null\r\n      rows.push({\"Name\":\"Name\", \"Percentage\":\"Percentage\"})\r\n      for(let i = 0; i < json.rows.length; i++){\r\n          row = {\"Name\": json.rows[i].name, \"Percentage\": json.rows[i].percentage, id: json.rows[i].id}\r\n\r\n          rows.push(row)\r\n      }\r\n      this.setState({stepsData : rows, selectedRows: []});\r\n\r\n  })\r\n\r\n  fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/gcivils\", options)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      var rows = []\r\n      var row = null\r\n      rows.push({\"Week\": \"Week\", \"Estimated\": \"Estimated\"})\r\n      for(let i = 0; i < json.rows.length; i++){\r\n          row = {\"Week\": json.rows[i].week, \"Estimated\": json.rows[i].estimated, id: json.rows[i].id}\r\n\r\n          rows.push(row)\r\n      }\r\n      this.setState({progressData : rows, selectedRows: []});\r\n\r\n  })\r\n  }\r\n\r\n  addRowTypes(){\r\n    let rows = this.state.typesData\r\n    rows.push({\"Code\": \"\", \"Name\":\"\", \"Weight\": \"\"})\r\n    this.setState({typesData: rows})\r\n  }\r\n  \r\n  submitChangesTypes(){\r\n    const body = {\r\n      rows: this.state.typesData,\r\n    }\r\n    const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submit/civils/types\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n\r\n    })\r\n    this.props.success()\r\n  }\r\n\r\n  addRowSteps(){\r\n    let rows = this.state.stepsData\r\n    rows.push({\"Name\": \"\", \"Percentage\":\"\"})\r\n    this.setState({stepsData: rows})\r\n  }\r\n\r\n  submitChangesSteps(){\r\n    const body = {\r\n      rows: this.state.stepsData,\r\n    }\r\n    const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submit/civils/steps\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n\r\n    })\r\n    this.props.success()\r\n  }\r\n\r\n  addRowProgress(){\r\n    let rows = this.state.progressData\r\n    rows.push({\"Week\": \"\", \"Estimated\": \"\"})\r\n    this.setState({progressData: rows})\r\n  }\r\n\r\n  submitChangesProgress(){\r\n    const body = {\r\n      rows: this.state.progressData,\r\n    }\r\n    const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submit/civils/progress\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n\r\n    })\r\n    this.props.success()\r\n  }\r\n\r\n  \r\n\r\n \r\n\r\n  render() {\r\n\r\n    const typesSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 200,\r\n        //... other options\r\n      }\r\n  \r\n      const stepsSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 200,\r\n        //... other options\r\n      }\r\n  \r\n      const progressSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 195,\r\n        //... other options\r\n      }\r\n\r\n      return (\r\n        <div className=\"row\" style={{float:\"left\"}}>\r\n           \r\n          <div className=\"column\" style={{marginLeft:\"300px\"}}>\r\n\r\n            <div id=\"hot-app\">\r\n              <HotTable\r\n                data={this.state.typesData}\r\n                colHeaders={true}\r\n                rowHeaders={true}\r\n                width=\"675\"\r\n                height=\"500\"\r\n                settings={typesSettings} \r\n                manualColumnResize={true}\r\n                manualRowResize={true}\r\n                columns= {[{ data: \"Code\"}, { data: \"Name\"}, {data: \"Weight\", type:\"numeric\"}]}\r\n                filters={true}\r\n                dropdownMenu= {[\r\n                    'make_read_only',\r\n                    '---------',\r\n                    'alignment',\r\n                    '---------',\r\n                    'filter_by_condition',\r\n                    '---------',\r\n                    'filter_operators',\r\n                    '---------',\r\n                    'filter_by_condition2',\r\n                    '---------',\r\n                    'filter_by_value',\r\n                    '---------',\r\n                    'filter_action_bar',\r\n                  ]}\r\n              />\r\n              <br></br>\r\n              <center>\r\n                  <button class=\"btn btn-sm btn-info\" onClick={() => this.addRowTypes()} style={{marginRight:\"5px\", fontSize:\"16px\",width:\"60px\", borderRadius:\"10px\"}}>Add</button>\r\n                  <button class=\"btn btn-sm btn-success\" onClick={() => this.submitChangesTypes()} style={{marginRight:\"5px\", fontSize:\"16px\", width:\"60px\", borderRadius:\"10px\"}}>Save</button>\r\n              </center>\r\n            </div>\r\n          </div>\r\n         \r\n          <div className=\"column\" style={{marginLeft:\"20px\"}}>\r\n            <div id=\"hot-app\">\r\n              <HotTable\r\n                data={this.state.progressData}\r\n                colHeaders={true}\r\n                rowHeaders={true}\r\n                width=\"465\"\r\n                height=\"500\"\r\n                settings={progressSettings} \r\n                manualColumnResize={true}\r\n                manualRowResize={true}\r\n                columns= {[{ data: \"Week\", type:\"numeric\"}, {data: \"Estimated\", type:\"numeric\"}]}\r\n                filters={true}\r\n                dropdownMenu= {[\r\n                    'make_read_only',\r\n                    '---------',\r\n                    'alignment',\r\n                    '---------',\r\n                    'filter_by_condition',\r\n                    '---------',\r\n                    'filter_operators',\r\n                    '---------',\r\n                    'filter_by_condition2',\r\n                    '---------',\r\n                    'filter_by_value',\r\n                    '---------',\r\n                    'filter_action_bar',\r\n                  ]}\r\n              />\r\n              <br></br>\r\n              <center>\r\n                  <button class=\"btn btn-sm btn-info\" onClick={() => this.addRowProgress()} style={{marginRight:\"5px\", fontSize:\"16px\",width:\"60px\", borderRadius:\"10px\"}}>Add</button>\r\n                  <button class=\"btn btn-sm btn-success\" onClick={() => this.submitChangesProgress()} style={{marginRight:\"5px\", fontSize:\"16px\", width:\"60px\", borderRadius:\"10px\"}}>Save</button>\r\n              </center>\r\n              <br></br>\r\n            </div>\r\n          </div>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default CivilExcel;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\civilEstimatedDataTable\\civilEstimatedDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressPlotCivils\\progressPlotCivils.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateMassive\\updateMassive.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadDrawingPopUp\\uploadDrawingPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\updateDrawingPopUp\\updateDrawingPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\editByPassPopUp\\editByPassPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\acceptByPassPopUp\\acceptByPassPopUp.js",["1284"],"import React, { Component } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\nimport AlertF from \"../../components/alert/alert\"\r\n\r\n\r\nexport default class AcceptByPassPopUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible : false,\r\n            id: this.props.id,\r\n            answer: 2\r\n        }\r\n        \r\n    }\r\n   \r\n\r\n    openModal() {      \r\n        this.setState({\r\n            visible : true,\r\n        });\r\n    }\r\n\r\n    closeModal() {\r\n\r\n        this.setState({\r\n            visible : false,\r\n        });\r\n    }\r\n\r\n    async acceptByPass(){\r\n        \r\n        const body ={\r\n          id : this.state.id,\r\n          type: this.state.answer\r\n        }\r\n        const options = {\r\n          method: \"POST\",\r\n          headers: {\r\n              \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify(body)\r\n      }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/answerByPass\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n              if(json.success){\r\n                this.props.success()\r\n              }\r\n            })\r\n        this.closeModal()\r\n      }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                <button className=\"ready__btn btn-sm btn-info\"  style={{fontWeight: \"bold\", marginRight:\"5px\", width:\"60px\", height:\"28px\", backgroundColor:\"#66A9F4\"}} onClick={() => this.openModal()}>Doc</button>\r\n                <div>\r\n                    <Modal visible={this.state.visible} width=\"500\" height=\"190\" effect=\"fadeInUp\" onClickAway={() => this.closeModal()}>\r\n                    <div className=\"popUp__container\" >\r\n                            <center className=\"popUp__title\"><h3>Answer ByPass {this.props.tag}</h3></center>\r\n                                \r\n                        </div>\r\n                        \r\n                        <center style={{marginTop: \"20px\"}}>\r\n                            <label for=\"select\">Type: </label>\r\n                            <select className=\"popUp_input_select\" name=\"select\" onChange={(e) => this.setState({answer: e.target.value})} value={this.state.selected}>\r\n                                <option value={2} selected>CODE3</option>\r\n                                <option value={3}>IFC</option>\r\n                            </select>\r\n                        </center>\r\n                        <center className=\"popUp__buttons__container__users\">\r\n                            <button class=\"btn btn-sm btn-success\" onClick={() => this.acceptByPass()} style={{marginRight:\"5px\", fontSize:\"16px\"}}>Accept</button>\r\n                            <button class=\"btn btn-sm btn-danger\" onClick={() => this.closeModal()} style={{marginLeft:\"5px\", fontSize:\"16px\"}}>Cancel</button>\r\n                        </center>\r\n                    </Modal>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\deleteByPassPopUp\\deleteByPassPopUp.js",["1285"],"import React, { Component } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\n\r\n\r\nexport default class DeleteByPassPopUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible : false,\r\n            id: this.props.id\r\n        }\r\n    }\r\n\r\n    async openModal() {      \r\n        \r\n        this.setState({\r\n            visible : true,\r\n        });\r\n    }\r\n\r\n    closeModal() {\r\n        this.setState({\r\n            visible : false,\r\n        });\r\n    }\r\n\r\n    deleteByPass(){\r\n        this.props.deleteByPass(this.state.id)\r\n        this.closeModal()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section >\r\n                <button className=\"ready__btn btn-sm btn-danger\" style={{fontWeight: \"bold\", backgroundColor:\"#66A9F4\", width:\"60px\", backgroundColor:\"#FF3358\"}} onClick={() => this.openModal()}>Delete</button>\r\n                <div>\r\n                    <Modal visible={this.state.visible} width=\"650\" height=\"130\" effect=\"fadeInUp\" onClickAway={() => this.closeModal()}>\r\n\r\n                    <div className=\"popUp__container\" >\r\n                            <center className=\"popUp__title\"><h3><strong>Are you sure you want to delete {this.props.tag}?</strong></h3></center>\r\n                                \r\n                        </div> \r\n\r\n                        <div className=\"popUp__buttons__container__manage\">\r\n                            <button class=\"btn btn-sm btn-danger\" onClick={() => this.deleteByPass()} style={{marginRight:\"5px\", fontSize:\"16px\"}}>Delete</button>\r\n                            <button class=\"btn btn-sm btn-warning\" onClick={() => this.closeModal()} style={{marginLeft:\"5px\", fontSize:\"16px\"}}>Cancel</button>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\byPassRejNACommentPopUp\\byPassRejNACommentPopUp.js",["1286"],"import React, { Component } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\nimport AlertF from \"../../components/alert/alert\"\r\n\r\n\r\nexport default class ByPassRejNACommentPopUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible : false,\r\n            id: this.props.id,\r\n            type: this.props.type,\r\n            tag: this.props.tag,\r\n            button: null,\r\n            comments: null\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.state.type === \"Reject\"){\r\n            this.setState({button: <button className=\"csp__cancel__btn btn-sm btn-danger\" style={{marginRight:\"5px\", width:\"60px\", height:\"27px\"}} onClick={() => this.openModal()}>Reject</button>})\r\n        }else{\r\n            this.setState({button: <button button className=\"ready__btn btn-sm btn-info\" style={{backgroundColor:\"#66A9F4\", width:\"60px\", height:\"27px\"}} onClick={() => this.openModal()}>N/A</button>})     \r\n        }\r\n    }\r\n   \r\n\r\n    openModal() {      \r\n        this.setState({\r\n            visible : true,\r\n        });\r\n    }\r\n\r\n    closeModal() {\r\n\r\n        this.setState({\r\n            visible : false,\r\n        });\r\n    }\r\n\r\n    async rejectByPass(){\r\n        if(this.state.type === \"Reject\"){\r\n            this.props.rejectByPass(this.state.id, this.state.comments)\r\n        }else{\r\n            this.props.naByPass(this.state.id, this.state.comments)\r\n        }\r\n        this.closeModal()\r\n      }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                <div>{this.state.button}\r\n                    <Modal visible={this.state.visible} width=\"500\" height=\"295\" effect=\"fadeInUp\" onClickAway={() => this.closeModal()}>\r\n                    <div className=\"popUp__container\" >\r\n                            <center className=\"popUp__title\"><h3>{this.state.type} ByPass {this.props.tag}</h3></center>\r\n                                \r\n                        </div>\r\n                        \r\n                        <center style={{marginTop: \"20px\"}}>\r\n                         <textarea id=\"comments\" placeholder=\"Comments\" class=\"comments\" cols=\"51\" rows=\"4\" required=\"\" maxlength=\"400\" name=\"comments\" onChange={(e) => this.setState({comments: e.target.value})} style={{margin: \"10px 10px 10px 10px\"}}></textarea>\r\n                        </center>\r\n                        <center className=\"popUp__buttons__container__users\">\r\n                            <button class=\"btn btn-sm btn-success\" onClick={() => this.rejectByPass()} style={{marginRight:\"5px\", fontSize:\"16px\"}}>Submit</button>\r\n                            <button class=\"btn btn-sm btn-danger\" onClick={() => this.closeModal()} style={{marginLeft:\"5px\", fontSize:\"16px\"}}>Cancel</button>\r\n                        </center>\r\n                    </Modal>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\menuListPitList\\menuListPitList.js",["1287","1288","1289"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport TreeView from '@mui/lab/TreeView';\r\nimport TreeItem, { treeItemClasses } from '@mui/lab/TreeItem';\r\nimport Typography from '@mui/material/Typography';\r\nimport MailIcon from '@mui/icons-material/Mail';\r\nimport Label from '@mui/icons-material/Label';\r\nimport SupervisorAccountIcon from '@mui/icons-material/SupervisorAccount';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport ForumIcon from '@mui/icons-material/Forum';\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport ArrowRightIcon from '@mui/icons-material/ArrowRight';\r\nimport { useHistory } from 'react-router';\r\nimport QtrackerNWCPopUp from '../qtrackerNWCPopUp/qtrackerNWCPopUp'\r\nimport QtrackerNVNPopUp from '../qtrackerNVNPopUp/qtrackerNVNPopUp';\r\nimport QtrackerNRIPopUp from '../qtrackerNRIPopUp/qtrackerNRIPopUp';\r\nimport QtrackerNRBPopUp from '../qtrackerNRBPopUp/qtrackerNRBPopUp';\r\nimport QtrackerRRPopUp from '../qtrackerRRPopUp/qtrackerRRPopUp';\r\nimport QtrackerNRIDSPopUp from '../qtrackerNRIDSPopUp/qtrackerNRIDSPopUp';\r\nimport SvgIcon from '@mui/material/SvgIcon';\r\n\r\nfunction PlusSquare(props) {\r\n  return (\r\n    <SvgIcon width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n  <path d=\"M6.62812 11.2678L2.65125 7.29093L6.62812 3.31406\" stroke=\"white\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n  <path d=\"M6.62812 16.5703H13.9191C15.1496 16.5703 16.3297 16.0815 17.1998 15.2114C18.0699 14.3413 18.5587 13.1611 18.5587 11.9306V11.9306C18.5587 11.3213 18.4387 10.718 18.2056 10.1551C17.9724 9.59216 17.6307 9.08069 17.1998 8.64985C16.769 8.21902 16.2575 7.87726 15.6946 7.6441C15.1317 7.41093 14.5284 7.29092 13.9191 7.29092H2.65125\" stroke=\"white\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n  </SvgIcon>\r\n  );\r\n}\r\n\r\nconst StyledTreeItemRoot = styled(TreeItem)(({ theme }) => ({\r\n  color: theme.palette.text.secondary,\r\n  [`& .${treeItemClasses.content}`]: {\r\n    color: theme.palette.text.secondary,\r\n    borderTopRightRadius: theme.spacing(2),\r\n    borderBottomRightRadius: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n    fontWeight: theme.typography.fontWeightMedium,\r\n    '&.Mui-expanded': {\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n    '&.Mui-focused, &.Mui-selected, &.Mui-selected.Mui-focused': {\r\n      backgroundColor: `var(--tree-view-bg-color, ${theme.palette.action.selected})`,\r\n      color: 'var(--tree-view-color)',\r\n    },\r\n    [`& .${treeItemClasses.label}`]: {\r\n      fontWeight: 'inherit',\r\n      color: 'inherit',\r\n    },\r\n  },\r\n  [`& .${treeItemClasses.group}`]: {\r\n    marginLeft: 30,\r\n    [`& .${treeItemClasses.content}`]: {\r\n      paddingLeft: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nfunction StyledTreeItem(props) {\r\n  const {\r\n    bgColor,\r\n    color,\r\n    labelIcon: LabelIcon,\r\n    labelInfo,\r\n    labelText,\r\n    ...other\r\n  } = props;\r\n\r\n  return (\r\n    <StyledTreeItemRoot\r\n      label={\r\n        <Box sx={{ display: 'flex', alignItems: 'center', p: 0.5, pr: 0}}>\r\n          <Box component={LabelIcon} color=\"inherit\" sx={{ mr: 1 }} />\r\n          <Typography variant=\"h5\" sx={{ fontWeight: 'inherit', flexGrow: 1 }}>\r\n            {labelText}\r\n          </Typography>\r\n          <Typography variant=\"caption\" color=\"inherit\">\r\n            {labelInfo}\r\n          </Typography>\r\n        </Box>\r\n      }\r\n      style={{\r\n        '--tree-view-color': color,\r\n        '--tree-view-bg-color': bgColor,\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nStyledTreeItem.propTypes = {\r\n  bgColor: PropTypes.string,\r\n  color: PropTypes.string,\r\n  labelIcon: PropTypes.elementType.isRequired,\r\n  labelInfo: PropTypes.string,\r\n  labelText: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default function MenuListPITList(props) {\r\n\r\n    const history = useHistory()\r\n\r\n    function handleCADpmcClick(){\r\n        window.open(\"http://eu012vm0190/UI/Login.aspx\", \"_blank\")\r\n    }\r\n\r\n    function handleSPClick(){\r\n        history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/csptracker\");\r\n    }\r\n\r\n    function handlePitViewClick(){\r\n      history.push(\"/\"+process.env.REACT_APP_PROJECT+\"/pitrequestsview\");\r\n    }\r\n\r\n    function success(){\r\n      props.success()\r\n    }\r\n\r\n\r\n  return (\r\n    <TreeView\r\n      aria-label=\"customized\"\r\n      defaultExpanded={['3']}\r\n      defaultCollapseIcon={<ArrowDropDownIcon/>}\r\n      defaultExpandIcon={<ArrowRightIcon />}\r\n      defaultEndIcon={<div style={{ width: 24 }} />}\r\n      sx={{ height: 800, flexGrow: 1, maxWidth: 720, overflowY: 'auto' }}\r\n    >\r\n      {/*<StyledTreeItem nodeId=\"14\" style={{marginBottom:\"5px\"}} labelText=\"New user\" labelIcon={PlusSquare}/>*/}\r\n      <StyledTreeItem nodeId=\"1\" style={{marginBottom:\"5px\"}} labelText=\"CADpmc\" labelIcon={MailIcon} onClick={()=> handleCADpmcClick()}/>\r\n      <StyledTreeItem nodeId=\"2\" style={{marginBottom:\"5px\"}} labelText=\"CSPTracker\" labelIcon={InfoIcon} onClick={()=> handleSPClick()} />\r\n      {/*<StyledTreeItem nodeId=\"3\" labelText=\"Out of SpecTracker\" color=\"#1a73e8\" bgColor=\"#e8f0fe\" labelIcon={Label}>\r\n        <StyledTreeItem\r\n          nodeId=\"5\"\r\n          labelText=\"InstrumentTracker\"\r\n          labelIcon={SupervisorAccountIcon}\r\n          \r\n        />\r\n        <StyledTreeItem\r\n          nodeId=\"6\"\r\n          labelText=\"PSVTracker\"\r\n          labelIcon={InfoIcon}\r\n          \r\n        />\r\n        <StyledTreeItem\r\n          nodeId=\"7\"\r\n          labelText=\"ExpansionJoin\"\r\n          labelIcon={ForumIcon}\r\n          style={{marginBottom:\"5px\"}}\r\n        />\r\n      </StyledTreeItem>\r\n      */}\r\n      <StyledTreeItem nodeId=\"4\" labelText=\"3DQuery\" color=\"#e3742f\" bgColor=\"#fcefe3\" labelIcon={Label}>\r\n\r\n        <StyledTreeItem nodeId=\"18\" labelText=\"Requests tray\" labelIcon={InfoIcon} onClick={()=> handlePitViewClick()} />\r\n        \r\n        <StyledTreeItem nodeId=\"19\" labelText=\"Create request\" color=\"#e3742f\" bgColor=\"#fcefe3\" labelIcon={Label}>\r\n\r\n        <QtrackerNWCPopUp success={success.bind(this)}/>\r\n        <QtrackerNVNPopUp success={success.bind(this)}/>\r\n        \r\n        <StyledTreeItem\r\n          nodeId=\"11\"\r\n          labelText=\"NotReporting\"\r\n          labelIcon={Label}\r\n        >\r\n          <QtrackerNRIPopUp success={success.bind(this)}/>\r\n          <QtrackerNRBPopUp success={success.bind(this)}/>\r\n          <QtrackerNRIDSPopUp success={success.bind(this)}/>\r\n        </StyledTreeItem>\r\n\r\n        <QtrackerRRPopUp success={success.bind(this)}/>\r\n\r\n        </StyledTreeItem>\r\n      </StyledTreeItem>\r\n        \r\n    </TreeView>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNVNPopUp\\qtrackerNVNPopUp.js",["1290"],"import React, { Component } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\nimport SupervisorAccountIcon from '@mui/icons-material/SupervisorAccount';\r\nimport TreeView from '@mui/lab/TreeView';\r\nimport TreeItem, { treeItemClasses } from '@mui/lab/TreeItem';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport AlertF from \"../../components/alert/alert\"\r\nimport ReactTooltip from \"react-tooltip\"\r\n\r\nconst CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    const StyledTreeItemRoot = styled(TreeItem)(({ theme }) => ({\r\n        color: theme.palette.text.secondary,\r\n        [`& .${treeItemClasses.content}`]: {\r\n          color: theme.palette.text.secondary,\r\n          borderTopRightRadius: theme.spacing(2),\r\n          borderBottomRightRadius: theme.spacing(2),\r\n          paddingRight: theme.spacing(1),\r\n          fontWeight: theme.typography.fontWeightMedium,\r\n          '&.Mui-expanded': {\r\n            fontWeight: theme.typography.fontWeightRegular,\r\n          },\r\n          '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n          },\r\n          '&.Mui-focused, &.Mui-selected, &.Mui-selected.Mui-focused': {\r\n            backgroundColor: `var(--tree-view-bg-color, ${theme.palette.action.selected})`,\r\n            color: 'var(--tree-view-color)',\r\n          },\r\n          [`& .${treeItemClasses.label}`]: {\r\n            fontWeight: 'inherit',\r\n            color: 'inherit',\r\n          },\r\n        },\r\n        [`& .${treeItemClasses.group}`]: {\r\n          marginLeft: 0,\r\n          [`& .${treeItemClasses.content}`]: {\r\n            paddingLeft: theme.spacing(2),\r\n          },\r\n        },\r\n      }));\r\n      \r\n      function StyledTreeItem(props) {\r\n        const {\r\n          bgColor,\r\n          color,\r\n          labelIcon: LabelIcon,\r\n          labelInfo,\r\n          labelText,\r\n          ...other\r\n        } = props;\r\n      \r\n        return (\r\n          <StyledTreeItemRoot\r\n            label={\r\n              <Box sx={{ display: 'flex', alignItems: 'center', p: 0.5, pr: 0}}>\r\n                <Box component={LabelIcon} color=\"inherit\" sx={{ mr: 1 }} />\r\n                <Typography variant=\"h5\" sx={{ fontWeight: 'inherit', flexGrow: 1 }}>\r\n                  {labelText}\r\n                </Typography>\r\n                <Typography variant=\"caption\">\r\n                  {labelInfo}\r\n                </Typography>\r\n              </Box>\r\n            }\r\n            style={{\r\n              '--tree-view-color': color,\r\n              '--tree-view-bg-color': bgColor,\r\n            }}\r\n            {...other}\r\n          />\r\n        );\r\n      }\r\n      \r\n      StyledTreeItem.propTypes = {\r\n        bgColor: PropTypes.string,\r\n        color: PropTypes.string,\r\n        labelIcon: PropTypes.elementType.isRequired,\r\n        labelInfo: PropTypes.string,\r\n        labelText: PropTypes.string.isRequired,\r\n      };\r\n\r\nexport default class QtrackerNVNPopUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible : false,\r\n            name: null,\r\n            attach: null,\r\n            description: null,\r\n            errorBlankRequest: false\r\n        }\r\n    }\r\n\r\n    async openModal() {\r\n        await this.setState({\r\n            visible : true,\r\n            name: null,\r\n            description: null,\r\n            attach: null\r\n        });\r\n    }\r\n\r\n    async closeModal() {\r\n        await this.setState({\r\n            visible : false,\r\n            name: null,\r\n            description: null,\r\n            attach: null\r\n        });\r\n\r\n        this.refs.name.value = null;\r\n        this.refs.description.value = null;\r\n        this.refs.attach.value = null;\r\n\r\n    }\r\n\r\n    async request(){\r\n        \r\n      if(this.state.name && this.state.description){\r\n        let has_attach\r\n\r\n        if(this.state.attach){\r\n          has_attach = true\r\n        }else{\r\n          has_attach = false\r\n        }\r\n        let body ={\r\n            name : this.state.name,\r\n            description: this.state.description,\r\n            has_attach: has_attach,\r\n            user: secureStorage.getItem(\"user\")\r\n          }\r\n          let options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n          await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/requestNVN\", options)\r\n              .then(response => response.json())\r\n              .then(async json => {\r\n                  if(json.filename && this.state.attach){\r\n                    const extension = this.state.attach.name.split('.').pop();\r\n                    const file  = new FormData(); \r\n                    file.append('file', this.state.attach, json.filename + \".\" + extension);\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/uploadAttach\", {\r\n                        method: 'POST',\r\n                        body: file,\r\n                        }).then(response =>{\r\n                            if (response.status === 200){\r\n                                this.props.success()\r\n                            }\r\n                        })                       \r\n                    \r\n                  }else{\r\n                      this.props.success()\r\n                  }\r\n              })\r\n              this.closeModal()\r\n    }else{\r\n        this.setState({errorBlankRequest: true})\r\n    }\r\n        \r\n    }    \r\n\r\n    render() {       \r\n        \r\n        return (\r\n            <div>\r\n                    <StyledTreeItem\r\n                    nodeId=\"10\"\r\n                    labelText=\"NotViewInNavis\"\r\n                    labelIcon={SupervisorAccountIcon}\r\n                    onClick={() => this.openModal()}\r\n                    color=\"none\" \r\n                    bgColor=\"none\"\r\n                    />                \r\n                    <div>\r\n                    \r\n                    <Modal visible={this.state.visible} width=\"700\" height=\"500\" effect=\"fadeInUp\" onClickAway={() => this.closeModal()}>\r\n                        <div\r\n                        className={`alert alert-success ${this.state.errorBlankRequest ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => this.setState({errorBlankRequest: false})}\r\n                        >\r\n                            <AlertF type=\"qtracker\" text=\"At least one field is blank!\" margin=\"5px\"/>                            \r\n                        </div>\r\n                        <center className=\"qtracker__popUp__title\" style={{marginBottom: \"30px\"}}><h3>NOT VIEW IN NAVIS</h3></center>\r\n                        <div className=\"qtrackerRequest__container\">\r\n                            <input data-for=\"name-help\" data-tip=\"Name help\" data-iscapture=\"true\" type=\"text\" placeholder=\"Name\" id=\"name\" className=\"qtrackerPopUp__input__text\" ref=\"name\" style={{marginBottom: \"20px\", color:'black'}} value={this.state.name} onChange={(e) => this.setState({name: e.target.value})} ></input>\r\n                            <ReactTooltip id=\"name-help\" place=\"right\" type=\"dark\" effect=\"solid\"/>\r\n\r\n                            <textarea name=\"description\" className=\"qtrackerPopUp__input__text\" rows=\"5\" placeholder=\"Description\" ref=\"description\" style={{marginBottom:\"20px\", color:\"black\"}} onChange={(e) => this.setState({description: e.target.value})}/>\r\n                            \r\n\r\n                            <input type=\"file\" id=\"attach\"className=\"qtrackerPopUp__input__file\"  ref=\"attach\" style={{marginBottom: \"30px\"}} onChange={(e) => this.setState({attach: e.target.files[0]})} ></input>\r\n                            <label for=\"attach\" className=\"attach__label\">Attach: </label>\r\n                            <button class=\"btn btn-sm btn-success\" onClick={() => this.request()} style={{marginRight:\"5px\", fontSize:\"20px\"}}>Submit</button>\r\n                            <button class=\"btn btn-sm btn-danger\" onClick={() => this.closeModal()} style={{marginLeft:\"5px\", fontSize:\"20px\"}}>Cancel</button>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRIPopUp\\qtrackerNRIPopUp.js",["1291"],"import React, { Component } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\nimport SupervisorAccountIcon from '@mui/icons-material/SupervisorAccount';\r\nimport TreeView from '@mui/lab/TreeView';\r\nimport TreeItem, { treeItemClasses } from '@mui/lab/TreeItem';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport AlertF from \"../../components/alert/alert\"\r\nimport ReactTooltip from \"react-tooltip\"\r\n\r\nconst CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    const StyledTreeItemRoot = styled(TreeItem)(({ theme }) => ({\r\n        color: theme.palette.text.secondary,\r\n        [`& .${treeItemClasses.content}`]: {\r\n          color: theme.palette.text.secondary,\r\n          borderTopRightRadius: theme.spacing(2),\r\n          borderBottomRightRadius: theme.spacing(2),\r\n          paddingRight: theme.spacing(1),\r\n          fontWeight: theme.typography.fontWeightMedium,\r\n          '&.Mui-expanded': {\r\n            fontWeight: theme.typography.fontWeightRegular,\r\n          },\r\n          '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n          },\r\n          '&.Mui-focused, &.Mui-selected, &.Mui-selected.Mui-focused': {\r\n            backgroundColor: `var(--tree-view-bg-color, ${theme.palette.action.selected})`,\r\n            color: 'var(--tree-view-color)',\r\n          },\r\n          [`& .${treeItemClasses.label}`]: {\r\n            fontWeight: 'inherit',\r\n            color: 'inherit',\r\n          },\r\n        },\r\n        [`& .${treeItemClasses.group}`]: {\r\n          marginLeft: 0,\r\n          [`& .${treeItemClasses.content}`]: {\r\n            paddingLeft: theme.spacing(2),\r\n          },\r\n        },\r\n      }));\r\n      \r\n      function StyledTreeItem(props) {\r\n        const {\r\n          bgColor,\r\n          color,\r\n          labelIcon: LabelIcon,\r\n          labelInfo,\r\n          labelText,\r\n          ...other\r\n        } = props;\r\n      \r\n        return (\r\n          <StyledTreeItemRoot\r\n            label={\r\n              <Box sx={{ display: 'flex', alignItems: 'center', p: 0.5, pr: 0}}>\r\n                <Box component={LabelIcon} color=\"inherit\" sx={{ mr: 1 }} />\r\n                <Typography variant=\"h5\" sx={{ fontWeight: 'inherit', flexGrow: 1 }}>\r\n                  {labelText}\r\n                </Typography>\r\n                <Typography variant=\"caption\">\r\n                  {labelInfo}\r\n                </Typography>\r\n              </Box>\r\n            }\r\n            style={{\r\n              '--tree-view-color': color,\r\n              '--tree-view-bg-color': bgColor,\r\n            }}\r\n            {...other}\r\n          />\r\n        );\r\n      }\r\n      \r\n      StyledTreeItem.propTypes = {\r\n        bgColor: PropTypes.string,\r\n        color: PropTypes.string,\r\n        labelIcon: PropTypes.elementType.isRequired,\r\n        labelInfo: PropTypes.string,\r\n        labelText: PropTypes.string.isRequired,\r\n      };\r\n\r\nexport default class QtrackerNRIPopUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible : false,\r\n            pipe: null,\r\n            attach: null,\r\n            description: null,\r\n            errorBlankRequest: false\r\n        }\r\n    }\r\n\r\n    async openModal() {\r\n        await this.setState({\r\n            visible : true,\r\n            pipe: null,\r\n            description: null,\r\n            attach: null\r\n        });\r\n    }\r\n\r\n    async closeModal() {\r\n        await this.setState({\r\n            visible : false,\r\n            pipe: null,\r\n            description: null,\r\n            attach: null\r\n        });\r\n\r\n        this.refs.pipe.value = null;\r\n        this.refs.description.value = null;\r\n        this.refs.attach.value = null;\r\n\r\n    }\r\n\r\n    async request(){\r\n        \r\n        if(this.state.pipe && this.state.description){\r\n\r\n            let has_attach\r\n\r\n            if(this.state.attach){\r\n              has_attach = true\r\n            }else{\r\n              has_attach = false\r\n            }\r\n            const body ={\r\n                pipe : this.state.pipe,\r\n                description: this.state.description,\r\n                has_attach: has_attach,\r\n                user: secureStorage.getItem(\"user\")\r\n              }\r\n              const options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/requestNRI\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                if(json.filename && this.state.attach){\r\n                  const extension = this.state.attach.name.split('.').pop();\r\n                  const file  = new FormData(); \r\n                  file.append('file', this.state.attach, json.filename + \".\" + extension);\r\n                  await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/uploadAttach\", {\r\n                      method: 'POST',\r\n                      body: file,\r\n                      }).then(response =>{\r\n                          if (response.status === 200){\r\n                              this.props.success()\r\n                          }\r\n                      })                       \r\n                  \r\n                }else{\r\n                    this.props.success()\r\n                }\r\n            })\r\n            this.closeModal()\r\n        }else{\r\n            this.setState({errorBlankRequest: true})\r\n        }\r\n        \r\n    }    \r\n\r\n    render() {       \r\n        \r\n        return (\r\n            <div>\r\n                    <StyledTreeItem\r\n                    nodeId=\"9\"\r\n                    labelText=\"Isometric\"\r\n                    labelIcon={SupervisorAccountIcon}\r\n                    onClick={() => this.openModal()}\r\n                    color=\"none\" \r\n                    bgColor=\"none\"\r\n                    />                \r\n                    <div>\r\n                    \r\n                    <Modal visible={this.state.visible} width=\"700\" height=\"500\" effect=\"fadeInUp\" onClickAway={() => this.closeModal()}>\r\n                        <div\r\n                        className={`alert alert-success ${this.state.errorBlankRequest ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => this.setState({errorBlankRequest: false})}\r\n                        >\r\n                            <AlertF type=\"qtracker\" text=\"At least one field is blank!\" margin=\"5px\"/>                            \r\n                        </div>\r\n                        <center className=\"qtracker__popUp__title\" style={{marginBottom: \"30px\"}}><h3>NOT REPORTING IN ISOMETRIC</h3></center>\r\n                        <div className=\"qtrackerRequest__container\">\r\n                            <input data-for=\"pipe-help\" data-tip=\"Pipe help\" data-iscapture=\"true\" type=\"text\" placeholder=\"Pipe\" id=\"pipe\" className=\"qtrackerPopUp__input__text\" ref=\"pipe\" style={{marginBottom: \"20px\", color:'black'}} value={this.state.pipe} onChange={(e) => this.setState({pipe: e.target.value})} ></input>\r\n                            <ReactTooltip id=\"pipe-help\" place=\"right\" type=\"dark\" effect=\"solid\"/>\r\n\r\n                            <textarea name=\"description\" className=\"qtrackerPopUp__input__text\" rows=\"5\" placeholder=\"Description\" ref=\"description\" style={{marginBottom:\"20px\", color:\"black\"}} onChange={(e) => this.setState({description: e.target.value})}/>\r\n                            \r\n\r\n                            <input type=\"file\" id=\"attach\"className=\"qtrackerPopUp__input__file\"  ref=\"attach\" style={{marginBottom: \"30px\"}}  onChange={(e) => this.setState({attach: e.target.files[0]})} ></input>\r\n                            <label for=\"attach\" className=\"attach__label\">Attach: </label>\r\n                            <button class=\"btn btn-sm btn-success\" onClick={() => this.request()} style={{marginRight:\"5px\", fontSize:\"20px\"}}>Submit</button>\r\n                            <button class=\"btn btn-sm btn-danger\" onClick={() => this.closeModal()} style={{marginLeft:\"5px\", fontSize:\"20px\"}}>Cancel</button>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerRRPopUp\\qtrackerRRPopUp.js",["1292"],"import React, { Component } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\nimport SupervisorAccountIcon from '@mui/icons-material/SupervisorAccount';\r\nimport TreeView from '@mui/lab/TreeView';\r\nimport TreeItem, { treeItemClasses } from '@mui/lab/TreeItem';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport AlertF from \"../alert/alert\"\r\nimport ReactTooltip from \"react-tooltip\"\r\n\r\n\r\nconst CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    const StyledTreeItemRoot = styled(TreeItem)(({ theme }) => ({\r\n        color: theme.palette.text.secondary,\r\n        [`& .${treeItemClasses.content}`]: {\r\n          color: theme.palette.text.secondary,\r\n          borderTopRightRadius: theme.spacing(2),\r\n          borderBottomRightRadius: theme.spacing(2),\r\n          paddingRight: theme.spacing(1),\r\n          fontWeight: theme.typography.fontWeightMedium,\r\n          '&.Mui-expanded': {\r\n            fontWeight: theme.typography.fontWeightRegular,\r\n          },\r\n          '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n          },\r\n          '&.Mui-focused, &.Mui-selected, &.Mui-selected.Mui-focused': {\r\n            backgroundColor: `var(--tree-view-bg-color, ${theme.palette.action.selected})`,\r\n            color: 'var(--tree-view-color)',\r\n          },\r\n          [`& .${treeItemClasses.label}`]: {\r\n            fontWeight: 'inherit',\r\n            color: 'inherit',\r\n          },\r\n        },\r\n        [`& .${treeItemClasses.group}`]: {\r\n          marginLeft: 0,\r\n          [`& .${treeItemClasses.content}`]: {\r\n            paddingLeft: theme.spacing(2),\r\n          },\r\n        },\r\n      }));\r\n      \r\n      function StyledTreeItem(props) {\r\n        const {\r\n          bgColor,\r\n          color,\r\n          labelIcon: LabelIcon,\r\n          labelInfo,\r\n          labelText,\r\n          ...other\r\n        } = props;\r\n      \r\n        return (\r\n          <StyledTreeItemRoot\r\n            label={\r\n              <Box sx={{ display: 'flex', alignItems: 'center', p: 0.5, pr: 0}}>\r\n                <Box component={LabelIcon} color=\"inherit\" sx={{ mr: 1 }} />\r\n                <Typography variant=\"h5\" sx={{ fontWeight: 'inherit', flexGrow: 1 }}>\r\n                  {labelText}\r\n                </Typography>\r\n                <Typography variant=\"caption\">\r\n                  {labelInfo}\r\n                </Typography>\r\n              </Box>\r\n            }\r\n            style={{\r\n              '--tree-view-color': color,\r\n              '--tree-view-bg-color': bgColor,\r\n            }}\r\n            {...other}\r\n          />\r\n        );\r\n      }\r\n      \r\n      StyledTreeItem.propTypes = {\r\n        bgColor: PropTypes.string,\r\n        color: PropTypes.string,\r\n        labelIcon: PropTypes.elementType.isRequired,\r\n        labelInfo: PropTypes.string,\r\n        labelText: PropTypes.string.isRequired,\r\n      };\r\n\r\nexport default class QtrackerRRPopUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible : false,\r\n            scope: null,\r\n            items: null,\r\n            description: null,\r\n            errorBlankRequest: false\r\n        }\r\n    }\r\n\r\n    async openModal() {\r\n        await this.setState({\r\n            visible : true,\r\n            scope: null,\r\n            description: null,\r\n            items: null\r\n        });\r\n    }\r\n\r\n    async closeModal() {\r\n        await this.setState({\r\n            visible : false,\r\n            scope: null,\r\n            description: null,\r\n            items: null\r\n        });\r\n\r\n        this.refs.scope.value = null;\r\n        this.refs.description.value = null;\r\n        this.refs.items.value = null;\r\n\r\n    }\r\n\r\n    async request(){\r\n        \r\n        if(this.state.scope && this.state.description && this.state.items){\r\n            const body ={\r\n                scope : this.state.scope,\r\n                description: this.state.description,\r\n                items: this.state.items,\r\n                user: secureStorage.getItem(\"user\")\r\n              }\r\n              const options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n              await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/requestRR\", options)\r\n                  .then(response => response.json())\r\n                  .then(json => {\r\n                      if(json.filename){\r\n                          this.props.success()\r\n                      }\r\n                  })\r\n                  this.closeModal()\r\n        }else{\r\n            this.setState({errorBlankRequest: true})\r\n        }\r\n        \r\n    }    \r\n\r\n    render() {       \r\n        \r\n        return (\r\n            <div>\r\n                    <StyledTreeItem\r\n                    nodeId=\"14\"\r\n                    labelText=\"RequestReport\"\r\n                    labelIcon={SupervisorAccountIcon}\r\n                    onClick={() => this.openModal()}\r\n                    color=\"none\" \r\n                    bgColor=\"none\"\r\n                    />                \r\n                    <div>\r\n                    \r\n                    <Modal visible={this.state.visible} width=\"700\" height=\"550\" effect=\"fadeInUp\" onClickAway={() => this.closeModal()}>\r\n                        <div\r\n                        className={`alert alert-success ${this.state.errorBlankRequest ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => this.setState({errorBlankRequest: false})}\r\n                        >\r\n                            <AlertF type=\"qtracker\" text=\"At least one field is blank!\" margin=\"5px\"/>                            \r\n                        </div>\r\n                        <center className=\"qtracker__popUp__title\" style={{marginBottom: \"30px\"}}><h3>REQUEST REPORT</h3></center>\r\n                        <div className=\"qtrackerRequest__container\">\r\n                            <textarea data-for=\"items-help\" data-tip=\"Items help\" data-iscapture=\"true\" name=\"items\" className=\"qtrackerPopUp__input__text\" rows=\"3\" placeholder=\"Items to report\" ref=\"items\" style={{marginBottom:\"20px\", color:\"black\"}} onChange={(e) => this.setState({items: e.target.value})}/>\r\n                            <ReactTooltip id=\"items-help\" place=\"right\" type=\"dark\" effect=\"solid\"/>\r\n\r\n                            <input data-for=\"scope-help\" data-tip=\"Scope help\" data-iscapture=\"true\" type=\"text\" placeholder=\"Scope\" id=\"scope\" className=\"qtrackerPopUp__input__text\" ref=\"scope\" style={{marginBottom: \"20px\", color:'black'}} value={this.state.scope} onChange={(e) => this.setState({scope: e.target.value})} ></input>\r\n                            <ReactTooltip id=\"scope-help\" place=\"right\" type=\"dark\" effect=\"solid\"/>\r\n\r\n                            <textarea name=\"description\" className=\"qtrackerPopUp__input__text\" rows=\"5\" placeholder=\"Description\" ref=\"description\" style={{marginBottom:\"20px\", color:\"black\"}} onChange={(e) => this.setState({description: e.target.value})}/>                            \r\n\r\n                            <button class=\"btn btn-sm btn-success\" onClick={() => this.request()} style={{marginRight:\"5px\", fontSize:\"20px\"}}>Submit</button>\r\n                            <button class=\"btn btn-sm btn-danger\" onClick={() => this.closeModal()} style={{marginLeft:\"5px\", fontSize:\"20px\"}}>Cancel</button>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNWCPopUp\\qtrackerNWCPopUp.js",["1293"],"import React, { Component } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\nimport SupervisorAccountIcon from '@mui/icons-material/SupervisorAccount';\r\nimport TreeView from '@mui/lab/TreeView';\r\nimport TreeItem, { treeItemClasses } from '@mui/lab/TreeItem';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport './qtrackerNWCPopUp.css'\r\nimport AlertF from \"../../components/alert/alert\"\r\nimport ReactTooltip from \"react-tooltip\"\r\n\r\n\r\nconst CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    const StyledTreeItemRoot = styled(TreeItem)(({ theme }) => ({\r\n        color: theme.palette.text.secondary,\r\n        [`& .${treeItemClasses.content}`]: {\r\n          color: theme.palette.text.secondary,\r\n          borderTopRightRadius: theme.spacing(2),\r\n          borderBottomRightRadius: theme.spacing(2),\r\n          paddingRight: theme.spacing(1),\r\n          fontWeight: theme.typography.fontWeightMedium,\r\n          '&.Mui-expanded': {\r\n            fontWeight: theme.typography.fontWeightRegular,\r\n          },\r\n          '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n          },\r\n          '&.Mui-focused, &.Mui-selected, &.Mui-selected.Mui-focused': {\r\n            backgroundColor: `var(--tree-view-bg-color, ${theme.palette.action.selected})`,\r\n            color: 'var(--tree-view-color)',\r\n          },\r\n          [`& .${treeItemClasses.label}`]: {\r\n            fontWeight: 'inherit',\r\n            color: 'inherit',\r\n          },\r\n        },\r\n        [`& .${treeItemClasses.group}`]: {\r\n          marginLeft: 0,\r\n          [`& .${treeItemClasses.content}`]: {\r\n            paddingLeft: theme.spacing(2),\r\n          },\r\n        },\r\n      }));\r\n      \r\n      function StyledTreeItem(props) {\r\n        const {\r\n          bgColor,\r\n          color,\r\n          labelIcon: LabelIcon,\r\n          labelInfo,\r\n          labelText,\r\n          ...other\r\n        } = props;\r\n      \r\n        return (\r\n          <StyledTreeItemRoot\r\n            label={\r\n              <Box sx={{ display: 'flex', alignItems: 'center', p: 0.5, pr: 0}}>\r\n                <Box component={LabelIcon} color=\"inherit\" sx={{ mr: 1 }} />\r\n                <Typography variant=\"h5\" sx={{ fontWeight: 'inherit', flexGrow: 1 }}>\r\n                  {labelText}\r\n                </Typography>\r\n                <Typography variant=\"caption\">\r\n                  {labelInfo}\r\n                </Typography>\r\n              </Box>\r\n            }\r\n            style={{\r\n              '--tree-view-color': color,\r\n              '--tree-view-bg-color': bgColor,\r\n            }}\r\n            {...other}\r\n          />\r\n        );\r\n      }\r\n      \r\n      StyledTreeItem.propTypes = {\r\n        bgColor: PropTypes.string,\r\n        color: PropTypes.string,\r\n        labelIcon: PropTypes.elementType.isRequired,\r\n        labelInfo: PropTypes.string,\r\n        labelText: PropTypes.string.isRequired,\r\n      };\r\n\r\nexport default class QtrackerNWCPopUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible : false,\r\n            spref: null,\r\n            attach: null,\r\n            description: null,\r\n            errorBlankRequest: false,\r\n        }\r\n    }\r\n\r\n    async openModal() {\r\n        await this.setState({\r\n            visible : true,\r\n            spref: null,\r\n            description: null,\r\n            attach: null\r\n        });\r\n    }\r\n\r\n    async closeModal() {\r\n        await this.setState({\r\n            visible : false,\r\n            spref: null,\r\n            description: null,\r\n            attach: null\r\n        });\r\n\r\n        this.refs.spref.value = null;\r\n        this.refs.description.value = null;\r\n        this.refs.attach.value = null;\r\n\r\n    }\r\n\r\n    async request(){\r\n        \r\n        if(this.state.spref && this.state.description){\r\n\r\n            let has_attach\r\n\r\n            if(this.state.attach){\r\n              has_attach = true\r\n            }else{\r\n              has_attach = false\r\n            }\r\n\r\n            let body ={\r\n                spref : this.state.spref,\r\n                description: this.state.description,\r\n                has_attach: has_attach,\r\n                user: secureStorage.getItem(\"user\")\r\n              }\r\n              let options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n              await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/requestNWC\", options)\r\n                  .then(response => response.json())\r\n                  .then(async json => {\r\n                      if(json.filename && this.state.attach){\r\n                        const extension = this.state.attach.name.split('.').pop();\r\n                        const file  = new FormData(); \r\n                        file.append('file', this.state.attach, json.filename + \".\" + extension);\r\n                        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/uploadAttach\", {\r\n                            method: 'POST',\r\n                            body: file,\r\n                            }).then(response =>{\r\n                                if (response.status === 200){\r\n                                    this.props.success()\r\n                                }\r\n                            })                       \r\n                        \r\n                      }else{\r\n                          this.props.success()\r\n                      }\r\n                  })\r\n                  this.closeModal()\r\n        }else{\r\n            this.setState({errorBlankRequest: true})\r\n        }\r\n        \r\n    }    \r\n\r\n    render() {       \r\n        \r\n        return (\r\n            <div>\r\n                    <StyledTreeItem\r\n                    nodeId=\"9\"\r\n                    labelText=\"NotWorkingComponent\"\r\n                    labelIcon={SupervisorAccountIcon}\r\n                    onClick={() => this.openModal()}\r\n                    color=\"none\" \r\n                    bgColor=\"none\"\r\n                    />                \r\n                    <div>\r\n                    \r\n                    <Modal visible={this.state.visible} width=\"700\" height=\"500\" effect=\"fadeInUp\" onClickAway={() => this.closeModal()}>\r\n                        <div\r\n                        className={`alert alert-success ${this.state.errorBlankRequest ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => this.setState({errorBlankRequest: false})}\r\n                        >\r\n                            <AlertF type=\"qtracker\" text=\"At least one field is blank!\" margin=\"5px\"/>                            \r\n                        </div>\r\n                        \r\n                        <center className=\"qtracker__popUp__title\" style={{marginBottom: \"30px\"}}><h3>NOT WORKING COMPONENT</h3></center>\r\n                        <div className=\"qtrackerRequest__container\">\r\n                            <input data-for=\"spref-help\" data-tip=\"SPREF help\" data-iscapture=\"true\" type=\"text\" placeholder=\"SPREF\" id=\"spref\" className=\"qtrackerPopUp__input__text\" ref=\"spref\" style={{marginBottom: \"20px\", color:'black'}} value={this.state.spref} onChange={(e) => this.setState({spref: e.target.value})} ></input>\r\n                            \r\n                            <ReactTooltip id=\"spref-help\" place=\"right\" type=\"dark\" effect=\"solid\"/>\r\n                            \r\n                            <textarea name=\"description\" className=\"qtrackerPopUp__input__text\" rows=\"5\" placeholder=\"Description\" ref=\"description\" style={{marginBottom:\"20px\", color:\"black\"}} onChange={(e) => this.setState({description: e.target.value})}/>\r\n                            \r\n\r\n                            <input type=\"file\" id=\"attach\" className=\"qtrackerPopUp__input__file\"  ref=\"attach\" style={{marginBottom: \"30px\"}} onChange={(e) => this.setState({attach: e.target.files[0]})} ></input>\r\n                            <label for=\"attach\" className=\"attach__label\">Attach: </label>\r\n                            <button class=\"btn btn-sm btn-success\" onClick={() => this.request()} style={{marginRight:\"5px\", fontSize:\"20px\"}}>Submit</button>\r\n                            <button class=\"btn btn-sm btn-danger\" onClick={() => this.closeModal()} style={{marginLeft:\"5px\", fontSize:\"20px\"}}>Cancel</button>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRBPopUp\\qtrackerNRBPopUp.js",["1294"],"import React, { Component } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\nimport SupervisorAccountIcon from '@mui/icons-material/SupervisorAccount';\r\nimport TreeView from '@mui/lab/TreeView';\r\nimport TreeItem, { treeItemClasses } from '@mui/lab/TreeItem';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport AlertF from \"../../components/alert/alert\"\r\nimport ReactTooltip from \"react-tooltip\"\r\n\r\nconst CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    const StyledTreeItemRoot = styled(TreeItem)(({ theme }) => ({\r\n        color: theme.palette.text.secondary,\r\n        [`& .${treeItemClasses.content}`]: {\r\n          color: theme.palette.text.secondary,\r\n          borderTopRightRadius: theme.spacing(2),\r\n          borderBottomRightRadius: theme.spacing(2),\r\n          paddingRight: theme.spacing(1),\r\n          fontWeight: theme.typography.fontWeightMedium,\r\n          '&.Mui-expanded': {\r\n            fontWeight: theme.typography.fontWeightRegular,\r\n          },\r\n          '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n          },\r\n          '&.Mui-focused, &.Mui-selected, &.Mui-selected.Mui-focused': {\r\n            backgroundColor: `var(--tree-view-bg-color, ${theme.palette.action.selected})`,\r\n            color: 'var(--tree-view-color)',\r\n          },\r\n          [`& .${treeItemClasses.label}`]: {\r\n            fontWeight: 'inherit',\r\n            color: 'inherit',\r\n          },\r\n        },\r\n        [`& .${treeItemClasses.group}`]: {\r\n          marginLeft: 0,\r\n          [`& .${treeItemClasses.content}`]: {\r\n            paddingLeft: theme.spacing(2),\r\n          },\r\n        },\r\n      }));\r\n      \r\n      function StyledTreeItem(props) {\r\n        const {\r\n          bgColor,\r\n          color,\r\n          labelIcon: LabelIcon,\r\n          labelInfo,\r\n          labelText,\r\n          ...other\r\n        } = props;\r\n      \r\n        return (\r\n          <StyledTreeItemRoot\r\n            label={\r\n              <Box sx={{ display: 'flex', alignItems: 'center', p: 0.5, pr: 0}}>\r\n                <Box component={LabelIcon} color=\"inherit\" sx={{ mr: 1 }} />\r\n                <Typography variant=\"h5\" sx={{ fontWeight: 'inherit', flexGrow: 1 }}>\r\n                  {labelText}\r\n                </Typography>\r\n                <Typography variant=\"caption\">\r\n                  {labelInfo}\r\n                </Typography>\r\n              </Box>\r\n            }\r\n            style={{\r\n              '--tree-view-color': color,\r\n              '--tree-view-bg-color': bgColor,\r\n            }}\r\n            {...other}\r\n          />\r\n        );\r\n      }\r\n      \r\n      StyledTreeItem.propTypes = {\r\n        bgColor: PropTypes.string,\r\n        color: PropTypes.string,\r\n        labelIcon: PropTypes.elementType.isRequired,\r\n        labelInfo: PropTypes.string,\r\n        labelText: PropTypes.string.isRequired,\r\n      };\r\n\r\nexport default class QtrackerNRBPopUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible : false,\r\n            pipe: null,\r\n            attach: null,\r\n            description: null,\r\n            errorBlankRequest: false\r\n        }\r\n    }\r\n\r\n    async openModal() {\r\n        await this.setState({\r\n            visible : true,\r\n            pipe: null,\r\n            description: null,\r\n            attach: null\r\n        });\r\n    }\r\n\r\n    async closeModal() {\r\n        await this.setState({\r\n            visible : false,\r\n            pipe: null,\r\n            description: null,\r\n            attach: null\r\n        });\r\n\r\n        this.refs.pipe.value = null;\r\n        this.refs.description.value = null;\r\n        this.refs.attach.value = null;\r\n\r\n    }\r\n\r\n    async request(){\r\n        \r\n      if(this.state.pipe && this.state.description){\r\n\r\n          let has_attach\r\n\r\n          if(this.state.attach){\r\n            has_attach = true\r\n          }else{\r\n            has_attach = false\r\n          }\r\n\r\n          const body ={\r\n            pipe : this.state.pipe,\r\n            description: this.state.description,\r\n            has_attach: has_attach,\r\n            user: secureStorage.getItem(\"user\")\r\n          }\r\n          const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/requestNRB\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            if(json.filename && this.state.attach){\r\n              const extension = this.state.attach.name.split('.').pop();\r\n              const file  = new FormData(); \r\n              file.append('file', this.state.attach, json.filename + \".\" + extension);\r\n              await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/uploadAttach\", {\r\n                  method: 'POST',\r\n                  body: file,\r\n                  }).then(response =>{\r\n                      if (response.status === 200){\r\n                          this.props.success()\r\n                      }\r\n                  })                       \r\n              \r\n            }else{\r\n                this.props.success()\r\n            }\r\n        })\r\n        this.closeModal()\r\n    }else{\r\n        this.setState({errorBlankRequest: true})\r\n    }\r\n        \r\n    }    \r\n\r\n    render() {       \r\n        \r\n        return (\r\n            <div>\r\n                    <StyledTreeItem\r\n                    nodeId=\"9\"\r\n                    labelText=\"BFile\"\r\n                    labelIcon={SupervisorAccountIcon}\r\n                    onClick={() => this.openModal()}\r\n                    color=\"none\" \r\n                    bgColor=\"none\"\r\n                    />                \r\n                    <div>\r\n                    \r\n                    <Modal visible={this.state.visible} width=\"700\" height=\"500\" effect=\"fadeInUp\" onClickAway={() => this.closeModal()}>\r\n                        <div\r\n                        className={`alert alert-success ${this.state.errorBlankRequest ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => this.setState({errorBlankRequest: false})}\r\n                        >\r\n                            <AlertF type=\"qtracker\" text=\"At least one field is blank!\" margin=\"5px\"/>                            \r\n                        </div>\r\n                        <center className=\"qtracker__popUp__title\" style={{marginBottom: \"30px\"}}><h3>NOT REPORTING IN BFILE</h3></center>\r\n                        <div className=\"qtrackerRequest__container\">\r\n                          <input data-for=\"pipe-help\" data-tip=\"Pipe help\" data-iscapture=\"true\" type=\"text\" placeholder=\"Pipe\" id=\"pipe\" className=\"qtrackerPopUp__input__text\" ref=\"pipe\" style={{marginBottom: \"20px\", color:'black'}} value={this.state.pipe} onChange={(e) => this.setState({pipe: e.target.value})} ></input>\r\n                            <ReactTooltip id=\"pipe-help\" place=\"right\" type=\"dark\" effect=\"solid\"/>\r\n                            <textarea name=\"description\" className=\"qtrackerPopUp__input__text\" rows=\"5\" placeholder=\"Description\" ref=\"description\" style={{marginBottom:\"20px\", color:\"black\"}} onChange={(e) => this.setState({description: e.target.value})}/>\r\n                            \r\n\r\n                            <input type=\"file\" id=\"attach\"className=\"qtrackerPopUp__input__file\"  ref=\"attach\" style={{marginBottom: \"30px\"}} onChange={(e) => this.setState({attach: e.target.files[0]})} ></input>\r\n                            <label for=\"attach\" className=\"attach__label\">Attach: </label>\r\n                            <button class=\"btn btn-sm btn-success\" onClick={() => this.request()} style={{marginRight:\"5px\", fontSize:\"20px\"}}>Submit</button>\r\n                            <button class=\"btn btn-sm btn-danger\" onClick={() => this.closeModal()} style={{marginLeft:\"5px\", fontSize:\"20px\"}}>Cancel</button>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\qtrackerNRIDSPopUp\\qtrackerNRIDSPopUp.js",["1295"],"import React, { Component } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\nimport SupervisorAccountIcon from '@mui/icons-material/SupervisorAccount';\r\nimport TreeView from '@mui/lab/TreeView';\r\nimport TreeItem, { treeItemClasses } from '@mui/lab/TreeItem';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport AlertF from \"../../components/alert/alert\"\r\nimport ReactTooltip from \"react-tooltip\"\r\n\r\nconst CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    const StyledTreeItemRoot = styled(TreeItem)(({ theme }) => ({\r\n        color: theme.palette.text.secondary,\r\n        [`& .${treeItemClasses.content}`]: {\r\n          color: theme.palette.text.secondary,\r\n          borderTopRightRadius: theme.spacing(2),\r\n          borderBottomRightRadius: theme.spacing(2),\r\n          paddingRight: theme.spacing(1),\r\n          fontWeight: theme.typography.fontWeightMedium,\r\n          '&.Mui-expanded': {\r\n            fontWeight: theme.typography.fontWeightRegular,\r\n          },\r\n          '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n          },\r\n          '&.Mui-focused, &.Mui-selected, &.Mui-selected.Mui-focused': {\r\n            backgroundColor: `var(--tree-view-bg-color, ${theme.palette.action.selected})`,\r\n            color: 'var(--tree-view-color)',\r\n          },\r\n          [`& .${treeItemClasses.label}`]: {\r\n            fontWeight: 'inherit',\r\n            color: 'inherit',\r\n          },\r\n        },\r\n        [`& .${treeItemClasses.group}`]: {\r\n          marginLeft: 0,\r\n          [`& .${treeItemClasses.content}`]: {\r\n            paddingLeft: theme.spacing(2),\r\n          },\r\n        },\r\n      }));\r\n      \r\n      function StyledTreeItem(props) {\r\n        const {\r\n          bgColor,\r\n          color,\r\n          labelIcon: LabelIcon,\r\n          labelInfo,\r\n          labelText,\r\n          ...other\r\n        } = props;\r\n      \r\n        return (\r\n          <StyledTreeItemRoot\r\n            label={\r\n              <Box sx={{ display: 'flex', alignItems: 'center', p: 0.5, pr: 0}}>\r\n                <Box component={LabelIcon} color=\"inherit\" sx={{ mr: 1 }} />\r\n                <Typography variant=\"h5\" sx={{ fontWeight: 'inherit', flexGrow: 1 }}>\r\n                  {labelText}\r\n                </Typography>\r\n                <Typography variant=\"caption\">\r\n                  {labelInfo}\r\n                </Typography>\r\n              </Box>\r\n            }\r\n            style={{\r\n              '--tree-view-color': color,\r\n              '--tree-view-bg-color': bgColor,\r\n            }}\r\n            {...other}\r\n          />\r\n        );\r\n      }\r\n      \r\n      StyledTreeItem.propTypes = {\r\n        bgColor: PropTypes.string,\r\n        color: PropTypes.string,\r\n        labelIcon: PropTypes.elementType.isRequired,\r\n        labelInfo: PropTypes.string,\r\n        labelText: PropTypes.string.isRequired,\r\n      };\r\n\r\nexport default class QtrackerNRIDSPopUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible : false,\r\n            name: null,\r\n            errorBlankRequest: false\r\n        }\r\n    }\r\n\r\n    async openModal() {\r\n        await this.setState({\r\n            visible : true,\r\n            name: null,\r\n        });\r\n    }\r\n\r\n    async closeModal() {\r\n        await this.setState({\r\n            visible : false,\r\n            name: null\r\n        });\r\n\r\n        this.refs.name.value = null;\r\n\r\n    }\r\n\r\n    async request(){\r\n        \r\n        if(this.state.name){\r\n            const body ={\r\n                name : this.state.name,\r\n                user: secureStorage.getItem(\"user\")\r\n              }\r\n              const options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n              await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/requestNRIDS\", options)\r\n                  .then(response => response.json())\r\n                  .then(json => {\r\n                      if(json.filename){\r\n                          this.props.success()\r\n                      }\r\n                  })\r\n                  this.closeModal()\r\n        }else{\r\n            this.setState({errorBlankRequest: true})\r\n        }\r\n        \r\n    }    \r\n\r\n    render() {       \r\n        \r\n        return (\r\n            <div>\r\n                    <StyledTreeItem\r\n                    nodeId=\"15\"\r\n                    labelText=\"IFC/DGN/STEP\"\r\n                    labelIcon={SupervisorAccountIcon}\r\n                    onClick={() => this.openModal()}\r\n                    color=\"none\" \r\n                    bgColor=\"none\"\r\n                    />                \r\n                    <div>\r\n                    \r\n                    <Modal visible={this.state.visible} width=\"700\" height=\"280\" effect=\"fadeInUp\" onClickAway={() => this.closeModal()}>\r\n                        <div\r\n                        className={`alert alert-success ${this.state.errorBlankRequest ? 'alert-shown' : 'alert-hidden'}`}\r\n                        onTransitionEnd={() => this.setState({errorBlankRequest: false})}\r\n                        >\r\n                            <AlertF type=\"qtracker\" text=\"At least one field is blank!\" margin=\"5px\"/>                            \r\n                        </div>\r\n                        <center className=\"qtracker__popUp__title\" style={{marginBottom: \"30px\"}}><h3>IFC / DGN / STEP</h3></center>\r\n                        <div className=\"qtrackerRequest__container\">\r\n                            <input data-for=\"name-help\" data-tip=\"Name help\" data-iscapture=\"true\" type=\"text\" placeholder=\"Name\" id=\"name\" className=\"qtrackerPopUp__input__text\" ref=\"name\" style={{marginBottom: \"20px\", color:'black'}} value={this.state.name} onChange={(e) => this.setState({name: e.target.value})} ></input>\r\n                            <ReactTooltip id=\"name-help\" place=\"right\" type=\"dark\" effect=\"solid\"/>\r\n\r\n                            <button class=\"btn btn-sm btn-success\" onClick={() => this.request()} style={{marginRight:\"5px\", fontSize:\"20px\"}}>Submit</button>\r\n                            <button class=\"btn btn-sm btn-danger\" onClick={() => this.closeModal()} style={{marginLeft:\"5px\", fontSize:\"20px\"}}>Cancel</button>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\xampp\\htdocs\\isotracker-react\\src\\index.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\App.js",["1296"],"C:\\xampp\\htdocs\\isotracker-react\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\changePassword\\changePassword.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\register\\register.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\instrumentation\\instrumentation.js",["1297","1298","1299"],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\equipments\\equipments.js",["1300","1301","1302"],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\civil\\civil.js",["1303","1304","1305"],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\isoCtrl\\isoCtrl.js",["1306","1307","1308","1309","1310"],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\home\\home.js",["1311","1312"],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\piping\\piping.js",["1313","1314","1315"],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\progressCurve\\progressCurve.js",["1316","1317","1318"],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\navis\\navis.js",["1319"],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\pitrequests\\pitrequests.js",["1320","1321"],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\electrical\\electrical.js",["1322","1323","1324"],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\welcomeLoginF\\welcomeLoginF.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\sptracker\\sptracker.js",["1325","1326","1327","1328","1329"],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\pitRequestView\\pitRequestView.js",["1330","1331","1332","1333","1334","1335"],"C:\\xampp\\htdocs\\isotracker-react\\src\\pages\\isoCtrlF\\isoCtrlF.js",["1336","1337","1338","1339","1340","1341","1342","1343"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\roleDropDown\\roleDropDown.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\alert\\alert.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\instrumentationEstimatedDataTable\\instrumentationEstimatedDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\instrumentationModelledDataTable\\instrumentationModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\navBar\\navBar.js",["1344","1345","1346","1347","1348"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progressPlotInstrumentation\\progressPlotInstrumentation.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\instrumentationTypesDataTable\\instrumentationTypesDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\instExcel\\instExcel.js",["1349"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\instExcelEdit\\instExcelEdit.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\equipModelledDataTable\\equipModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\equipEstimatedDataTable\\equipEstimatedDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\equipTypesDataTable\\equipTypesDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progressPlotCivils\\progressPlotCivils.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\EquipmentsNavBtns\\equipmentsNavBtns.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\equipExcelEdit\\equipExcelEdit.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progressPlotEquipments\\progressPlotEquipments.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\civilEstimatedDataTable\\civilEstimatedDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\civilExcel\\civilExcel.js",["1350"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\equipExcel\\equipExcel.js",["1351"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\civilExcelEdit\\civilExcelEdit.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\byPassDataTable\\byPassDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadBomIsocontrolPopUp\\uploadBomIsocontrolPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\issuedDataTable\\issuedDataTable.js",["1352","1353","1354","1355","1356"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\civilTypesDataTable\\civilTypesDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\isoControlGroupLineIdDataTable\\isoControlGroupLineIdDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\civilModelledDataTable\\civilModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\isoControlFullDataTable\\isoControlFullDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\isoControlNotModelledDataTable\\isoControlNotModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\isoControlModelledDataTable\\isoControlModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\loadingScreen\\loadingScreen.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\modelledDataTable\\modelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progressBtn\\progressBtn.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\modelledBtn\\modelledBtn.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\usersDataTable\\usersDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\reportBoxBtns\\reportBoxBtns.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\timeTrackDataTable\\timeTrackDataTable.js",["1357"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progressPlot\\progressPlot.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\procInstTable\\procInstTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\statusDataTable\\statusDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\historyDataTable\\historyDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\onHoldTable\\onHoldTable.js",["1358","1359","1360","1361","1362","1363","1364","1365","1366"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\binTable\\binTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\myTrayBtn\\myTrayBtn.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\checkInTable\\checkInTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\myTrayTable\\myTrayTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\actionBtns\\actionBtns.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\dragAndDrop\\dragAndDrop.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\navBtns\\navBtns.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\reportBtns\\reportBtns.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\stateTable\\stateTable.js",["1367","1368","1369","1370"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\datatable\\datatable.js",["1371","1372","1373"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\csptrackerKeyParams\\csptrackerKeyParams.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerViewDataTable\\qtrackerViewDataTable.js",["1374","1375"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\cancelRevPopUp\\cancelRevPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\holdsPopUp\\holdsPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\commentPopUp\\commentPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\renamePopUp\\renamePopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\deleteByPassPopUp\\deleteByPassPopUp.js",["1376"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\byPassRejNACommentPopUp\\byPassRejNACommentPopUp.js",["1377"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\acceptByPassPopUp\\acceptByPassPopUp.js",["1378"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\editByPassPopUp\\editByPassPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\newRevPopUp\\newRevPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\addUserPopUp\\addUserPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\updateMassivePopUp\\updateMassivePopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\holdComment\\holdComment.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\cancelIso\\cancelIso.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\actionExtra\\actionExtra.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNRISpecPopUp\\qtrackerNRISpecPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerRPSpecPopUp\\qtrackerRPSpecPopUp.js",["1379"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNRBSpecPopUp\\qtrackerNRBSpecPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNRIDSSpecPopUp\\qtrackerNRIDSSpecPopUp.js",["1380"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNVNSpecPopUp\\qtrackerNVNSpecPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNWCSpecPopUp\\qtrackerNWCSpecPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\forceClaimPopUp\\forceClaimPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\revisionPopUp\\revisionPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\byPassPopUp\\byPassPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadProcInst\\uploadProcInst.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadPopUp\\uploadPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\updateMassive\\updateMassive.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadReportPopUp\\uploadReportPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\updateBOMPopUp\\updateBOMPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadElectricalEstimatedPopUp\\uploadElectricalEstimatedPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadPipesEstimatedPopUp\\uploadPipesEstimatedPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadElectricalModelledPopUp\\uploadElectricalModelledPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadCivilModelledPopUp\\uploadCivilModelledPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadCivilEstimtedPopUp\\uploadCivilEstimtedPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadInstrumentationModelledPopUp\\uploadInstrumentationModelledPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadInstrumentationEstimatedPopUp\\uploadInstrumentationEstimatedPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadEquisModelledPopUp\\uploadEquisModelledPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadEquisEstimatedPopUp\\uploadEquisEstimatedPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\deleteUserConfPopUp\\deleteUserConfPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\manageRolesPopUp\\manageRolesPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\csptrackerRequestsDataTable\\csptrackerRequestsDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\csptrackerRequestPopUp\\csptrackerRequestPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\csptrackerDataTable\\csptrackerDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\elecExcelEdit\\elecExcelEdit.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\elecExcel\\elecExcel.js",["1381"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\elecTypesDataTable\\elecTypesDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progresPlotElecs\\progressPlotElecs.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\electricalModelledDataTable\\electricalModelledDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\electricalEstimatedDataTable\\electricalEstimatedDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\navisTable\\navisTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\menuListPit\\menuListPit.js",["1382","1383"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progressPlotCurve\\progressPlotCurve.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\pipingExcelEdit\\pipingExcelEdit.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\pipingExcel\\pipingExcel.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\pipingTypesDataTable\\pipingTypesDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\progressPlotPiping\\progressPlotPiping.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\pipingEstimatedDataTable\\pipingEstimatedDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\loadingScreen3D\\loadingScreen3D.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\menuList\\menuList.js",["1384","1385","1386","1387"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\reportsBtn\\reportsBtn.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\issuedBtn\\issuedBtn.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\procInsBtn\\procInsBtn.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\binBtn\\binBtn.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\onHoldBtn\\onHoldBtn.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\selectPag\\selectPag.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\updateDrawingPopUp\\updateDrawingPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\uploadDrawingPopUp\\uploadDrawingPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\menuListPitList\\menuListPitList.js",["1388","1389","1390"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNRIDSPopUp\\qtrackerNRIDSPopUp.js",["1391"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerRRPopUp\\qtrackerRRPopUp.js",["1392"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNVNPopUp\\qtrackerNVNPopUp.js",["1393"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNRBPopUp\\qtrackerNRBPopUp.js",["1394"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNRIPopUp\\qtrackerNRIPopUp.js",["1395"],"C:\\xampp\\htdocs\\isotracker-react\\src\\components\\qtrackerNWCPopUp\\qtrackerNWCPopUp.js",["1396"],{"ruleId":"1397","replacedBy":"1398"},{"ruleId":"1399","replacedBy":"1400"},{"ruleId":"1401","severity":1,"message":"1402","line":2,"column":8,"nodeType":"1403","messageId":"1404","endLine":2,"endColumn":15},{"ruleId":"1405","severity":1,"message":"1406","line":64,"column":7,"nodeType":"1407","endLine":64,"endColumn":20,"suggestions":"1408"},{"ruleId":"1405","severity":1,"message":"1409","line":103,"column":7,"nodeType":"1407","endLine":103,"endColumn":9,"suggestions":"1410"},{"ruleId":"1405","severity":1,"message":"1411","line":109,"column":8,"nodeType":"1407","endLine":109,"endColumn":10,"suggestions":"1412"},{"ruleId":"1405","severity":1,"message":"1413","line":158,"column":7,"nodeType":"1407","endLine":158,"endColumn":20,"suggestions":"1414"},{"ruleId":"1415","severity":1,"message":"1416","line":1621,"column":129,"nodeType":"1417","messageId":"1418","endLine":1621,"endColumn":131},{"ruleId":"1415","severity":1,"message":"1416","line":1622,"column":38,"nodeType":"1417","messageId":"1418","endLine":1622,"endColumn":40},{"ruleId":"1415","severity":1,"message":"1416","line":1623,"column":67,"nodeType":"1417","messageId":"1418","endLine":1623,"endColumn":69},{"ruleId":"1415","severity":1,"message":"1416","line":1624,"column":64,"nodeType":"1417","messageId":"1418","endLine":1624,"endColumn":66},{"ruleId":"1405","severity":1,"message":"1406","line":64,"column":7,"nodeType":"1407","endLine":64,"endColumn":20,"suggestions":"1419"},{"ruleId":"1405","severity":1,"message":"1409","line":103,"column":7,"nodeType":"1407","endLine":103,"endColumn":9,"suggestions":"1420"},{"ruleId":"1405","severity":1,"message":"1411","line":109,"column":8,"nodeType":"1407","endLine":109,"endColumn":10,"suggestions":"1421"},{"ruleId":"1405","severity":1,"message":"1406","line":65,"column":7,"nodeType":"1407","endLine":65,"endColumn":20,"suggestions":"1422"},{"ruleId":"1405","severity":1,"message":"1409","line":104,"column":7,"nodeType":"1407","endLine":104,"endColumn":9,"suggestions":"1423"},{"ruleId":"1405","severity":1,"message":"1411","line":160,"column":8,"nodeType":"1407","endLine":160,"endColumn":10,"suggestions":"1424"},{"ruleId":"1405","severity":1,"message":"1406","line":41,"column":7,"nodeType":"1407","endLine":41,"endColumn":20,"suggestions":"1425"},{"ruleId":"1405","severity":1,"message":"1411","line":52,"column":8,"nodeType":"1407","endLine":52,"endColumn":10,"suggestions":"1426"},{"ruleId":"1405","severity":1,"message":"1427","line":87,"column":8,"nodeType":"1407","endLine":87,"endColumn":10,"suggestions":"1428"},{"ruleId":"1405","severity":1,"message":"1406","line":64,"column":7,"nodeType":"1407","endLine":64,"endColumn":20,"suggestions":"1429"},{"ruleId":"1405","severity":1,"message":"1409","line":103,"column":7,"nodeType":"1407","endLine":103,"endColumn":9,"suggestions":"1430"},{"ruleId":"1405","severity":1,"message":"1411","line":158,"column":8,"nodeType":"1407","endLine":158,"endColumn":10,"suggestions":"1431"},{"ruleId":"1405","severity":1,"message":"1406","line":46,"column":7,"nodeType":"1407","endLine":46,"endColumn":20,"suggestions":"1432"},{"ruleId":"1405","severity":1,"message":"1409","line":64,"column":7,"nodeType":"1407","endLine":64,"endColumn":9,"suggestions":"1433"},{"ruleId":"1405","severity":1,"message":"1411","line":112,"column":8,"nodeType":"1407","endLine":112,"endColumn":10,"suggestions":"1434"},{"ruleId":"1405","severity":1,"message":"1411","line":53,"column":8,"nodeType":"1407","endLine":53,"endColumn":10,"suggestions":"1435"},{"ruleId":"1405","severity":1,"message":"1427","line":78,"column":8,"nodeType":"1407","endLine":78,"endColumn":10,"suggestions":"1436"},{"ruleId":"1405","severity":1,"message":"1411","line":121,"column":8,"nodeType":"1407","endLine":121,"endColumn":10,"suggestions":"1437"},{"ruleId":"1405","severity":1,"message":"1413","line":222,"column":7,"nodeType":"1407","endLine":222,"endColumn":20,"suggestions":"1438"},{"ruleId":"1415","severity":1,"message":"1416","line":2042,"column":129,"nodeType":"1417","messageId":"1418","endLine":2042,"endColumn":131},{"ruleId":"1415","severity":1,"message":"1416","line":2043,"column":38,"nodeType":"1417","messageId":"1418","endLine":2043,"endColumn":40},{"ruleId":"1415","severity":1,"message":"1416","line":2044,"column":67,"nodeType":"1417","messageId":"1418","endLine":2044,"endColumn":69},{"ruleId":"1415","severity":1,"message":"1416","line":2045,"column":64,"nodeType":"1417","messageId":"1418","endLine":2045,"endColumn":66},{"ruleId":"1401","severity":1,"message":"1439","line":2155,"column":13,"nodeType":"1403","messageId":"1404","endLine":2155,"endColumn":26},{"ruleId":"1401","severity":1,"message":"1440","line":2163,"column":13,"nodeType":"1403","messageId":"1404","endLine":2163,"endColumn":32},{"ruleId":"1405","severity":1,"message":"1406","line":64,"column":7,"nodeType":"1407","endLine":64,"endColumn":20,"suggestions":"1441"},{"ruleId":"1405","severity":1,"message":"1409","line":103,"column":7,"nodeType":"1407","endLine":103,"endColumn":9,"suggestions":"1442"},{"ruleId":"1405","severity":1,"message":"1411","line":109,"column":8,"nodeType":"1407","endLine":109,"endColumn":10,"suggestions":"1443"},{"ruleId":"1405","severity":1,"message":"1411","line":124,"column":8,"nodeType":"1407","endLine":124,"endColumn":10,"suggestions":"1444"},{"ruleId":"1405","severity":1,"message":"1406","line":169,"column":7,"nodeType":"1407","endLine":169,"endColumn":20,"suggestions":"1445"},{"ruleId":"1405","severity":1,"message":"1446","line":171,"column":15,"nodeType":"1447","endLine":203,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1409","line":203,"column":7,"nodeType":"1407","endLine":203,"endColumn":19,"suggestions":"1448"},{"ruleId":"1405","severity":1,"message":"1446","line":205,"column":15,"nodeType":"1447","endLine":233,"endColumn":6},{"ruleId":"1401","severity":1,"message":"1449","line":70,"column":11,"nodeType":"1403","messageId":"1404","endLine":70,"endColumn":19},{"ruleId":"1401","severity":1,"message":"1450","line":78,"column":12,"nodeType":"1403","messageId":"1404","endLine":78,"endColumn":19},{"ruleId":"1405","severity":1,"message":"1411","line":92,"column":8,"nodeType":"1407","endLine":92,"endColumn":10,"suggestions":"1451"},{"ruleId":"1405","severity":1,"message":"1452","line":133,"column":7,"nodeType":"1407","endLine":133,"endColumn":20,"suggestions":"1453"},{"ruleId":"1405","severity":1,"message":"1446","line":135,"column":15,"nodeType":"1447","endLine":167,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1409","line":167,"column":7,"nodeType":"1407","endLine":167,"endColumn":19,"suggestions":"1454"},{"ruleId":"1405","severity":1,"message":"1446","line":141,"column":15,"nodeType":"1447","endLine":205,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1455","line":205,"column":7,"nodeType":"1407","endLine":205,"endColumn":9,"suggestions":"1456"},{"ruleId":"1405","severity":1,"message":"1446","line":207,"column":16,"nodeType":"1447","endLine":253,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1457","line":253,"column":7,"nodeType":"1407","endLine":253,"endColumn":19,"suggestions":"1458"},{"ruleId":"1405","severity":1,"message":"1457","line":304,"column":10,"nodeType":"1407","endLine":304,"endColumn":12,"suggestions":"1459"},{"ruleId":"1405","severity":1,"message":"1446","line":76,"column":15,"nodeType":"1447","endLine":228,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1460","line":228,"column":7,"nodeType":"1407","endLine":228,"endColumn":16,"suggestions":"1461"},{"ruleId":"1405","severity":1,"message":"1446","line":230,"column":15,"nodeType":"1447","endLine":232,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1446","line":234,"column":15,"nodeType":"1447","endLine":236,"endColumn":6},{"ruleId":"1401","severity":1,"message":"1462","line":432,"column":27,"nodeType":"1403","messageId":"1404","endLine":432,"endColumn":29},{"ruleId":"1415","severity":1,"message":"1463","line":766,"column":458,"nodeType":"1417","messageId":"1418","endLine":766,"endColumn":460},{"ruleId":"1415","severity":1,"message":"1463","line":766,"column":610,"nodeType":"1417","messageId":"1418","endLine":766,"endColumn":612},{"ruleId":"1401","severity":1,"message":"1464","line":169,"column":13,"nodeType":"1403","messageId":"1404","endLine":169,"endColumn":26},{"ruleId":"1465","severity":1,"message":"1466","line":74,"column":31,"nodeType":"1403","messageId":"1467","endLine":74,"endColumn":36},{"ruleId":"1465","severity":1,"message":"1468","line":75,"column":31,"nodeType":"1403","messageId":"1467","endLine":75,"endColumn":43},{"ruleId":"1465","severity":1,"message":"1469","line":77,"column":31,"nodeType":"1403","messageId":"1467","endLine":77,"endColumn":34},{"ruleId":"1470","severity":1,"message":"1471","line":159,"column":31,"nodeType":"1403","messageId":"1472","endLine":159,"endColumn":34},{"ruleId":"1470","severity":1,"message":"1471","line":161,"column":31,"nodeType":"1403","messageId":"1472","endLine":161,"endColumn":34},{"ruleId":"1470","severity":1,"message":"1471","line":164,"column":39,"nodeType":"1403","messageId":"1472","endLine":164,"endColumn":42},{"ruleId":"1465","severity":1,"message":"1466","line":166,"column":33,"nodeType":"1403","messageId":"1467","endLine":166,"endColumn":38},{"ruleId":"1465","severity":1,"message":"1468","line":167,"column":33,"nodeType":"1403","messageId":"1467","endLine":167,"endColumn":45},{"ruleId":"1401","severity":1,"message":"1473","line":352,"column":11,"nodeType":"1403","messageId":"1404","endLine":352,"endColumn":29},{"ruleId":"1401","severity":1,"message":"1464","line":170,"column":13,"nodeType":"1403","messageId":"1404","endLine":170,"endColumn":26},{"ruleId":"1401","severity":1,"message":"1474","line":7,"column":8,"nodeType":"1403","messageId":"1404","endLine":7,"endColumn":28},{"ruleId":"1475","severity":1,"message":"1476","line":137,"column":123,"nodeType":"1477","endLine":137,"endColumn":147},{"ruleId":"1401","severity":1,"message":"1478","line":3,"column":10,"nodeType":"1403","messageId":"1404","endLine":3,"endColumn":14},{"ruleId":"1401","severity":1,"message":"1478","line":3,"column":10,"nodeType":"1403","messageId":"1404","endLine":3,"endColumn":14},{"ruleId":"1401","severity":1,"message":"1464","line":169,"column":13,"nodeType":"1403","messageId":"1404","endLine":169,"endColumn":26},{"ruleId":"1401","severity":1,"message":"1479","line":1,"column":17,"nodeType":"1403","messageId":"1404","endLine":1,"endColumn":25},{"ruleId":"1401","severity":1,"message":"1480","line":1,"column":27,"nodeType":"1403","messageId":"1404","endLine":1,"endColumn":36},{"ruleId":"1401","severity":1,"message":"1478","line":4,"column":10,"nodeType":"1403","messageId":"1404","endLine":4,"endColumn":14},{"ruleId":"1405","severity":1,"message":"1446","line":52,"column":15,"nodeType":"1447","endLine":126,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1481","line":126,"column":7,"nodeType":"1407","endLine":126,"endColumn":9,"suggestions":"1482"},{"ruleId":"1405","severity":1,"message":"1446","line":130,"column":15,"nodeType":"1447","endLine":218,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1483","line":218,"column":7,"nodeType":"1407","endLine":218,"endColumn":126,"suggestions":"1484"},{"ruleId":"1401","severity":1,"message":"1464","line":170,"column":13,"nodeType":"1403","messageId":"1404","endLine":170,"endColumn":26},{"ruleId":"1401","severity":1,"message":"1485","line":3,"column":8,"nodeType":"1403","messageId":"1404","endLine":3,"endColumn":14},{"ruleId":"1486","severity":1,"message":"1487","line":35,"column":135,"nodeType":"1488","messageId":"1489","endLine":35,"endColumn":150},{"ruleId":"1401","severity":1,"message":"1485","line":3,"column":8,"nodeType":"1403","messageId":"1404","endLine":3,"endColumn":14},{"ruleId":"1401","severity":1,"message":"1490","line":10,"column":8,"nodeType":"1403","messageId":"1404","endLine":10,"endColumn":29},{"ruleId":"1401","severity":1,"message":"1491","line":12,"column":8,"nodeType":"1403","messageId":"1404","endLine":12,"endColumn":17},{"ruleId":"1401","severity":1,"message":"1492","line":24,"column":10,"nodeType":"1403","messageId":"1404","endLine":24,"endColumn":20},{"ruleId":"1401","severity":1,"message":"1493","line":4,"column":8,"nodeType":"1403","messageId":"1404","endLine":4,"endColumn":16},{"ruleId":"1401","severity":1,"message":"1493","line":4,"column":8,"nodeType":"1403","messageId":"1404","endLine":4,"endColumn":16},{"ruleId":"1401","severity":1,"message":"1493","line":4,"column":8,"nodeType":"1403","messageId":"1404","endLine":4,"endColumn":16},{"ruleId":"1401","severity":1,"message":"1493","line":4,"column":8,"nodeType":"1403","messageId":"1404","endLine":4,"endColumn":16},{"ruleId":"1401","severity":1,"message":"1493","line":4,"column":8,"nodeType":"1403","messageId":"1404","endLine":4,"endColumn":16},{"ruleId":"1401","severity":1,"message":"1493","line":4,"column":8,"nodeType":"1403","messageId":"1404","endLine":4,"endColumn":16},{"ruleId":"1401","severity":1,"message":"1402","line":2,"column":8,"nodeType":"1403","messageId":"1404","endLine":2,"endColumn":15},{"ruleId":"1405","severity":1,"message":"1406","line":64,"column":7,"nodeType":"1407","endLine":64,"endColumn":20,"suggestions":"1494"},{"ruleId":"1405","severity":1,"message":"1409","line":103,"column":7,"nodeType":"1407","endLine":103,"endColumn":9,"suggestions":"1495"},{"ruleId":"1405","severity":1,"message":"1411","line":109,"column":8,"nodeType":"1407","endLine":109,"endColumn":10,"suggestions":"1496"},{"ruleId":"1405","severity":1,"message":"1406","line":64,"column":7,"nodeType":"1407","endLine":64,"endColumn":20,"suggestions":"1497"},{"ruleId":"1405","severity":1,"message":"1409","line":103,"column":7,"nodeType":"1407","endLine":103,"endColumn":9,"suggestions":"1498"},{"ruleId":"1405","severity":1,"message":"1411","line":109,"column":8,"nodeType":"1407","endLine":109,"endColumn":10,"suggestions":"1499"},{"ruleId":"1405","severity":1,"message":"1406","line":65,"column":7,"nodeType":"1407","endLine":65,"endColumn":20,"suggestions":"1500"},{"ruleId":"1405","severity":1,"message":"1409","line":104,"column":7,"nodeType":"1407","endLine":104,"endColumn":9,"suggestions":"1501"},{"ruleId":"1405","severity":1,"message":"1411","line":160,"column":8,"nodeType":"1407","endLine":160,"endColumn":10,"suggestions":"1502"},{"ruleId":"1405","severity":1,"message":"1413","line":158,"column":7,"nodeType":"1407","endLine":158,"endColumn":20,"suggestions":"1503"},{"ruleId":"1415","severity":1,"message":"1416","line":1621,"column":129,"nodeType":"1417","messageId":"1418","endLine":1621,"endColumn":131},{"ruleId":"1415","severity":1,"message":"1416","line":1622,"column":38,"nodeType":"1417","messageId":"1418","endLine":1622,"endColumn":40},{"ruleId":"1415","severity":1,"message":"1416","line":1623,"column":67,"nodeType":"1417","messageId":"1418","endLine":1623,"endColumn":69},{"ruleId":"1415","severity":1,"message":"1416","line":1624,"column":64,"nodeType":"1417","messageId":"1418","endLine":1624,"endColumn":66},{"ruleId":"1405","severity":1,"message":"1411","line":52,"column":8,"nodeType":"1407","endLine":52,"endColumn":10,"suggestions":"1504"},{"ruleId":"1405","severity":1,"message":"1427","line":87,"column":8,"nodeType":"1407","endLine":87,"endColumn":10,"suggestions":"1505"},{"ruleId":"1405","severity":1,"message":"1406","line":64,"column":7,"nodeType":"1407","endLine":64,"endColumn":20,"suggestions":"1506"},{"ruleId":"1405","severity":1,"message":"1409","line":103,"column":7,"nodeType":"1407","endLine":103,"endColumn":9,"suggestions":"1507"},{"ruleId":"1405","severity":1,"message":"1411","line":158,"column":8,"nodeType":"1407","endLine":158,"endColumn":10,"suggestions":"1508"},{"ruleId":"1405","severity":1,"message":"1406","line":46,"column":7,"nodeType":"1407","endLine":46,"endColumn":20,"suggestions":"1509"},{"ruleId":"1405","severity":1,"message":"1409","line":64,"column":7,"nodeType":"1407","endLine":64,"endColumn":9,"suggestions":"1510"},{"ruleId":"1405","severity":1,"message":"1411","line":112,"column":8,"nodeType":"1407","endLine":112,"endColumn":10,"suggestions":"1511"},{"ruleId":"1405","severity":1,"message":"1406","line":41,"column":7,"nodeType":"1407","endLine":41,"endColumn":20,"suggestions":"1512"},{"ruleId":"1405","severity":1,"message":"1411","line":53,"column":8,"nodeType":"1407","endLine":53,"endColumn":10,"suggestions":"1513"},{"ruleId":"1405","severity":1,"message":"1427","line":78,"column":8,"nodeType":"1407","endLine":78,"endColumn":10,"suggestions":"1514"},{"ruleId":"1405","severity":1,"message":"1406","line":64,"column":7,"nodeType":"1407","endLine":64,"endColumn":20,"suggestions":"1515"},{"ruleId":"1405","severity":1,"message":"1409","line":103,"column":7,"nodeType":"1407","endLine":103,"endColumn":9,"suggestions":"1516"},{"ruleId":"1405","severity":1,"message":"1411","line":109,"column":8,"nodeType":"1407","endLine":109,"endColumn":10,"suggestions":"1517"},{"ruleId":"1405","severity":1,"message":"1411","line":124,"column":8,"nodeType":"1407","endLine":124,"endColumn":10,"suggestions":"1518"},{"ruleId":"1405","severity":1,"message":"1406","line":169,"column":7,"nodeType":"1407","endLine":169,"endColumn":20,"suggestions":"1519"},{"ruleId":"1405","severity":1,"message":"1446","line":171,"column":15,"nodeType":"1447","endLine":203,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1409","line":203,"column":7,"nodeType":"1407","endLine":203,"endColumn":19,"suggestions":"1520"},{"ruleId":"1405","severity":1,"message":"1446","line":205,"column":15,"nodeType":"1447","endLine":233,"endColumn":6},{"ruleId":"1401","severity":1,"message":"1449","line":70,"column":11,"nodeType":"1403","messageId":"1404","endLine":70,"endColumn":19},{"ruleId":"1401","severity":1,"message":"1450","line":78,"column":12,"nodeType":"1403","messageId":"1404","endLine":78,"endColumn":19},{"ruleId":"1405","severity":1,"message":"1411","line":92,"column":8,"nodeType":"1407","endLine":92,"endColumn":10,"suggestions":"1521"},{"ruleId":"1405","severity":1,"message":"1452","line":133,"column":7,"nodeType":"1407","endLine":133,"endColumn":20,"suggestions":"1522"},{"ruleId":"1405","severity":1,"message":"1446","line":135,"column":15,"nodeType":"1447","endLine":167,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1409","line":167,"column":7,"nodeType":"1407","endLine":167,"endColumn":19,"suggestions":"1523"},{"ruleId":"1405","severity":1,"message":"1411","line":121,"column":8,"nodeType":"1407","endLine":121,"endColumn":10,"suggestions":"1524"},{"ruleId":"1405","severity":1,"message":"1413","line":222,"column":7,"nodeType":"1407","endLine":222,"endColumn":20,"suggestions":"1525"},{"ruleId":"1415","severity":1,"message":"1416","line":2042,"column":129,"nodeType":"1417","messageId":"1418","endLine":2042,"endColumn":131},{"ruleId":"1415","severity":1,"message":"1416","line":2043,"column":38,"nodeType":"1417","messageId":"1418","endLine":2043,"endColumn":40},{"ruleId":"1415","severity":1,"message":"1416","line":2044,"column":67,"nodeType":"1417","messageId":"1418","endLine":2044,"endColumn":69},{"ruleId":"1415","severity":1,"message":"1416","line":2045,"column":64,"nodeType":"1417","messageId":"1418","endLine":2045,"endColumn":66},{"ruleId":"1401","severity":1,"message":"1439","line":2155,"column":13,"nodeType":"1403","messageId":"1404","endLine":2155,"endColumn":26},{"ruleId":"1401","severity":1,"message":"1440","line":2163,"column":13,"nodeType":"1403","messageId":"1404","endLine":2163,"endColumn":32},{"ruleId":"1405","severity":1,"message":"1446","line":141,"column":15,"nodeType":"1447","endLine":205,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1455","line":205,"column":7,"nodeType":"1407","endLine":205,"endColumn":9,"suggestions":"1526"},{"ruleId":"1405","severity":1,"message":"1446","line":207,"column":16,"nodeType":"1447","endLine":253,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1457","line":253,"column":7,"nodeType":"1407","endLine":253,"endColumn":19,"suggestions":"1527"},{"ruleId":"1405","severity":1,"message":"1457","line":304,"column":10,"nodeType":"1407","endLine":304,"endColumn":12,"suggestions":"1528"},{"ruleId":"1401","severity":1,"message":"1464","line":169,"column":13,"nodeType":"1403","messageId":"1404","endLine":169,"endColumn":26},{"ruleId":"1401","severity":1,"message":"1464","line":170,"column":13,"nodeType":"1403","messageId":"1404","endLine":170,"endColumn":26},{"ruleId":"1401","severity":1,"message":"1464","line":170,"column":13,"nodeType":"1403","messageId":"1404","endLine":170,"endColumn":26},{"ruleId":"1401","severity":1,"message":"1529","line":3,"column":10,"nodeType":"1403","messageId":"1404","endLine":3,"endColumn":20},{"ruleId":"1401","severity":1,"message":"1530","line":5,"column":8,"nodeType":"1403","messageId":"1404","endLine":5,"endColumn":19},{"ruleId":"1401","severity":1,"message":"1531","line":6,"column":8,"nodeType":"1403","messageId":"1404","endLine":6,"endColumn":20},{"ruleId":"1415","severity":1,"message":"1463","line":521,"column":458,"nodeType":"1417","messageId":"1418","endLine":521,"endColumn":460},{"ruleId":"1415","severity":1,"message":"1463","line":521,"column":610,"nodeType":"1417","messageId":"1418","endLine":521,"endColumn":612},{"ruleId":"1401","severity":1,"message":"1478","line":4,"column":10,"nodeType":"1403","messageId":"1404","endLine":4,"endColumn":14},{"ruleId":"1465","severity":1,"message":"1466","line":74,"column":31,"nodeType":"1403","messageId":"1467","endLine":74,"endColumn":36},{"ruleId":"1465","severity":1,"message":"1468","line":75,"column":31,"nodeType":"1403","messageId":"1467","endLine":75,"endColumn":43},{"ruleId":"1465","severity":1,"message":"1469","line":77,"column":31,"nodeType":"1403","messageId":"1467","endLine":77,"endColumn":34},{"ruleId":"1470","severity":1,"message":"1471","line":159,"column":31,"nodeType":"1403","messageId":"1472","endLine":159,"endColumn":34},{"ruleId":"1470","severity":1,"message":"1471","line":161,"column":31,"nodeType":"1403","messageId":"1472","endLine":161,"endColumn":34},{"ruleId":"1470","severity":1,"message":"1471","line":164,"column":39,"nodeType":"1403","messageId":"1472","endLine":164,"endColumn":42},{"ruleId":"1465","severity":1,"message":"1466","line":166,"column":33,"nodeType":"1403","messageId":"1467","endLine":166,"endColumn":38},{"ruleId":"1465","severity":1,"message":"1468","line":167,"column":33,"nodeType":"1403","messageId":"1467","endLine":167,"endColumn":45},{"ruleId":"1401","severity":1,"message":"1473","line":352,"column":11,"nodeType":"1403","messageId":"1404","endLine":352,"endColumn":29},{"ruleId":"1405","severity":1,"message":"1446","line":76,"column":15,"nodeType":"1447","endLine":228,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1460","line":228,"column":7,"nodeType":"1407","endLine":228,"endColumn":16,"suggestions":"1532"},{"ruleId":"1405","severity":1,"message":"1446","line":230,"column":15,"nodeType":"1447","endLine":232,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1446","line":234,"column":15,"nodeType":"1447","endLine":236,"endColumn":6},{"ruleId":"1401","severity":1,"message":"1462","line":432,"column":27,"nodeType":"1403","messageId":"1404","endLine":432,"endColumn":29},{"ruleId":"1415","severity":1,"message":"1463","line":766,"column":458,"nodeType":"1417","messageId":"1418","endLine":766,"endColumn":460},{"ruleId":"1415","severity":1,"message":"1463","line":766,"column":610,"nodeType":"1417","messageId":"1418","endLine":766,"endColumn":612},{"ruleId":"1401","severity":1,"message":"1474","line":7,"column":8,"nodeType":"1403","messageId":"1404","endLine":7,"endColumn":28},{"ruleId":"1475","severity":1,"message":"1476","line":137,"column":123,"nodeType":"1477","endLine":137,"endColumn":147},{"ruleId":"1486","severity":1,"message":"1487","line":35,"column":135,"nodeType":"1488","messageId":"1489","endLine":35,"endColumn":150},{"ruleId":"1401","severity":1,"message":"1485","line":3,"column":8,"nodeType":"1403","messageId":"1404","endLine":3,"endColumn":14},{"ruleId":"1401","severity":1,"message":"1485","line":3,"column":8,"nodeType":"1403","messageId":"1404","endLine":3,"endColumn":14},{"ruleId":"1401","severity":1,"message":"1478","line":3,"column":10,"nodeType":"1403","messageId":"1404","endLine":3,"endColumn":14},{"ruleId":"1401","severity":1,"message":"1478","line":3,"column":10,"nodeType":"1403","messageId":"1404","endLine":3,"endColumn":14},{"ruleId":"1401","severity":1,"message":"1464","line":169,"column":13,"nodeType":"1403","messageId":"1404","endLine":169,"endColumn":26},{"ruleId":"1401","severity":1,"message":"1479","line":1,"column":17,"nodeType":"1403","messageId":"1404","endLine":1,"endColumn":25},{"ruleId":"1401","severity":1,"message":"1480","line":1,"column":27,"nodeType":"1403","messageId":"1404","endLine":1,"endColumn":36},{"ruleId":"1405","severity":1,"message":"1446","line":52,"column":15,"nodeType":"1447","endLine":126,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1481","line":126,"column":7,"nodeType":"1407","endLine":126,"endColumn":9,"suggestions":"1533"},{"ruleId":"1405","severity":1,"message":"1446","line":130,"column":15,"nodeType":"1447","endLine":218,"endColumn":6},{"ruleId":"1405","severity":1,"message":"1483","line":218,"column":7,"nodeType":"1407","endLine":218,"endColumn":126,"suggestions":"1534"},{"ruleId":"1401","severity":1,"message":"1490","line":10,"column":8,"nodeType":"1403","messageId":"1404","endLine":10,"endColumn":29},{"ruleId":"1401","severity":1,"message":"1491","line":12,"column":8,"nodeType":"1403","messageId":"1404","endLine":12,"endColumn":17},{"ruleId":"1401","severity":1,"message":"1492","line":24,"column":10,"nodeType":"1403","messageId":"1404","endLine":24,"endColumn":20},{"ruleId":"1401","severity":1,"message":"1493","line":4,"column":8,"nodeType":"1403","messageId":"1404","endLine":4,"endColumn":16},{"ruleId":"1401","severity":1,"message":"1493","line":4,"column":8,"nodeType":"1403","messageId":"1404","endLine":4,"endColumn":16},{"ruleId":"1401","severity":1,"message":"1493","line":4,"column":8,"nodeType":"1403","messageId":"1404","endLine":4,"endColumn":16},{"ruleId":"1401","severity":1,"message":"1493","line":4,"column":8,"nodeType":"1403","messageId":"1404","endLine":4,"endColumn":16},{"ruleId":"1401","severity":1,"message":"1493","line":4,"column":8,"nodeType":"1403","messageId":"1404","endLine":4,"endColumn":16},{"ruleId":"1401","severity":1,"message":"1493","line":4,"column":8,"nodeType":"1403","messageId":"1404","endLine":4,"endColumn":16},"no-native-reassign",["1535"],"no-negated-in-lhs",["1536"],"no-unused-vars","'IsoCtrl' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentUser' and 'secureStorage'. Either include them or remove the dependency array.","ArrayExpression",["1537"],"React Hook useEffect has a missing dependency: 'currentUser'. Either include it or remove the dependency array.",["1538"],"React Hook useEffect has missing dependencies: 'history' and 'secureStorage'. Either include them or remove the dependency array.",["1539"],"React Hook useEffect has missing dependencies: 'currentUser', 'secureStorage', and 'updateData'. Either include them or remove the dependency array. You can also do a functional update 'setUpdateData(u => ...)' if you only need 'updateData' in the 'setUpdateData' call.",["1540"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator",["1541"],["1542"],["1543"],["1544"],["1545"],["1546"],["1547"],["1548"],"React Hook useEffect has a missing dependency: 'secureStorage'. Either include it or remove the dependency array.",["1549"],["1550"],["1551"],["1552"],["1553"],["1554"],["1555"],["1556"],["1557"],["1558"],["1559"],"'isoControlBtn' is assigned a value but never used.","'isoControlNotModBtn' is assigned a value but never used.",["1560"],["1561"],["1562"],["1563"],["1564"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression",["1565"],"'settings' is assigned a value but never used.","'saveBtn' is assigned a value but never used.",["1566"],"React Hook useEffect has missing dependencies: 'currentUser', 'saveChanges', and 'secureStorage'. Either include them or remove the dependency array.",["1567"],["1568"],"React Hook useEffect has missing dependencies: 'handleClickCivil', 'handleClickElectrical', 'handleClickEquipments', 'handleClickHome', 'handleClickInstrument', 'handleClickIsotracker', and 'handleClickPiping'. Either include them or remove the dependency array.",["1569"],"React Hook useEffect has missing dependencies: 'deleteNotification', 'markAsRead', and 'markAsUnread'. Either include them or remove the dependency array.",["1570"],["1571"],"React Hook useEffect has missing dependencies: 'progress', 'progressIso', 'props.currentRole', and 'totalStock'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTotalStockTD' needs the current value of 'totalStock'.",["1572"],"'fn' is assigned a value but never used.","Unexpected mix of '&&' and '||'.","'stepsSettings' is assigned a value but never used.","no-redeclare","'holds' is already defined.","redeclared","'descriptions' is already defined.","'row' is already defined.","no-use-before-define","'row' was used before it was defined.","usedBeforeDefined","'rowSelectionFilter' is assigned a value but never used.","'QtrackerNRBSpecPopUp' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Link' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'civilsProgress', 'civilsWeight', 'elecsProgress', 'elecsWeight', 'equisProgress', 'equisWeight', 'instsProgress', 'instsWeight', 'pipesProgress', 'pipesWeight', 'totalProgress', and 'totalWeight'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTotalWeight' needs the current value of 'pipesWeight'.",["1573"],"React Hook useEffect has missing dependencies: 'civilsProgress', 'civilsProgressWidth', 'civilsWeight', 'elecsProgress', 'elecsProgressWidth', 'elecsWeight', 'equisProgress', 'equisProgressWidth', 'equisWeight', 'instsProgress', 'instsProgressWidth', 'instsWeight', 'pipesProgress', 'pipesProgressWidth', and 'pipesWeight'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setProgressButtons' needs the current value of 'pipesWeight'.",["1574"],"'AlertF' is defined but never used.","no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","unexpected","'SupervisorAccountIcon' is defined but never used.","'ForumIcon' is defined but never used.","'PlusSquare' is defined but never used.","'TreeView' is defined but never used.",["1575"],["1576"],["1577"],["1578"],["1579"],["1580"],["1581"],["1582"],["1583"],["1584"],["1585"],["1586"],["1587"],["1588"],["1589"],["1590"],["1591"],["1592"],["1593"],["1594"],["1595"],["1596"],["1597"],["1598"],["1599"],["1600"],["1601"],["1602"],["1603"],["1604"],["1605"],["1606"],["1607"],["1608"],["1609"],"'Pagination' is defined but never used.","'RenamePopUp' is defined but never used.","'CommentPopUp' is defined but never used.",["1610"],["1611"],["1612"],"no-global-assign","no-unsafe-negation",{"desc":"1613","fix":"1614"},{"desc":"1615","fix":"1616"},{"desc":"1617","fix":"1618"},{"desc":"1619","fix":"1620"},{"desc":"1613","fix":"1621"},{"desc":"1615","fix":"1622"},{"desc":"1617","fix":"1623"},{"desc":"1613","fix":"1624"},{"desc":"1615","fix":"1625"},{"desc":"1617","fix":"1626"},{"desc":"1613","fix":"1627"},{"desc":"1617","fix":"1628"},{"desc":"1629","fix":"1630"},{"desc":"1613","fix":"1631"},{"desc":"1615","fix":"1632"},{"desc":"1617","fix":"1633"},{"desc":"1613","fix":"1634"},{"desc":"1615","fix":"1635"},{"desc":"1617","fix":"1636"},{"desc":"1617","fix":"1637"},{"desc":"1629","fix":"1638"},{"desc":"1617","fix":"1639"},{"desc":"1619","fix":"1640"},{"desc":"1613","fix":"1641"},{"desc":"1615","fix":"1642"},{"desc":"1617","fix":"1643"},{"desc":"1617","fix":"1644"},{"desc":"1613","fix":"1645"},{"desc":"1646","fix":"1647"},{"desc":"1617","fix":"1648"},{"desc":"1649","fix":"1650"},{"desc":"1646","fix":"1651"},{"desc":"1652","fix":"1653"},{"desc":"1654","fix":"1655"},{"desc":"1656","fix":"1657"},{"desc":"1658","fix":"1659"},{"desc":"1660","fix":"1661"},{"desc":"1662","fix":"1663"},{"desc":"1613","fix":"1664"},{"desc":"1615","fix":"1665"},{"desc":"1617","fix":"1666"},{"desc":"1613","fix":"1667"},{"desc":"1615","fix":"1668"},{"desc":"1617","fix":"1669"},{"desc":"1613","fix":"1670"},{"desc":"1615","fix":"1671"},{"desc":"1617","fix":"1672"},{"desc":"1619","fix":"1673"},{"desc":"1617","fix":"1674"},{"desc":"1629","fix":"1675"},{"desc":"1613","fix":"1676"},{"desc":"1615","fix":"1677"},{"desc":"1617","fix":"1678"},{"desc":"1613","fix":"1679"},{"desc":"1615","fix":"1680"},{"desc":"1617","fix":"1681"},{"desc":"1613","fix":"1682"},{"desc":"1617","fix":"1683"},{"desc":"1629","fix":"1684"},{"desc":"1613","fix":"1685"},{"desc":"1615","fix":"1686"},{"desc":"1617","fix":"1687"},{"desc":"1617","fix":"1688"},{"desc":"1613","fix":"1689"},{"desc":"1646","fix":"1690"},{"desc":"1617","fix":"1691"},{"desc":"1649","fix":"1692"},{"desc":"1646","fix":"1693"},{"desc":"1617","fix":"1694"},{"desc":"1619","fix":"1695"},{"desc":"1652","fix":"1696"},{"desc":"1654","fix":"1697"},{"desc":"1656","fix":"1698"},{"desc":"1658","fix":"1699"},{"desc":"1660","fix":"1700"},{"desc":"1662","fix":"1701"},"Update the dependencies array to be: [currentRole, currentUser, secureStorage]",{"range":"1702","text":"1703"},"Update the dependencies array to be: [currentUser]",{"range":"1704","text":"1705"},"Update the dependencies array to be: [history, secureStorage]",{"range":"1706","text":"1707"},"Update the dependencies array to be: [currentRole, currentUser, secureStorage, updateData]",{"range":"1708","text":"1709"},{"range":"1710","text":"1703"},{"range":"1711","text":"1705"},{"range":"1712","text":"1707"},{"range":"1713","text":"1703"},{"range":"1714","text":"1705"},{"range":"1715","text":"1707"},{"range":"1716","text":"1703"},{"range":"1717","text":"1707"},"Update the dependencies array to be: [secureStorage]",{"range":"1718","text":"1719"},{"range":"1720","text":"1703"},{"range":"1721","text":"1705"},{"range":"1722","text":"1707"},{"range":"1723","text":"1703"},{"range":"1724","text":"1705"},{"range":"1725","text":"1707"},{"range":"1726","text":"1707"},{"range":"1727","text":"1719"},{"range":"1728","text":"1707"},{"range":"1729","text":"1709"},{"range":"1730","text":"1703"},{"range":"1731","text":"1705"},{"range":"1732","text":"1707"},{"range":"1733","text":"1707"},{"range":"1734","text":"1703"},"Update the dependencies array to be: [currentUser, updateData]",{"range":"1735","text":"1736"},{"range":"1737","text":"1707"},"Update the dependencies array to be: [currentRole, currentUser, saveChanges, secureStorage]",{"range":"1738","text":"1739"},{"range":"1740","text":"1736"},"Update the dependencies array to be: [handleClickCivil, handleClickElectrical, handleClickEquipments, handleClickHome, handleClickInstrument, handleClickIsotracker, handleClickPiping]",{"range":"1741","text":"1742"},"Update the dependencies array to be: [deleteNotification, markAsRead, markAsUnread, updateData]",{"range":"1743","text":"1744"},"Update the dependencies array to be: [deleteNotification, markAsRead, markAsUnread]",{"range":"1745","text":"1746"},"Update the dependencies array to be: [loading, progress, progressIso, props.currentRole, totalStock]",{"range":"1747","text":"1748"},"Update the dependencies array to be: [civilsProgress, civilsWeight, elecsProgress, elecsWeight, equisProgress, equisWeight, instsProgress, instsWeight, pipesProgress, pipesWeight, totalProgress, totalWeight]",{"range":"1749","text":"1750"},"Update the dependencies array to be: [totalProgressWidth, refresh, isoIsShown, progIsShown, pipeIsShown, equipIsShown, civIsShown, instIsShown, elecIsShown, pipesWeight, equisWeight, instsWeight, civilsWeight, elecsWeight, pipesProgress, equisProgress, civilsProgress, instsProgress, elecsProgress, pipesProgressWidth, equisProgressWidth, civilsProgressWidth, instsProgressWidth, elecsProgressWidth]",{"range":"1751","text":"1752"},{"range":"1753","text":"1703"},{"range":"1754","text":"1705"},{"range":"1755","text":"1707"},{"range":"1756","text":"1703"},{"range":"1757","text":"1705"},{"range":"1758","text":"1707"},{"range":"1759","text":"1703"},{"range":"1760","text":"1705"},{"range":"1761","text":"1707"},{"range":"1762","text":"1709"},{"range":"1763","text":"1707"},{"range":"1764","text":"1719"},{"range":"1765","text":"1703"},{"range":"1766","text":"1705"},{"range":"1767","text":"1707"},{"range":"1768","text":"1703"},{"range":"1769","text":"1705"},{"range":"1770","text":"1707"},{"range":"1771","text":"1703"},{"range":"1772","text":"1707"},{"range":"1773","text":"1719"},{"range":"1774","text":"1703"},{"range":"1775","text":"1705"},{"range":"1776","text":"1707"},{"range":"1777","text":"1707"},{"range":"1778","text":"1703"},{"range":"1779","text":"1736"},{"range":"1780","text":"1707"},{"range":"1781","text":"1739"},{"range":"1782","text":"1736"},{"range":"1783","text":"1707"},{"range":"1784","text":"1709"},{"range":"1785","text":"1742"},{"range":"1786","text":"1744"},{"range":"1787","text":"1746"},{"range":"1788","text":"1748"},{"range":"1789","text":"1750"},{"range":"1790","text":"1752"},[2773,2786],"[currentRole, currentUser, secureStorage]",[3948,3950],"[currentUser]",[4106,4108],"[history, secureStorage]",[7104,7117],"[currentRole, currentUser, secureStorage, updateData]",[2664,2677],[3844,3846],[4002,4004],[2644,2657],[3817,3819],[5359,5361],[1315,1328],[1667,1669],[2814,2816],"[secureStorage]",[2641,2654],[3806,3808],[5342,5344],[1512,1525],[2040,2042],[3421,3423],[1687,1689],[2551,2553],[6011,6013],[10041,10054],[2669,2682],[3849,3851],[4007,4009],[4627,4629],[5982,5995],[7225,7237],"[currentUser, updateData]",[2899,2901],[4291,4304],"[currentRole, currentUser, saveChanges, secureStorage]",[5475,5487],[8099,8101],"[handleClickCivil, handleClickElectrical, handleClickEquipments, handleClickHome, handleClickInstrument, handleClickIsotracker, handleClickPiping]",[10761,10773],"[deleteNotification, markAsRead, markAsUnread, updateData]",[13700,13702],"[deleteNotification, markAsRead, markAsUnread]",[12622,12631],"[loading, progress, progressIso, props.currentRole, totalStock]",[5785,5787],"[civilsProgress, civilsWeight, elecsProgress, elecsWeight, equisProgress, equisWeight, instsProgress, instsWeight, pipesProgress, pipesWeight, totalProgress, totalWeight]",[14898,15017],"[totalProgressWidth, refresh, isoIsShown, progIsShown, pipeIsShown, equipIsShown, civIsShown, instIsShown, elecIsShown, pipesWeight, equisWeight, instsWeight, civilsWeight, elecsWeight, pipesProgress, equisProgress, civilsProgress, instsProgress, elecsProgress, pipesProgressWidth, equisProgressWidth, civilsProgressWidth, instsProgressWidth, elecsProgressWidth]",[2773,2786],[3948,3950],[4106,4108],[2664,2677],[3844,3846],[4002,4004],[2644,2657],[3817,3819],[5359,5361],[7104,7117],[1667,1669],[2814,2816],[2641,2654],[3806,3808],[5342,5344],[1512,1525],[2040,2042],[3421,3423],[1315,1328],[1687,1689],[2551,2553],[2669,2682],[3849,3851],[4007,4009],[4627,4629],[5982,5995],[7225,7237],[2899,2901],[4291,4304],[5475,5487],[6011,6013],[10041,10054],[8099,8101],[10761,10773],[13700,13702],[12622,12631],[5785,5787],[14898,15017]]