{"ast":null,"code":"import CanvasJSObject from './canvasjs';\nimport { extend, getFontHeightInPixels, trimString, getFontString } from '../helpers/utils';\n\nfunction TextBlock(ctx, options) {\n  TextBlock.base.constructor.call(this, \"TextBlock\", options);\n  this.ctx = ctx;\n  this._isDirty = true;\n  this._wrappedText = null;\n  this._lineHeight = getFontHeightInPixels(this.fontFamily, this.fontSize, this.fontWeight);\n}\n\nextend(TextBlock, CanvasJSObject);\n\nTextBlock.prototype.render = function (preserveContext) {\n  if (preserveContext) this.ctx.save();\n  var font = this.ctx.font;\n  this.ctx.textBaseline = this.textBaseline;\n  var offsetY = 0;\n  if (this._isDirty) this.measureText(this.ctx);\n  this.ctx.translate(this.x, this.y + offsetY);\n\n  if (this.textBaseline === \"middle\") {\n    offsetY = -this._lineHeight / 2;\n  }\n\n  this.ctx.font = this._getFontString();\n  this.ctx.rotate(Math.PI / 180 * this.angle);\n  var textLeft = 0;\n  var textTop = this.padding; //var textTop = this.padding;\n\n  var line = null;\n\n  if (this.borderThickness > 0 && this.borderColor || this.backgroundColor) {\n    this.ctx.roundRect(0, offsetY, this.width, this.height, this.cornerRadius, this.borderThickness, this.backgroundColor, this.borderColor); //if (this.textBaseline === \"middle\") {\n    //\t//textTop += this.fontSize / 2;\n    //\ttextTop += this._lineHeight / 2;\n    //}\n  }\n\n  this.ctx.fillStyle = this.fontColor;\n\n  for (var i = 0; i < this._wrappedText.lines.length; i++) {\n    line = this._wrappedText.lines[i];\n    if (this.horizontalAlign === \"right\") textLeft = this.width - line.width - this.padding;else if (this.horizontalAlign === \"left\") textLeft = this.padding;else if (this.horizontalAlign === \"center\") textLeft = (this.width - this.padding * 2) / 2 - line.width / 2 + this.padding;\n    this.ctx.fillText(line.text, textLeft, textTop);\n    textTop += line.height;\n  }\n\n  this.ctx.font = font;\n  if (preserveContext) this.ctx.restore();\n};\n\nTextBlock.prototype.setText = function (text) {\n  this.text = text;\n  this._isDirty = true;\n  this._wrappedText = null;\n};\n\nTextBlock.prototype.measureText = function () {\n  if (this.maxWidth === null) {\n    throw \"Please set maxWidth and height for TextBlock\";\n  }\n\n  this._wrapText(this.ctx);\n\n  this._isDirty = false;\n  return {\n    width: this.width,\n    height: this.height\n  };\n};\n\nTextBlock.prototype._getLineWithWidth = function (text, width, clipWord) {\n  text = String(text);\n  clipWord = clipWord || false;\n  if (!text) return {\n    text: \"\",\n    width: 0\n  };\n  var textWidth = 0,\n      min = 0,\n      max = text.length - 1,\n      mid = Infinity;\n  this.ctx.font = this._getFontString();\n\n  while (min <= max) {\n    mid = Math.floor((min + max) / 2);\n    var tempText = text.substr(0, mid + 1);\n    textWidth = this.ctx.measureText(tempText).width;\n\n    if (textWidth < width) {\n      min = mid + 1;\n    } else if (textWidth > width) {\n      max = mid - 1;\n    } else {\n      break;\n    }\n  } //edge cases\n\n\n  if (textWidth > width && tempText.length > 1) {\n    tempText = tempText.substr(0, tempText.length - 1);\n    textWidth = this.ctx.measureText(tempText).width;\n  }\n\n  var isClipped = true;\n  if (tempText.length === text.length || text[tempText.length] === \" \") isClipped = false;\n\n  if (isClipped) {\n    var resultWords = tempText.split(\" \");\n    if (resultWords.length > 1) resultWords.pop();\n    tempText = resultWords.join(\" \");\n    textWidth = this.ctx.measureText(tempText).width;\n  }\n\n  return {\n    text: tempText,\n    width: textWidth\n  };\n};\n\nTextBlock.prototype._wrapText = function wrapText() {\n  //this.ctx.save();\n  var text = new String(trimString(String(this.text)));\n  var lines = [];\n  var font = this.ctx.font; // Save the current Font\n\n  var height = 0;\n  var width = 0;\n  this.ctx.font = this._getFontString();\n\n  while (text.length > 0) {\n    var maxWidth = this.maxWidth - this.padding * 2;\n    var maxHeight = this.maxHeight - this.padding * 2;\n\n    var line = this._getLineWithWidth(text, maxWidth, false);\n\n    line.height = this._lineHeight;\n    lines.push(line);\n    width = Math.max(width, line.width);\n    height += line.height;\n    text = trimString(text.slice(line.text.length, text.length));\n\n    if (maxHeight && height > maxHeight) {\n      var line = lines.pop();\n      height -= line.height;\n    }\n  }\n\n  this._wrappedText = {\n    lines: lines,\n    width: width,\n    height: height\n  };\n  this.width = width + this.padding * 2;\n  this.height = height + this.padding * 2;\n  this.ctx.font = font; // Restore the font\n};\n\nTextBlock.prototype._getFontString = function () {\n  //return this.fontStyle + \" \" + this.fontWeight + \" \" + this.fontSize + \"px \" + this.fontFamily\n  return getFontString(\"\", this, null);\n};\n\nexport default TextBlock;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/canvasjs/src/core/text_block.js"],"names":["CanvasJSObject","extend","getFontHeightInPixels","trimString","getFontString","TextBlock","ctx","options","base","constructor","call","_isDirty","_wrappedText","_lineHeight","fontFamily","fontSize","fontWeight","prototype","render","preserveContext","save","font","textBaseline","offsetY","measureText","translate","x","y","_getFontString","rotate","Math","PI","angle","textLeft","textTop","padding","line","borderThickness","borderColor","backgroundColor","roundRect","width","height","cornerRadius","fillStyle","fontColor","i","lines","length","horizontalAlign","fillText","text","restore","setText","maxWidth","_wrapText","_getLineWithWidth","clipWord","String","textWidth","min","max","mid","Infinity","floor","tempText","substr","isClipped","resultWords","split","pop","join","wrapText","maxHeight","push","slice"],"mappings":"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","sourcesContent":["\r\nimport CanvasJSObject from './canvasjs';\r\nimport {extend, getFontHeightInPixels, trimString, getFontString} from '../helpers/utils';\r\n\r\nfunction TextBlock(ctx, options) {\r\n\r\n  TextBlock.base.constructor.call(this, \"TextBlock\", options);\r\n\r\n  this.ctx = ctx;\r\n  this._isDirty = true;\r\n  this._wrappedText = null;\r\n  this._lineHeight = getFontHeightInPixels(this.fontFamily, this.fontSize, this.fontWeight);\r\n}\r\n\r\nextend(TextBlock, CanvasJSObject);\r\n\r\nTextBlock.prototype.render = function (preserveContext) {\r\n  if (preserveContext)\r\n    this.ctx.save();\r\n\r\n  var font = this.ctx.font;\r\n  this.ctx.textBaseline = this.textBaseline;\r\n\r\n  var offsetY = 0;\r\n\r\n  if (this._isDirty)\r\n    this.measureText(this.ctx);\r\n\r\n  this.ctx.translate(this.x, this.y + offsetY);\r\n\r\n  if (this.textBaseline === \"middle\") {\r\n    offsetY = -this._lineHeight / 2;\r\n  }\r\n\r\n  this.ctx.font = this._getFontString();\r\n\r\n  this.ctx.rotate(Math.PI / 180 * this.angle);\r\n\r\n  var textLeft = 0;\r\n  var textTop = this.padding;\r\n  //var textTop = this.padding;\r\n  var line = null;\r\n\r\n  if ((this.borderThickness > 0 && this.borderColor) || this.backgroundColor) {\r\n    this.ctx.roundRect(0, offsetY, this.width, this.height, this.cornerRadius, this.borderThickness, this.backgroundColor, this.borderColor);\r\n\r\n    //if (this.textBaseline === \"middle\") {\r\n    //\t//textTop += this.fontSize / 2;\r\n    //\ttextTop += this._lineHeight / 2;\r\n    //}\r\n  }\r\n\r\n  this.ctx.fillStyle = this.fontColor;\r\n\r\n  for (var i = 0; i < this._wrappedText.lines.length; i++) {\r\n\r\n    line = this._wrappedText.lines[i];\r\n    if (this.horizontalAlign === \"right\")\r\n      textLeft = this.width - line.width - this.padding;\r\n    else if (this.horizontalAlign === \"left\")\r\n      textLeft = this.padding;\r\n    else if (this.horizontalAlign === \"center\")\r\n      textLeft = (this.width - this.padding * 2) / 2 - line.width / 2 + this.padding;\r\n\r\n    this.ctx.fillText(line.text, textLeft, textTop);\r\n\r\n    textTop += line.height;\r\n  }\r\n\r\n  this.ctx.font = font;\r\n\r\n  if (preserveContext)\r\n    this.ctx.restore();\r\n}\r\n\r\nTextBlock.prototype.setText = function (text) {\r\n  this.text = text;\r\n  this._isDirty = true;\r\n  this._wrappedText = null;\r\n}\r\n\r\nTextBlock.prototype.measureText = function () {\r\n  if (this.maxWidth === null) {\r\n    throw (\"Please set maxWidth and height for TextBlock\");\r\n  }\r\n\r\n  this._wrapText(this.ctx);\r\n  this._isDirty = false;\r\n\r\n  return {\r\n    width: this.width, height: this.height\r\n  }\r\n}\r\n\r\nTextBlock.prototype._getLineWithWidth = function (text, width, clipWord) {\r\n  text = String(text);\r\n  clipWord = clipWord || false;\r\n\r\n  if (!text)\r\n    return {\r\n      text: \"\", width: 0\r\n    };\r\n\r\n  var textWidth = 0,\r\n    min = 0,\r\n    max = text.length - 1,\r\n    mid = Infinity;\r\n\r\n  this.ctx.font = this._getFontString();\r\n\r\n  while (min <= max) {\r\n    mid = Math.floor((min + max) / 2);\r\n    var tempText = text.substr(0, mid + 1);\r\n\r\n    textWidth = this.ctx.measureText(tempText).width;\r\n\r\n    if (textWidth < width) {\r\n      min = mid + 1;\r\n    } else if (textWidth > width) {\r\n      max = mid - 1;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n\r\n  //edge cases\r\n  if (textWidth > width && tempText.length > 1) {\r\n    tempText = tempText.substr(0, tempText.length - 1);\r\n    textWidth = this.ctx.measureText(tempText).width;\r\n  }\r\n\r\n  var isClipped = true;\r\n\r\n  if (tempText.length === text.length || text[tempText.length] === \" \")\r\n    isClipped = false;\r\n\r\n  if (isClipped) {\r\n    var resultWords = tempText.split(\" \");\r\n    if (resultWords.length > 1)\r\n      resultWords.pop();\r\n\r\n    tempText = resultWords.join(\" \");\r\n    textWidth = this.ctx.measureText(tempText).width;\r\n  }\r\n\r\n  return {\r\n    text: tempText, width: textWidth\r\n  };\r\n}\r\n\r\nTextBlock.prototype._wrapText = function wrapText() {\r\n  //this.ctx.save();\r\n  var text = new String(trimString(String(this.text)));\r\n  var lines = [];\r\n  var font = this.ctx.font; // Save the current Font\r\n  var height = 0;\r\n  var width = 0;\r\n\r\n  this.ctx.font = this._getFontString();\r\n\r\n  while (text.length > 0) {\r\n\r\n    var maxWidth = this.maxWidth - this.padding * 2;\r\n    var maxHeight = this.maxHeight - this.padding * 2;\r\n\r\n    var line = this._getLineWithWidth(text, maxWidth, false);\r\n    line.height = this._lineHeight;\r\n\r\n    lines.push(line);\r\n\r\n    width = Math.max(width, line.width);\r\n    height += line.height;\r\n    text = trimString(text.slice(line.text.length, text.length));\r\n\r\n    if (maxHeight && height > maxHeight) {\r\n      var line = lines.pop();\r\n      height -= line.height;\r\n    }\r\n  }\r\n\r\n  this._wrappedText = {\r\n    lines: lines, width: width, height: height\r\n  };\r\n  this.width = width + this.padding * 2;\r\n  this.height = height + this.padding * 2;\r\n\r\n  this.ctx.font = font; // Restore the font\r\n}\r\n\r\nTextBlock.prototype._getFontString = function () {\r\n  //return this.fontStyle + \" \" + this.fontWeight + \" \" + this.fontSize + \"px \" + this.fontFamily\r\n  return getFontString(\"\", this, null);\r\n}\r\n\r\nexport default TextBlock;\r\n"]},"metadata":{},"sourceType":"module"}