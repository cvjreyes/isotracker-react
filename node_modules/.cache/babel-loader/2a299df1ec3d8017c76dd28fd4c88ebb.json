{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { hasOwnProperty } from \"../../helpers/object.mjs\";\n/**\n * Command executor for ContextMenu.\n *\n * @class CommandExecutor\n * @plugin ContextMenu\n */\n\nvar CommandExecutor = /*#__PURE__*/function () {\n  function CommandExecutor(hotInstance) {\n    _classCallCheck(this, CommandExecutor);\n\n    this.hot = hotInstance;\n    this.commands = {};\n    this.commonCallback = null;\n  }\n  /**\n   * Register command.\n   *\n   * @param {string} name Command name.\n   * @param {object} commandDescriptor Command descriptor object with properties like `key` (command id),\n   *                                   `callback` (task to execute), `name` (command name), `disabled` (command availability).\n   */\n\n\n  _createClass(CommandExecutor, [{\n    key: \"registerCommand\",\n    value: function registerCommand(name, commandDescriptor) {\n      this.commands[name] = commandDescriptor;\n    }\n    /**\n     * Set common callback which will be trigger on every executed command.\n     *\n     * @param {Function} callback Function which will be fired on every command execute.\n     */\n\n  }, {\n    key: \"setCommonCallback\",\n    value: function setCommonCallback(callback) {\n      this.commonCallback = callback;\n    }\n    /**\n     * Execute command by its name.\n     *\n     * @param {string} commandName Command id.\n     * @param {*} params Arguments passed to command task.\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(commandName) {\n      var _this = this;\n\n      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        params[_key - 1] = arguments[_key];\n      }\n\n      var commandSplit = commandName.split(':');\n      var commandNamePrimary = commandSplit[0];\n      var subCommandName = commandSplit.length === 2 ? commandSplit[1] : null;\n      var command = this.commands[commandNamePrimary];\n\n      if (!command) {\n        throw new Error(\"Menu command '\".concat(commandNamePrimary, \"' not exists.\"));\n      }\n\n      if (subCommandName && command.submenu) {\n        command = findSubCommand(subCommandName, command.submenu.items);\n      }\n\n      if (command.disabled === true) {\n        return;\n      }\n\n      if (typeof command.disabled === 'function' && command.disabled.call(this.hot) === true) {\n        return;\n      }\n\n      if (hasOwnProperty(command, 'submenu')) {\n        return;\n      }\n\n      var callbacks = [];\n\n      if (typeof command.callback === 'function') {\n        callbacks.push(command.callback);\n      }\n\n      if (typeof this.commonCallback === 'function') {\n        callbacks.push(this.commonCallback);\n      }\n\n      params.unshift(commandSplit.join(':'));\n      arrayEach(callbacks, function (callback) {\n        return callback.apply(_this.hot, params);\n      });\n    }\n  }]);\n\n  return CommandExecutor;\n}();\n/**\n * @param {string} subCommandName The subcommand name.\n * @param {string[]} subCommands The collection of the commands.\n * @returns {boolean}\n */\n\n\nfunction findSubCommand(subCommandName, subCommands) {\n  var command;\n  arrayEach(subCommands, function (cmd) {\n    var cmds = cmd.key ? cmd.key.split(':') : null;\n\n    if (Array.isArray(cmds) && cmds[1] === subCommandName) {\n      command = cmd;\n      return false;\n    }\n  });\n  return command;\n}\n\nexport default CommandExecutor;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/contextMenu/commandExecutor.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","arrayEach","hasOwnProperty","CommandExecutor","hotInstance","hot","commands","commonCallback","value","registerCommand","name","commandDescriptor","setCommonCallback","callback","execute","commandName","_this","_len","arguments","params","Array","_key","commandSplit","split","commandNamePrimary","subCommandName","command","Error","concat","submenu","findSubCommand","items","disabled","call","callbacks","push","unshift","join","apply","subCommands","cmd","cmds","isArray"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.join.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { hasOwnProperty } from \"../../helpers/object.mjs\";\n/**\n * Command executor for ContextMenu.\n *\n * @class CommandExecutor\n * @plugin ContextMenu\n */\n\nvar CommandExecutor = /*#__PURE__*/function () {\n  function CommandExecutor(hotInstance) {\n    _classCallCheck(this, CommandExecutor);\n\n    this.hot = hotInstance;\n    this.commands = {};\n    this.commonCallback = null;\n  }\n  /**\n   * Register command.\n   *\n   * @param {string} name Command name.\n   * @param {object} commandDescriptor Command descriptor object with properties like `key` (command id),\n   *                                   `callback` (task to execute), `name` (command name), `disabled` (command availability).\n   */\n\n\n  _createClass(CommandExecutor, [{\n    key: \"registerCommand\",\n    value: function registerCommand(name, commandDescriptor) {\n      this.commands[name] = commandDescriptor;\n    }\n    /**\n     * Set common callback which will be trigger on every executed command.\n     *\n     * @param {Function} callback Function which will be fired on every command execute.\n     */\n\n  }, {\n    key: \"setCommonCallback\",\n    value: function setCommonCallback(callback) {\n      this.commonCallback = callback;\n    }\n    /**\n     * Execute command by its name.\n     *\n     * @param {string} commandName Command id.\n     * @param {*} params Arguments passed to command task.\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(commandName) {\n      var _this = this;\n\n      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        params[_key - 1] = arguments[_key];\n      }\n\n      var commandSplit = commandName.split(':');\n      var commandNamePrimary = commandSplit[0];\n      var subCommandName = commandSplit.length === 2 ? commandSplit[1] : null;\n      var command = this.commands[commandNamePrimary];\n\n      if (!command) {\n        throw new Error(\"Menu command '\".concat(commandNamePrimary, \"' not exists.\"));\n      }\n\n      if (subCommandName && command.submenu) {\n        command = findSubCommand(subCommandName, command.submenu.items);\n      }\n\n      if (command.disabled === true) {\n        return;\n      }\n\n      if (typeof command.disabled === 'function' && command.disabled.call(this.hot) === true) {\n        return;\n      }\n\n      if (hasOwnProperty(command, 'submenu')) {\n        return;\n      }\n\n      var callbacks = [];\n\n      if (typeof command.callback === 'function') {\n        callbacks.push(command.callback);\n      }\n\n      if (typeof this.commonCallback === 'function') {\n        callbacks.push(this.commonCallback);\n      }\n\n      params.unshift(commandSplit.join(':'));\n      arrayEach(callbacks, function (callback) {\n        return callback.apply(_this.hot, params);\n      });\n    }\n  }]);\n\n  return CommandExecutor;\n}();\n/**\n * @param {string} subCommandName The subcommand name.\n * @param {string[]} subCommands The collection of the commands.\n * @returns {boolean}\n */\n\n\nfunction findSubCommand(subCommandName, subCommands) {\n  var command;\n  arrayEach(subCommands, function (cmd) {\n    var cmds = cmd.key ? cmd.key.split(':') : null;\n\n    if (Array.isArray(cmds) && cmds[1] === subCommandName) {\n      command = cmd;\n      return false;\n    }\n  });\n  return command;\n}\n\nexport default CommandExecutor;"]},"metadata":{},"sourceType":"module"}