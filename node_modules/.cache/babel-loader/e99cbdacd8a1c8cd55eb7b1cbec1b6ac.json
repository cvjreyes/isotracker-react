{"ast":null,"code":"import { isDefined } from \"../../helpers/mixed.mjs\";\nimport { ASC_SORT_STATE, DESC_SORT_STATE } from \"./utils.mjs\";\nvar HEADER_CLASS_ASC_SORT = 'ascending';\nvar HEADER_CLASS_DESC_SORT = 'descending';\nvar HEADER_CLASS_INDICATOR_DISABLED = 'indicatorDisabled';\nvar HEADER_SORT_CLASS = 'columnSorting';\nvar HEADER_ACTION_CLASS = 'sortAction';\nvar orderToCssClass = new Map([[ASC_SORT_STATE, HEADER_CLASS_ASC_SORT], [DESC_SORT_STATE, HEADER_CLASS_DESC_SORT]]);\n/**\r\n * Get CSS classes which should be added to particular column header.\r\n *\r\n * @param {object} columnStatesManager Instance of column state manager.\r\n * @param {number} column Visual column index.\r\n * @param {boolean} showSortIndicator Indicates if indicator should be shown for the particular column.\r\n * @param {boolean} headerAction Indicates if header click to sort should be possible.\r\n * @returns {Array} Array of CSS classes.\r\n */\n\nexport function getClassesToAdd(columnStatesManager, column, showSortIndicator, headerAction) {\n  var cssClasses = [HEADER_SORT_CLASS];\n\n  if (headerAction) {\n    cssClasses.push(HEADER_ACTION_CLASS);\n  }\n\n  if (showSortIndicator === false) {\n    cssClasses.push(HEADER_CLASS_INDICATOR_DISABLED);\n    return cssClasses;\n  }\n\n  var columnOrder = columnStatesManager.getSortOrderOfColumn(column);\n\n  if (isDefined(columnOrder)) {\n    cssClasses.push(orderToCssClass.get(columnOrder));\n  }\n\n  return cssClasses;\n}\n/**\r\n * Get CSS classes which should be removed from column header.\r\n *\r\n * @returns {Array} Array of CSS classes.\r\n */\n\nexport function getClassesToRemove() {\n  return Array.from(orderToCssClass.values()).concat(HEADER_ACTION_CLASS, HEADER_CLASS_INDICATOR_DISABLED, HEADER_SORT_CLASS);\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/columnSorting/domHelpers.mjs"],"names":["isDefined","ASC_SORT_STATE","DESC_SORT_STATE","HEADER_CLASS_ASC_SORT","HEADER_CLASS_DESC_SORT","HEADER_CLASS_INDICATOR_DISABLED","HEADER_SORT_CLASS","HEADER_ACTION_CLASS","orderToCssClass","Map","getClassesToAdd","columnStatesManager","column","showSortIndicator","headerAction","cssClasses","push","columnOrder","getSortOrderOfColumn","get","getClassesToRemove","Array","from","values","concat"],"mappings":"AAOA,SAASA,SAAT,QAA0B,yBAA1B;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,aAAhD;AACA,IAAIC,qBAAqB,GAAG,WAA5B;AACA,IAAIC,sBAAsB,GAAG,YAA7B;AACA,IAAIC,+BAA+B,GAAG,mBAAtC;AACA,IAAIC,iBAAiB,GAAG,eAAxB;AACA,IAAIC,mBAAmB,GAAG,YAA1B;AACA,IAAIC,eAAe,GAAG,IAAIC,GAAJ,CAAQ,CAAC,CAACR,cAAD,EAAiBE,qBAAjB,CAAD,EAA0C,CAACD,eAAD,EAAkBE,sBAAlB,CAA1C,CAAR,CAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASM,eAAT,CAAyBC,mBAAzB,EAA8CC,MAA9C,EAAsDC,iBAAtD,EAAyEC,YAAzE,EAAuF;AAC5F,MAAIC,UAAU,GAAG,CAACT,iBAAD,CAAjB;;AAEA,MAAIQ,YAAJ,EAAkB;AAChBC,IAAAA,UAAU,CAACC,IAAX,CAAgBT,mBAAhB;AACD;;AAED,MAAIM,iBAAiB,KAAK,KAA1B,EAAiC;AAC/BE,IAAAA,UAAU,CAACC,IAAX,CAAgBX,+BAAhB;AACA,WAAOU,UAAP;AACD;;AAED,MAAIE,WAAW,GAAGN,mBAAmB,CAACO,oBAApB,CAAyCN,MAAzC,CAAlB;;AAEA,MAAIZ,SAAS,CAACiB,WAAD,CAAb,EAA4B;AAC1BF,IAAAA,UAAU,CAACC,IAAX,CAAgBR,eAAe,CAACW,GAAhB,CAAoBF,WAApB,CAAhB;AACD;;AAED,SAAOF,UAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASK,kBAAT,GAA8B;AACnC,SAAOC,KAAK,CAACC,IAAN,CAAWd,eAAe,CAACe,MAAhB,EAAX,EAAqCC,MAArC,CAA4CjB,mBAA5C,EAAiEF,+BAAjE,EAAkGC,iBAAlG,CAAP;AACD","sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.map.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\nimport \"core-js/modules/es.array.concat.js\";\r\nimport \"core-js/modules/es.array.from.js\";\r\nimport { isDefined } from \"../../helpers/mixed.mjs\";\r\nimport { ASC_SORT_STATE, DESC_SORT_STATE } from \"./utils.mjs\";\r\nvar HEADER_CLASS_ASC_SORT = 'ascending';\r\nvar HEADER_CLASS_DESC_SORT = 'descending';\r\nvar HEADER_CLASS_INDICATOR_DISABLED = 'indicatorDisabled';\r\nvar HEADER_SORT_CLASS = 'columnSorting';\r\nvar HEADER_ACTION_CLASS = 'sortAction';\r\nvar orderToCssClass = new Map([[ASC_SORT_STATE, HEADER_CLASS_ASC_SORT], [DESC_SORT_STATE, HEADER_CLASS_DESC_SORT]]);\r\n/**\r\n * Get CSS classes which should be added to particular column header.\r\n *\r\n * @param {object} columnStatesManager Instance of column state manager.\r\n * @param {number} column Visual column index.\r\n * @param {boolean} showSortIndicator Indicates if indicator should be shown for the particular column.\r\n * @param {boolean} headerAction Indicates if header click to sort should be possible.\r\n * @returns {Array} Array of CSS classes.\r\n */\r\n\r\nexport function getClassesToAdd(columnStatesManager, column, showSortIndicator, headerAction) {\r\n  var cssClasses = [HEADER_SORT_CLASS];\r\n\r\n  if (headerAction) {\r\n    cssClasses.push(HEADER_ACTION_CLASS);\r\n  }\r\n\r\n  if (showSortIndicator === false) {\r\n    cssClasses.push(HEADER_CLASS_INDICATOR_DISABLED);\r\n    return cssClasses;\r\n  }\r\n\r\n  var columnOrder = columnStatesManager.getSortOrderOfColumn(column);\r\n\r\n  if (isDefined(columnOrder)) {\r\n    cssClasses.push(orderToCssClass.get(columnOrder));\r\n  }\r\n\r\n  return cssClasses;\r\n}\r\n/**\r\n * Get CSS classes which should be removed from column header.\r\n *\r\n * @returns {Array} Array of CSS classes.\r\n */\r\n\r\nexport function getClassesToRemove() {\r\n  return Array.from(orderToCssClass.values()).concat(HEADER_ACTION_CLASS, HEADER_CLASS_INDICATOR_DISABLED, HEADER_SORT_CLASS);\r\n}"]},"metadata":{},"sourceType":"module"}