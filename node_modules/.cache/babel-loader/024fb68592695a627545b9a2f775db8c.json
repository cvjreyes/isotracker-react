{"ast":null,"code":"import DOMPurify from 'dompurify';\nimport { stringify } from \"./mixed.mjs\";\n/**\n * Convert string to upper case first letter.\n *\n * @param {string} string String to convert.\n * @returns {string}\n */\n\nexport function toUpperCaseFirst(string) {\n  return string[0].toUpperCase() + string.substr(1);\n}\n/**\n * Compare strings case insensitively.\n *\n * @param {...string} strings Strings to compare.\n * @returns {boolean}\n */\n\nexport function equalsIgnoreCase() {\n  var unique = [];\n\n  for (var _len = arguments.length, strings = new Array(_len), _key = 0; _key < _len; _key++) {\n    strings[_key] = arguments[_key];\n  }\n\n  var length = strings.length;\n\n  while (length) {\n    length -= 1;\n    var string = stringify(strings[length]).toLowerCase();\n\n    if (unique.indexOf(string) === -1) {\n      unique.push(string);\n    }\n  }\n\n  return unique.length === 1;\n}\n/**\n * Generates a random hex string. Used as namespace for Handsontable instance events.\n *\n * @returns {string} Returns 16-long character random string (eq. `'92b1bfc74ec4'`).\n */\n\nexport function randomString() {\n  /**\n   * @returns {string}\n   */\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  return s4() + s4() + s4() + s4();\n}\n/**\n * Checks if value is valid percent.\n *\n * @param {string} value The value to check.\n * @returns {boolean}\n */\n\nexport function isPercentValue(value) {\n  return /^([0-9][0-9]?%$)|(^100%$)/.test(value);\n}\n/**\n * Substitute strings placed beetwen square brackets into value defined in `variables` object. String names defined in\n * square brackets must be the same as property name of `variables` object.\n *\n * @param {string} template Template string.\n * @param {object} variables Object which contains all available values which can be injected into template.\n * @returns {string}\n */\n\nexport function substitute(template) {\n  var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return \"\".concat(template).replace(/(?:\\\\)?\\[([^[\\]]+)]/g, function (match, name) {\n    if (match.charAt(0) === '\\\\') {\n      return match.substr(1, match.length - 1);\n    }\n\n    return variables[name] === void 0 ? '' : variables[name];\n  });\n}\n/**\n * Strip any HTML tag from the string.\n *\n * @param {string} string String to cut HTML from.\n * @returns {string}\n */\n\nexport function stripTags(string) {\n  return sanitize(\"\".concat(string), {\n    ALLOWED_TAGS: []\n  });\n}\n/**\n * Sanitizes string from potential security vulnerabilities.\n *\n * @param {string} string String to sanitize.\n * @param {object} [options] DOMPurify's configuration object.\n * @returns {string}\n */\n\nexport function sanitize(string, options) {\n  return DOMPurify.sanitize(string, options);\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/helpers/string.mjs"],"names":["DOMPurify","stringify","toUpperCaseFirst","string","toUpperCase","substr","equalsIgnoreCase","unique","_len","arguments","length","strings","Array","_key","toLowerCase","indexOf","push","randomString","s4","Math","floor","random","toString","substring","isPercentValue","value","test","substitute","template","variables","undefined","concat","replace","match","name","charAt","stripTags","sanitize","ALLOWED_TAGS","options"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport DOMPurify from 'dompurify';\nimport { stringify } from \"./mixed.mjs\";\n/**\n * Convert string to upper case first letter.\n *\n * @param {string} string String to convert.\n * @returns {string}\n */\n\nexport function toUpperCaseFirst(string) {\n  return string[0].toUpperCase() + string.substr(1);\n}\n/**\n * Compare strings case insensitively.\n *\n * @param {...string} strings Strings to compare.\n * @returns {boolean}\n */\n\nexport function equalsIgnoreCase() {\n  var unique = [];\n\n  for (var _len = arguments.length, strings = new Array(_len), _key = 0; _key < _len; _key++) {\n    strings[_key] = arguments[_key];\n  }\n\n  var length = strings.length;\n\n  while (length) {\n    length -= 1;\n    var string = stringify(strings[length]).toLowerCase();\n\n    if (unique.indexOf(string) === -1) {\n      unique.push(string);\n    }\n  }\n\n  return unique.length === 1;\n}\n/**\n * Generates a random hex string. Used as namespace for Handsontable instance events.\n *\n * @returns {string} Returns 16-long character random string (eq. `'92b1bfc74ec4'`).\n */\n\nexport function randomString() {\n  /**\n   * @returns {string}\n   */\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  return s4() + s4() + s4() + s4();\n}\n/**\n * Checks if value is valid percent.\n *\n * @param {string} value The value to check.\n * @returns {boolean}\n */\n\nexport function isPercentValue(value) {\n  return /^([0-9][0-9]?%$)|(^100%$)/.test(value);\n}\n/**\n * Substitute strings placed beetwen square brackets into value defined in `variables` object. String names defined in\n * square brackets must be the same as property name of `variables` object.\n *\n * @param {string} template Template string.\n * @param {object} variables Object which contains all available values which can be injected into template.\n * @returns {string}\n */\n\nexport function substitute(template) {\n  var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return \"\".concat(template).replace(/(?:\\\\)?\\[([^[\\]]+)]/g, function (match, name) {\n    if (match.charAt(0) === '\\\\') {\n      return match.substr(1, match.length - 1);\n    }\n\n    return variables[name] === void 0 ? '' : variables[name];\n  });\n}\n/**\n * Strip any HTML tag from the string.\n *\n * @param {string} string String to cut HTML from.\n * @returns {string}\n */\n\nexport function stripTags(string) {\n  return sanitize(\"\".concat(string), {\n    ALLOWED_TAGS: []\n  });\n}\n/**\n * Sanitizes string from potential security vulnerabilities.\n *\n * @param {string} string String to sanitize.\n * @param {object} [options] DOMPurify's configuration object.\n * @returns {string}\n */\n\nexport function sanitize(string, options) {\n  return DOMPurify.sanitize(string, options);\n}"]},"metadata":{},"sourceType":"module"}