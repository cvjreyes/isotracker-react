{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nimport { Selection, CellCoords, CellRange } from \"./../../3rdparty/walkontable/src/index.mjs\";\n\nvar VisualSelection = /*#__PURE__*/function (_Selection) {\n  _inherits(VisualSelection, _Selection);\n\n  var _super = _createSuper(VisualSelection);\n\n  function VisualSelection(settings, visualCellRange) {\n    var _this;\n\n    _classCallCheck(this, VisualSelection);\n\n    _this = _super.call(this, settings, null);\n    /**\n     * Range of selection visually. Visual representation may have representation in a rendered selection.\n     *\n     * @type {null|CellRange}\n     */\n\n    _this.visualCellRange = visualCellRange || null;\n\n    _this.commit();\n\n    return _this;\n  }\n  /**\n   * Adds a cell coords to the selection.\n   *\n   * @param {CellCoords} coords Visual coordinates of a cell.\n   * @returns {VisualSelection}\n   */\n\n\n  _createClass(VisualSelection, [{\n    key: \"add\",\n    value: function add(coords) {\n      if (this.visualCellRange === null) {\n        this.visualCellRange = new CellRange(coords);\n      } else {\n        this.visualCellRange.expand(coords);\n      }\n\n      return this;\n    }\n    /**\n     * Clears visual and renderable selection.\n     *\n     * @returns {VisualSelection}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.visualCellRange = null;\n      return _get(_getPrototypeOf(VisualSelection.prototype), \"clear\", this).call(this);\n    }\n    /**\n     * Search for the first visible coordinates in the range as range may start and/or end with the hidden index.\n     *\n     * @private\n     * @param {CellCoords} startCoords Visual start coordinates for the range. Starting point for finding destination coordinates\n     * with visible coordinates (we are going from the starting coordinates to the end coordinates until the criteria are met).\n     * @param {CellCoords} endCoords Visual end coordinates for the range.\n     * @param {number} incrementByRow We are searching for a next visible rows by increasing (to be precise, or decreasing) indexes.\n     * This variable represent indexes shift. We are looking for an index:\n     * - for rows: from the left to the right (increasing indexes, then variable should have value 1) or\n     * other way around (decreasing indexes, then variable should have the value -1)\n     * - for columns: from the top to the bottom (increasing indexes, then variable should have value 1)\n     * or other way around (decreasing indexes, then variable should have the value -1).\n     * @param {number} incrementByColumn As above, just indexes shift for columns.\n     * @returns {null|CellCoords} Visual cell coordinates.\n     */\n\n  }, {\n    key: \"findVisibleCoordsInRange\",\n    value: function findVisibleCoordsInRange(startCoords, endCoords, incrementByRow) {\n      var incrementByColumn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : incrementByRow;\n      var nextVisibleRow = this.findVisibleCoordsInRowsRange(startCoords.row, endCoords.row, incrementByRow); // There are no more visual rows in the range.\n\n      if (nextVisibleRow === null) {\n        return null;\n      }\n\n      var nextVisibleColumn = this.findVisibleCoordsInColumnsRange(startCoords.col, endCoords.col, incrementByColumn); // There are no more visual columns in the range.\n\n      if (nextVisibleColumn === null) {\n        return null;\n      }\n\n      return new CellCoords(nextVisibleRow, nextVisibleColumn);\n    }\n    /**\n     * Searches the nearest visible row index, which is not hidden (is renderable).\n     *\n     * @private\n     * @param {CellCoords} startVisibleRow Visual row index which starts the range. Starting point for finding\n     * destination coordinates with visible coordinates (we are going from the starting coordinates to the end\n     * coordinates until the criteria are met).\n     * @param {CellCoords} endVisibleRow Visual row index which ends the range.\n     * @param {number} incrementBy We are searching for a next visible rows by increasing (to be precise, or decreasing)\n     * indexes. This variable represent indexes shift. From the left to the right (increasing indexes, then variable\n     * should have value 1) or other way around (decreasing indexes, then variable should have the value -1).\n     * @returns {number|null} The visual row index.\n     */\n\n  }, {\n    key: \"findVisibleCoordsInRowsRange\",\n    value: function findVisibleCoordsInRowsRange(startVisibleRow, endVisibleRow, incrementBy) {\n      var _this$settings$visual = this.settings.visualToRenderableCoords({\n        row: startVisibleRow,\n        col: -1\n      }),\n          startRowRenderable = _this$settings$visual.row; // There are no more visual rows in the range.\n\n\n      if (endVisibleRow === startVisibleRow && startRowRenderable === null) {\n        return null;\n      } // We are looking for a next visible row in the range.\n\n\n      if (startRowRenderable === null) {\n        return this.findVisibleCoordsInRowsRange(startVisibleRow + incrementBy, endVisibleRow, incrementBy);\n      } // We found visible row index in the range.\n\n\n      return startVisibleRow;\n    }\n    /**\n     * Searches the nearest visible column index, which is not hidden (is renderable).\n     *\n     * @private\n     * @param {CellCoords} startVisibleColumn Visual column index which starts the range. Starting point for finding\n     * destination coordinates with visible coordinates (we are going from the starting coordinates to the end\n     * coordinates until the criteria are met).\n     * @param {CellCoords} endVisibleColumn Visual column index which ends the range.\n     * @param {number} incrementBy We are searching for a next visible columns by increasing (to be precise, or decreasing)\n     * indexes. This variable represent indexes shift. From the top to the bottom (increasing indexes, then variable\n     * should have value 1) or other way around (decreasing indexes, then variable should have the value -1).\n     * @returns {number|null} The visual column index.\n     */\n\n  }, {\n    key: \"findVisibleCoordsInColumnsRange\",\n    value: function findVisibleCoordsInColumnsRange(startVisibleColumn, endVisibleColumn, incrementBy) {\n      var _this$settings$visual2 = this.settings.visualToRenderableCoords({\n        row: -1,\n        col: startVisibleColumn\n      }),\n          startColumnRenderable = _this$settings$visual2.col; // There are no more visual columns in the range.\n\n\n      if (endVisibleColumn === startVisibleColumn && startColumnRenderable === null) {\n        return null;\n      } // We are looking for a next visible column in the range.\n\n\n      if (startColumnRenderable === null) {\n        return this.findVisibleCoordsInColumnsRange(startVisibleColumn + incrementBy, endVisibleColumn, incrementBy);\n      } // We found visible column index in the range.\n\n\n      return startVisibleColumn;\n    }\n    /**\n     * Searches the nearest visible column and row index, which is not hidden (is renderable). If one\n     * of the axes' range is entirely hidden, then created CellCoords object will hold the `null` value\n     * under a specific axis. For example, when we select the hidden column, then the calculated `col`\n     * prop will be `null`. In that case, rows are calculated further (regardless of the column result)\n     * to make rows header highlightable.\n     *\n     * @private\n     * @param {CellCoords} visualFromCoords Visual start coordinates for the range. Starting point for finding destination coordinates\n     * with visible coordinates (we are going from the starting coordinates to the end coordinates until the criteria are met).\n     * @param {CellCoords} visualToCoords Visual end coordinates for the range.\n     * @param {number} incrementByRow We are searching for a next visible rows by increasing (to be precise, or decreasing) indexes.\n     * This variable represent indexes shift. We are looking for an index:\n     * - for rows: from the left to the right (increasing indexes, then variable should have value 1) or\n     * other way around (decreasing indexes, then variable should have the value -1)\n     * - for columns: from the top to the bottom (increasing indexes, then variable should have value 1)\n     * or other way around (decreasing indexes, then variable should have the value -1).\n     * @param {number} incrementByColumn As above, just indexes shift for columns.\n     * @returns {CellCoords[]|null} Visual cell coordinates.\n     */\n\n  }, {\n    key: \"findVisibleHeaderRange\",\n    value: function findVisibleHeaderRange(visualFromCoords, visualToCoords, incrementByRow, incrementByColumn) {\n      var fromRangeVisualRow = this.findVisibleCoordsInRowsRange(visualFromCoords.row, visualToCoords.row, incrementByRow);\n      var toRangeVisualRow = this.findVisibleCoordsInRowsRange(visualToCoords.row, visualFromCoords.row, -incrementByRow);\n      var fromRangeVisualColumn = this.findVisibleCoordsInColumnsRange(visualFromCoords.col, visualToCoords.col, incrementByColumn);\n      var toRangeVisualColumn = this.findVisibleCoordsInColumnsRange(visualToCoords.col, visualFromCoords.col, -incrementByColumn); // All rows and columns ranges are hidden.\n\n      if (fromRangeVisualRow === null && toRangeVisualRow === null && fromRangeVisualColumn === null && toRangeVisualColumn === null) {\n        return null;\n      }\n\n      return [new CellCoords(fromRangeVisualRow, fromRangeVisualColumn), new CellCoords(toRangeVisualRow, toRangeVisualColumn)];\n    }\n    /**\n     * Override internally stored visual indexes added by the Selection's `add` function. It should be executed\n     * at the end of process of adding visual selection coordinates.\n     *\n     * @returns {VisualSelection}\n     */\n\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      // There is no information about visual ranges, thus no selection may be displayed.\n      if (this.visualCellRange === null) {\n        return this;\n      }\n\n      var _this$visualCellRange = this.visualCellRange,\n          visualFromCoords = _this$visualCellRange.from,\n          visualToCoords = _this$visualCellRange.to; // We may move in two different directions while searching for visible rows and visible columns.\n\n      var incrementByRow = this.getRowSearchDirection(this.visualCellRange);\n      var incrementByColumn = this.getColumnSearchDirection(this.visualCellRange);\n      var fromRangeVisual = this.findVisibleCoordsInRange(visualFromCoords, visualToCoords, incrementByRow, incrementByColumn);\n      var toRangeVisual = this.findVisibleCoordsInRange(visualToCoords, visualFromCoords, -incrementByRow, -incrementByColumn); // There is no visual start point (and also visual end point) in the range.\n      // We are looking for the first visible cell in a broader range.\n\n      if (fromRangeVisual === null || toRangeVisual === null) {\n        var isHeaderSelectionType = this.settings.type === 'header';\n        var cellRange = null; // For the \"header\" selection type, find rows and column indexes, which should be\n        // highlighted, although one of the axes is completely hidden.\n\n        if (isHeaderSelectionType) {\n          var _this$findVisibleHead = this.findVisibleHeaderRange(visualFromCoords, visualToCoords, incrementByRow, incrementByColumn),\n              _this$findVisibleHead2 = _slicedToArray(_this$findVisibleHead, 2),\n              fromRangeVisualHeader = _this$findVisibleHead2[0],\n              toRangeVisualHeader = _this$findVisibleHead2[1];\n\n          cellRange = this.createRenderableCellRange(fromRangeVisualHeader, toRangeVisualHeader);\n        }\n\n        this.cellRange = cellRange;\n      } else {\n        this.cellRange = this.createRenderableCellRange(fromRangeVisual, toRangeVisual);\n      }\n\n      return this;\n    }\n    /**\n     * Some selection may be a part of broader cell range. This function adjusting coordinates of current selection\n     * and the broader cell range when needed (current selection can't be presented visually).\n     *\n     * @param {CellRange} broaderCellRange Visual range. Actual cell range may be contained in the broader cell range.\n     * When there is no way to represent some cell range visually we try to find range containing just the first visible cell.\n     *\n     * Warn: Please keep in mind that this function may change coordinates of the handled broader range.\n     *\n     * @returns {VisualSelection}\n     */\n\n  }, {\n    key: \"adjustCoordinates\",\n    value: function adjustCoordinates(broaderCellRange) {\n      // We may move in two different directions while searching for visible rows and visible columns.\n      var incrementByRow = this.getRowSearchDirection(broaderCellRange);\n      var incrementByColumn = this.getColumnSearchDirection(broaderCellRange);\n      var normFromCoords = broaderCellRange.from.clone().normalize();\n      var normToCoords = broaderCellRange.to.clone().normalize();\n      var singleCellRangeVisual = this.findVisibleCoordsInRange(normFromCoords, normToCoords, incrementByRow, incrementByColumn);\n\n      if (singleCellRangeVisual !== null) {\n        // We can't show selection visually now, but we found fist visible range in the broader cell range.\n        if (this.cellRange === null) {\n          var singleCellRangeRenderable = this.settings.visualToRenderableCoords(singleCellRangeVisual);\n          this.cellRange = new CellRange(singleCellRangeRenderable);\n        } // We set new highlight as it might change (for example, when showing/hiding some cells from the broader selection range)\n        // TODO: It is also handled by the `MergeCells` plugin while adjusting already modified coordinates. Should it?\n\n\n        broaderCellRange.setHighlight(singleCellRangeVisual);\n        return this;\n      } // Fallback to the start of the range. It resets the previous highlight (for example, when all columns have been hidden).\n\n\n      broaderCellRange.setHighlight(broaderCellRange.from);\n      return this;\n    }\n    /**\n     * Returns the top left (TL) and bottom right (BR) selection coordinates (renderable indexes).\n     * The method overwrites the original method to support header selection for hidden cells.\n     * To make the header selection working, the CellCoords and CellRange have to support not\n     * complete coordinates (`null` values for example, `row: null`, `col: 2`).\n     *\n     * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.\n     */\n\n  }, {\n    key: \"getCorners\",\n    value: function getCorners() {\n      var _this$cellRange = this.cellRange,\n          from = _this$cellRange.from,\n          to = _this$cellRange.to;\n      var isRowUndefined = from.row === null || to.row === null;\n      var isColumnUndefined = from.col === null || to.col === null;\n      var topLeftCorner = new CellCoords(isRowUndefined ? null : Math.min(from.row, to.row), isColumnUndefined ? null : Math.min(from.col, to.col));\n      var bottomRightCorner = new CellCoords(isRowUndefined ? null : Math.max(from.row, to.row), isColumnUndefined ? null : Math.max(from.col, to.col));\n      return [topLeftCorner.row, topLeftCorner.col, bottomRightCorner.row, bottomRightCorner.col];\n    }\n    /**\n     * Returns the top left (TL) and bottom right (BR) selection coordinates (visual indexes).\n     *\n     * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.\n     */\n\n  }, {\n    key: \"getVisualCorners\",\n    value: function getVisualCorners() {\n      var topLeft = this.settings.renderableToVisualCoords(this.cellRange.getTopLeftCorner());\n      var bottomRight = this.settings.renderableToVisualCoords(this.cellRange.getBottomRightCorner());\n      return [topLeft.row, topLeft.col, bottomRight.row, bottomRight.col];\n    }\n    /**\n     * Creates a new CellRange object based on visual coordinates which before object creation are\n     * translated to renderable indexes.\n     *\n     * @param {CellCoords} visualFromCoords The CellCoords object which contains coordinates that\n     *                                      points to the begining of the selection.\n     * @param {CellCoords} visualToCoords The CellCoords object which contains coordinates that\n     *                                    points to the end of the selection.\n     * @returns {CellRange}\n     */\n\n  }, {\n    key: \"createRenderableCellRange\",\n    value: function createRenderableCellRange(visualFromCoords, visualToCoords) {\n      var renderableFromCoords = this.settings.visualToRenderableCoords(visualFromCoords);\n      var renderableToCoords = this.settings.visualToRenderableCoords(visualToCoords);\n      return new CellRange(renderableFromCoords, renderableFromCoords, renderableToCoords);\n    }\n    /**\n     * It returns rows shift needed for searching visual row.\n     *\n     * @private\n     * @param {CellRange} cellRange Selection range.\n     * @returns {number} Rows shift. It return 1 when we should increase indexes (moving from the top to the bottom) or\n     * -1 when we should decrease indexes (moving other way around).\n     */\n\n  }, {\n    key: \"getRowSearchDirection\",\n    value: function getRowSearchDirection(cellRange) {\n      if (cellRange.from.row < cellRange.to.row) {\n        return 1; // Increasing row indexes.\n      }\n\n      return -1; // Decreasing row indexes.\n    }\n    /**\n     * It returns columns shift needed for searching visual column.\n     *\n     * @private\n     * @param {CellRange} cellRange Selection range.\n     * @returns {number} Columns shift. It return 1 when we should increase indexes (moving from the left to the right) or\n     * -1 when we should decrease indexes (moving other way around).\n     */\n\n  }, {\n    key: \"getColumnSearchDirection\",\n    value: function getColumnSearchDirection(cellRange) {\n      if (cellRange.from.col < cellRange.to.col) {\n        return 1; // Increasing column indexes.\n      }\n\n      return -1; // Decreasing column indexes.\n    }\n  }]);\n\n  return VisualSelection;\n}(Selection);\n\nexport default VisualSelection;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/selection/highlight/visualSelection.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","len","length","arr2","_i","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","_get","property","receiver","Reflect","get","base","_superPropBase","desc","getOwnPropertyDescriptor","object","hasOwnProperty","_getPrototypeOf","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","Selection","CellCoords","CellRange","VisualSelection","_Selection","_super","settings","visualCellRange","_this","commit","add","coords","expand","clear","findVisibleCoordsInRange","startCoords","endCoords","incrementByRow","incrementByColumn","undefined","nextVisibleRow","findVisibleCoordsInRowsRange","row","nextVisibleColumn","findVisibleCoordsInColumnsRange","col","startVisibleRow","endVisibleRow","incrementBy","_this$settings$visual","visualToRenderableCoords","startRowRenderable","startVisibleColumn","endVisibleColumn","_this$settings$visual2","startColumnRenderable","findVisibleHeaderRange","visualFromCoords","visualToCoords","fromRangeVisualRow","toRangeVisualRow","fromRangeVisualColumn","toRangeVisualColumn","_this$visualCellRange","to","getRowSearchDirection","getColumnSearchDirection","fromRangeVisual","toRangeVisual","isHeaderSelectionType","type","cellRange","_this$findVisibleHead","_this$findVisibleHead2","fromRangeVisualHeader","toRangeVisualHeader","createRenderableCellRange","adjustCoordinates","broaderCellRange","normFromCoords","clone","normalize","normToCoords","singleCellRangeVisual","singleCellRangeRenderable","setHighlight","getCorners","_this$cellRange","isRowUndefined","isColumnUndefined","topLeftCorner","Math","min","bottomRightCorner","max","getVisualCorners","topLeft","renderableToVisualCoords","getTopLeftCorner","bottomRight","getBottomRightCorner","renderableFromCoords","renderableToCoords"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport \"core-js/modules/es.object.set-prototype-of.js\";\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.reflect.construct.js\";\nimport \"core-js/modules/es.reflect.get.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { Selection, CellCoords, CellRange } from \"./../../3rdparty/walkontable/src/index.mjs\";\n\nvar VisualSelection = /*#__PURE__*/function (_Selection) {\n  _inherits(VisualSelection, _Selection);\n\n  var _super = _createSuper(VisualSelection);\n\n  function VisualSelection(settings, visualCellRange) {\n    var _this;\n\n    _classCallCheck(this, VisualSelection);\n\n    _this = _super.call(this, settings, null);\n    /**\n     * Range of selection visually. Visual representation may have representation in a rendered selection.\n     *\n     * @type {null|CellRange}\n     */\n\n    _this.visualCellRange = visualCellRange || null;\n\n    _this.commit();\n\n    return _this;\n  }\n  /**\n   * Adds a cell coords to the selection.\n   *\n   * @param {CellCoords} coords Visual coordinates of a cell.\n   * @returns {VisualSelection}\n   */\n\n\n  _createClass(VisualSelection, [{\n    key: \"add\",\n    value: function add(coords) {\n      if (this.visualCellRange === null) {\n        this.visualCellRange = new CellRange(coords);\n      } else {\n        this.visualCellRange.expand(coords);\n      }\n\n      return this;\n    }\n    /**\n     * Clears visual and renderable selection.\n     *\n     * @returns {VisualSelection}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.visualCellRange = null;\n      return _get(_getPrototypeOf(VisualSelection.prototype), \"clear\", this).call(this);\n    }\n    /**\n     * Search for the first visible coordinates in the range as range may start and/or end with the hidden index.\n     *\n     * @private\n     * @param {CellCoords} startCoords Visual start coordinates for the range. Starting point for finding destination coordinates\n     * with visible coordinates (we are going from the starting coordinates to the end coordinates until the criteria are met).\n     * @param {CellCoords} endCoords Visual end coordinates for the range.\n     * @param {number} incrementByRow We are searching for a next visible rows by increasing (to be precise, or decreasing) indexes.\n     * This variable represent indexes shift. We are looking for an index:\n     * - for rows: from the left to the right (increasing indexes, then variable should have value 1) or\n     * other way around (decreasing indexes, then variable should have the value -1)\n     * - for columns: from the top to the bottom (increasing indexes, then variable should have value 1)\n     * or other way around (decreasing indexes, then variable should have the value -1).\n     * @param {number} incrementByColumn As above, just indexes shift for columns.\n     * @returns {null|CellCoords} Visual cell coordinates.\n     */\n\n  }, {\n    key: \"findVisibleCoordsInRange\",\n    value: function findVisibleCoordsInRange(startCoords, endCoords, incrementByRow) {\n      var incrementByColumn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : incrementByRow;\n      var nextVisibleRow = this.findVisibleCoordsInRowsRange(startCoords.row, endCoords.row, incrementByRow); // There are no more visual rows in the range.\n\n      if (nextVisibleRow === null) {\n        return null;\n      }\n\n      var nextVisibleColumn = this.findVisibleCoordsInColumnsRange(startCoords.col, endCoords.col, incrementByColumn); // There are no more visual columns in the range.\n\n      if (nextVisibleColumn === null) {\n        return null;\n      }\n\n      return new CellCoords(nextVisibleRow, nextVisibleColumn);\n    }\n    /**\n     * Searches the nearest visible row index, which is not hidden (is renderable).\n     *\n     * @private\n     * @param {CellCoords} startVisibleRow Visual row index which starts the range. Starting point for finding\n     * destination coordinates with visible coordinates (we are going from the starting coordinates to the end\n     * coordinates until the criteria are met).\n     * @param {CellCoords} endVisibleRow Visual row index which ends the range.\n     * @param {number} incrementBy We are searching for a next visible rows by increasing (to be precise, or decreasing)\n     * indexes. This variable represent indexes shift. From the left to the right (increasing indexes, then variable\n     * should have value 1) or other way around (decreasing indexes, then variable should have the value -1).\n     * @returns {number|null} The visual row index.\n     */\n\n  }, {\n    key: \"findVisibleCoordsInRowsRange\",\n    value: function findVisibleCoordsInRowsRange(startVisibleRow, endVisibleRow, incrementBy) {\n      var _this$settings$visual = this.settings.visualToRenderableCoords({\n        row: startVisibleRow,\n        col: -1\n      }),\n          startRowRenderable = _this$settings$visual.row; // There are no more visual rows in the range.\n\n\n      if (endVisibleRow === startVisibleRow && startRowRenderable === null) {\n        return null;\n      } // We are looking for a next visible row in the range.\n\n\n      if (startRowRenderable === null) {\n        return this.findVisibleCoordsInRowsRange(startVisibleRow + incrementBy, endVisibleRow, incrementBy);\n      } // We found visible row index in the range.\n\n\n      return startVisibleRow;\n    }\n    /**\n     * Searches the nearest visible column index, which is not hidden (is renderable).\n     *\n     * @private\n     * @param {CellCoords} startVisibleColumn Visual column index which starts the range. Starting point for finding\n     * destination coordinates with visible coordinates (we are going from the starting coordinates to the end\n     * coordinates until the criteria are met).\n     * @param {CellCoords} endVisibleColumn Visual column index which ends the range.\n     * @param {number} incrementBy We are searching for a next visible columns by increasing (to be precise, or decreasing)\n     * indexes. This variable represent indexes shift. From the top to the bottom (increasing indexes, then variable\n     * should have value 1) or other way around (decreasing indexes, then variable should have the value -1).\n     * @returns {number|null} The visual column index.\n     */\n\n  }, {\n    key: \"findVisibleCoordsInColumnsRange\",\n    value: function findVisibleCoordsInColumnsRange(startVisibleColumn, endVisibleColumn, incrementBy) {\n      var _this$settings$visual2 = this.settings.visualToRenderableCoords({\n        row: -1,\n        col: startVisibleColumn\n      }),\n          startColumnRenderable = _this$settings$visual2.col; // There are no more visual columns in the range.\n\n\n      if (endVisibleColumn === startVisibleColumn && startColumnRenderable === null) {\n        return null;\n      } // We are looking for a next visible column in the range.\n\n\n      if (startColumnRenderable === null) {\n        return this.findVisibleCoordsInColumnsRange(startVisibleColumn + incrementBy, endVisibleColumn, incrementBy);\n      } // We found visible column index in the range.\n\n\n      return startVisibleColumn;\n    }\n    /**\n     * Searches the nearest visible column and row index, which is not hidden (is renderable). If one\n     * of the axes' range is entirely hidden, then created CellCoords object will hold the `null` value\n     * under a specific axis. For example, when we select the hidden column, then the calculated `col`\n     * prop will be `null`. In that case, rows are calculated further (regardless of the column result)\n     * to make rows header highlightable.\n     *\n     * @private\n     * @param {CellCoords} visualFromCoords Visual start coordinates for the range. Starting point for finding destination coordinates\n     * with visible coordinates (we are going from the starting coordinates to the end coordinates until the criteria are met).\n     * @param {CellCoords} visualToCoords Visual end coordinates for the range.\n     * @param {number} incrementByRow We are searching for a next visible rows by increasing (to be precise, or decreasing) indexes.\n     * This variable represent indexes shift. We are looking for an index:\n     * - for rows: from the left to the right (increasing indexes, then variable should have value 1) or\n     * other way around (decreasing indexes, then variable should have the value -1)\n     * - for columns: from the top to the bottom (increasing indexes, then variable should have value 1)\n     * or other way around (decreasing indexes, then variable should have the value -1).\n     * @param {number} incrementByColumn As above, just indexes shift for columns.\n     * @returns {CellCoords[]|null} Visual cell coordinates.\n     */\n\n  }, {\n    key: \"findVisibleHeaderRange\",\n    value: function findVisibleHeaderRange(visualFromCoords, visualToCoords, incrementByRow, incrementByColumn) {\n      var fromRangeVisualRow = this.findVisibleCoordsInRowsRange(visualFromCoords.row, visualToCoords.row, incrementByRow);\n      var toRangeVisualRow = this.findVisibleCoordsInRowsRange(visualToCoords.row, visualFromCoords.row, -incrementByRow);\n      var fromRangeVisualColumn = this.findVisibleCoordsInColumnsRange(visualFromCoords.col, visualToCoords.col, incrementByColumn);\n      var toRangeVisualColumn = this.findVisibleCoordsInColumnsRange(visualToCoords.col, visualFromCoords.col, -incrementByColumn); // All rows and columns ranges are hidden.\n\n      if (fromRangeVisualRow === null && toRangeVisualRow === null && fromRangeVisualColumn === null && toRangeVisualColumn === null) {\n        return null;\n      }\n\n      return [new CellCoords(fromRangeVisualRow, fromRangeVisualColumn), new CellCoords(toRangeVisualRow, toRangeVisualColumn)];\n    }\n    /**\n     * Override internally stored visual indexes added by the Selection's `add` function. It should be executed\n     * at the end of process of adding visual selection coordinates.\n     *\n     * @returns {VisualSelection}\n     */\n\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      // There is no information about visual ranges, thus no selection may be displayed.\n      if (this.visualCellRange === null) {\n        return this;\n      }\n\n      var _this$visualCellRange = this.visualCellRange,\n          visualFromCoords = _this$visualCellRange.from,\n          visualToCoords = _this$visualCellRange.to; // We may move in two different directions while searching for visible rows and visible columns.\n\n      var incrementByRow = this.getRowSearchDirection(this.visualCellRange);\n      var incrementByColumn = this.getColumnSearchDirection(this.visualCellRange);\n      var fromRangeVisual = this.findVisibleCoordsInRange(visualFromCoords, visualToCoords, incrementByRow, incrementByColumn);\n      var toRangeVisual = this.findVisibleCoordsInRange(visualToCoords, visualFromCoords, -incrementByRow, -incrementByColumn); // There is no visual start point (and also visual end point) in the range.\n      // We are looking for the first visible cell in a broader range.\n\n      if (fromRangeVisual === null || toRangeVisual === null) {\n        var isHeaderSelectionType = this.settings.type === 'header';\n        var cellRange = null; // For the \"header\" selection type, find rows and column indexes, which should be\n        // highlighted, although one of the axes is completely hidden.\n\n        if (isHeaderSelectionType) {\n          var _this$findVisibleHead = this.findVisibleHeaderRange(visualFromCoords, visualToCoords, incrementByRow, incrementByColumn),\n              _this$findVisibleHead2 = _slicedToArray(_this$findVisibleHead, 2),\n              fromRangeVisualHeader = _this$findVisibleHead2[0],\n              toRangeVisualHeader = _this$findVisibleHead2[1];\n\n          cellRange = this.createRenderableCellRange(fromRangeVisualHeader, toRangeVisualHeader);\n        }\n\n        this.cellRange = cellRange;\n      } else {\n        this.cellRange = this.createRenderableCellRange(fromRangeVisual, toRangeVisual);\n      }\n\n      return this;\n    }\n    /**\n     * Some selection may be a part of broader cell range. This function adjusting coordinates of current selection\n     * and the broader cell range when needed (current selection can't be presented visually).\n     *\n     * @param {CellRange} broaderCellRange Visual range. Actual cell range may be contained in the broader cell range.\n     * When there is no way to represent some cell range visually we try to find range containing just the first visible cell.\n     *\n     * Warn: Please keep in mind that this function may change coordinates of the handled broader range.\n     *\n     * @returns {VisualSelection}\n     */\n\n  }, {\n    key: \"adjustCoordinates\",\n    value: function adjustCoordinates(broaderCellRange) {\n      // We may move in two different directions while searching for visible rows and visible columns.\n      var incrementByRow = this.getRowSearchDirection(broaderCellRange);\n      var incrementByColumn = this.getColumnSearchDirection(broaderCellRange);\n      var normFromCoords = broaderCellRange.from.clone().normalize();\n      var normToCoords = broaderCellRange.to.clone().normalize();\n      var singleCellRangeVisual = this.findVisibleCoordsInRange(normFromCoords, normToCoords, incrementByRow, incrementByColumn);\n\n      if (singleCellRangeVisual !== null) {\n        // We can't show selection visually now, but we found fist visible range in the broader cell range.\n        if (this.cellRange === null) {\n          var singleCellRangeRenderable = this.settings.visualToRenderableCoords(singleCellRangeVisual);\n          this.cellRange = new CellRange(singleCellRangeRenderable);\n        } // We set new highlight as it might change (for example, when showing/hiding some cells from the broader selection range)\n        // TODO: It is also handled by the `MergeCells` plugin while adjusting already modified coordinates. Should it?\n\n\n        broaderCellRange.setHighlight(singleCellRangeVisual);\n        return this;\n      } // Fallback to the start of the range. It resets the previous highlight (for example, when all columns have been hidden).\n\n\n      broaderCellRange.setHighlight(broaderCellRange.from);\n      return this;\n    }\n    /**\n     * Returns the top left (TL) and bottom right (BR) selection coordinates (renderable indexes).\n     * The method overwrites the original method to support header selection for hidden cells.\n     * To make the header selection working, the CellCoords and CellRange have to support not\n     * complete coordinates (`null` values for example, `row: null`, `col: 2`).\n     *\n     * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.\n     */\n\n  }, {\n    key: \"getCorners\",\n    value: function getCorners() {\n      var _this$cellRange = this.cellRange,\n          from = _this$cellRange.from,\n          to = _this$cellRange.to;\n      var isRowUndefined = from.row === null || to.row === null;\n      var isColumnUndefined = from.col === null || to.col === null;\n      var topLeftCorner = new CellCoords(isRowUndefined ? null : Math.min(from.row, to.row), isColumnUndefined ? null : Math.min(from.col, to.col));\n      var bottomRightCorner = new CellCoords(isRowUndefined ? null : Math.max(from.row, to.row), isColumnUndefined ? null : Math.max(from.col, to.col));\n      return [topLeftCorner.row, topLeftCorner.col, bottomRightCorner.row, bottomRightCorner.col];\n    }\n    /**\n     * Returns the top left (TL) and bottom right (BR) selection coordinates (visual indexes).\n     *\n     * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.\n     */\n\n  }, {\n    key: \"getVisualCorners\",\n    value: function getVisualCorners() {\n      var topLeft = this.settings.renderableToVisualCoords(this.cellRange.getTopLeftCorner());\n      var bottomRight = this.settings.renderableToVisualCoords(this.cellRange.getBottomRightCorner());\n      return [topLeft.row, topLeft.col, bottomRight.row, bottomRight.col];\n    }\n    /**\n     * Creates a new CellRange object based on visual coordinates which before object creation are\n     * translated to renderable indexes.\n     *\n     * @param {CellCoords} visualFromCoords The CellCoords object which contains coordinates that\n     *                                      points to the begining of the selection.\n     * @param {CellCoords} visualToCoords The CellCoords object which contains coordinates that\n     *                                    points to the end of the selection.\n     * @returns {CellRange}\n     */\n\n  }, {\n    key: \"createRenderableCellRange\",\n    value: function createRenderableCellRange(visualFromCoords, visualToCoords) {\n      var renderableFromCoords = this.settings.visualToRenderableCoords(visualFromCoords);\n      var renderableToCoords = this.settings.visualToRenderableCoords(visualToCoords);\n      return new CellRange(renderableFromCoords, renderableFromCoords, renderableToCoords);\n    }\n    /**\n     * It returns rows shift needed for searching visual row.\n     *\n     * @private\n     * @param {CellRange} cellRange Selection range.\n     * @returns {number} Rows shift. It return 1 when we should increase indexes (moving from the top to the bottom) or\n     * -1 when we should decrease indexes (moving other way around).\n     */\n\n  }, {\n    key: \"getRowSearchDirection\",\n    value: function getRowSearchDirection(cellRange) {\n      if (cellRange.from.row < cellRange.to.row) {\n        return 1; // Increasing row indexes.\n      }\n\n      return -1; // Decreasing row indexes.\n    }\n    /**\n     * It returns columns shift needed for searching visual column.\n     *\n     * @private\n     * @param {CellRange} cellRange Selection range.\n     * @returns {number} Columns shift. It return 1 when we should increase indexes (moving from the left to the right) or\n     * -1 when we should decrease indexes (moving other way around).\n     */\n\n  }, {\n    key: \"getColumnSearchDirection\",\n    value: function getColumnSearchDirection(cellRange) {\n      if (cellRange.from.col < cellRange.to.col) {\n        return 1; // Increasing column indexes.\n      }\n\n      return -1; // Decreasing column indexes.\n    }\n  }]);\n\n  return VisualSelection;\n}(Selection);\n\nexport default VisualSelection;"]},"metadata":{},"sourceType":"module"}