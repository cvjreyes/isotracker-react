{"ast":null,"code":"import { arrayEach } from \"./array.mjs\";\nexport var KEY_CODES = {\n  MOUSE_LEFT: 1,\n  MOUSE_RIGHT: 3,\n  MOUSE_MIDDLE: 2,\n  BACKSPACE: 8,\n  COMMA: 188,\n  INSERT: 45,\n  DELETE: 46,\n  END: 35,\n  ENTER: 13,\n  ESCAPE: 27,\n  CONTROL: 17,\n  COMMAND_LEFT: 91,\n  COMMAND_RIGHT: 93,\n  COMMAND_FIREFOX: 224,\n  ALT: 18,\n  HOME: 36,\n  PAGE_DOWN: 34,\n  PAGE_UP: 33,\n  PERIOD: 190,\n  SPACE: 32,\n  SHIFT: 16,\n  CAPS_LOCK: 20,\n  TAB: 9,\n  ARROW_RIGHT: 39,\n  ARROW_LEFT: 37,\n  ARROW_UP: 38,\n  ARROW_DOWN: 40,\n  F1: 112,\n  F2: 113,\n  F3: 114,\n  F4: 115,\n  F5: 116,\n  F6: 117,\n  F7: 118,\n  F8: 119,\n  F9: 120,\n  F10: 121,\n  F11: 122,\n  F12: 123,\n  A: 65,\n  C: 67,\n  D: 68,\n  F: 70,\n  L: 76,\n  O: 79,\n  P: 80,\n  S: 83,\n  V: 86,\n  X: 88\n};\n/**\n * Returns true if keyCode represents a printable character.\n *\n * @param {number} keyCode The keyboard key code.\n * @returns {boolean}\n */\n\nexport function isPrintableChar(keyCode) {\n  return keyCode === 32 || // space\n  keyCode >= 48 && keyCode <= 57 || // 0-9\n  keyCode >= 96 && keyCode <= 111 || // numpad\n  keyCode >= 186 && keyCode <= 192 || // ;=,-./`\n  keyCode >= 219 && keyCode <= 222 || // []{}\\|\"'\n  keyCode >= 226 || // special chars (229 for Asian chars)\n  keyCode >= 65 && keyCode <= 90; // a-z\n}\n/**\n * @param {number} keyCode The keyboard key code.\n * @returns {boolean}\n */\n\nexport function isMetaKey(keyCode) {\n  var metaKeys = [KEY_CODES.ARROW_DOWN, KEY_CODES.ARROW_UP, KEY_CODES.ARROW_LEFT, KEY_CODES.ARROW_RIGHT, KEY_CODES.HOME, KEY_CODES.END, KEY_CODES.DELETE, KEY_CODES.BACKSPACE, KEY_CODES.F1, KEY_CODES.F2, KEY_CODES.F3, KEY_CODES.F4, KEY_CODES.F5, KEY_CODES.F6, KEY_CODES.F7, KEY_CODES.F8, KEY_CODES.F9, KEY_CODES.F10, KEY_CODES.F11, KEY_CODES.F12, KEY_CODES.TAB, KEY_CODES.PAGE_DOWN, KEY_CODES.PAGE_UP, KEY_CODES.ENTER, KEY_CODES.ESCAPE, KEY_CODES.SHIFT, KEY_CODES.CAPS_LOCK, KEY_CODES.ALT];\n  return metaKeys.indexOf(keyCode) !== -1;\n}\n/**\n * Checks if passed key code is ctrl or cmd key. Depends on what OS the code runs it check key code based on\n * different meta key codes.\n *\n * @param {number} keyCode The keyboard key code.\n * @returns {boolean}\n */\n\nexport function isCtrlKey(keyCode) {\n  var keys = [];\n\n  if (navigator.platform.includes('Mac')) {\n    keys.push(KEY_CODES.COMMAND_LEFT, KEY_CODES.COMMAND_RIGHT, KEY_CODES.COMMAND_FIREFOX);\n  } else {\n    keys.push(KEY_CODES.CONTROL);\n  }\n\n  return keys.includes(keyCode);\n}\n/**\n * Checks if passed key code is ctrl or cmd key. This helper checks if the key code matches to meta keys\n * regardless of the OS on which it is running.\n *\n * @param {number} keyCode The keyboard key code.\n * @returns {boolean}\n */\n\nexport function isCtrlMetaKey(keyCode) {\n  return [KEY_CODES.CONTROL, KEY_CODES.COMMAND_LEFT, KEY_CODES.COMMAND_RIGHT, KEY_CODES.COMMAND_FIREFOX].includes(keyCode);\n}\n/**\n * @param {number} keyCode The keyboard key code.\n * @param {string} baseCode The list of the key codes to compare with.\n * @returns {boolean}\n */\n\nexport function isKey(keyCode, baseCode) {\n  var keys = baseCode.split('|');\n  var result = false;\n  arrayEach(keys, function (key) {\n    if (keyCode === KEY_CODES[key]) {\n      result = true;\n      return false;\n    }\n  });\n  return result;\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/helpers/unicode.mjs"],"names":["arrayEach","KEY_CODES","MOUSE_LEFT","MOUSE_RIGHT","MOUSE_MIDDLE","BACKSPACE","COMMA","INSERT","DELETE","END","ENTER","ESCAPE","CONTROL","COMMAND_LEFT","COMMAND_RIGHT","COMMAND_FIREFOX","ALT","HOME","PAGE_DOWN","PAGE_UP","PERIOD","SPACE","SHIFT","CAPS_LOCK","TAB","ARROW_RIGHT","ARROW_LEFT","ARROW_UP","ARROW_DOWN","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","A","C","D","F","L","O","P","S","V","X","isPrintableChar","keyCode","isMetaKey","metaKeys","indexOf","isCtrlKey","keys","navigator","platform","includes","push","isCtrlMetaKey","isKey","baseCode","split","result","key"],"mappings":"AAKA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAO,IAAIC,SAAS,GAAG;AACrBC,EAAAA,UAAU,EAAE,CADS;AAErBC,EAAAA,WAAW,EAAE,CAFQ;AAGrBC,EAAAA,YAAY,EAAE,CAHO;AAIrBC,EAAAA,SAAS,EAAE,CAJU;AAKrBC,EAAAA,KAAK,EAAE,GALc;AAMrBC,EAAAA,MAAM,EAAE,EANa;AAOrBC,EAAAA,MAAM,EAAE,EAPa;AAQrBC,EAAAA,GAAG,EAAE,EARgB;AASrBC,EAAAA,KAAK,EAAE,EATc;AAUrBC,EAAAA,MAAM,EAAE,EAVa;AAWrBC,EAAAA,OAAO,EAAE,EAXY;AAYrBC,EAAAA,YAAY,EAAE,EAZO;AAarBC,EAAAA,aAAa,EAAE,EAbM;AAcrBC,EAAAA,eAAe,EAAE,GAdI;AAerBC,EAAAA,GAAG,EAAE,EAfgB;AAgBrBC,EAAAA,IAAI,EAAE,EAhBe;AAiBrBC,EAAAA,SAAS,EAAE,EAjBU;AAkBrBC,EAAAA,OAAO,EAAE,EAlBY;AAmBrBC,EAAAA,MAAM,EAAE,GAnBa;AAoBrBC,EAAAA,KAAK,EAAE,EApBc;AAqBrBC,EAAAA,KAAK,EAAE,EArBc;AAsBrBC,EAAAA,SAAS,EAAE,EAtBU;AAuBrBC,EAAAA,GAAG,EAAE,CAvBgB;AAwBrBC,EAAAA,WAAW,EAAE,EAxBQ;AAyBrBC,EAAAA,UAAU,EAAE,EAzBS;AA0BrBC,EAAAA,QAAQ,EAAE,EA1BW;AA2BrBC,EAAAA,UAAU,EAAE,EA3BS;AA4BrBC,EAAAA,EAAE,EAAE,GA5BiB;AA6BrBC,EAAAA,EAAE,EAAE,GA7BiB;AA8BrBC,EAAAA,EAAE,EAAE,GA9BiB;AA+BrBC,EAAAA,EAAE,EAAE,GA/BiB;AAgCrBC,EAAAA,EAAE,EAAE,GAhCiB;AAiCrBC,EAAAA,EAAE,EAAE,GAjCiB;AAkCrBC,EAAAA,EAAE,EAAE,GAlCiB;AAmCrBC,EAAAA,EAAE,EAAE,GAnCiB;AAoCrBC,EAAAA,EAAE,EAAE,GApCiB;AAqCrBC,EAAAA,GAAG,EAAE,GArCgB;AAsCrBC,EAAAA,GAAG,EAAE,GAtCgB;AAuCrBC,EAAAA,GAAG,EAAE,GAvCgB;AAwCrBC,EAAAA,CAAC,EAAE,EAxCkB;AAyCrBC,EAAAA,CAAC,EAAE,EAzCkB;AA0CrBC,EAAAA,CAAC,EAAE,EA1CkB;AA2CrBC,EAAAA,CAAC,EAAE,EA3CkB;AA4CrBC,EAAAA,CAAC,EAAE,EA5CkB;AA6CrBC,EAAAA,CAAC,EAAE,EA7CkB;AA8CrBC,EAAAA,CAAC,EAAE,EA9CkB;AA+CrBC,EAAAA,CAAC,EAAE,EA/CkB;AAgDrBC,EAAAA,CAAC,EAAE,EAhDkB;AAiDrBC,EAAAA,CAAC,EAAE;AAjDkB,CAAhB;AAmDP;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AACvC,SAAOA,OAAO,KAAK,EAAZ,IAAkB;AACzBA,EAAAA,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAI,EADrB,IAC2B;AAClCA,EAAAA,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAI,GAFrB,IAE4B;AACnCA,EAAAA,OAAO,IAAI,GAAX,IAAkBA,OAAO,IAAI,GAHtB,IAG6B;AACpCA,EAAAA,OAAO,IAAI,GAAX,IAAkBA,OAAO,IAAI,GAJtB,IAI6B;AACpCA,EAAAA,OAAO,IAAI,GALJ,IAKW;AAClBA,EAAAA,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAI,EAN5B,CADuC,CAOP;AACjC;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASC,SAAT,CAAmBD,OAAnB,EAA4B;AACjC,MAAIE,QAAQ,GAAG,CAACrD,SAAS,CAAC2B,UAAX,EAAuB3B,SAAS,CAAC0B,QAAjC,EAA2C1B,SAAS,CAACyB,UAArD,EAAiEzB,SAAS,CAACwB,WAA3E,EAAwFxB,SAAS,CAACgB,IAAlG,EAAwGhB,SAAS,CAACQ,GAAlH,EAAuHR,SAAS,CAACO,MAAjI,EAAyIP,SAAS,CAACI,SAAnJ,EAA8JJ,SAAS,CAAC4B,EAAxK,EAA4K5B,SAAS,CAAC6B,EAAtL,EAA0L7B,SAAS,CAAC8B,EAApM,EAAwM9B,SAAS,CAAC+B,EAAlN,EAAsN/B,SAAS,CAACgC,EAAhO,EAAoOhC,SAAS,CAACiC,EAA9O,EAAkPjC,SAAS,CAACkC,EAA5P,EAAgQlC,SAAS,CAACmC,EAA1Q,EAA8QnC,SAAS,CAACoC,EAAxR,EAA4RpC,SAAS,CAACqC,GAAtS,EAA2SrC,SAAS,CAACsC,GAArT,EAA0TtC,SAAS,CAACuC,GAApU,EAAyUvC,SAAS,CAACuB,GAAnV,EAAwVvB,SAAS,CAACiB,SAAlW,EAA6WjB,SAAS,CAACkB,OAAvX,EAAgYlB,SAAS,CAACS,KAA1Y,EAAiZT,SAAS,CAACU,MAA3Z,EAAmaV,SAAS,CAACqB,KAA7a,EAAobrB,SAAS,CAACsB,SAA9b,EAAyctB,SAAS,CAACe,GAAnd,CAAf;AACA,SAAOsC,QAAQ,CAACC,OAAT,CAAiBH,OAAjB,MAA8B,CAAC,CAAtC;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASI,SAAT,CAAmBJ,OAAnB,EAA4B;AACjC,MAAIK,IAAI,GAAG,EAAX;;AAEA,MAAIC,SAAS,CAACC,QAAV,CAAmBC,QAAnB,CAA4B,KAA5B,CAAJ,EAAwC;AACtCH,IAAAA,IAAI,CAACI,IAAL,CAAU5D,SAAS,CAACY,YAApB,EAAkCZ,SAAS,CAACa,aAA5C,EAA2Db,SAAS,CAACc,eAArE;AACD,GAFD,MAEO;AACL0C,IAAAA,IAAI,CAACI,IAAL,CAAU5D,SAAS,CAACW,OAApB;AACD;;AAED,SAAO6C,IAAI,CAACG,QAAL,CAAcR,OAAd,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASU,aAAT,CAAuBV,OAAvB,EAAgC;AACrC,SAAO,CAACnD,SAAS,CAACW,OAAX,EAAoBX,SAAS,CAACY,YAA9B,EAA4CZ,SAAS,CAACa,aAAtD,EAAqEb,SAAS,CAACc,eAA/E,EAAgG6C,QAAhG,CAAyGR,OAAzG,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASW,KAAT,CAAeX,OAAf,EAAwBY,QAAxB,EAAkC;AACvC,MAAIP,IAAI,GAAGO,QAAQ,CAACC,KAAT,CAAe,GAAf,CAAX;AACA,MAAIC,MAAM,GAAG,KAAb;AACAlE,EAAAA,SAAS,CAACyD,IAAD,EAAO,UAAUU,GAAV,EAAe;AAC7B,QAAIf,OAAO,KAAKnD,SAAS,CAACkE,GAAD,CAAzB,EAAgC;AAC9BD,MAAAA,MAAM,GAAG,IAAT;AACA,aAAO,KAAP;AACD;AACF,GALQ,CAAT;AAMA,SAAOA,MAAP;AACD","sourcesContent":["import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport { arrayEach } from \"./array.mjs\";\nexport var KEY_CODES = {\n  MOUSE_LEFT: 1,\n  MOUSE_RIGHT: 3,\n  MOUSE_MIDDLE: 2,\n  BACKSPACE: 8,\n  COMMA: 188,\n  INSERT: 45,\n  DELETE: 46,\n  END: 35,\n  ENTER: 13,\n  ESCAPE: 27,\n  CONTROL: 17,\n  COMMAND_LEFT: 91,\n  COMMAND_RIGHT: 93,\n  COMMAND_FIREFOX: 224,\n  ALT: 18,\n  HOME: 36,\n  PAGE_DOWN: 34,\n  PAGE_UP: 33,\n  PERIOD: 190,\n  SPACE: 32,\n  SHIFT: 16,\n  CAPS_LOCK: 20,\n  TAB: 9,\n  ARROW_RIGHT: 39,\n  ARROW_LEFT: 37,\n  ARROW_UP: 38,\n  ARROW_DOWN: 40,\n  F1: 112,\n  F2: 113,\n  F3: 114,\n  F4: 115,\n  F5: 116,\n  F6: 117,\n  F7: 118,\n  F8: 119,\n  F9: 120,\n  F10: 121,\n  F11: 122,\n  F12: 123,\n  A: 65,\n  C: 67,\n  D: 68,\n  F: 70,\n  L: 76,\n  O: 79,\n  P: 80,\n  S: 83,\n  V: 86,\n  X: 88\n};\n/**\n * Returns true if keyCode represents a printable character.\n *\n * @param {number} keyCode The keyboard key code.\n * @returns {boolean}\n */\n\nexport function isPrintableChar(keyCode) {\n  return keyCode === 32 || // space\n  keyCode >= 48 && keyCode <= 57 || // 0-9\n  keyCode >= 96 && keyCode <= 111 || // numpad\n  keyCode >= 186 && keyCode <= 192 || // ;=,-./`\n  keyCode >= 219 && keyCode <= 222 || // []{}\\|\"'\n  keyCode >= 226 || // special chars (229 for Asian chars)\n  keyCode >= 65 && keyCode <= 90; // a-z\n}\n/**\n * @param {number} keyCode The keyboard key code.\n * @returns {boolean}\n */\n\nexport function isMetaKey(keyCode) {\n  var metaKeys = [KEY_CODES.ARROW_DOWN, KEY_CODES.ARROW_UP, KEY_CODES.ARROW_LEFT, KEY_CODES.ARROW_RIGHT, KEY_CODES.HOME, KEY_CODES.END, KEY_CODES.DELETE, KEY_CODES.BACKSPACE, KEY_CODES.F1, KEY_CODES.F2, KEY_CODES.F3, KEY_CODES.F4, KEY_CODES.F5, KEY_CODES.F6, KEY_CODES.F7, KEY_CODES.F8, KEY_CODES.F9, KEY_CODES.F10, KEY_CODES.F11, KEY_CODES.F12, KEY_CODES.TAB, KEY_CODES.PAGE_DOWN, KEY_CODES.PAGE_UP, KEY_CODES.ENTER, KEY_CODES.ESCAPE, KEY_CODES.SHIFT, KEY_CODES.CAPS_LOCK, KEY_CODES.ALT];\n  return metaKeys.indexOf(keyCode) !== -1;\n}\n/**\n * Checks if passed key code is ctrl or cmd key. Depends on what OS the code runs it check key code based on\n * different meta key codes.\n *\n * @param {number} keyCode The keyboard key code.\n * @returns {boolean}\n */\n\nexport function isCtrlKey(keyCode) {\n  var keys = [];\n\n  if (navigator.platform.includes('Mac')) {\n    keys.push(KEY_CODES.COMMAND_LEFT, KEY_CODES.COMMAND_RIGHT, KEY_CODES.COMMAND_FIREFOX);\n  } else {\n    keys.push(KEY_CODES.CONTROL);\n  }\n\n  return keys.includes(keyCode);\n}\n/**\n * Checks if passed key code is ctrl or cmd key. This helper checks if the key code matches to meta keys\n * regardless of the OS on which it is running.\n *\n * @param {number} keyCode The keyboard key code.\n * @returns {boolean}\n */\n\nexport function isCtrlMetaKey(keyCode) {\n  return [KEY_CODES.CONTROL, KEY_CODES.COMMAND_LEFT, KEY_CODES.COMMAND_RIGHT, KEY_CODES.COMMAND_FIREFOX].includes(keyCode);\n}\n/**\n * @param {number} keyCode The keyboard key code.\n * @param {string} baseCode The list of the key codes to compare with.\n * @returns {boolean}\n */\n\nexport function isKey(keyCode, baseCode) {\n  var keys = baseCode.split('|');\n  var result = false;\n  arrayEach(keys, function (key) {\n    if (keyCode === KEY_CODES[key]) {\n      result = true;\n      return false;\n    }\n  });\n  return result;\n}"]},"metadata":{},"sourceType":"module"}