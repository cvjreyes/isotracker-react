{"ast":null,"code":"import { HidingMap } from \"./hidingMap.mjs\";\nimport { IndexMap } from \"./indexMap.mjs\";\nimport { LinkedPhysicalIndexToValueMap } from \"./linkedPhysicalIndexToValueMap.mjs\";\nimport { PhysicalIndexToValueMap } from \"./physicalIndexToValueMap.mjs\";\nimport { TrimmingMap } from \"./trimmingMap.mjs\";\nexport * from \"./indexesSequence.mjs\";\nexport * from \"./utils/indexesSequence.mjs\";\nexport { HidingMap, IndexMap, LinkedPhysicalIndexToValueMap, PhysicalIndexToValueMap, TrimmingMap };\nvar availableIndexMapTypes = new Map([['hiding', HidingMap], ['index', IndexMap], ['linkedPhysicalIndexToValue', LinkedPhysicalIndexToValueMap], ['physicalIndexToValue', PhysicalIndexToValueMap], ['trimming', TrimmingMap]]);\n/**\r\n * Creates and returns new IndexMap instance.\r\n *\r\n * @param {string} mapType The type of the map.\r\n * @param {*} [initValueOrFn=null] Initial value or function for index map.\r\n * @returns {IndexMap}\r\n */\n\nexport function createIndexMap(mapType) {\n  var initValueOrFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (!availableIndexMapTypes.has(mapType)) {\n    throw new Error(\"The provided map type (\\\"\".concat(mapType, \"\\\") does not exist.\"));\n  }\n\n  return new (availableIndexMapTypes.get(mapType))(initValueOrFn);\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/translations/maps/index.mjs"],"names":["HidingMap","IndexMap","LinkedPhysicalIndexToValueMap","PhysicalIndexToValueMap","TrimmingMap","availableIndexMapTypes","Map","createIndexMap","mapType","initValueOrFn","arguments","length","undefined","has","Error","concat","get"],"mappings":"AAKA,SAASA,SAAT,QAA0B,iBAA1B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,6BAAT,QAA8C,qCAA9C;AACA,SAASC,uBAAT,QAAwC,+BAAxC;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,cAAc,uBAAd;AACA,cAAc,6BAAd;AACA,SAASJ,SAAT,EAAoBC,QAApB,EAA8BC,6BAA9B,EAA6DC,uBAA7D,EAAsFC,WAAtF;AACA,IAAIC,sBAAsB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,CAAC,QAAD,EAAWN,SAAX,CAAD,EAAwB,CAAC,OAAD,EAAUC,QAAV,CAAxB,EAA6C,CAAC,4BAAD,EAA+BC,6BAA/B,CAA7C,EAA4G,CAAC,sBAAD,EAAyBC,uBAAzB,CAA5G,EAA+J,CAAC,UAAD,EAAaC,WAAb,CAA/J,CAAR,CAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,cAAT,CAAwBC,OAAxB,EAAiC;AACtC,MAAIC,aAAa,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAxF;;AAEA,MAAI,CAACL,sBAAsB,CAACQ,GAAvB,CAA2BL,OAA3B,CAAL,EAA0C;AACxC,UAAM,IAAIM,KAAJ,CAAU,4BAA4BC,MAA5B,CAAmCP,OAAnC,EAA4C,qBAA5C,CAAV,CAAN;AACD;;AAED,SAAO,KAAKH,sBAAsB,CAACW,GAAvB,CAA2BR,OAA3B,CAAL,EAA0CC,aAA1C,CAAP;AACD","sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.map.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\nimport { HidingMap } from \"./hidingMap.mjs\";\r\nimport { IndexMap } from \"./indexMap.mjs\";\r\nimport { LinkedPhysicalIndexToValueMap } from \"./linkedPhysicalIndexToValueMap.mjs\";\r\nimport { PhysicalIndexToValueMap } from \"./physicalIndexToValueMap.mjs\";\r\nimport { TrimmingMap } from \"./trimmingMap.mjs\";\r\nexport * from \"./indexesSequence.mjs\";\r\nexport * from \"./utils/indexesSequence.mjs\";\r\nexport { HidingMap, IndexMap, LinkedPhysicalIndexToValueMap, PhysicalIndexToValueMap, TrimmingMap };\r\nvar availableIndexMapTypes = new Map([['hiding', HidingMap], ['index', IndexMap], ['linkedPhysicalIndexToValue', LinkedPhysicalIndexToValueMap], ['physicalIndexToValue', PhysicalIndexToValueMap], ['trimming', TrimmingMap]]);\r\n/**\r\n * Creates and returns new IndexMap instance.\r\n *\r\n * @param {string} mapType The type of the map.\r\n * @param {*} [initValueOrFn=null] Initial value or function for index map.\r\n * @returns {IndexMap}\r\n */\r\n\r\nexport function createIndexMap(mapType) {\r\n  var initValueOrFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\r\n\r\n  if (!availableIndexMapTypes.has(mapType)) {\r\n    throw new Error(\"The provided map type (\\\"\".concat(mapType, \"\\\") does not exist.\"));\r\n  }\r\n\r\n  return new (availableIndexMapTypes.get(mapType))(initValueOrFn);\r\n}"]},"metadata":{},"sourceType":"module"}