{"ast":null,"code":"import * as C from \"../../../i18n/constants.mjs\";\nimport { registerOperation } from \"../logicalOperationRegisterer.mjs\";\nexport var OPERATION_ID = 'disjunctionWithExtraCondition';\nexport var SHORT_NAME_FOR_COMPONENT = C.FILTERS_LABELS_DISJUNCTION; // ((p OR q OR w OR x OR...) AND z) === TRUE?\n\n/**\n * @param {Array} conditions An array with values to check.\n * @param {*} value The comparable value.\n * @returns {boolean}\n */\n\nexport function operationResult(conditions, value) {\n  if (conditions.length < 3) {\n    throw Error('Operation doesn\\'t work on less then three conditions.');\n  }\n\n  return conditions.slice(0, conditions.length - 1).some(function (condition) {\n    return condition.func(value);\n  }) && conditions[conditions.length - 1].func(value);\n}\nregisterOperation(OPERATION_ID, SHORT_NAME_FOR_COMPONENT, operationResult);","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/filters/logicalOperations/disjunctionWithExtraCondition.mjs"],"names":["C","registerOperation","OPERATION_ID","SHORT_NAME_FOR_COMPONENT","FILTERS_LABELS_DISJUNCTION","operationResult","conditions","value","length","Error","slice","some","condition","func"],"mappings":"AACA,OAAO,KAAKA,CAAZ,MAAmB,6BAAnB;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AACA,OAAO,IAAIC,YAAY,GAAG,+BAAnB;AACP,OAAO,IAAIC,wBAAwB,GAAGH,CAAC,CAACI,0BAAjC,C,CAA6D;;AAEpE;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAT,CAAyBC,UAAzB,EAAqCC,KAArC,EAA4C;AACjD,MAAID,UAAU,CAACE,MAAX,GAAoB,CAAxB,EAA2B;AACzB,UAAMC,KAAK,CAAC,wDAAD,CAAX;AACD;;AAED,SAAOH,UAAU,CAACI,KAAX,CAAiB,CAAjB,EAAoBJ,UAAU,CAACE,MAAX,GAAoB,CAAxC,EAA2CG,IAA3C,CAAgD,UAAUC,SAAV,EAAqB;AAC1E,WAAOA,SAAS,CAACC,IAAV,CAAeN,KAAf,CAAP;AACD,GAFM,KAEDD,UAAU,CAACA,UAAU,CAACE,MAAX,GAAoB,CAArB,CAAV,CAAkCK,IAAlC,CAAuCN,KAAvC,CAFN;AAGD;AACDN,iBAAiB,CAACC,YAAD,EAAeC,wBAAf,EAAyCE,eAAzC,CAAjB","sourcesContent":["import \"core-js/modules/es.array.slice.js\";\nimport * as C from \"../../../i18n/constants.mjs\";\nimport { registerOperation } from \"../logicalOperationRegisterer.mjs\";\nexport var OPERATION_ID = 'disjunctionWithExtraCondition';\nexport var SHORT_NAME_FOR_COMPONENT = C.FILTERS_LABELS_DISJUNCTION; // ((p OR q OR w OR x OR...) AND z) === TRUE?\n\n/**\n * @param {Array} conditions An array with values to check.\n * @param {*} value The comparable value.\n * @returns {boolean}\n */\n\nexport function operationResult(conditions, value) {\n  if (conditions.length < 3) {\n    throw Error('Operation doesn\\'t work on less then three conditions.');\n  }\n\n  return conditions.slice(0, conditions.length - 1).some(function (condition) {\n    return condition.func(value);\n  }) && conditions[conditions.length - 1].func(value);\n}\nregisterOperation(OPERATION_ID, SHORT_NAME_FOR_COMPONENT, operationResult);"]},"metadata":{},"sourceType":"module"}