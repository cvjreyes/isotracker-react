{"ast":null,"code":"import { arrayEach, arrayMap } from \"../../helpers/array.mjs\";\nimport { hasClass } from \"../../helpers/dom/element.mjs\";\nimport { KEY as SEPARATOR } from \"./predefinedItems/separator.mjs\";\n/**\n * @param {CellRange[]} selRanges An array of the cell ranges.\n * @returns {object[]}\n */\n\nexport function normalizeSelection(selRanges) {\n  return arrayMap(selRanges, function (range) {\n    return {\n      start: range.getTopLeftCorner(),\n      end: range.getBottomRightCorner()\n    };\n  });\n}\n/**\n * @param {HTMLElement} cell The HTML cell element to check.\n * @returns {boolean}\n */\n\nexport function isSeparator(cell) {\n  return hasClass(cell, 'htSeparator');\n}\n/**\n * @param {HTMLElement} cell The HTML cell element to check.\n * @returns {boolean}\n */\n\nexport function hasSubMenu(cell) {\n  return hasClass(cell, 'htSubmenu');\n}\n/**\n * @param {HTMLElement} cell The HTML cell element to check.\n * @returns {boolean}\n */\n\nexport function isDisabled(cell) {\n  return hasClass(cell, 'htDisabled');\n}\n/**\n * @param {HTMLElement} cell The HTML cell element to check.\n * @returns {boolean}\n */\n\nexport function isSelectionDisabled(cell) {\n  return hasClass(cell, 'htSelectionDisabled');\n}\n/**\n * @param {Core} hot The Handsontable instance.\n * @returns {Array[]|null}\n */\n\nexport function getValidSelection(hot) {\n  var selected = hot.getSelected();\n\n  if (!selected) {\n    return null;\n  }\n\n  if (selected[0] < 0) {\n    return null;\n  }\n\n  return selected;\n}\n/**\n * @param {string} className The full element class name to process.\n * @param {string} alignment The slignment class name to compare with.\n * @returns {string}\n */\n\nexport function prepareVerticalAlignClass(className, alignment) {\n  if (className.indexOf(alignment) !== -1) {\n    return className;\n  }\n\n  var replacedClassName = className.replace('htTop', '').replace('htMiddle', '').replace('htBottom', '').replace('  ', '');\n  return \"\".concat(replacedClassName, \" \").concat(alignment);\n}\n/**\n * @param {string} className The full element class name to process.\n * @param {string} alignment The slignment class name to compare with.\n * @returns {string}\n */\n\nexport function prepareHorizontalAlignClass(className, alignment) {\n  if (className.indexOf(alignment) !== -1) {\n    return className;\n  }\n\n  var replacedClassName = className.replace('htLeft', '').replace('htCenter', '').replace('htRight', '').replace('htJustify', '').replace('  ', '');\n  return \"\".concat(replacedClassName, \" \").concat(alignment);\n}\n/**\n * @param {CellRange[]} ranges An array of the cell ranges.\n * @param {Function} callback The callback function.\n * @returns {object}\n */\n\nexport function getAlignmentClasses(ranges, callback) {\n  var classes = {};\n  arrayEach(ranges, function (range) {\n    range.forAll(function (row, col) {\n      // Alignment classes should only collected within cell ranges. We skip header coordinates.\n      if (row >= 0 && col >= 0) {\n        if (!classes[row]) {\n          classes[row] = [];\n        }\n\n        classes[row][col] = callback(row, col);\n      }\n    });\n  });\n  return classes;\n}\n/**\n * @param {CellRange[]} ranges An array of the cell ranges.\n * @param {string} type The type of the alignment axis ('horizontal' or 'vertical').\n * @param {string} alignment CSS class name to add.\n * @param {Function} cellDescriptor The function which fetches the cell meta object based in passed coordinates.\n * @param {Function} propertySetter The function which contains logic for added/removed alignment.\n */\n\nexport function align(ranges, type, alignment, cellDescriptor, propertySetter) {\n  arrayEach(ranges, function (range) {\n    range.forAll(function (row, col) {\n      // Alignment classes should only collected within cell ranges. We skip header coordinates.\n      if (row >= 0 && col >= 0) {\n        applyAlignClassName(row, col, type, alignment, cellDescriptor, propertySetter);\n      }\n    });\n  });\n}\n/**\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {string} type The type of the alignment axis ('horizontal' or 'vertical').\n * @param {string} alignment CSS class name to add.\n * @param {Function} cellDescriptor The function which fetches the cell meta object based in passed coordinates.\n * @param {Function} propertySetter The function which contains logic for added/removed alignment.\n */\n\nfunction applyAlignClassName(row, col, type, alignment, cellDescriptor, propertySetter) {\n  var cellMeta = cellDescriptor(row, col);\n  var className = alignment;\n\n  if (cellMeta.className) {\n    if (type === 'vertical') {\n      className = prepareVerticalAlignClass(cellMeta.className, alignment);\n    } else {\n      className = prepareHorizontalAlignClass(cellMeta.className, alignment);\n    }\n  }\n\n  propertySetter(row, col, 'className', className);\n}\n/**\n * @param {CellRange[]} ranges An array of the cell ranges.\n * @param {Function} comparator The comparator function.\n * @returns {boolean}\n */\n\n\nexport function checkSelectionConsistency(ranges, comparator) {\n  var result = false;\n\n  if (Array.isArray(ranges)) {\n    arrayEach(ranges, function (range) {\n      range.forAll(function (row, col) {\n        // Selection consistency should only check within cell ranges. We skip header coordinates.\n        if (row >= 0 && col >= 0 && comparator(row, col)) {\n          result = true;\n          return false;\n        }\n      });\n      return result;\n    });\n  }\n\n  return result;\n}\n/**\n * @param {string} label The label text.\n * @returns {string}\n */\n\nexport function markLabelAsSelected(label) {\n  // workaround for https://github.com/handsontable/handsontable/issues/1946\n  return \"<span class=\\\"selected\\\">\".concat(String.fromCharCode(10003), \"</span>\").concat(label);\n}\n/**\n * @param {object} item The object which describes the context menu item properties.\n * @param {Core} instance The Handsontable instance.\n * @returns {boolean}\n */\n\nexport function isItemHidden(item, instance) {\n  return !item.hidden || !(typeof item.hidden === 'function' && item.hidden.call(instance));\n}\n/**\n * @param {object[]} items The context menu items collection.\n * @param {string} separator The string which identifies the context menu separator item.\n * @returns {object[]}\n */\n\nfunction shiftSeparators(items, separator) {\n  var result = items.slice(0);\n\n  for (var i = 0; i < result.length;) {\n    if (result[i].name === separator) {\n      result.shift();\n    } else {\n      break;\n    }\n  }\n\n  return result;\n}\n/**\n * @param {object[]} items The context menu items collection.\n * @param {string} separator The string which identifies the context menu separator item.\n * @returns {object[]}\n */\n\n\nfunction popSeparators(items, separator) {\n  var result = items.slice(0);\n  result.reverse();\n  result = shiftSeparators(result, separator);\n  result.reverse();\n  return result;\n}\n/**\n * Removes duplicated menu separators from the context menu items collection.\n *\n * @param {object[]} items The context menu items collection.\n * @returns {object[]}\n */\n\n\nfunction removeDuplicatedSeparators(items) {\n  var result = [];\n  arrayEach(items, function (value, index) {\n    if (index > 0) {\n      if (result[result.length - 1].name !== value.name) {\n        result.push(value);\n      }\n    } else {\n      result.push(value);\n    }\n  });\n  return result;\n}\n/**\n * Removes menu separators from the context menu items collection.\n *\n * @param {object[]} items The context menu items collection.\n * @param {string} separator The string which identifies the context menu separator item.\n * @returns {object[]}\n */\n\n\nexport function filterSeparators(items) {\n  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SEPARATOR;\n  var result = items.slice(0);\n  result = shiftSeparators(result, separator);\n  result = popSeparators(result, separator);\n  result = removeDuplicatedSeparators(result);\n  return result;\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/contextMenu/utils.mjs"],"names":["arrayEach","arrayMap","hasClass","KEY","SEPARATOR","normalizeSelection","selRanges","range","start","getTopLeftCorner","end","getBottomRightCorner","isSeparator","cell","hasSubMenu","isDisabled","isSelectionDisabled","getValidSelection","hot","selected","getSelected","prepareVerticalAlignClass","className","alignment","indexOf","replacedClassName","replace","concat","prepareHorizontalAlignClass","getAlignmentClasses","ranges","callback","classes","forAll","row","col","align","type","cellDescriptor","propertySetter","applyAlignClassName","cellMeta","checkSelectionConsistency","comparator","result","Array","isArray","markLabelAsSelected","label","String","fromCharCode","isItemHidden","item","instance","hidden","call","shiftSeparators","items","separator","slice","i","length","name","shift","popSeparators","reverse","removeDuplicatedSeparators","value","index","push","filterSeparators","arguments","undefined"],"mappings":"AAOA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,yBAApC;AACA,SAASC,QAAT,QAAyB,+BAAzB;AACA,SAASC,GAAG,IAAIC,SAAhB,QAAiC,iCAAjC;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,kBAAT,CAA4BC,SAA5B,EAAuC;AAC5C,SAAOL,QAAQ,CAACK,SAAD,EAAY,UAAUC,KAAV,EAAiB;AAC1C,WAAO;AACLC,MAAAA,KAAK,EAAED,KAAK,CAACE,gBAAN,EADF;AAELC,MAAAA,GAAG,EAAEH,KAAK,CAACI,oBAAN;AAFA,KAAP;AAID,GALc,CAAf;AAMD;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAChC,SAAOX,QAAQ,CAACW,IAAD,EAAO,aAAP,CAAf;AACD;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASC,UAAT,CAAoBD,IAApB,EAA0B;AAC/B,SAAOX,QAAQ,CAACW,IAAD,EAAO,WAAP,CAAf;AACD;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASE,UAAT,CAAoBF,IAApB,EAA0B;AAC/B,SAAOX,QAAQ,CAACW,IAAD,EAAO,YAAP,CAAf;AACD;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASG,mBAAT,CAA6BH,IAA7B,EAAmC;AACxC,SAAOX,QAAQ,CAACW,IAAD,EAAO,qBAAP,CAAf;AACD;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASI,iBAAT,CAA2BC,GAA3B,EAAgC;AACrC,MAAIC,QAAQ,GAAGD,GAAG,CAACE,WAAJ,EAAf;;AAEA,MAAI,CAACD,QAAL,EAAe;AACb,WAAO,IAAP;AACD;;AAED,MAAIA,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAlB,EAAqB;AACnB,WAAO,IAAP;AACD;;AAED,SAAOA,QAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,yBAAT,CAAmCC,SAAnC,EAA8CC,SAA9C,EAAyD;AAC9D,MAAID,SAAS,CAACE,OAAV,CAAkBD,SAAlB,MAAiC,CAAC,CAAtC,EAAyC;AACvC,WAAOD,SAAP;AACD;;AAED,MAAIG,iBAAiB,GAAGH,SAAS,CAACI,OAAV,CAAkB,OAAlB,EAA2B,EAA3B,EAA+BA,OAA/B,CAAuC,UAAvC,EAAmD,EAAnD,EAAuDA,OAAvD,CAA+D,UAA/D,EAA2E,EAA3E,EAA+EA,OAA/E,CAAuF,IAAvF,EAA6F,EAA7F,CAAxB;AACA,SAAO,GAAGC,MAAH,CAAUF,iBAAV,EAA6B,GAA7B,EAAkCE,MAAlC,CAAyCJ,SAAzC,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASK,2BAAT,CAAqCN,SAArC,EAAgDC,SAAhD,EAA2D;AAChE,MAAID,SAAS,CAACE,OAAV,CAAkBD,SAAlB,MAAiC,CAAC,CAAtC,EAAyC;AACvC,WAAOD,SAAP;AACD;;AAED,MAAIG,iBAAiB,GAAGH,SAAS,CAACI,OAAV,CAAkB,QAAlB,EAA4B,EAA5B,EAAgCA,OAAhC,CAAwC,UAAxC,EAAoD,EAApD,EAAwDA,OAAxD,CAAgE,SAAhE,EAA2E,EAA3E,EAA+EA,OAA/E,CAAuF,WAAvF,EAAoG,EAApG,EAAwGA,OAAxG,CAAgH,IAAhH,EAAsH,EAAtH,CAAxB;AACA,SAAO,GAAGC,MAAH,CAAUF,iBAAV,EAA6B,GAA7B,EAAkCE,MAAlC,CAAyCJ,SAAzC,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASM,mBAAT,CAA6BC,MAA7B,EAAqCC,QAArC,EAA+C;AACpD,MAAIC,OAAO,GAAG,EAAd;AACAhC,EAAAA,SAAS,CAAC8B,MAAD,EAAS,UAAUvB,KAAV,EAAiB;AACjCA,IAAAA,KAAK,CAAC0B,MAAN,CAAa,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC/B;AACA,UAAID,GAAG,IAAI,CAAP,IAAYC,GAAG,IAAI,CAAvB,EAA0B;AACxB,YAAI,CAACH,OAAO,CAACE,GAAD,CAAZ,EAAmB;AACjBF,UAAAA,OAAO,CAACE,GAAD,CAAP,GAAe,EAAf;AACD;;AAEDF,QAAAA,OAAO,CAACE,GAAD,CAAP,CAAaC,GAAb,IAAoBJ,QAAQ,CAACG,GAAD,EAAMC,GAAN,CAA5B;AACD;AACF,KATD;AAUD,GAXQ,CAAT;AAYA,SAAOH,OAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASI,KAAT,CAAeN,MAAf,EAAuBO,IAAvB,EAA6Bd,SAA7B,EAAwCe,cAAxC,EAAwDC,cAAxD,EAAwE;AAC7EvC,EAAAA,SAAS,CAAC8B,MAAD,EAAS,UAAUvB,KAAV,EAAiB;AACjCA,IAAAA,KAAK,CAAC0B,MAAN,CAAa,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC/B;AACA,UAAID,GAAG,IAAI,CAAP,IAAYC,GAAG,IAAI,CAAvB,EAA0B;AACxBK,QAAAA,mBAAmB,CAACN,GAAD,EAAMC,GAAN,EAAWE,IAAX,EAAiBd,SAAjB,EAA4Be,cAA5B,EAA4CC,cAA5C,CAAnB;AACD;AACF,KALD;AAMD,GAPQ,CAAT;AAQD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,mBAAT,CAA6BN,GAA7B,EAAkCC,GAAlC,EAAuCE,IAAvC,EAA6Cd,SAA7C,EAAwDe,cAAxD,EAAwEC,cAAxE,EAAwF;AACtF,MAAIE,QAAQ,GAAGH,cAAc,CAACJ,GAAD,EAAMC,GAAN,CAA7B;AACA,MAAIb,SAAS,GAAGC,SAAhB;;AAEA,MAAIkB,QAAQ,CAACnB,SAAb,EAAwB;AACtB,QAAIe,IAAI,KAAK,UAAb,EAAyB;AACvBf,MAAAA,SAAS,GAAGD,yBAAyB,CAACoB,QAAQ,CAACnB,SAAV,EAAqBC,SAArB,CAArC;AACD,KAFD,MAEO;AACLD,MAAAA,SAAS,GAAGM,2BAA2B,CAACa,QAAQ,CAACnB,SAAV,EAAqBC,SAArB,CAAvC;AACD;AACF;;AAEDgB,EAAAA,cAAc,CAACL,GAAD,EAAMC,GAAN,EAAW,WAAX,EAAwBb,SAAxB,CAAd;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASoB,yBAAT,CAAmCZ,MAAnC,EAA2Ca,UAA3C,EAAuD;AAC5D,MAAIC,MAAM,GAAG,KAAb;;AAEA,MAAIC,KAAK,CAACC,OAAN,CAAchB,MAAd,CAAJ,EAA2B;AACzB9B,IAAAA,SAAS,CAAC8B,MAAD,EAAS,UAAUvB,KAAV,EAAiB;AACjCA,MAAAA,KAAK,CAAC0B,MAAN,CAAa,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC/B;AACA,YAAID,GAAG,IAAI,CAAP,IAAYC,GAAG,IAAI,CAAnB,IAAwBQ,UAAU,CAACT,GAAD,EAAMC,GAAN,CAAtC,EAAkD;AAChDS,UAAAA,MAAM,GAAG,IAAT;AACA,iBAAO,KAAP;AACD;AACF,OAND;AAOA,aAAOA,MAAP;AACD,KATQ,CAAT;AAUD;;AAED,SAAOA,MAAP;AACD;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASG,mBAAT,CAA6BC,KAA7B,EAAoC;AACzC;AACA,SAAO,4BAA4BrB,MAA5B,CAAmCsB,MAAM,CAACC,YAAP,CAAoB,KAApB,CAAnC,EAA+D,SAA/D,EAA0EvB,MAA1E,CAAiFqB,KAAjF,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,YAAT,CAAsBC,IAAtB,EAA4BC,QAA5B,EAAsC;AAC3C,SAAO,CAACD,IAAI,CAACE,MAAN,IAAgB,EAAE,OAAOF,IAAI,CAACE,MAAZ,KAAuB,UAAvB,IAAqCF,IAAI,CAACE,MAAL,CAAYC,IAAZ,CAAiBF,QAAjB,CAAvC,CAAvB;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,SAASG,eAAT,CAAyBC,KAAzB,EAAgCC,SAAhC,EAA2C;AACzC,MAAId,MAAM,GAAGa,KAAK,CAACE,KAAN,CAAY,CAAZ,CAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,MAAM,CAACiB,MAA3B,GAAoC;AAClC,QAAIjB,MAAM,CAACgB,CAAD,CAAN,CAAUE,IAAV,KAAmBJ,SAAvB,EAAkC;AAChCd,MAAAA,MAAM,CAACmB,KAAP;AACD,KAFD,MAEO;AACL;AACD;AACF;;AAED,SAAOnB,MAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASoB,aAAT,CAAuBP,KAAvB,EAA8BC,SAA9B,EAAyC;AACvC,MAAId,MAAM,GAAGa,KAAK,CAACE,KAAN,CAAY,CAAZ,CAAb;AACAf,EAAAA,MAAM,CAACqB,OAAP;AACArB,EAAAA,MAAM,GAAGY,eAAe,CAACZ,MAAD,EAASc,SAAT,CAAxB;AACAd,EAAAA,MAAM,CAACqB,OAAP;AACA,SAAOrB,MAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASsB,0BAAT,CAAoCT,KAApC,EAA2C;AACzC,MAAIb,MAAM,GAAG,EAAb;AACA5C,EAAAA,SAAS,CAACyD,KAAD,EAAQ,UAAUU,KAAV,EAAiBC,KAAjB,EAAwB;AACvC,QAAIA,KAAK,GAAG,CAAZ,EAAe;AACb,UAAIxB,MAAM,CAACA,MAAM,CAACiB,MAAP,GAAgB,CAAjB,CAAN,CAA0BC,IAA1B,KAAmCK,KAAK,CAACL,IAA7C,EAAmD;AACjDlB,QAAAA,MAAM,CAACyB,IAAP,CAAYF,KAAZ;AACD;AACF,KAJD,MAIO;AACLvB,MAAAA,MAAM,CAACyB,IAAP,CAAYF,KAAZ;AACD;AACF,GARQ,CAAT;AASA,SAAOvB,MAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAAS0B,gBAAT,CAA0Bb,KAA1B,EAAiC;AACtC,MAAIC,SAAS,GAAGa,SAAS,CAACV,MAAV,GAAmB,CAAnB,IAAwBU,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoEnE,SAApF;AACA,MAAIwC,MAAM,GAAGa,KAAK,CAACE,KAAN,CAAY,CAAZ,CAAb;AACAf,EAAAA,MAAM,GAAGY,eAAe,CAACZ,MAAD,EAASc,SAAT,CAAxB;AACAd,EAAAA,MAAM,GAAGoB,aAAa,CAACpB,MAAD,EAASc,SAAT,CAAtB;AACAd,EAAAA,MAAM,GAAGsB,0BAA0B,CAACtB,MAAD,CAAnC;AACA,SAAOA,MAAP;AACD","sourcesContent":["import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport { arrayEach, arrayMap } from \"../../helpers/array.mjs\";\nimport { hasClass } from \"../../helpers/dom/element.mjs\";\nimport { KEY as SEPARATOR } from \"./predefinedItems/separator.mjs\";\n/**\n * @param {CellRange[]} selRanges An array of the cell ranges.\n * @returns {object[]}\n */\n\nexport function normalizeSelection(selRanges) {\n  return arrayMap(selRanges, function (range) {\n    return {\n      start: range.getTopLeftCorner(),\n      end: range.getBottomRightCorner()\n    };\n  });\n}\n/**\n * @param {HTMLElement} cell The HTML cell element to check.\n * @returns {boolean}\n */\n\nexport function isSeparator(cell) {\n  return hasClass(cell, 'htSeparator');\n}\n/**\n * @param {HTMLElement} cell The HTML cell element to check.\n * @returns {boolean}\n */\n\nexport function hasSubMenu(cell) {\n  return hasClass(cell, 'htSubmenu');\n}\n/**\n * @param {HTMLElement} cell The HTML cell element to check.\n * @returns {boolean}\n */\n\nexport function isDisabled(cell) {\n  return hasClass(cell, 'htDisabled');\n}\n/**\n * @param {HTMLElement} cell The HTML cell element to check.\n * @returns {boolean}\n */\n\nexport function isSelectionDisabled(cell) {\n  return hasClass(cell, 'htSelectionDisabled');\n}\n/**\n * @param {Core} hot The Handsontable instance.\n * @returns {Array[]|null}\n */\n\nexport function getValidSelection(hot) {\n  var selected = hot.getSelected();\n\n  if (!selected) {\n    return null;\n  }\n\n  if (selected[0] < 0) {\n    return null;\n  }\n\n  return selected;\n}\n/**\n * @param {string} className The full element class name to process.\n * @param {string} alignment The slignment class name to compare with.\n * @returns {string}\n */\n\nexport function prepareVerticalAlignClass(className, alignment) {\n  if (className.indexOf(alignment) !== -1) {\n    return className;\n  }\n\n  var replacedClassName = className.replace('htTop', '').replace('htMiddle', '').replace('htBottom', '').replace('  ', '');\n  return \"\".concat(replacedClassName, \" \").concat(alignment);\n}\n/**\n * @param {string} className The full element class name to process.\n * @param {string} alignment The slignment class name to compare with.\n * @returns {string}\n */\n\nexport function prepareHorizontalAlignClass(className, alignment) {\n  if (className.indexOf(alignment) !== -1) {\n    return className;\n  }\n\n  var replacedClassName = className.replace('htLeft', '').replace('htCenter', '').replace('htRight', '').replace('htJustify', '').replace('  ', '');\n  return \"\".concat(replacedClassName, \" \").concat(alignment);\n}\n/**\n * @param {CellRange[]} ranges An array of the cell ranges.\n * @param {Function} callback The callback function.\n * @returns {object}\n */\n\nexport function getAlignmentClasses(ranges, callback) {\n  var classes = {};\n  arrayEach(ranges, function (range) {\n    range.forAll(function (row, col) {\n      // Alignment classes should only collected within cell ranges. We skip header coordinates.\n      if (row >= 0 && col >= 0) {\n        if (!classes[row]) {\n          classes[row] = [];\n        }\n\n        classes[row][col] = callback(row, col);\n      }\n    });\n  });\n  return classes;\n}\n/**\n * @param {CellRange[]} ranges An array of the cell ranges.\n * @param {string} type The type of the alignment axis ('horizontal' or 'vertical').\n * @param {string} alignment CSS class name to add.\n * @param {Function} cellDescriptor The function which fetches the cell meta object based in passed coordinates.\n * @param {Function} propertySetter The function which contains logic for added/removed alignment.\n */\n\nexport function align(ranges, type, alignment, cellDescriptor, propertySetter) {\n  arrayEach(ranges, function (range) {\n    range.forAll(function (row, col) {\n      // Alignment classes should only collected within cell ranges. We skip header coordinates.\n      if (row >= 0 && col >= 0) {\n        applyAlignClassName(row, col, type, alignment, cellDescriptor, propertySetter);\n      }\n    });\n  });\n}\n/**\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {string} type The type of the alignment axis ('horizontal' or 'vertical').\n * @param {string} alignment CSS class name to add.\n * @param {Function} cellDescriptor The function which fetches the cell meta object based in passed coordinates.\n * @param {Function} propertySetter The function which contains logic for added/removed alignment.\n */\n\nfunction applyAlignClassName(row, col, type, alignment, cellDescriptor, propertySetter) {\n  var cellMeta = cellDescriptor(row, col);\n  var className = alignment;\n\n  if (cellMeta.className) {\n    if (type === 'vertical') {\n      className = prepareVerticalAlignClass(cellMeta.className, alignment);\n    } else {\n      className = prepareHorizontalAlignClass(cellMeta.className, alignment);\n    }\n  }\n\n  propertySetter(row, col, 'className', className);\n}\n/**\n * @param {CellRange[]} ranges An array of the cell ranges.\n * @param {Function} comparator The comparator function.\n * @returns {boolean}\n */\n\n\nexport function checkSelectionConsistency(ranges, comparator) {\n  var result = false;\n\n  if (Array.isArray(ranges)) {\n    arrayEach(ranges, function (range) {\n      range.forAll(function (row, col) {\n        // Selection consistency should only check within cell ranges. We skip header coordinates.\n        if (row >= 0 && col >= 0 && comparator(row, col)) {\n          result = true;\n          return false;\n        }\n      });\n      return result;\n    });\n  }\n\n  return result;\n}\n/**\n * @param {string} label The label text.\n * @returns {string}\n */\n\nexport function markLabelAsSelected(label) {\n  // workaround for https://github.com/handsontable/handsontable/issues/1946\n  return \"<span class=\\\"selected\\\">\".concat(String.fromCharCode(10003), \"</span>\").concat(label);\n}\n/**\n * @param {object} item The object which describes the context menu item properties.\n * @param {Core} instance The Handsontable instance.\n * @returns {boolean}\n */\n\nexport function isItemHidden(item, instance) {\n  return !item.hidden || !(typeof item.hidden === 'function' && item.hidden.call(instance));\n}\n/**\n * @param {object[]} items The context menu items collection.\n * @param {string} separator The string which identifies the context menu separator item.\n * @returns {object[]}\n */\n\nfunction shiftSeparators(items, separator) {\n  var result = items.slice(0);\n\n  for (var i = 0; i < result.length;) {\n    if (result[i].name === separator) {\n      result.shift();\n    } else {\n      break;\n    }\n  }\n\n  return result;\n}\n/**\n * @param {object[]} items The context menu items collection.\n * @param {string} separator The string which identifies the context menu separator item.\n * @returns {object[]}\n */\n\n\nfunction popSeparators(items, separator) {\n  var result = items.slice(0);\n  result.reverse();\n  result = shiftSeparators(result, separator);\n  result.reverse();\n  return result;\n}\n/**\n * Removes duplicated menu separators from the context menu items collection.\n *\n * @param {object[]} items The context menu items collection.\n * @returns {object[]}\n */\n\n\nfunction removeDuplicatedSeparators(items) {\n  var result = [];\n  arrayEach(items, function (value, index) {\n    if (index > 0) {\n      if (result[result.length - 1].name !== value.name) {\n        result.push(value);\n      }\n    } else {\n      result.push(value);\n    }\n  });\n  return result;\n}\n/**\n * Removes menu separators from the context menu items collection.\n *\n * @param {object[]} items The context menu items collection.\n * @param {string} separator The string which identifies the context menu separator item.\n * @returns {object[]}\n */\n\n\nexport function filterSeparators(items) {\n  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SEPARATOR;\n  var result = items.slice(0);\n  result = shiftSeparators(result, separator);\n  result = popSeparators(result, separator);\n  result = removeDuplicatedSeparators(result);\n  return result;\n}"]},"metadata":{},"sourceType":"module"}