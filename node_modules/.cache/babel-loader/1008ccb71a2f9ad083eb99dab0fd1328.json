{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport readXlsx from './readXlsx';\nimport convertToJson from './convertToJson';\nimport convertMapToSchema from './convertMapToSchema';\nexport default function readXlsxFileContents(entries, xml, _ref) {\n  var schema = _ref.schema,\n      map = _ref.map,\n      options = _objectWithoutProperties(_ref, ['schema', 'map']);\n\n  if (!schema && map) {\n    schema = convertMapToSchema(map);\n  }\n\n  var result = readXlsx(entries, xml, _extends({}, options, {\n    properties: schema || options.properties\n  }));\n\n  if (schema) {\n    return convertToJson(result.data, schema, _extends({}, options, {\n      properties: result.properties\n    }));\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../source/readXlsxFileContents.js"],"names":["schema","map","options","convertMapToSchema","result","readXlsx","properties","convertToJson"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,QAAA,MAAA,YAAA;AACA,OAAA,aAAA,MAAA,iBAAA;AACA,OAAA,kBAAA,MAAA,sBAAA;AAEA,eAAe,SAAA,oBAAA,CAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAwE;AAAA,MAA1BA,MAA0B,GAAA,IAAA,CAA1BA,MAA0B;AAAA,MAAlBC,GAAkB,GAAA,IAAA,CAAlBA,GAAkB;AAAA,MAAVC,OAAU,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;AACtF,MAAI,CAAA,MAAA,IAAJ,GAAA,EAAoB;AACnBF,IAAAA,MAAAA,GAASG,kBAAAA,CAATH,GAASG,CAATH;AACA;;AACD,MAAMI,MAAAA,GAASC,QAAAA,CAAAA,OAAAA,EAAAA,GAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EAAAA,OAAAA,EAAAA;AAAqCC,IAAAA,UAAAA,EAAYN,MAAAA,IAAUE,OAAAA,CAA1E;AAAeG,GAAAA,CAAAA,CAAf;;AACA,MAAA,MAAA,EAAY;AACX,WAAOE,aAAAA,CAAcH,MAAAA,CAAdG,IAAAA,EAAAA,MAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EAAAA,OAAAA,EAAAA;AAAiDD,MAAAA,UAAAA,EAAYF,MAAAA,CAApE;AAAOG,KAAAA,CAAAA,CAAP;AACA;;AACD,SAAA,MAAA;AACA","sourcesContent":["import readXlsx from './readXlsx'\r\nimport convertToJson from './convertToJson'\r\nimport convertMapToSchema from './convertMapToSchema'\r\n\r\nexport default function readXlsxFileContents(entries, xml, { schema, map, ...options}) {\r\n\tif (!schema && map) {\r\n\t\tschema = convertMapToSchema(map)\r\n\t}\r\n\tconst result = readXlsx(entries, xml, { ...options, properties: schema || options.properties })\r\n\tif (schema) {\r\n\t\treturn convertToJson(result.data, schema, { ...options, properties: result.properties })\r\n\t}\r\n\treturn result\r\n}"]},"metadata":{},"sourceType":"module"}