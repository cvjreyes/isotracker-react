{"ast":null,"code":"/**\r\n * Extracts event handlers from a given object.\r\n * A prop is considered an event handler if it is a function and its name starts with `on`.\r\n *\r\n * @param object An object to extract event handlers from.\r\n */\nexport default function extractEventHandlers(object) {\n  var excludeKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (object === undefined) {\n    return {};\n  }\n\n  var result = {};\n  Object.keys(object).filter(function (prop) {\n    return prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop);\n  }).forEach(function (prop) {\n    result[prop] = object[prop];\n  });\n  return result;\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/@mui/core/utils/extractEventHandlers.js"],"names":["extractEventHandlers","object","excludeKeys","undefined","result","Object","keys","filter","prop","match","includes","forEach"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,oBAAT,CAA8BC,MAA9B,EAAwD;AAAA,MAAlBC,WAAkB,uEAAJ,EAAI;;AACrE,MAAID,MAAM,KAAKE,SAAf,EAA0B;AACxB,WAAO,EAAP;AACD;;AAED,MAAMC,MAAM,GAAG,EAAf;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoBM,MAApB,CAA2B,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,KAAL,CAAW,UAAX,KAA0B,OAAOR,MAAM,CAACO,IAAD,CAAb,KAAwB,UAAlD,IAAgE,CAACN,WAAW,CAACQ,QAAZ,CAAqBF,IAArB,CAArE;AAAA,GAA/B,EAAgIG,OAAhI,CAAwI,UAAAH,IAAI,EAAI;AAC9IJ,IAAAA,MAAM,CAACI,IAAD,CAAN,GAAeP,MAAM,CAACO,IAAD,CAArB;AACD,GAFD;AAGA,SAAOJ,MAAP;AACD","sourcesContent":["/**\r\n * Extracts event handlers from a given object.\r\n * A prop is considered an event handler if it is a function and its name starts with `on`.\r\n *\r\n * @param object An object to extract event handlers from.\r\n */\r\nexport default function extractEventHandlers(object, excludeKeys = []) {\r\n  if (object === undefined) {\r\n    return {};\r\n  }\r\n\r\n  const result = {};\r\n  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {\r\n    result[prop] = object[prop];\r\n  });\r\n  return result;\r\n}"]},"metadata":{},"sourceType":"module"}