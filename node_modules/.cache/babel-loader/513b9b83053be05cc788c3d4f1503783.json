{"ast":null,"code":"export var VALIDATOR_TYPE = 'autocomplete';\n/**\n * The Autocomplete cell validator.\n *\n * @private\n * @param {*} value Value of edited cell.\n * @param {Function} callback Callback called with validation result.\n */\n\nexport function autocompleteValidator(value, callback) {\n  var valueToValidate = value;\n\n  if (valueToValidate === null || valueToValidate === void 0) {\n    valueToValidate = '';\n  }\n\n  if (this.allowEmpty && valueToValidate === '') {\n    callback(true);\n    return;\n  }\n\n  if (this.strict && this.source) {\n    if (typeof this.source === 'function') {\n      this.source(valueToValidate, process(valueToValidate, callback));\n    } else {\n      process(valueToValidate, callback)(this.source);\n    }\n  } else {\n    callback(true);\n  }\n}\nautocompleteValidator.VALIDATOR_TYPE = VALIDATOR_TYPE;\n/**\n * Function responsible for validation of autocomplete value.\n *\n * @param {*} value Value of edited cell.\n * @param {Function} callback Callback called with validation result.\n * @returns {Function}\n */\n\nfunction process(value, callback) {\n  var originalVal = value;\n  return function (source) {\n    var found = false;\n\n    for (var s = 0, slen = source.length; s < slen; s++) {\n      if (originalVal === source[s]) {\n        found = true; // perfect match\n\n        break;\n      }\n    }\n\n    callback(found);\n  };\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/validators/autocompleteValidator/autocompleteValidator.mjs"],"names":["VALIDATOR_TYPE","autocompleteValidator","value","callback","valueToValidate","allowEmpty","strict","source","process","originalVal","found","s","slen","length"],"mappings":"AAAA,OAAO,IAAIA,cAAc,GAAG,cAArB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,qBAAT,CAA+BC,KAA/B,EAAsCC,QAAtC,EAAgD;AACrD,MAAIC,eAAe,GAAGF,KAAtB;;AAEA,MAAIE,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAAzD,EAA4D;AAC1DA,IAAAA,eAAe,GAAG,EAAlB;AACD;;AAED,MAAI,KAAKC,UAAL,IAAmBD,eAAe,KAAK,EAA3C,EAA+C;AAC7CD,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACA;AACD;;AAED,MAAI,KAAKG,MAAL,IAAe,KAAKC,MAAxB,EAAgC;AAC9B,QAAI,OAAO,KAAKA,MAAZ,KAAuB,UAA3B,EAAuC;AACrC,WAAKA,MAAL,CAAYH,eAAZ,EAA6BI,OAAO,CAACJ,eAAD,EAAkBD,QAAlB,CAApC;AACD,KAFD,MAEO;AACLK,MAAAA,OAAO,CAACJ,eAAD,EAAkBD,QAAlB,CAAP,CAAmC,KAAKI,MAAxC;AACD;AACF,GAND,MAMO;AACLJ,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF;AACDF,qBAAqB,CAACD,cAAtB,GAAuCA,cAAvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASQ,OAAT,CAAiBN,KAAjB,EAAwBC,QAAxB,EAAkC;AAChC,MAAIM,WAAW,GAAGP,KAAlB;AACA,SAAO,UAAUK,MAAV,EAAkB;AACvB,QAAIG,KAAK,GAAG,KAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAGL,MAAM,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,IAA1C,EAAgDD,CAAC,EAAjD,EAAqD;AACnD,UAAIF,WAAW,KAAKF,MAAM,CAACI,CAAD,CAA1B,EAA+B;AAC7BD,QAAAA,KAAK,GAAG,IAAR,CAD6B,CACf;;AAEd;AACD;AACF;;AAEDP,IAAAA,QAAQ,CAACO,KAAD,CAAR;AACD,GAZD;AAaD","sourcesContent":["export var VALIDATOR_TYPE = 'autocomplete';\n/**\n * The Autocomplete cell validator.\n *\n * @private\n * @param {*} value Value of edited cell.\n * @param {Function} callback Callback called with validation result.\n */\n\nexport function autocompleteValidator(value, callback) {\n  var valueToValidate = value;\n\n  if (valueToValidate === null || valueToValidate === void 0) {\n    valueToValidate = '';\n  }\n\n  if (this.allowEmpty && valueToValidate === '') {\n    callback(true);\n    return;\n  }\n\n  if (this.strict && this.source) {\n    if (typeof this.source === 'function') {\n      this.source(valueToValidate, process(valueToValidate, callback));\n    } else {\n      process(valueToValidate, callback)(this.source);\n    }\n  } else {\n    callback(true);\n  }\n}\nautocompleteValidator.VALIDATOR_TYPE = VALIDATOR_TYPE;\n/**\n * Function responsible for validation of autocomplete value.\n *\n * @param {*} value Value of edited cell.\n * @param {Function} callback Callback called with validation result.\n * @returns {Function}\n */\n\nfunction process(value, callback) {\n  var originalVal = value;\n  return function (source) {\n    var found = false;\n\n    for (var s = 0, slen = source.length; s < slen; s++) {\n      if (originalVal === source[s]) {\n        found = true; // perfect match\n\n        break;\n      }\n    }\n\n    callback(found);\n  };\n}"]},"metadata":{},"sourceType":"module"}