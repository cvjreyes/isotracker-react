{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\updateMassive\\\\updateMassive.js\";\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Dropzone from 'react-dropzone-uploader';\nimport React from 'react';\nimport { message } from 'antd';\nimport Alert from '@material-ui/lab/Alert';\nimport Collapse from '@material-ui/core/Collapse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Layout = ({\n  input,\n  previews,\n  submitButton,\n  dropzoneProps,\n  files,\n  extra: {\n    maxFiles\n  }\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [submitButton, /*#__PURE__*/_jsxDEV(\"div\", { ...dropzoneProps,\n      children: [previews, files.length < maxFiles && input]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Layout;\n\nclass UpdateMassive extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileList: [],\n      success: false,\n      error: false,\n      pipeError: false,\n      uploaded: false,\n      errorAlerts: [],\n      pipeErrorAlerts: [],\n      max: 0,\n      uploadingPreview: false,\n      uploading: false,\n      nSuccess: 0,\n      userFiles: []\n    };\n\n    this.handleSubmit = async (files, allFiles) => {\n      let userFiles = this.state.userFiles;\n      this.setState({\n        success: false,\n        uploaded: false,\n        error: false,\n        pipeError: false,\n        errorAlerts: [],\n        pipeErrorAlerts: [],\n        counter: 0,\n        max: files.length,\n        uploading: true,\n        nSuccess: 0,\n        userFiles: userFiles\n      });\n      await allFiles.forEach(file => {\n        const formData = new FormData();\n        formData.append('file', file.file);\n\n        if (this.state.userFiles.indexOf(String(file.file.name.split('.').slice(0, -1)).trim()) > -1) {\n          this.updateFile(formData);\n        } else {\n          let joined = this.state.errorAlerts;\n          joined.push(file.file.name);\n          this.setState({\n            errorAlerts: joined,\n            error: true,\n            uploading: false\n          });\n        }\n\n        file.remove();\n      });\n      console.log(\"ASD\");\n      await this.setState({\n        uploaded: true\n      });\n    };\n  }\n\n  async componentDidMount() {\n    const body = {\n      currentRole: this.props.role,\n      currentUser: this.props.user\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/getFilenamesByUser\", options).then(response => response.json()).then(json => {\n      let files = json.files;\n      let isos = [];\n\n      for (let i = 0; i < files.length; i++) {\n        isos.push(files[i].isoid);\n        isos.push(files[i].isoid + \"-CL\");\n      }\n\n      this.setState({\n        userFiles: isos\n      });\n    });\n  }\n\n  async updateFile(file) {\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/update\", {\n      // content-type header should not be specified!\n      method: 'POST',\n      body: file\n    }).then(response => {\n      // Do something with the successful response\n      if (response.status === 200) {\n        if (!this.state.success) {\n          this.setState({\n            success: true\n          });\n        }\n\n        let filename = null;\n\n        for (let value of file.values()) {\n          filename = value.name;\n        }\n\n        let extension = \"\";\n        let i = filename.lastIndexOf('.');\n\n        if (i > 0) {\n          extension = filename.substring(i + 1);\n        }\n\n        if (extension === \"pdf\") {\n          let body = {\n            file: filename,\n            user: this.props.user,\n            role: this.props.role\n          };\n          fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/updateHis\", {\n            // content-type header should not be specified!\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n          }).then(response => console.log(response.json())).catch(error => message.error(error));\n        }\n      } else {\n        for (let value of file.values()) {\n          let joined = this.state.errorAlerts.concat(value.name);\n          this.setState({\n            errorAlerts: joined,\n            error: true\n          });\n        }\n      }\n\n      let max = this.state.max - 1;\n      this.setState({\n        max: max\n      });\n      console.log(max);\n\n      if (max === 0) {\n        this.setState({\n          uploaded: true,\n          uploading: false\n        });\n      }\n    }).catch(error => message.error(error));\n  }\n\n  render() {\n    const errorAlerts = this.state.errorAlerts;\n    const pipeErrorAlerts = this.state.pipeErrorAlerts;\n    let errors = [];\n    let pipeErrors = [];\n\n    if (errorAlerts.length > 0) {\n      for (let i = 0; i < errorAlerts.length; i++) {\n        if (this.props.mode === \"upload\") {\n          errors.push( /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            children: [\"The file \", errorAlerts[i], \" already exists!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 23\n          }, this));\n        } else {\n          errors.push( /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            children: [\"The file \", errorAlerts[i], \" doesn't belong to any of your isometrics!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 23\n          }, this));\n        }\n      }\n    }\n\n    if (pipeErrorAlerts.length > 0) {\n      for (let i = 0; i < pipeErrorAlerts.length; i++) {\n        pipeErrors.push( /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          children: [\"The file \", pipeErrorAlerts[i], \" doesn't belong to any of your isometrics!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 27\n        }, this));\n      }\n    }\n\n    let inputContent = null;\n    let styles = null;\n\n    if (this.props.mode === \"upload\") {\n      inputContent = \"Drop isometrics here\";\n      styles = {\n        dropzone: {\n          maxHeight: '400px'\n        }\n      };\n    } else {\n      inputContent = \"Drop the files to update\";\n      styles = {\n        dropzone: {\n          height: '250px'\n        },\n        dropzoneActive: {\n          height: '300px'\n        },\n        previewContainer: {\n          height: '2px'\n        }\n      };\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Dropzone, {\n        LayoutComponent: Layout,\n        onSubmit: this.handleSubmit,\n        inputContent: inputContent,\n        styles: styles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: this.state.success,\n        children: /*#__PURE__*/_jsxDEV(Collapse, {\n          in: this.state.uploaded,\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            children: \"The files have been uploaded!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: this.state.error,\n        children: /*#__PURE__*/_jsxDEV(Collapse, {\n          in: this.state.uploaded,\n          children: errors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: this.state.pipeError,\n        children: /*#__PURE__*/_jsxDEV(Collapse, {\n          in: this.state.uploaded,\n          children: pipeErrors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: this.state.uploading,\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"info\",\n          children: \"The files are uploading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default UpdateMassive;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/updateMassive/updateMassive.js"],"names":["Dropzone","React","message","Alert","Collapse","Layout","input","previews","submitButton","dropzoneProps","files","extra","maxFiles","length","UpdateMassive","Component","state","fileList","success","error","pipeError","uploaded","errorAlerts","pipeErrorAlerts","max","uploadingPreview","uploading","nSuccess","userFiles","handleSubmit","allFiles","setState","counter","forEach","file","formData","FormData","append","indexOf","String","name","split","slice","trim","updateFile","joined","push","remove","console","log","componentDidMount","body","currentRole","props","role","currentUser","user","options","method","headers","JSON","stringify","fetch","process","env","REACT_APP_SERVER","REACT_APP_NODE_PORT","then","response","json","isos","i","isoid","status","filename","value","values","extension","lastIndexOf","substring","catch","concat","render","errors","pipeErrors","mode","inputContent","styles","dropzone","maxHeight","height","dropzoneActive","previewContainer"],"mappings":"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","sourcesContent":["import 'react-dropzone-uploader/dist/styles.css'\r\nimport Dropzone from 'react-dropzone-uploader'\r\nimport React from 'react'\r\nimport {message} from'antd'\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse'\r\n\r\nconst Layout = ({ input, previews, submitButton, dropzoneProps, files, extra: { maxFiles } }) => {\r\n  return (\r\n    <div>\r\n      \r\n      {submitButton}\r\n      <div {...dropzoneProps}>\r\n      \r\n      {previews}\r\n      {files.length < maxFiles && input}\r\n        \r\n      </div>\r\n\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nclass UpdateMassive extends React.Component{\r\n\r\n  state = {\r\n    fileList: [],\r\n    success: false,\r\n    error: false,\r\n    pipeError: false,\r\n    uploaded: false,\r\n    errorAlerts: [],\r\n    pipeErrorAlerts: [],\r\n    max: 0,\r\n    uploadingPreview: false,\r\n    uploading: false,\r\n    nSuccess: 0,\r\n    userFiles: []\r\n  };\r\n\r\n  async componentDidMount(){\r\n    const body ={\r\n        currentRole : this.props.role,\r\n        currentUser: this.props.user\r\n      }\r\n      const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n      fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getFilenamesByUser\", options)\r\n      .then(response => response.json())\r\n      .then(json =>{\r\n        let files = json.files\r\n        let isos = []\r\n        for(let i = 0; i < files.length; i++){\r\n            isos.push(files[i].isoid)\r\n            isos.push(files[i].isoid + \"-CL\")\r\n        }\r\n        this.setState({userFiles: isos})\r\n      })\r\n  }\r\n\r\n  async updateFile(file) {\r\n\r\n    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/update\", {\r\n      // content-type header should not be specified!\r\n      method: 'POST',\r\n      body: file,\r\n    })\r\n      .then(response => {\r\n        // Do something with the successful response\r\n        if (response.status === 200){\r\n          if(!this.state.success){\r\n              this.setState({\r\n                success : true,\r\n              })\r\n          }\r\n\r\n          let filename = null;\r\n          for (let value of file.values()){\r\n            filename = value.name\r\n          }\r\n          let extension = \"\";\r\n          let i = filename.lastIndexOf('.');\r\n          if (i > 0) {\r\n            extension = filename.substring(i+1);\r\n          }\r\n          if(extension === \"pdf\"){\r\n            let body =  {\r\n              file: filename,\r\n              user: this.props.user,\r\n              role: this.props.role\r\n            }\r\n            fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/updateHis\", {\r\n              // content-type header should not be specified!\r\n              method: 'POST',\r\n              headers: {\r\n                \"Content-Type\": \"application/json\"\r\n              },\r\n              body: JSON.stringify(body)\r\n            }).then(response => console.log(response.json()))\r\n            .catch(error => message.error(error))\r\n          }\r\n        }else{\r\n          for (let value of file.values()) {\r\n            let joined = this.state.errorAlerts.concat(value.name);\r\n            this.setState({\r\n              errorAlerts : joined,\r\n              error: true\r\n            })\r\n          }\r\n        }\r\n        let max = this.state.max - 1\r\n        this.setState({\r\n          max: max\r\n        })\r\n        console.log(max)\r\n        if (max === 0){\r\n          this.setState({\r\n            uploaded: true,\r\n            uploading: false\r\n          })\r\n        }\r\n        \r\n      })\r\n      .catch(error => message.error(error)\r\n    );\r\n  }\r\n\r\n\r\n  handleSubmit = async (files, allFiles) => {\r\n    let userFiles = this.state.userFiles\r\n    this.setState({\r\n      success: false,\r\n      uploaded: false,\r\n      error: false,\r\n      pipeError: false,\r\n      errorAlerts: [],\r\n      pipeErrorAlerts: [],\r\n      counter: 0,\r\n      max: files.length,\r\n      uploading: true,\r\n      nSuccess: 0,\r\n      userFiles: userFiles\r\n    })\r\n\r\n    await allFiles.forEach(file => {\r\n      const formData  = new FormData(); \r\n      formData.append('file', file.file);  \r\n     \r\n        if(this.state.userFiles.indexOf(String(file.file.name.split('.').slice(0, -1)).trim()) > -1){\r\n          this.updateFile(formData);\r\n        }else{\r\n          \r\n          let joined = this.state.errorAlerts;\r\n          joined.push(file.file.name)\r\n            this.setState({\r\n              errorAlerts : joined,\r\n              error: true,\r\n              uploading: false\r\n            })\r\n        \r\n      }\r\n      file.remove();\r\n    });    \r\n    console.log(\"ASD\")\r\n    await this.setState({\r\n      uploaded: true,\r\n    })\r\n\r\n  }\r\n\r\n  render(){\r\n    const errorAlerts = this.state.errorAlerts;\r\n    const pipeErrorAlerts = this.state.pipeErrorAlerts;\r\n    let errors = []\r\n    let pipeErrors = []\r\n    if(errorAlerts.length > 0){\r\n      for(let i = 0; i < errorAlerts.length; i++){\r\n        \r\n        if (this.props.mode === \"upload\"){\r\n          errors.push(<Alert severity=\"error\"\r\n          >\r\n            The file {errorAlerts[i]} already exists!\r\n\r\n          </Alert>)\r\n        }else{\r\n          errors.push(<Alert severity=\"error\"\r\n          >\r\n            The file {errorAlerts[i]} doesn't belong to any of your isometrics!\r\n\r\n          </Alert>)\r\n        }\r\n      }\r\n    }\r\n\r\n    if(pipeErrorAlerts.length > 0){\r\n      for(let i = 0; i < pipeErrorAlerts.length; i++){\r\n        \r\n          pipeErrors.push(<Alert severity=\"error\"\r\n          >\r\n            The file {pipeErrorAlerts[i]} doesn't belong to any of your isometrics!\r\n\r\n          </Alert>)\r\n      }\r\n    }\r\n    \r\n\r\n    let inputContent = null\r\n    let styles = null\r\n\r\n    if(this.props.mode === \"upload\"){\r\n      inputContent = \"Drop isometrics here\"\r\n      styles = {\r\n        dropzone: {\r\n          maxHeight: '400px',\r\n        },\r\n      }\r\n    }else{\r\n      inputContent = \"Drop the files to update\"\r\n      styles = {\r\n        dropzone: {\r\n          height: '250px'\r\n        },\r\n        dropzoneActive: {\r\n          height: '300px'\r\n        },\r\n        previewContainer:{\r\n          height: '2px'\r\n        }\r\n    }\r\n    \r\n  }\r\n    return (\r\n      <div>\r\n        <Dropzone\r\n          LayoutComponent={Layout}\r\n          onSubmit={this.handleSubmit}\r\n          inputContent= {inputContent}\r\n          styles={styles}\r\n        />\r\n\r\n        <Collapse in={this.state.success}>\r\n          <Collapse in={this.state.uploaded}>\r\n            <Alert\r\n            >\r\n              The files have been uploaded!\r\n\r\n            </Alert>\r\n          </Collapse>\r\n        </Collapse>\r\n\r\n        <Collapse in={this.state.error}>\r\n          <Collapse in={this.state.uploaded}>\r\n            {errors}\r\n          </Collapse>\r\n          \r\n        </Collapse>\r\n        <Collapse in={this.state.pipeError}>\r\n          <Collapse in={this.state.uploaded}>\r\n            {pipeErrors}\r\n          </Collapse>\r\n          \r\n        </Collapse>\r\n        <Collapse in={this.state.uploading}>\r\n          <Alert severity=\"info\"\r\n            >\r\n              The files are uploading...\r\n\r\n            </Alert>\r\n        </Collapse>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UpdateMassive;"]},"metadata":{},"sourceType":"module"}