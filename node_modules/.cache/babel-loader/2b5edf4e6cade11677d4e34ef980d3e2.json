{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport ViewSize from \"./viewSize.mjs\";\nimport { WORKING_SPACE_ALL, WORKING_SPACE_TOP, WORKING_SPACE_BOTTOM } from \"./constants.mjs\";\n/**\r\n * The class is a source of the truth of information about the current and\r\n * next size of the rendered DOM elements and current and next offset of\r\n * the view. That information allows us to calculate diff between current\r\n * DOM order and this which should be rendered without touching the DOM API at all.\r\n *\r\n * Mostly the ViewSizeSet is created for each individual renderer. But in\r\n * the table, there is one case where this size information should be shared\r\n * between two different instances (different table renderers). This is a TR\r\n * element which can contain TH elements - managed by own renderer and\r\n * TD elements - managed by another renderer. To generate correct DOM order\r\n * for them it is required to connect these two instances by reference\r\n * through `sharedSize`.\r\n *\r\n * @class {ViewSizeSet}\r\n */\n\nvar ViewSizeSet = /*#__PURE__*/function () {\n  function ViewSizeSet() {\n    _classCallCheck(this, ViewSizeSet);\n    /**\r\n     * Holder for current and next view size and offset.\r\n     *\r\n     * @type {ViewSize}\r\n     */\n\n\n    this.size = new ViewSize();\n    /**\r\n     * Defines if this instance shares its size with another instance. If it's in the shared\r\n     * mode it defines what space it occupies ('top' or 'bottom').\r\n     *\r\n     * @type {number}\r\n     */\n\n    this.workingSpace = WORKING_SPACE_ALL;\n    /**\r\n     * Shared Size instance.\r\n     *\r\n     * @type {ViewSize}\r\n     */\n\n    this.sharedSize = null;\n  }\n  /**\r\n   * Sets the size for rendered elements. It can be a size for rows, cells or size for row\r\n   * headers etc.\r\n   *\r\n   * @param {number} size The size.\r\n   */\n\n\n  _createClass(ViewSizeSet, [{\n    key: \"setSize\",\n    value: function setSize(size) {\n      this.size.setSize(size);\n    }\n    /**\r\n     * Sets the offset for rendered elements. The offset describes the shift between 0 and\r\n     * the first rendered element according to the scroll position.\r\n     *\r\n     * @param {number} offset The offset.\r\n     */\n\n  }, {\n    key: \"setOffset\",\n    value: function setOffset(offset) {\n      this.size.setOffset(offset);\n    }\n    /**\r\n     * Returns ViewSize instance.\r\n     *\r\n     * @returns {ViewSize}\r\n     */\n\n  }, {\n    key: \"getViewSize\",\n    value: function getViewSize() {\n      return this.size;\n    }\n    /**\r\n     * Checks if this ViewSizeSet is sharing the size with another instance.\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"isShared\",\n    value: function isShared() {\n      return this.sharedSize instanceof ViewSize;\n    }\n    /**\r\n     * Checks what working space describes this size instance.\r\n     *\r\n     * @param {number} workingSpace The number which describes the type of the working space (see constants.js).\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"isPlaceOn\",\n    value: function isPlaceOn(workingSpace) {\n      return this.workingSpace === workingSpace;\n    }\n    /**\r\n     * Appends the ViewSizeSet instance to this instance that turns it into a shared mode.\r\n     *\r\n     * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\r\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(viewSize) {\n      this.workingSpace = WORKING_SPACE_TOP;\n      viewSize.workingSpace = WORKING_SPACE_BOTTOM;\n      this.sharedSize = viewSize.getViewSize();\n    }\n    /**\r\n     * Prepends the ViewSize instance to this instance that turns it into a shared mode.\r\n     *\r\n     * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\r\n     */\n\n  }, {\n    key: \"prepend\",\n    value: function prepend(viewSize) {\n      this.workingSpace = WORKING_SPACE_BOTTOM;\n      viewSize.workingSpace = WORKING_SPACE_TOP;\n      this.sharedSize = viewSize.getViewSize();\n    }\n  }]);\n\n  return ViewSizeSet;\n}();\n\nexport { ViewSizeSet as default };","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/3rdparty/walkontable/src/utils/orderView/viewSizeSet.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","ViewSize","WORKING_SPACE_ALL","WORKING_SPACE_TOP","WORKING_SPACE_BOTTOM","ViewSizeSet","size","workingSpace","sharedSize","value","setSize","setOffset","offset","getViewSize","isShared","isPlaceOn","append","viewSize","prepend","default"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nimport ViewSize from \"./viewSize.mjs\";\r\nimport { WORKING_SPACE_ALL, WORKING_SPACE_TOP, WORKING_SPACE_BOTTOM } from \"./constants.mjs\";\r\n/**\r\n * The class is a source of the truth of information about the current and\r\n * next size of the rendered DOM elements and current and next offset of\r\n * the view. That information allows us to calculate diff between current\r\n * DOM order and this which should be rendered without touching the DOM API at all.\r\n *\r\n * Mostly the ViewSizeSet is created for each individual renderer. But in\r\n * the table, there is one case where this size information should be shared\r\n * between two different instances (different table renderers). This is a TR\r\n * element which can contain TH elements - managed by own renderer and\r\n * TD elements - managed by another renderer. To generate correct DOM order\r\n * for them it is required to connect these two instances by reference\r\n * through `sharedSize`.\r\n *\r\n * @class {ViewSizeSet}\r\n */\r\n\r\nvar ViewSizeSet = /*#__PURE__*/function () {\r\n  function ViewSizeSet() {\r\n    _classCallCheck(this, ViewSizeSet);\r\n\r\n    /**\r\n     * Holder for current and next view size and offset.\r\n     *\r\n     * @type {ViewSize}\r\n     */\r\n    this.size = new ViewSize();\r\n    /**\r\n     * Defines if this instance shares its size with another instance. If it's in the shared\r\n     * mode it defines what space it occupies ('top' or 'bottom').\r\n     *\r\n     * @type {number}\r\n     */\r\n\r\n    this.workingSpace = WORKING_SPACE_ALL;\r\n    /**\r\n     * Shared Size instance.\r\n     *\r\n     * @type {ViewSize}\r\n     */\r\n\r\n    this.sharedSize = null;\r\n  }\r\n  /**\r\n   * Sets the size for rendered elements. It can be a size for rows, cells or size for row\r\n   * headers etc.\r\n   *\r\n   * @param {number} size The size.\r\n   */\r\n\r\n\r\n  _createClass(ViewSizeSet, [{\r\n    key: \"setSize\",\r\n    value: function setSize(size) {\r\n      this.size.setSize(size);\r\n    }\r\n    /**\r\n     * Sets the offset for rendered elements. The offset describes the shift between 0 and\r\n     * the first rendered element according to the scroll position.\r\n     *\r\n     * @param {number} offset The offset.\r\n     */\r\n\r\n  }, {\r\n    key: \"setOffset\",\r\n    value: function setOffset(offset) {\r\n      this.size.setOffset(offset);\r\n    }\r\n    /**\r\n     * Returns ViewSize instance.\r\n     *\r\n     * @returns {ViewSize}\r\n     */\r\n\r\n  }, {\r\n    key: \"getViewSize\",\r\n    value: function getViewSize() {\r\n      return this.size;\r\n    }\r\n    /**\r\n     * Checks if this ViewSizeSet is sharing the size with another instance.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"isShared\",\r\n    value: function isShared() {\r\n      return this.sharedSize instanceof ViewSize;\r\n    }\r\n    /**\r\n     * Checks what working space describes this size instance.\r\n     *\r\n     * @param {number} workingSpace The number which describes the type of the working space (see constants.js).\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"isPlaceOn\",\r\n    value: function isPlaceOn(workingSpace) {\r\n      return this.workingSpace === workingSpace;\r\n    }\r\n    /**\r\n     * Appends the ViewSizeSet instance to this instance that turns it into a shared mode.\r\n     *\r\n     * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\r\n     */\r\n\r\n  }, {\r\n    key: \"append\",\r\n    value: function append(viewSize) {\r\n      this.workingSpace = WORKING_SPACE_TOP;\r\n      viewSize.workingSpace = WORKING_SPACE_BOTTOM;\r\n      this.sharedSize = viewSize.getViewSize();\r\n    }\r\n    /**\r\n     * Prepends the ViewSize instance to this instance that turns it into a shared mode.\r\n     *\r\n     * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\r\n     */\r\n\r\n  }, {\r\n    key: \"prepend\",\r\n    value: function prepend(viewSize) {\r\n      this.workingSpace = WORKING_SPACE_BOTTOM;\r\n      viewSize.workingSpace = WORKING_SPACE_TOP;\r\n      this.sharedSize = viewSize.getViewSize();\r\n    }\r\n  }]);\r\n\r\n  return ViewSizeSet;\r\n}();\r\n\r\nexport { ViewSizeSet as default };"]},"metadata":{},"sourceType":"module"}