{"ast":null,"code":"import { defineGetter } from \"../../../../../helpers/object.mjs\";\nvar MIXIN_NAME = 'calculatedColumns';\n/**\r\n * Mixin for the subclasses of `Table` with implementations of\r\n * helper methods that are related to columns.\r\n * This mixin is meant to be applied in the subclasses of `Table`\r\n * that use virtual rendering in the horizontal axis.\r\n *\r\n * @type {object}\r\n */\n\nvar calculatedColumns = {\n  /**\r\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\r\n   *\r\n   * @returns {number}\r\n   */\n  getFirstRenderedColumn: function getFirstRenderedColumn() {\n    var startColumn = this.wot.wtViewport.columnsRenderCalculator.startColumn;\n\n    if (startColumn === null) {\n      return -1;\n    }\n\n    return startColumn;\n  },\n\n  /**\r\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\r\n   *\r\n   * @returns {number}\r\n   */\n  getFirstVisibleColumn: function getFirstVisibleColumn() {\n    var startColumn = this.wot.wtViewport.columnsVisibleCalculator.startColumn;\n\n    if (startColumn === null) {\n      return -1;\n    }\n\n    return startColumn;\n  },\n\n  /**\r\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\r\n   *\r\n   * @returns {number}\r\n   */\n  getLastRenderedColumn: function getLastRenderedColumn() {\n    var endColumn = this.wot.wtViewport.columnsRenderCalculator.endColumn;\n\n    if (endColumn === null) {\n      return -1;\n    }\n\n    return endColumn;\n  },\n\n  /**\r\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\r\n   *\r\n   * @returns {number}\r\n   */\n  getLastVisibleColumn: function getLastVisibleColumn() {\n    var endColumn = this.wot.wtViewport.columnsVisibleCalculator.endColumn;\n\n    if (endColumn === null) {\n      return -1;\n    }\n\n    return endColumn;\n  },\n\n  /**\r\n   * Get the number of rendered columns.\r\n   *\r\n   * @returns {number}\r\n   */\n  getRenderedColumnsCount: function getRenderedColumnsCount() {\n    return this.wot.wtViewport.columnsRenderCalculator.count;\n  },\n\n  /**\r\n   * Get the number of fully visible columns in the viewport.\r\n   *\r\n   * @returns {number}\r\n   */\n  getVisibleColumnsCount: function getVisibleColumnsCount() {\n    return this.wot.wtViewport.columnsVisibleCalculator.count;\n  }\n};\ndefineGetter(calculatedColumns, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default calculatedColumns;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/3rdparty/walkontable/src/table/mixin/calculatedColumns.mjs"],"names":["defineGetter","MIXIN_NAME","calculatedColumns","getFirstRenderedColumn","startColumn","wot","wtViewport","columnsRenderCalculator","getFirstVisibleColumn","columnsVisibleCalculator","getLastRenderedColumn","endColumn","getLastVisibleColumn","getRenderedColumnsCount","count","getVisibleColumnsCount","writable","enumerable"],"mappings":"AAAA,SAASA,YAAT,QAA6B,mCAA7B;AACA,IAAIC,UAAU,GAAG,mBAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,iBAAiB,GAAG;AACtB;AACF;AACA;AACA;AACA;AACEC,EAAAA,sBAAsB,EAAE,SAASA,sBAAT,GAAkC;AACxD,QAAIC,WAAW,GAAG,KAAKC,GAAL,CAASC,UAAT,CAAoBC,uBAApB,CAA4CH,WAA9D;;AAEA,QAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,aAAO,CAAC,CAAR;AACD;;AAED,WAAOA,WAAP;AACD,GAdqB;;AAgBtB;AACF;AACA;AACA;AACA;AACEI,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,GAAiC;AACtD,QAAIJ,WAAW,GAAG,KAAKC,GAAL,CAASC,UAAT,CAAoBG,wBAApB,CAA6CL,WAA/D;;AAEA,QAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,aAAO,CAAC,CAAR;AACD;;AAED,WAAOA,WAAP;AACD,GA7BqB;;AA+BtB;AACF;AACA;AACA;AACA;AACEM,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,GAAiC;AACtD,QAAIC,SAAS,GAAG,KAAKN,GAAL,CAASC,UAAT,CAAoBC,uBAApB,CAA4CI,SAA5D;;AAEA,QAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB,aAAO,CAAC,CAAR;AACD;;AAED,WAAOA,SAAP;AACD,GA5CqB;;AA8CtB;AACF;AACA;AACA;AACA;AACEC,EAAAA,oBAAoB,EAAE,SAASA,oBAAT,GAAgC;AACpD,QAAID,SAAS,GAAG,KAAKN,GAAL,CAASC,UAAT,CAAoBG,wBAApB,CAA6CE,SAA7D;;AAEA,QAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB,aAAO,CAAC,CAAR;AACD;;AAED,WAAOA,SAAP;AACD,GA3DqB;;AA6DtB;AACF;AACA;AACA;AACA;AACEE,EAAAA,uBAAuB,EAAE,SAASA,uBAAT,GAAmC;AAC1D,WAAO,KAAKR,GAAL,CAASC,UAAT,CAAoBC,uBAApB,CAA4CO,KAAnD;AACD,GApEqB;;AAsEtB;AACF;AACA;AACA;AACA;AACEC,EAAAA,sBAAsB,EAAE,SAASA,sBAAT,GAAkC;AACxD,WAAO,KAAKV,GAAL,CAASC,UAAT,CAAoBG,wBAApB,CAA6CK,KAApD;AACD;AA7EqB,CAAxB;AA+EAd,YAAY,CAACE,iBAAD,EAAoB,YAApB,EAAkCD,UAAlC,EAA8C;AACxDe,EAAAA,QAAQ,EAAE,KAD8C;AAExDC,EAAAA,UAAU,EAAE;AAF4C,CAA9C,CAAZ;AAIA,eAAef,iBAAf","sourcesContent":["import { defineGetter } from \"../../../../../helpers/object.mjs\";\r\nvar MIXIN_NAME = 'calculatedColumns';\r\n/**\r\n * Mixin for the subclasses of `Table` with implementations of\r\n * helper methods that are related to columns.\r\n * This mixin is meant to be applied in the subclasses of `Table`\r\n * that use virtual rendering in the horizontal axis.\r\n *\r\n * @type {object}\r\n */\r\n\r\nvar calculatedColumns = {\r\n  /**\r\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getFirstRenderedColumn: function getFirstRenderedColumn() {\r\n    var startColumn = this.wot.wtViewport.columnsRenderCalculator.startColumn;\r\n\r\n    if (startColumn === null) {\r\n      return -1;\r\n    }\r\n\r\n    return startColumn;\r\n  },\r\n\r\n  /**\r\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getFirstVisibleColumn: function getFirstVisibleColumn() {\r\n    var startColumn = this.wot.wtViewport.columnsVisibleCalculator.startColumn;\r\n\r\n    if (startColumn === null) {\r\n      return -1;\r\n    }\r\n\r\n    return startColumn;\r\n  },\r\n\r\n  /**\r\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getLastRenderedColumn: function getLastRenderedColumn() {\r\n    var endColumn = this.wot.wtViewport.columnsRenderCalculator.endColumn;\r\n\r\n    if (endColumn === null) {\r\n      return -1;\r\n    }\r\n\r\n    return endColumn;\r\n  },\r\n\r\n  /**\r\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getLastVisibleColumn: function getLastVisibleColumn() {\r\n    var endColumn = this.wot.wtViewport.columnsVisibleCalculator.endColumn;\r\n\r\n    if (endColumn === null) {\r\n      return -1;\r\n    }\r\n\r\n    return endColumn;\r\n  },\r\n\r\n  /**\r\n   * Get the number of rendered columns.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getRenderedColumnsCount: function getRenderedColumnsCount() {\r\n    return this.wot.wtViewport.columnsRenderCalculator.count;\r\n  },\r\n\r\n  /**\r\n   * Get the number of fully visible columns in the viewport.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getVisibleColumnsCount: function getVisibleColumnsCount() {\r\n    return this.wot.wtViewport.columnsVisibleCalculator.count;\r\n  }\r\n};\r\ndefineGetter(calculatedColumns, 'MIXIN_NAME', MIXIN_NAME, {\r\n  writable: false,\r\n  enumerable: false\r\n});\r\nexport default calculatedColumns;"]},"metadata":{},"sourceType":"module"}