{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { isUndefined, isDefined } from \"../../helpers/mixed.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\"; // Counter for checking if there is a memory leak.\n\nvar registeredMaps = 0;\n/**\n * Collection of index maps having unique names. It allow us to perform bulk operations such as init, remove, insert on all index maps that have been registered in the collection.\n */\n\nexport var MapCollection = /*#__PURE__*/function () {\n  function MapCollection() {\n    _classCallCheck(this, MapCollection);\n    /**\n     * Collection of index maps.\n     *\n     * @type {Map<string, IndexMap>}\n     */\n\n\n    this.collection = new Map();\n  }\n  /**\n   * Register custom index map.\n   *\n   * @param {string} uniqueName Unique name of the index map.\n   * @param {IndexMap} indexMap Index map containing miscellaneous (i.e. Meta data, indexes sequence), updated after remove and insert data actions.\n   */\n\n\n  _createClass(MapCollection, [{\n    key: \"register\",\n    value: function register(uniqueName, indexMap) {\n      var _this = this;\n\n      if (this.collection.has(uniqueName) === false) {\n        this.collection.set(uniqueName, indexMap);\n        indexMap.addLocalHook('change', function () {\n          return _this.runLocalHooks('change', indexMap);\n        });\n        registeredMaps += 1;\n      }\n    }\n    /**\n     * Unregister custom index map.\n     *\n     * @param {string} name Name of the index map.\n     */\n\n  }, {\n    key: \"unregister\",\n    value: function unregister(name) {\n      var indexMap = this.collection.get(name);\n\n      if (isDefined(indexMap)) {\n        indexMap.destroy();\n        this.collection.delete(name);\n        this.runLocalHooks('change', indexMap);\n        registeredMaps -= 1;\n      }\n    }\n    /**\n     * Unregisters and destroys all collected index map instances.\n     */\n\n  }, {\n    key: \"unregisterAll\",\n    value: function unregisterAll() {\n      var _this2 = this;\n\n      this.collection.forEach(function (indexMap, name) {\n        return _this2.unregister(name);\n      });\n      this.collection.clear();\n    }\n    /**\n     * Get index map for the provided name.\n     *\n     * @param {string} [name] Name of the index map.\n     * @returns {Array|IndexMap}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      if (isUndefined(name)) {\n        return Array.from(this.collection.values());\n      }\n\n      return this.collection.get(name);\n    }\n    /**\n     * Get collection size.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.collection.size;\n    }\n    /**\n     * Remove some indexes and corresponding mappings and update values of the others within all collection's index maps.\n     *\n     * @private\n     * @param {Array} removedIndexes List of removed indexes.\n     */\n\n  }, {\n    key: \"removeFromEvery\",\n    value: function removeFromEvery(removedIndexes) {\n      this.collection.forEach(function (indexMap) {\n        indexMap.remove(removedIndexes);\n      });\n    }\n    /**\n     * Insert new indexes and corresponding mapping and update values of the others all collection's index maps.\n     *\n     * @private\n     * @param {number} insertionIndex Position inside the actual list.\n     * @param {Array} insertedIndexes List of inserted indexes.\n     */\n\n  }, {\n    key: \"insertToEvery\",\n    value: function insertToEvery(insertionIndex, insertedIndexes) {\n      this.collection.forEach(function (indexMap) {\n        indexMap.insert(insertionIndex, insertedIndexes);\n      });\n    }\n    /**\n     * Set default values to index maps within collection.\n     *\n     * @param {number} length Destination length for all stored maps.\n     */\n\n  }, {\n    key: \"initEvery\",\n    value: function initEvery(length) {\n      this.collection.forEach(function (indexMap) {\n        indexMap.init(length);\n      });\n    }\n  }]);\n\n  return MapCollection;\n}();\nmixin(MapCollection, localHooks);\n/**\n * @returns {number}\n */\n\nexport function getRegisteredMapsCounter() {\n  return registeredMaps;\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/translations/mapCollections/mapCollection.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","isUndefined","isDefined","mixin","localHooks","registeredMaps","MapCollection","collection","Map","value","register","uniqueName","indexMap","_this","has","set","addLocalHook","runLocalHooks","unregister","name","get","destroy","delete","unregisterAll","_this2","forEach","clear","Array","from","values","getLength","size","removeFromEvery","removedIndexes","remove","insertToEvery","insertionIndex","insertedIndexes","insert","initEvery","init","getRegisteredMapsCounter"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { isUndefined, isDefined } from \"../../helpers/mixed.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\"; // Counter for checking if there is a memory leak.\n\nvar registeredMaps = 0;\n/**\n * Collection of index maps having unique names. It allow us to perform bulk operations such as init, remove, insert on all index maps that have been registered in the collection.\n */\n\nexport var MapCollection = /*#__PURE__*/function () {\n  function MapCollection() {\n    _classCallCheck(this, MapCollection);\n\n    /**\n     * Collection of index maps.\n     *\n     * @type {Map<string, IndexMap>}\n     */\n    this.collection = new Map();\n  }\n  /**\n   * Register custom index map.\n   *\n   * @param {string} uniqueName Unique name of the index map.\n   * @param {IndexMap} indexMap Index map containing miscellaneous (i.e. Meta data, indexes sequence), updated after remove and insert data actions.\n   */\n\n\n  _createClass(MapCollection, [{\n    key: \"register\",\n    value: function register(uniqueName, indexMap) {\n      var _this = this;\n\n      if (this.collection.has(uniqueName) === false) {\n        this.collection.set(uniqueName, indexMap);\n        indexMap.addLocalHook('change', function () {\n          return _this.runLocalHooks('change', indexMap);\n        });\n        registeredMaps += 1;\n      }\n    }\n    /**\n     * Unregister custom index map.\n     *\n     * @param {string} name Name of the index map.\n     */\n\n  }, {\n    key: \"unregister\",\n    value: function unregister(name) {\n      var indexMap = this.collection.get(name);\n\n      if (isDefined(indexMap)) {\n        indexMap.destroy();\n        this.collection.delete(name);\n        this.runLocalHooks('change', indexMap);\n        registeredMaps -= 1;\n      }\n    }\n    /**\n     * Unregisters and destroys all collected index map instances.\n     */\n\n  }, {\n    key: \"unregisterAll\",\n    value: function unregisterAll() {\n      var _this2 = this;\n\n      this.collection.forEach(function (indexMap, name) {\n        return _this2.unregister(name);\n      });\n      this.collection.clear();\n    }\n    /**\n     * Get index map for the provided name.\n     *\n     * @param {string} [name] Name of the index map.\n     * @returns {Array|IndexMap}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      if (isUndefined(name)) {\n        return Array.from(this.collection.values());\n      }\n\n      return this.collection.get(name);\n    }\n    /**\n     * Get collection size.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.collection.size;\n    }\n    /**\n     * Remove some indexes and corresponding mappings and update values of the others within all collection's index maps.\n     *\n     * @private\n     * @param {Array} removedIndexes List of removed indexes.\n     */\n\n  }, {\n    key: \"removeFromEvery\",\n    value: function removeFromEvery(removedIndexes) {\n      this.collection.forEach(function (indexMap) {\n        indexMap.remove(removedIndexes);\n      });\n    }\n    /**\n     * Insert new indexes and corresponding mapping and update values of the others all collection's index maps.\n     *\n     * @private\n     * @param {number} insertionIndex Position inside the actual list.\n     * @param {Array} insertedIndexes List of inserted indexes.\n     */\n\n  }, {\n    key: \"insertToEvery\",\n    value: function insertToEvery(insertionIndex, insertedIndexes) {\n      this.collection.forEach(function (indexMap) {\n        indexMap.insert(insertionIndex, insertedIndexes);\n      });\n    }\n    /**\n     * Set default values to index maps within collection.\n     *\n     * @param {number} length Destination length for all stored maps.\n     */\n\n  }, {\n    key: \"initEvery\",\n    value: function initEvery(length) {\n      this.collection.forEach(function (indexMap) {\n        indexMap.init(length);\n      });\n    }\n  }]);\n\n  return MapCollection;\n}();\nmixin(MapCollection, localHooks);\n/**\n * @returns {number}\n */\n\nexport function getRegisteredMapsCounter() {\n  return registeredMaps;\n}"]},"metadata":{},"sourceType":"module"}