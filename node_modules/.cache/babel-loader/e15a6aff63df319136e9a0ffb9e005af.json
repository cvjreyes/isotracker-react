{"ast":null,"code":"var aFunction = require('../internals/a-function');\n\nvar toObject = require('../internals/to-object');\n\nvar IndexedObject = require('../internals/indexed-object');\n\nvar toLength = require('../internals/to-length'); // `Array.prototype.{ reduce, reduceRight }` methods implementation\n\n\nvar createMethod = function createMethod(IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aFunction(callbackfn);\n    var O = toObject(that);\n    var self = IndexedObject(O);\n    var length = toLength(O.length);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n\n      index += i;\n\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw TypeError('Reduce of empty array with no initial value');\n      }\n    }\n\n    for (; IS_RIGHT ? index >= 0 : length > index; index += i) {\n      if (index in self) {\n        memo = callbackfn(memo, self[index], index, O);\n      }\n    }\n\n    return memo;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.reduce` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduce\n  left: createMethod(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduceright\n  right: createMethod(true)\n};","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/core-js/internals/array-reduce.js"],"names":["aFunction","require","toObject","IndexedObject","toLength","createMethod","IS_RIGHT","that","callbackfn","argumentsLength","memo","O","self","length","index","i","TypeError","module","exports","left","right"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,6BAAD,CAA3B;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,wBAAD,CAAtB,C,CAEA;;;AACA,IAAII,YAAY,GAAG,SAAfA,YAAe,CAAUC,QAAV,EAAoB;AACrC,SAAO,UAAUC,IAAV,EAAgBC,UAAhB,EAA4BC,eAA5B,EAA6CC,IAA7C,EAAmD;AACxDV,IAAAA,SAAS,CAACQ,UAAD,CAAT;AACA,QAAIG,CAAC,GAAGT,QAAQ,CAACK,IAAD,CAAhB;AACA,QAAIK,IAAI,GAAGT,aAAa,CAACQ,CAAD,CAAxB;AACA,QAAIE,MAAM,GAAGT,QAAQ,CAACO,CAAC,CAACE,MAAH,CAArB;AACA,QAAIC,KAAK,GAAGR,QAAQ,GAAGO,MAAM,GAAG,CAAZ,GAAgB,CAApC;AACA,QAAIE,CAAC,GAAGT,QAAQ,GAAG,CAAC,CAAJ,GAAQ,CAAxB;AACA,QAAIG,eAAe,GAAG,CAAtB,EAAyB,OAAO,IAAP,EAAa;AACpC,UAAIK,KAAK,IAAIF,IAAb,EAAmB;AACjBF,QAAAA,IAAI,GAAGE,IAAI,CAACE,KAAD,CAAX;AACAA,QAAAA,KAAK,IAAIC,CAAT;AACA;AACD;;AACDD,MAAAA,KAAK,IAAIC,CAAT;;AACA,UAAIT,QAAQ,GAAGQ,KAAK,GAAG,CAAX,GAAeD,MAAM,IAAIC,KAArC,EAA4C;AAC1C,cAAME,SAAS,CAAC,6CAAD,CAAf;AACD;AACF;;AACD,WAAMV,QAAQ,GAAGQ,KAAK,IAAI,CAAZ,GAAgBD,MAAM,GAAGC,KAAvC,EAA8CA,KAAK,IAAIC,CAAvD;AAA0D,UAAID,KAAK,IAAIF,IAAb,EAAmB;AAC3EF,QAAAA,IAAI,GAAGF,UAAU,CAACE,IAAD,EAAOE,IAAI,CAACE,KAAD,CAAX,EAAoBA,KAApB,EAA2BH,CAA3B,CAAjB;AACD;AAFD;;AAGA,WAAOD,IAAP;AACD,GAtBD;AAuBD,CAxBD;;AA0BAO,MAAM,CAACC,OAAP,GAAiB;AACf;AACA;AACAC,EAAAA,IAAI,EAAEd,YAAY,CAAC,KAAD,CAHH;AAIf;AACA;AACAe,EAAAA,KAAK,EAAEf,YAAY,CAAC,IAAD;AANJ,CAAjB","sourcesContent":["var aFunction = require('../internals/a-function');\r\nvar toObject = require('../internals/to-object');\r\nvar IndexedObject = require('../internals/indexed-object');\r\nvar toLength = require('../internals/to-length');\r\n\r\n// `Array.prototype.{ reduce, reduceRight }` methods implementation\r\nvar createMethod = function (IS_RIGHT) {\r\n  return function (that, callbackfn, argumentsLength, memo) {\r\n    aFunction(callbackfn);\r\n    var O = toObject(that);\r\n    var self = IndexedObject(O);\r\n    var length = toLength(O.length);\r\n    var index = IS_RIGHT ? length - 1 : 0;\r\n    var i = IS_RIGHT ? -1 : 1;\r\n    if (argumentsLength < 2) while (true) {\r\n      if (index in self) {\r\n        memo = self[index];\r\n        index += i;\r\n        break;\r\n      }\r\n      index += i;\r\n      if (IS_RIGHT ? index < 0 : length <= index) {\r\n        throw TypeError('Reduce of empty array with no initial value');\r\n      }\r\n    }\r\n    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\r\n      memo = callbackfn(memo, self[index], index, O);\r\n    }\r\n    return memo;\r\n  };\r\n};\r\n\r\nmodule.exports = {\r\n  // `Array.prototype.reduce` method\r\n  // https://tc39.es/ecma262/#sec-array.prototype.reduce\r\n  left: createMethod(false),\r\n  // `Array.prototype.reduceRight` method\r\n  // https://tc39.es/ecma262/#sec-array.prototype.reduceright\r\n  right: createMethod(true)\r\n};\r\n"]},"metadata":{},"sourceType":"script"}