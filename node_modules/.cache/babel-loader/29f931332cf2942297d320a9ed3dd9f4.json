{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { getScrollbarWidth } from \"./../../../../helpers/dom/element.mjs\";\n/**\n * Column utils class contains all necessary information about sizes of the columns.\n *\n * @class {ColumnUtils}\n */\n\nvar ColumnUtils = /*#__PURE__*/function () {\n  function ColumnUtils(wot) {\n    _classCallCheck(this, ColumnUtils);\n\n    this.wot = wot;\n    this.headerWidths = new Map();\n  }\n  /**\n   * Returns column width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n\n\n  _createClass(ColumnUtils, [{\n    key: \"getWidth\",\n    value: function getWidth(sourceIndex) {\n      var width = this.wot.wtSettings.settings.columnWidth;\n\n      if (typeof width === 'function') {\n        width = width(sourceIndex);\n      } else if (_typeof(width) === 'object') {\n        width = width[sourceIndex];\n      }\n\n      return width || this.wot.wtSettings.settings.defaultColumnWidth;\n    }\n    /**\n     * Returns stretched column width based on passed source index.\n     *\n     * @param {number} sourceIndex Column source index.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getStretchedColumnWidth\",\n    value: function getStretchedColumnWidth(sourceIndex) {\n      var columnWidth = this.getWidth(sourceIndex);\n      var calculator = this.wot.wtViewport.columnsRenderCalculator;\n      var width = columnWidth !== null && columnWidth !== void 0 ? columnWidth : this.wot.wtSettings.settings.defaultColumnWidth;\n\n      if (calculator) {\n        var stretchedWidth = calculator.getStretchedColumnWidth(sourceIndex, width);\n\n        if (stretchedWidth) {\n          width = stretchedWidth;\n        }\n      }\n\n      return width;\n    }\n    /**\n     * Returns column header height based on passed header level.\n     *\n     * @param {number} level Column header level.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getHeaderHeight\",\n    value: function getHeaderHeight(level) {\n      var height = this.wot.wtSettings.settings.defaultRowHeight;\n      var oversizedHeight = this.wot.wtViewport.oversizedColumnHeaders[level];\n\n      if (oversizedHeight !== void 0) {\n        height = height ? Math.max(height, oversizedHeight) : oversizedHeight;\n      }\n\n      return height;\n    }\n    /**\n     * Returns column header width based on passed source index.\n     *\n     * @param {number} sourceIndex Column source index.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getHeaderWidth\",\n    value: function getHeaderWidth(sourceIndex) {\n      return this.headerWidths.get(this.wot.wtTable.columnFilter.sourceToRendered(sourceIndex));\n    }\n    /**\n     * Calculates column header widths that can be retrieved from the cache.\n     */\n\n  }, {\n    key: \"calculateWidths\",\n    value: function calculateWidths() {\n      var wot = this.wot;\n      var wtTable = wot.wtTable,\n          wtViewport = wot.wtViewport,\n          cloneSource = wot.cloneSource;\n      var mainHolder = cloneSource ? cloneSource.wtTable.holder : wtTable.holder;\n      var scrollbarCompensation = mainHolder.offsetHeight < mainHolder.scrollHeight ? getScrollbarWidth() : 0;\n      var rowHeaderWidthSetting = wot.getSetting('rowHeaderWidth');\n      wtViewport.columnsRenderCalculator.refreshStretching(wtViewport.getViewportWidth() - scrollbarCompensation);\n      rowHeaderWidthSetting = wot.getSetting('onModifyRowHeaderWidth', rowHeaderWidthSetting);\n\n      if (rowHeaderWidthSetting !== null && rowHeaderWidthSetting !== void 0) {\n        var rowHeadersCount = wot.getSetting('rowHeaders').length;\n        var defaultColumnWidth = wot.getSetting('defaultColumnWidth');\n\n        for (var visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n          var width = Array.isArray(rowHeaderWidthSetting) ? rowHeaderWidthSetting[visibleColumnIndex] : rowHeaderWidthSetting;\n          width = width === null || width === void 0 ? defaultColumnWidth : width;\n          this.headerWidths.set(visibleColumnIndex, width);\n        }\n      }\n    }\n  }]);\n\n  return ColumnUtils;\n}();\n\nexport { ColumnUtils as default };","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/3rdparty/walkontable/src/utils/column.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","getScrollbarWidth","ColumnUtils","wot","headerWidths","Map","value","getWidth","sourceIndex","width","wtSettings","settings","columnWidth","defaultColumnWidth","getStretchedColumnWidth","calculator","wtViewport","columnsRenderCalculator","stretchedWidth","getHeaderHeight","level","height","defaultRowHeight","oversizedHeight","oversizedColumnHeaders","Math","max","getHeaderWidth","get","wtTable","columnFilter","sourceToRendered","calculateWidths","cloneSource","mainHolder","holder","scrollbarCompensation","offsetHeight","scrollHeight","rowHeaderWidthSetting","getSetting","refreshStretching","getViewportWidth","rowHeadersCount","visibleColumnIndex","Array","isArray","set","default"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { getScrollbarWidth } from \"./../../../../helpers/dom/element.mjs\";\n/**\n * Column utils class contains all necessary information about sizes of the columns.\n *\n * @class {ColumnUtils}\n */\n\nvar ColumnUtils = /*#__PURE__*/function () {\n  function ColumnUtils(wot) {\n    _classCallCheck(this, ColumnUtils);\n\n    this.wot = wot;\n    this.headerWidths = new Map();\n  }\n  /**\n   * Returns column width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n\n\n  _createClass(ColumnUtils, [{\n    key: \"getWidth\",\n    value: function getWidth(sourceIndex) {\n      var width = this.wot.wtSettings.settings.columnWidth;\n\n      if (typeof width === 'function') {\n        width = width(sourceIndex);\n      } else if (_typeof(width) === 'object') {\n        width = width[sourceIndex];\n      }\n\n      return width || this.wot.wtSettings.settings.defaultColumnWidth;\n    }\n    /**\n     * Returns stretched column width based on passed source index.\n     *\n     * @param {number} sourceIndex Column source index.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getStretchedColumnWidth\",\n    value: function getStretchedColumnWidth(sourceIndex) {\n      var columnWidth = this.getWidth(sourceIndex);\n      var calculator = this.wot.wtViewport.columnsRenderCalculator;\n      var width = columnWidth !== null && columnWidth !== void 0 ? columnWidth : this.wot.wtSettings.settings.defaultColumnWidth;\n\n      if (calculator) {\n        var stretchedWidth = calculator.getStretchedColumnWidth(sourceIndex, width);\n\n        if (stretchedWidth) {\n          width = stretchedWidth;\n        }\n      }\n\n      return width;\n    }\n    /**\n     * Returns column header height based on passed header level.\n     *\n     * @param {number} level Column header level.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getHeaderHeight\",\n    value: function getHeaderHeight(level) {\n      var height = this.wot.wtSettings.settings.defaultRowHeight;\n      var oversizedHeight = this.wot.wtViewport.oversizedColumnHeaders[level];\n\n      if (oversizedHeight !== void 0) {\n        height = height ? Math.max(height, oversizedHeight) : oversizedHeight;\n      }\n\n      return height;\n    }\n    /**\n     * Returns column header width based on passed source index.\n     *\n     * @param {number} sourceIndex Column source index.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getHeaderWidth\",\n    value: function getHeaderWidth(sourceIndex) {\n      return this.headerWidths.get(this.wot.wtTable.columnFilter.sourceToRendered(sourceIndex));\n    }\n    /**\n     * Calculates column header widths that can be retrieved from the cache.\n     */\n\n  }, {\n    key: \"calculateWidths\",\n    value: function calculateWidths() {\n      var wot = this.wot;\n      var wtTable = wot.wtTable,\n          wtViewport = wot.wtViewport,\n          cloneSource = wot.cloneSource;\n      var mainHolder = cloneSource ? cloneSource.wtTable.holder : wtTable.holder;\n      var scrollbarCompensation = mainHolder.offsetHeight < mainHolder.scrollHeight ? getScrollbarWidth() : 0;\n      var rowHeaderWidthSetting = wot.getSetting('rowHeaderWidth');\n      wtViewport.columnsRenderCalculator.refreshStretching(wtViewport.getViewportWidth() - scrollbarCompensation);\n      rowHeaderWidthSetting = wot.getSetting('onModifyRowHeaderWidth', rowHeaderWidthSetting);\n\n      if (rowHeaderWidthSetting !== null && rowHeaderWidthSetting !== void 0) {\n        var rowHeadersCount = wot.getSetting('rowHeaders').length;\n        var defaultColumnWidth = wot.getSetting('defaultColumnWidth');\n\n        for (var visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n          var width = Array.isArray(rowHeaderWidthSetting) ? rowHeaderWidthSetting[visibleColumnIndex] : rowHeaderWidthSetting;\n          width = width === null || width === void 0 ? defaultColumnWidth : width;\n          this.headerWidths.set(visibleColumnIndex, width);\n        }\n      }\n    }\n  }]);\n\n  return ColumnUtils;\n}();\n\nexport { ColumnUtils as default };"]},"metadata":{},"sourceType":"module"}