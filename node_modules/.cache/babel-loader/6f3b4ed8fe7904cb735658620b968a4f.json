{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nimport { BasePlugin } from \"../base/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { stringify, parse } from \"../../3rdparty/SheetClip/index.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { sanitize } from \"../../helpers/string.mjs\";\nimport { getSelectionText } from \"../../helpers/dom/element.mjs\";\nimport copyItem from \"./contextMenuItem/copy.mjs\";\nimport cutItem from \"./contextMenuItem/cut.mjs\";\nimport PasteEvent from \"./pasteEvent.mjs\";\nimport { createElement, destroyElement } from \"./focusableElement.mjs\";\nimport { _dataToHTML, htmlToGridSettings } from \"../../utils/parseTable.mjs\";\nHooks.getSingleton().register('afterCopyLimit');\nHooks.getSingleton().register('modifyCopyableRange');\nHooks.getSingleton().register('beforeCut');\nHooks.getSingleton().register('afterCut');\nHooks.getSingleton().register('beforePaste');\nHooks.getSingleton().register('afterPaste');\nHooks.getSingleton().register('beforeCopy');\nHooks.getSingleton().register('afterCopy');\nexport var PLUGIN_KEY = 'copyPaste';\nexport var PLUGIN_PRIORITY = 80;\nvar ROWS_LIMIT = 1000;\nvar COLUMNS_LIMIT = 1000;\nvar privatePool = new WeakMap();\nvar META_HEAD = ['<meta name=\"generator\" content=\"Handsontable\"/>', '<style type=\"text/css\">td{white-space:normal}br{mso-data-placement:same-cell}</style>'].join('');\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\r\n * @description\r\n * This plugin enables the copy/paste functionality in the Handsontable. The functionality works for API, Context Menu,\r\n * using keyboard shortcuts and menu bar from the browser.\r\n * Possible values:\r\n * * `true` (to enable default options),\r\n * * `false` (to disable completely).\r\n *\r\n * or an object with values:\r\n * * `'columnsLimit'` (see {@link CopyPaste#columnsLimit})\r\n * * `'rowsLimit'` (see {@link CopyPaste#rowsLimit})\r\n * * `'pasteMode'` (see {@link CopyPaste#pasteMode})\r\n * * `'uiContainer'` (see {@link CopyPaste#uiContainer}).\r\n *\r\n * See [the copy/paste demo](https://handsontable.com/docs/demo-copy-paste.html) for examples.\r\n *\r\n * @example\r\n * ```js\r\n * // Enables the plugin with default values\r\n * copyPaste: true,\r\n * // Enables the plugin with custom values\r\n * copyPaste: {\r\n *   columnsLimit: 25,\r\n *   rowsLimit: 50,\r\n *   pasteMode: 'shift_down',\r\n *   uiContainer: document.body,\r\n * },\r\n * ```\r\n * @class CopyPaste\r\n * @plugin CopyPaste\r\n */\n\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\nexport var CopyPaste = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(CopyPaste, _BasePlugin);\n\n  var _super = _createSuper(CopyPaste);\n\n  function CopyPaste(hotInstance) {\n    var _this;\n\n    _classCallCheck(this, CopyPaste);\n\n    _this = _super.call(this, hotInstance);\n    /**\r\n     * Maximum number of columns than can be copied to clipboard using <kbd>CTRL</kbd> + <kbd>C</kbd>.\r\n     *\r\n     * @type {number}\r\n     * @default 1000\r\n     */\n\n    _this.columnsLimit = COLUMNS_LIMIT;\n    /**\r\n     * Ranges of the cells coordinates, which should be used to copy/cut/paste actions.\r\n     *\r\n     * @private\r\n     * @type {Array}\r\n     */\n\n    _this.copyableRanges = [];\n    /**\r\n     * Provides focusable element to support IME and copy/paste/cut actions.\r\n     *\r\n     * @type {FocusableWrapper}\r\n     */\n\n    _this.focusableElement = void 0;\n    /**\r\n     * Defines paste (<kbd>CTRL</kbd> + <kbd>V</kbd>) behavior.\r\n     * * Default value `\"overwrite\"` will paste clipboard value over current selection.\r\n     * * When set to `\"shift_down\"`, clipboard data will be pasted in place of current selection, while all selected cells are moved down.\r\n     * * When set to `\"shift_right\"`, clipboard data will be pasted in place of current selection, while all selected cells are moved right.\r\n     *\r\n     * @type {string}\r\n     * @default 'overwrite'\r\n     */\n\n    _this.pasteMode = 'overwrite';\n    /**\r\n     * Maximum number of rows than can be copied to clipboard using <kbd>CTRL</kbd> + <kbd>C</kbd>.\r\n     *\r\n     * @type {number}\r\n     * @default 1000\r\n     */\n\n    _this.rowsLimit = ROWS_LIMIT;\n    /**\r\n     * UI container for the secondary focusable element.\r\n     *\r\n     * @type {HTMLElement}\r\n     */\n\n    _this.uiContainer = _this.hot.rootDocument.body;\n    privatePool.set(_assertThisInitialized(_this), {\n      isTriggeredByCopy: false,\n      isTriggeredByCut: false,\n      isBeginEditing: false,\n      isFragmentSelectionEnabled: false\n    });\n    return _this;\n  }\n  /**\r\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\r\n   * hook and if it returns `true` than the {@link CopyPaste#enablePlugin} method is called.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  _createClass(CopyPaste, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings()[PLUGIN_KEY];\n    }\n    /**\r\n     * Enables the plugin functionality for this Handsontable instance.\r\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      var _this$hot$getSettings = this.hot.getSettings(),\n          settings = _this$hot$getSettings[PLUGIN_KEY],\n          fragmentSelection = _this$hot$getSettings.fragmentSelection;\n\n      var priv = privatePool.get(this);\n      priv.isFragmentSelectionEnabled = !!fragmentSelection;\n\n      if (_typeof(settings) === 'object') {\n        this.pasteMode = settings.pasteMode || this.pasteMode;\n        this.rowsLimit = isNaN(settings.rowsLimit) ? this.rowsLimit : settings.rowsLimit;\n        this.columnsLimit = isNaN(settings.columnsLimit) ? this.columnsLimit : settings.columnsLimit;\n        this.uiContainer = settings.uiContainer || this.uiContainer;\n      }\n\n      this.addHook('afterContextMenuDefaultOptions', function (options) {\n        return _this2.onAfterContextMenuDefaultOptions(options);\n      });\n      this.addHook('afterOnCellMouseUp', function () {\n        return _this2.onAfterOnCellMouseUp();\n      });\n      this.addHook('afterSelectionEnd', function () {\n        return _this2.onAfterSelectionEnd();\n      });\n      this.addHook('beforeKeyDown', function () {\n        return _this2.onBeforeKeyDown();\n      });\n      this.focusableElement = createElement(this.uiContainer);\n      this.focusableElement.addLocalHook('copy', function (event) {\n        return _this2.onCopy(event);\n      }).addLocalHook('cut', function (event) {\n        return _this2.onCut(event);\n      }).addLocalHook('paste', function (event) {\n        return _this2.onPaste(event);\n      });\n\n      _get(_getPrototypeOf(CopyPaste.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\r\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\r\n     */\n\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      this.disablePlugin();\n      this.enablePlugin();\n      this.getOrCreateFocusableElement();\n\n      _get(_getPrototypeOf(CopyPaste.prototype), \"updatePlugin\", this).call(this);\n    }\n    /**\r\n     * Disables the plugin functionality for this Handsontable instance.\r\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      if (this.focusableElement) {\n        destroyElement(this.focusableElement);\n      }\n\n      _get(_getPrototypeOf(CopyPaste.prototype), \"disablePlugin\", this).call(this);\n    }\n    /**\r\n     * Copies the selected cell into the clipboard.\r\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      var priv = privatePool.get(this);\n      priv.isTriggeredByCopy = true;\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n      this.hot.rootDocument.execCommand('copy');\n    }\n    /**\r\n     * Cuts the selected cell into the clipboard.\r\n     */\n\n  }, {\n    key: \"cut\",\n    value: function cut() {\n      var priv = privatePool.get(this);\n      priv.isTriggeredByCut = true;\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n      this.hot.rootDocument.execCommand('cut');\n    }\n    /**\r\n     * Creates copyable text releated to range objects.\r\n     *\r\n     * @param {object[]} ranges Array of objects with properties `startRow`, `endRow`, `startCol` and `endCol`.\r\n     * @returns {string} Returns string which will be copied into clipboard.\r\n     */\n\n  }, {\n    key: \"getRangedCopyableData\",\n    value: function getRangedCopyableData(ranges) {\n      var _this3 = this;\n\n      var dataSet = [];\n      var copyableRows = [];\n      var copyableColumns = []; // Count all copyable rows and columns\n\n      arrayEach(ranges, function (range) {\n        rangeEach(range.startRow, range.endRow, function (row) {\n          if (copyableRows.indexOf(row) === -1) {\n            copyableRows.push(row);\n          }\n        });\n        rangeEach(range.startCol, range.endCol, function (column) {\n          if (copyableColumns.indexOf(column) === -1) {\n            copyableColumns.push(column);\n          }\n        });\n      }); // Concat all rows and columns data defined in ranges into one copyable string\n\n      arrayEach(copyableRows, function (row) {\n        var rowSet = [];\n        arrayEach(copyableColumns, function (column) {\n          rowSet.push(_this3.hot.getCopyableData(row, column));\n        });\n        dataSet.push(rowSet);\n      });\n      return stringify(dataSet);\n    }\n    /**\r\n     * Creates copyable text releated to range objects.\r\n     *\r\n     * @param {object[]} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.\r\n     * @returns {Array[]} Returns array of arrays which will be copied into clipboard.\r\n     */\n\n  }, {\n    key: \"getRangedData\",\n    value: function getRangedData(ranges) {\n      var _this4 = this;\n\n      var dataSet = [];\n      var copyableRows = [];\n      var copyableColumns = []; // Count all copyable rows and columns\n\n      arrayEach(ranges, function (range) {\n        rangeEach(range.startRow, range.endRow, function (row) {\n          if (copyableRows.indexOf(row) === -1) {\n            copyableRows.push(row);\n          }\n        });\n        rangeEach(range.startCol, range.endCol, function (column) {\n          if (copyableColumns.indexOf(column) === -1) {\n            copyableColumns.push(column);\n          }\n        });\n      }); // Concat all rows and columns data defined in ranges into one copyable string\n\n      arrayEach(copyableRows, function (row) {\n        var rowSet = [];\n        arrayEach(copyableColumns, function (column) {\n          rowSet.push(_this4.hot.getCopyableData(row, column));\n        });\n        dataSet.push(rowSet);\n      });\n      return dataSet;\n    }\n    /**\r\n     * Simulates the paste action.\r\n     *\r\n     * @param {string} pastableText Value as raw string to paste.\r\n     * @param {string} [pastableHtml=''] Value as HTML to paste.\r\n     */\n\n  }, {\n    key: \"paste\",\n    value: function paste() {\n      var pastableText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var pastableHtml = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : pastableText;\n\n      if (!pastableText && !pastableHtml) {\n        return;\n      }\n\n      var pasteData = new PasteEvent();\n\n      if (pastableText) {\n        pasteData.clipboardData.setData('text/plain', pastableText);\n      }\n\n      if (pastableHtml) {\n        pasteData.clipboardData.setData('text/html', pastableHtml);\n      }\n\n      this.getOrCreateFocusableElement();\n      this.onPaste(pasteData);\n    }\n    /**\r\n     * Prepares copyable text from the cells selection in the invisible textarea.\r\n     */\n\n  }, {\n    key: \"setCopyableText\",\n    value: function setCopyableText() {\n      var selRange = this.hot.getSelectedRangeLast();\n\n      if (!selRange) {\n        return;\n      }\n\n      var topLeft = selRange.getTopLeftCorner();\n      var bottomRight = selRange.getBottomRightCorner();\n      var startRow = topLeft.row;\n      var startCol = topLeft.col;\n      var endRow = bottomRight.row;\n      var endCol = bottomRight.col;\n      var finalEndRow = Math.min(endRow, startRow + this.rowsLimit - 1);\n      var finalEndCol = Math.min(endCol, startCol + this.columnsLimit - 1);\n      this.copyableRanges.length = 0;\n      this.copyableRanges.push({\n        startRow: startRow,\n        startCol: startCol,\n        endRow: finalEndRow,\n        endCol: finalEndCol\n      });\n      this.copyableRanges = this.hot.runHooks('modifyCopyableRange', this.copyableRanges);\n\n      if (endRow !== finalEndRow || endCol !== finalEndCol) {\n        this.hot.runHooks('afterCopyLimit', endRow - startRow + 1, endCol - startCol + 1, this.rowsLimit, this.columnsLimit);\n      }\n    }\n    /**\r\n     * Force focus on editable element.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"getOrCreateFocusableElement\",\n    value: function getOrCreateFocusableElement() {\n      var editor = this.hot.getActiveEditor();\n      var editableElement = editor ? editor.TEXTAREA : void 0;\n\n      if (editableElement) {\n        this.focusableElement.setFocusableElement(editableElement);\n      } else {\n        this.focusableElement.useSecondaryElement();\n      }\n    }\n    /**\r\n     * Verifies if editor exists and is open.\r\n     *\r\n     * @private\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"isEditorOpened\",\n    value: function isEditorOpened() {\n      var editor = this.hot.getActiveEditor();\n      return editor && editor.isOpened();\n    }\n    /**\r\n     * Prepares new values to populate them into datasource.\r\n     *\r\n     * @private\r\n     * @param {Array} inputArray An array of the data to populate.\r\n     * @param {Array} [selection] The selection which indicates from what position the data will be populated.\r\n     * @returns {Array} Range coordinates after populate data.\r\n     */\n\n  }, {\n    key: \"populateValues\",\n    value: function populateValues(inputArray) {\n      var selection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.hot.getSelectedRangeLast();\n\n      if (!inputArray.length) {\n        return;\n      }\n\n      var populatedRowsLength = inputArray.length;\n      var populatedColumnsLength = inputArray[0].length;\n      var newRows = [];\n\n      var _selection$getTopLeft = selection.getTopLeftCorner(),\n          startRow = _selection$getTopLeft.row,\n          startColumn = _selection$getTopLeft.col;\n\n      var _selection$getBottomR = selection.getBottomRightCorner(),\n          endRowFromSelection = _selection$getBottomR.row,\n          endColumnFromSelection = _selection$getBottomR.col;\n\n      var visualRowForPopulatedData = startRow;\n      var visualColumnForPopulatedData = startColumn;\n      var lastVisualRow = startRow;\n      var lastVisualColumn = startColumn; // We try to populate just all copied data or repeat copied data within a selection. Please keep in mind that we\n      // don't know whether populated data is bigger than selection on start as there are some cells for which values\n      // should be not inserted (it's known right after getting cell meta).\n\n      while (newRows.length < populatedRowsLength || visualRowForPopulatedData <= endRowFromSelection) {\n        var _this$hot$getCellMeta = this.hot.getCellMeta(visualRowForPopulatedData, startColumn),\n            skipRowOnPaste = _this$hot$getCellMeta.skipRowOnPaste,\n            visualRow = _this$hot$getCellMeta.visualRow;\n\n        visualRowForPopulatedData = visualRow + 1;\n\n        if (skipRowOnPaste === true) {\n          /* eslint-disable no-continue */\n          continue;\n        }\n\n        lastVisualRow = visualRow;\n        visualColumnForPopulatedData = startColumn;\n        var newRow = [];\n        var insertedRow = newRows.length % populatedRowsLength;\n\n        while (newRow.length < populatedColumnsLength || visualColumnForPopulatedData <= endColumnFromSelection) {\n          var _this$hot$getCellMeta2 = this.hot.getCellMeta(startRow, visualColumnForPopulatedData),\n              skipColumnOnPaste = _this$hot$getCellMeta2.skipColumnOnPaste,\n              visualCol = _this$hot$getCellMeta2.visualCol;\n\n          visualColumnForPopulatedData = visualCol + 1;\n\n          if (skipColumnOnPaste === true) {\n            /* eslint-disable no-continue */\n            continue;\n          }\n\n          lastVisualColumn = visualCol;\n          var insertedColumn = newRow.length % populatedColumnsLength;\n          newRow.push(inputArray[insertedRow][insertedColumn]);\n        }\n\n        newRows.push(newRow);\n      }\n\n      this.hot.populateFromArray(startRow, startColumn, newRows, void 0, void 0, 'CopyPaste.paste', this.pasteMode);\n      return [startRow, startColumn, lastVisualRow, lastVisualColumn];\n    }\n    /**\r\n     * `copy` event callback on textarea element.\r\n     *\r\n     * @param {Event} event ClipboardEvent.\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onCopy\",\n    value: function onCopy(event) {\n      var priv = privatePool.get(this);\n\n      if (!this.hot.isListening() && !priv.isTriggeredByCopy || this.isEditorOpened()) {\n        return;\n      }\n\n      this.setCopyableText();\n      priv.isTriggeredByCopy = false;\n      var rangedData = this.getRangedData(this.copyableRanges);\n      var allowCopying = !!this.hot.runHooks('beforeCopy', rangedData, this.copyableRanges);\n\n      if (allowCopying) {\n        var textPlain = stringify(rangedData);\n\n        if (event && event.clipboardData) {\n          var textHTML = _dataToHTML(rangedData, this.hot.rootDocument);\n\n          event.clipboardData.setData('text/plain', textPlain);\n          event.clipboardData.setData('text/html', [META_HEAD, textHTML].join(''));\n        } else if (typeof ClipboardEvent === 'undefined') {\n          this.hot.rootWindow.clipboardData.setData('Text', textPlain);\n        }\n\n        this.hot.runHooks('afterCopy', rangedData, this.copyableRanges);\n      }\n\n      event.preventDefault();\n    }\n    /**\r\n     * `cut` event callback on textarea element.\r\n     *\r\n     * @param {Event} event ClipboardEvent.\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onCut\",\n    value: function onCut(event) {\n      var priv = privatePool.get(this);\n\n      if (!this.hot.isListening() && !priv.isTriggeredByCut || this.isEditorOpened()) {\n        return;\n      }\n\n      this.setCopyableText();\n      priv.isTriggeredByCut = false;\n      var rangedData = this.getRangedData(this.copyableRanges);\n      var allowCuttingOut = !!this.hot.runHooks('beforeCut', rangedData, this.copyableRanges);\n\n      if (allowCuttingOut) {\n        var textPlain = stringify(rangedData);\n\n        if (event && event.clipboardData) {\n          var textHTML = _dataToHTML(rangedData, this.hot.rootDocument);\n\n          event.clipboardData.setData('text/plain', textPlain);\n          event.clipboardData.setData('text/html', [META_HEAD, textHTML].join(''));\n        } else if (typeof ClipboardEvent === 'undefined') {\n          this.hot.rootWindow.clipboardData.setData('Text', textPlain);\n        }\n\n        this.hot.emptySelectedCells('CopyPaste.cut');\n        this.hot.runHooks('afterCut', rangedData, this.copyableRanges);\n      }\n\n      event.preventDefault();\n    }\n    /**\r\n     * `paste` event callback on textarea element.\r\n     *\r\n     * @param {Event} event ClipboardEvent or pseudo ClipboardEvent, if paste was called manually.\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onPaste\",\n    value: function onPaste(event) {\n      if (!this.hot.isListening() || this.isEditorOpened()) {\n        return;\n      }\n\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n\n      var pastedData;\n\n      if (event && typeof event.clipboardData !== 'undefined') {\n        var textHTML = sanitize(event.clipboardData.getData('text/html'), {\n          ADD_TAGS: ['meta'],\n          ADD_ATTR: ['content'],\n          FORCE_BODY: true\n        });\n\n        if (textHTML && /(<table)|(<TABLE)/g.test(textHTML)) {\n          var parsedConfig = htmlToGridSettings(textHTML, this.hot.rootDocument);\n          pastedData = parsedConfig.data;\n        } else {\n          pastedData = event.clipboardData.getData('text/plain');\n        }\n      } else if (typeof ClipboardEvent === 'undefined' && typeof this.hot.rootWindow.clipboardData !== 'undefined') {\n        pastedData = this.hot.rootWindow.clipboardData.getData('Text');\n      }\n\n      if (typeof pastedData === 'string') {\n        pastedData = parse(pastedData);\n      }\n\n      if (pastedData && pastedData.length === 0) {\n        return;\n      }\n\n      if (this.hot.runHooks('beforePaste', pastedData, this.copyableRanges) === false) {\n        return;\n      }\n\n      var _this$populateValues = this.populateValues(pastedData),\n          _this$populateValues2 = _slicedToArray(_this$populateValues, 4),\n          startRow = _this$populateValues2[0],\n          startColumn = _this$populateValues2[1],\n          endRow = _this$populateValues2[2],\n          endColumn = _this$populateValues2[3];\n\n      this.hot.selectCell(startRow, startColumn, Math.min(this.hot.countRows() - 1, endRow), Math.min(this.hot.countCols() - 1, endColumn));\n      this.hot.runHooks('afterPaste', pastedData, this.copyableRanges);\n    }\n    /**\r\n     * Add copy, cut and paste options to the Context Menu.\r\n     *\r\n     * @private\r\n     * @param {object} options Contains default added options of the Context Menu.\r\n     */\n\n  }, {\n    key: \"onAfterContextMenuDefaultOptions\",\n    value: function onAfterContextMenuDefaultOptions(options) {\n      options.items.push({\n        name: '---------'\n      }, copyItem(this), cutItem(this));\n    }\n    /**\r\n     * Force focus on focusableElement.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onAfterOnCellMouseUp\",\n    value: function onAfterOnCellMouseUp() {\n      // Changing focused element will remove current selection. It's unnecessary in case when we give possibility\n      // for fragment selection\n      if (!this.hot.isListening() || this.isEditorOpened() || this.hot.getSettings().fragmentSelection) {\n        return;\n      }\n\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n    }\n    /**\r\n     * Force focus on focusableElement after end of the selection.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onAfterSelectionEnd\",\n    value: function onAfterSelectionEnd() {\n      var _privatePool$get = privatePool.get(this),\n          isFragmentSelectionEnabled = _privatePool$get.isFragmentSelectionEnabled;\n\n      if (this.isEditorOpened()) {\n        return;\n      }\n\n      this.getOrCreateFocusableElement();\n\n      if (isFragmentSelectionEnabled && this.focusableElement.getFocusableElement() !== this.hot.rootDocument.activeElement && getSelectionText()) {\n        return;\n      }\n\n      this.setCopyableText();\n      this.focusableElement.focus();\n    }\n    /**\r\n     * `beforeKeyDown` listener to force focus of focusableElement.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onBeforeKeyDown\",\n    value: function onBeforeKeyDown() {\n      if (!this.hot.isListening() || this.isEditorOpened()) {\n        return;\n      }\n\n      var activeElement = this.hot.rootDocument.activeElement;\n      var activeEditor = this.hot.getActiveEditor();\n\n      if (!activeEditor || activeElement !== this.focusableElement.getFocusableElement() && activeElement !== activeEditor.select) {\n        return;\n      }\n\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n    }\n    /**\r\n     * Destroys the plugin instance.\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.focusableElement) {\n        destroyElement(this.focusableElement);\n        this.focusableElement = null;\n      }\n\n      _get(_getPrototypeOf(CopyPaste.prototype), \"destroy\", this).call(this);\n    }\n  }], [{\n    key: \"PLUGIN_KEY\",\n    get: function get() {\n      return PLUGIN_KEY;\n    }\n  }, {\n    key: \"PLUGIN_PRIORITY\",\n    get: function get() {\n      return PLUGIN_PRIORITY;\n    }\n  }]);\n\n  return CopyPaste;\n}(BasePlugin);","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/copyPaste/copyPaste.mjs"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","_typeof","obj","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","_get","property","receiver","Reflect","get","base","_superPropBase","desc","getOwnPropertyDescriptor","object","hasOwnProperty","_getPrototypeOf","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","BasePlugin","Hooks","stringify","parse","arrayEach","rangeEach","sanitize","getSelectionText","copyItem","cutItem","PasteEvent","createElement","destroyElement","_dataToHTML","htmlToGridSettings","getSingleton","register","PLUGIN_KEY","PLUGIN_PRIORITY","ROWS_LIMIT","COLUMNS_LIMIT","privatePool","WeakMap","META_HEAD","join","CopyPaste","_BasePlugin","_super","hotInstance","_this","columnsLimit","copyableRanges","focusableElement","pasteMode","rowsLimit","uiContainer","hot","rootDocument","body","set","isTriggeredByCopy","isTriggeredByCut","isBeginEditing","isFragmentSelectionEnabled","isEnabled","getSettings","enablePlugin","_this2","enabled","_this$hot$getSettings","settings","fragmentSelection","priv","isNaN","addHook","options","onAfterContextMenuDefaultOptions","onAfterOnCellMouseUp","onAfterSelectionEnd","onBeforeKeyDown","addLocalHook","event","onCopy","onCut","onPaste","updatePlugin","disablePlugin","getOrCreateFocusableElement","copy","focus","execCommand","cut","getRangedCopyableData","ranges","_this3","dataSet","copyableRows","copyableColumns","range","startRow","endRow","row","indexOf","startCol","endCol","column","rowSet","getCopyableData","getRangedData","_this4","paste","pastableText","undefined","pastableHtml","pasteData","clipboardData","setData","setCopyableText","selRange","getSelectedRangeLast","topLeft","getTopLeftCorner","bottomRight","getBottomRightCorner","col","finalEndRow","Math","min","finalEndCol","runHooks","editor","getActiveEditor","editableElement","TEXTAREA","setFocusableElement","useSecondaryElement","isEditorOpened","isOpened","populateValues","inputArray","selection","populatedRowsLength","populatedColumnsLength","newRows","_selection$getTopLeft","startColumn","_selection$getBottomR","endRowFromSelection","endColumnFromSelection","visualRowForPopulatedData","visualColumnForPopulatedData","lastVisualRow","lastVisualColumn","_this$hot$getCellMeta","getCellMeta","skipRowOnPaste","visualRow","newRow","insertedRow","_this$hot$getCellMeta2","skipColumnOnPaste","visualCol","insertedColumn","populateFromArray","isListening","rangedData","allowCopying","textPlain","textHTML","ClipboardEvent","rootWindow","preventDefault","allowCuttingOut","emptySelectedCells","pastedData","getData","ADD_TAGS","ADD_ATTR","FORCE_BODY","parsedConfig","data","_this$populateValues","_this$populateValues2","endColumn","selectCell","countRows","countCols","items","_privatePool$get","getFocusableElement","activeElement","activeEditor","select","destroy"],"mappings":"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","sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\r\n\r\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\r\n\r\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\r\n\r\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\r\n\r\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\r\n\r\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\r\n\r\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\r\n\r\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\r\n\r\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\r\n\r\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\r\n\r\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\r\n\r\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\r\n\r\nimport \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/es.weak-map.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\nimport \"core-js/modules/es.array.join.js\";\r\nimport \"core-js/modules/es.array.index-of.js\";\r\nimport \"core-js/modules/es.object.set-prototype-of.js\";\r\nimport \"core-js/modules/es.object.get-prototype-of.js\";\r\nimport \"core-js/modules/es.reflect.construct.js\";\r\nimport \"core-js/modules/es.reflect.get.js\";\r\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\r\nimport \"core-js/modules/es.symbol.js\";\r\nimport \"core-js/modules/es.symbol.description.js\";\r\nimport \"core-js/modules/es.symbol.iterator.js\";\r\nimport \"core-js/modules/es.array.slice.js\";\r\nimport \"core-js/modules/es.function.name.js\";\r\nimport \"core-js/modules/es.array.from.js\";\r\nimport { BasePlugin } from \"../base/index.mjs\";\r\nimport Hooks from \"../../pluginHooks.mjs\";\r\nimport { stringify, parse } from \"../../3rdparty/SheetClip/index.mjs\";\r\nimport { arrayEach } from \"../../helpers/array.mjs\";\r\nimport { rangeEach } from \"../../helpers/number.mjs\";\r\nimport { sanitize } from \"../../helpers/string.mjs\";\r\nimport { getSelectionText } from \"../../helpers/dom/element.mjs\";\r\nimport copyItem from \"./contextMenuItem/copy.mjs\";\r\nimport cutItem from \"./contextMenuItem/cut.mjs\";\r\nimport PasteEvent from \"./pasteEvent.mjs\";\r\nimport { createElement, destroyElement } from \"./focusableElement.mjs\";\r\nimport { _dataToHTML, htmlToGridSettings } from \"../../utils/parseTable.mjs\";\r\nHooks.getSingleton().register('afterCopyLimit');\r\nHooks.getSingleton().register('modifyCopyableRange');\r\nHooks.getSingleton().register('beforeCut');\r\nHooks.getSingleton().register('afterCut');\r\nHooks.getSingleton().register('beforePaste');\r\nHooks.getSingleton().register('afterPaste');\r\nHooks.getSingleton().register('beforeCopy');\r\nHooks.getSingleton().register('afterCopy');\r\nexport var PLUGIN_KEY = 'copyPaste';\r\nexport var PLUGIN_PRIORITY = 80;\r\nvar ROWS_LIMIT = 1000;\r\nvar COLUMNS_LIMIT = 1000;\r\nvar privatePool = new WeakMap();\r\nvar META_HEAD = ['<meta name=\"generator\" content=\"Handsontable\"/>', '<style type=\"text/css\">td{white-space:normal}br{mso-data-placement:same-cell}</style>'].join('');\r\n/* eslint-disable jsdoc/require-description-complete-sentence */\r\n\r\n/**\r\n * @description\r\n * This plugin enables the copy/paste functionality in the Handsontable. The functionality works for API, Context Menu,\r\n * using keyboard shortcuts and menu bar from the browser.\r\n * Possible values:\r\n * * `true` (to enable default options),\r\n * * `false` (to disable completely).\r\n *\r\n * or an object with values:\r\n * * `'columnsLimit'` (see {@link CopyPaste#columnsLimit})\r\n * * `'rowsLimit'` (see {@link CopyPaste#rowsLimit})\r\n * * `'pasteMode'` (see {@link CopyPaste#pasteMode})\r\n * * `'uiContainer'` (see {@link CopyPaste#uiContainer}).\r\n *\r\n * See [the copy/paste demo](https://handsontable.com/docs/demo-copy-paste.html) for examples.\r\n *\r\n * @example\r\n * ```js\r\n * // Enables the plugin with default values\r\n * copyPaste: true,\r\n * // Enables the plugin with custom values\r\n * copyPaste: {\r\n *   columnsLimit: 25,\r\n *   rowsLimit: 50,\r\n *   pasteMode: 'shift_down',\r\n *   uiContainer: document.body,\r\n * },\r\n * ```\r\n * @class CopyPaste\r\n * @plugin CopyPaste\r\n */\r\n\r\n/* eslint-enable jsdoc/require-description-complete-sentence */\r\n\r\nexport var CopyPaste = /*#__PURE__*/function (_BasePlugin) {\r\n  _inherits(CopyPaste, _BasePlugin);\r\n\r\n  var _super = _createSuper(CopyPaste);\r\n\r\n  function CopyPaste(hotInstance) {\r\n    var _this;\r\n\r\n    _classCallCheck(this, CopyPaste);\r\n\r\n    _this = _super.call(this, hotInstance);\r\n    /**\r\n     * Maximum number of columns than can be copied to clipboard using <kbd>CTRL</kbd> + <kbd>C</kbd>.\r\n     *\r\n     * @type {number}\r\n     * @default 1000\r\n     */\r\n\r\n    _this.columnsLimit = COLUMNS_LIMIT;\r\n    /**\r\n     * Ranges of the cells coordinates, which should be used to copy/cut/paste actions.\r\n     *\r\n     * @private\r\n     * @type {Array}\r\n     */\r\n\r\n    _this.copyableRanges = [];\r\n    /**\r\n     * Provides focusable element to support IME and copy/paste/cut actions.\r\n     *\r\n     * @type {FocusableWrapper}\r\n     */\r\n\r\n    _this.focusableElement = void 0;\r\n    /**\r\n     * Defines paste (<kbd>CTRL</kbd> + <kbd>V</kbd>) behavior.\r\n     * * Default value `\"overwrite\"` will paste clipboard value over current selection.\r\n     * * When set to `\"shift_down\"`, clipboard data will be pasted in place of current selection, while all selected cells are moved down.\r\n     * * When set to `\"shift_right\"`, clipboard data will be pasted in place of current selection, while all selected cells are moved right.\r\n     *\r\n     * @type {string}\r\n     * @default 'overwrite'\r\n     */\r\n\r\n    _this.pasteMode = 'overwrite';\r\n    /**\r\n     * Maximum number of rows than can be copied to clipboard using <kbd>CTRL</kbd> + <kbd>C</kbd>.\r\n     *\r\n     * @type {number}\r\n     * @default 1000\r\n     */\r\n\r\n    _this.rowsLimit = ROWS_LIMIT;\r\n    /**\r\n     * UI container for the secondary focusable element.\r\n     *\r\n     * @type {HTMLElement}\r\n     */\r\n\r\n    _this.uiContainer = _this.hot.rootDocument.body;\r\n    privatePool.set(_assertThisInitialized(_this), {\r\n      isTriggeredByCopy: false,\r\n      isTriggeredByCut: false,\r\n      isBeginEditing: false,\r\n      isFragmentSelectionEnabled: false\r\n    });\r\n    return _this;\r\n  }\r\n  /**\r\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\r\n   * hook and if it returns `true` than the {@link CopyPaste#enablePlugin} method is called.\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n\r\n\r\n  _createClass(CopyPaste, [{\r\n    key: \"isEnabled\",\r\n    value: function isEnabled() {\r\n      return !!this.hot.getSettings()[PLUGIN_KEY];\r\n    }\r\n    /**\r\n     * Enables the plugin functionality for this Handsontable instance.\r\n     */\r\n\r\n  }, {\r\n    key: \"enablePlugin\",\r\n    value: function enablePlugin() {\r\n      var _this2 = this;\r\n\r\n      if (this.enabled) {\r\n        return;\r\n      }\r\n\r\n      var _this$hot$getSettings = this.hot.getSettings(),\r\n          settings = _this$hot$getSettings[PLUGIN_KEY],\r\n          fragmentSelection = _this$hot$getSettings.fragmentSelection;\r\n\r\n      var priv = privatePool.get(this);\r\n      priv.isFragmentSelectionEnabled = !!fragmentSelection;\r\n\r\n      if (_typeof(settings) === 'object') {\r\n        this.pasteMode = settings.pasteMode || this.pasteMode;\r\n        this.rowsLimit = isNaN(settings.rowsLimit) ? this.rowsLimit : settings.rowsLimit;\r\n        this.columnsLimit = isNaN(settings.columnsLimit) ? this.columnsLimit : settings.columnsLimit;\r\n        this.uiContainer = settings.uiContainer || this.uiContainer;\r\n      }\r\n\r\n      this.addHook('afterContextMenuDefaultOptions', function (options) {\r\n        return _this2.onAfterContextMenuDefaultOptions(options);\r\n      });\r\n      this.addHook('afterOnCellMouseUp', function () {\r\n        return _this2.onAfterOnCellMouseUp();\r\n      });\r\n      this.addHook('afterSelectionEnd', function () {\r\n        return _this2.onAfterSelectionEnd();\r\n      });\r\n      this.addHook('beforeKeyDown', function () {\r\n        return _this2.onBeforeKeyDown();\r\n      });\r\n      this.focusableElement = createElement(this.uiContainer);\r\n      this.focusableElement.addLocalHook('copy', function (event) {\r\n        return _this2.onCopy(event);\r\n      }).addLocalHook('cut', function (event) {\r\n        return _this2.onCut(event);\r\n      }).addLocalHook('paste', function (event) {\r\n        return _this2.onPaste(event);\r\n      });\r\n\r\n      _get(_getPrototypeOf(CopyPaste.prototype), \"enablePlugin\", this).call(this);\r\n    }\r\n    /**\r\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\r\n     */\r\n\r\n  }, {\r\n    key: \"updatePlugin\",\r\n    value: function updatePlugin() {\r\n      this.disablePlugin();\r\n      this.enablePlugin();\r\n      this.getOrCreateFocusableElement();\r\n\r\n      _get(_getPrototypeOf(CopyPaste.prototype), \"updatePlugin\", this).call(this);\r\n    }\r\n    /**\r\n     * Disables the plugin functionality for this Handsontable instance.\r\n     */\r\n\r\n  }, {\r\n    key: \"disablePlugin\",\r\n    value: function disablePlugin() {\r\n      if (this.focusableElement) {\r\n        destroyElement(this.focusableElement);\r\n      }\r\n\r\n      _get(_getPrototypeOf(CopyPaste.prototype), \"disablePlugin\", this).call(this);\r\n    }\r\n    /**\r\n     * Copies the selected cell into the clipboard.\r\n     */\r\n\r\n  }, {\r\n    key: \"copy\",\r\n    value: function copy() {\r\n      var priv = privatePool.get(this);\r\n      priv.isTriggeredByCopy = true;\r\n      this.getOrCreateFocusableElement();\r\n      this.focusableElement.focus();\r\n      this.hot.rootDocument.execCommand('copy');\r\n    }\r\n    /**\r\n     * Cuts the selected cell into the clipboard.\r\n     */\r\n\r\n  }, {\r\n    key: \"cut\",\r\n    value: function cut() {\r\n      var priv = privatePool.get(this);\r\n      priv.isTriggeredByCut = true;\r\n      this.getOrCreateFocusableElement();\r\n      this.focusableElement.focus();\r\n      this.hot.rootDocument.execCommand('cut');\r\n    }\r\n    /**\r\n     * Creates copyable text releated to range objects.\r\n     *\r\n     * @param {object[]} ranges Array of objects with properties `startRow`, `endRow`, `startCol` and `endCol`.\r\n     * @returns {string} Returns string which will be copied into clipboard.\r\n     */\r\n\r\n  }, {\r\n    key: \"getRangedCopyableData\",\r\n    value: function getRangedCopyableData(ranges) {\r\n      var _this3 = this;\r\n\r\n      var dataSet = [];\r\n      var copyableRows = [];\r\n      var copyableColumns = []; // Count all copyable rows and columns\r\n\r\n      arrayEach(ranges, function (range) {\r\n        rangeEach(range.startRow, range.endRow, function (row) {\r\n          if (copyableRows.indexOf(row) === -1) {\r\n            copyableRows.push(row);\r\n          }\r\n        });\r\n        rangeEach(range.startCol, range.endCol, function (column) {\r\n          if (copyableColumns.indexOf(column) === -1) {\r\n            copyableColumns.push(column);\r\n          }\r\n        });\r\n      }); // Concat all rows and columns data defined in ranges into one copyable string\r\n\r\n      arrayEach(copyableRows, function (row) {\r\n        var rowSet = [];\r\n        arrayEach(copyableColumns, function (column) {\r\n          rowSet.push(_this3.hot.getCopyableData(row, column));\r\n        });\r\n        dataSet.push(rowSet);\r\n      });\r\n      return stringify(dataSet);\r\n    }\r\n    /**\r\n     * Creates copyable text releated to range objects.\r\n     *\r\n     * @param {object[]} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.\r\n     * @returns {Array[]} Returns array of arrays which will be copied into clipboard.\r\n     */\r\n\r\n  }, {\r\n    key: \"getRangedData\",\r\n    value: function getRangedData(ranges) {\r\n      var _this4 = this;\r\n\r\n      var dataSet = [];\r\n      var copyableRows = [];\r\n      var copyableColumns = []; // Count all copyable rows and columns\r\n\r\n      arrayEach(ranges, function (range) {\r\n        rangeEach(range.startRow, range.endRow, function (row) {\r\n          if (copyableRows.indexOf(row) === -1) {\r\n            copyableRows.push(row);\r\n          }\r\n        });\r\n        rangeEach(range.startCol, range.endCol, function (column) {\r\n          if (copyableColumns.indexOf(column) === -1) {\r\n            copyableColumns.push(column);\r\n          }\r\n        });\r\n      }); // Concat all rows and columns data defined in ranges into one copyable string\r\n\r\n      arrayEach(copyableRows, function (row) {\r\n        var rowSet = [];\r\n        arrayEach(copyableColumns, function (column) {\r\n          rowSet.push(_this4.hot.getCopyableData(row, column));\r\n        });\r\n        dataSet.push(rowSet);\r\n      });\r\n      return dataSet;\r\n    }\r\n    /**\r\n     * Simulates the paste action.\r\n     *\r\n     * @param {string} pastableText Value as raw string to paste.\r\n     * @param {string} [pastableHtml=''] Value as HTML to paste.\r\n     */\r\n\r\n  }, {\r\n    key: \"paste\",\r\n    value: function paste() {\r\n      var pastableText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\r\n      var pastableHtml = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : pastableText;\r\n\r\n      if (!pastableText && !pastableHtml) {\r\n        return;\r\n      }\r\n\r\n      var pasteData = new PasteEvent();\r\n\r\n      if (pastableText) {\r\n        pasteData.clipboardData.setData('text/plain', pastableText);\r\n      }\r\n\r\n      if (pastableHtml) {\r\n        pasteData.clipboardData.setData('text/html', pastableHtml);\r\n      }\r\n\r\n      this.getOrCreateFocusableElement();\r\n      this.onPaste(pasteData);\r\n    }\r\n    /**\r\n     * Prepares copyable text from the cells selection in the invisible textarea.\r\n     */\r\n\r\n  }, {\r\n    key: \"setCopyableText\",\r\n    value: function setCopyableText() {\r\n      var selRange = this.hot.getSelectedRangeLast();\r\n\r\n      if (!selRange) {\r\n        return;\r\n      }\r\n\r\n      var topLeft = selRange.getTopLeftCorner();\r\n      var bottomRight = selRange.getBottomRightCorner();\r\n      var startRow = topLeft.row;\r\n      var startCol = topLeft.col;\r\n      var endRow = bottomRight.row;\r\n      var endCol = bottomRight.col;\r\n      var finalEndRow = Math.min(endRow, startRow + this.rowsLimit - 1);\r\n      var finalEndCol = Math.min(endCol, startCol + this.columnsLimit - 1);\r\n      this.copyableRanges.length = 0;\r\n      this.copyableRanges.push({\r\n        startRow: startRow,\r\n        startCol: startCol,\r\n        endRow: finalEndRow,\r\n        endCol: finalEndCol\r\n      });\r\n      this.copyableRanges = this.hot.runHooks('modifyCopyableRange', this.copyableRanges);\r\n\r\n      if (endRow !== finalEndRow || endCol !== finalEndCol) {\r\n        this.hot.runHooks('afterCopyLimit', endRow - startRow + 1, endCol - startCol + 1, this.rowsLimit, this.columnsLimit);\r\n      }\r\n    }\r\n    /**\r\n     * Force focus on editable element.\r\n     *\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"getOrCreateFocusableElement\",\r\n    value: function getOrCreateFocusableElement() {\r\n      var editor = this.hot.getActiveEditor();\r\n      var editableElement = editor ? editor.TEXTAREA : void 0;\r\n\r\n      if (editableElement) {\r\n        this.focusableElement.setFocusableElement(editableElement);\r\n      } else {\r\n        this.focusableElement.useSecondaryElement();\r\n      }\r\n    }\r\n    /**\r\n     * Verifies if editor exists and is open.\r\n     *\r\n     * @private\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"isEditorOpened\",\r\n    value: function isEditorOpened() {\r\n      var editor = this.hot.getActiveEditor();\r\n      return editor && editor.isOpened();\r\n    }\r\n    /**\r\n     * Prepares new values to populate them into datasource.\r\n     *\r\n     * @private\r\n     * @param {Array} inputArray An array of the data to populate.\r\n     * @param {Array} [selection] The selection which indicates from what position the data will be populated.\r\n     * @returns {Array} Range coordinates after populate data.\r\n     */\r\n\r\n  }, {\r\n    key: \"populateValues\",\r\n    value: function populateValues(inputArray) {\r\n      var selection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.hot.getSelectedRangeLast();\r\n\r\n      if (!inputArray.length) {\r\n        return;\r\n      }\r\n\r\n      var populatedRowsLength = inputArray.length;\r\n      var populatedColumnsLength = inputArray[0].length;\r\n      var newRows = [];\r\n\r\n      var _selection$getTopLeft = selection.getTopLeftCorner(),\r\n          startRow = _selection$getTopLeft.row,\r\n          startColumn = _selection$getTopLeft.col;\r\n\r\n      var _selection$getBottomR = selection.getBottomRightCorner(),\r\n          endRowFromSelection = _selection$getBottomR.row,\r\n          endColumnFromSelection = _selection$getBottomR.col;\r\n\r\n      var visualRowForPopulatedData = startRow;\r\n      var visualColumnForPopulatedData = startColumn;\r\n      var lastVisualRow = startRow;\r\n      var lastVisualColumn = startColumn; // We try to populate just all copied data or repeat copied data within a selection. Please keep in mind that we\r\n      // don't know whether populated data is bigger than selection on start as there are some cells for which values\r\n      // should be not inserted (it's known right after getting cell meta).\r\n\r\n      while (newRows.length < populatedRowsLength || visualRowForPopulatedData <= endRowFromSelection) {\r\n        var _this$hot$getCellMeta = this.hot.getCellMeta(visualRowForPopulatedData, startColumn),\r\n            skipRowOnPaste = _this$hot$getCellMeta.skipRowOnPaste,\r\n            visualRow = _this$hot$getCellMeta.visualRow;\r\n\r\n        visualRowForPopulatedData = visualRow + 1;\r\n\r\n        if (skipRowOnPaste === true) {\r\n          /* eslint-disable no-continue */\r\n          continue;\r\n        }\r\n\r\n        lastVisualRow = visualRow;\r\n        visualColumnForPopulatedData = startColumn;\r\n        var newRow = [];\r\n        var insertedRow = newRows.length % populatedRowsLength;\r\n\r\n        while (newRow.length < populatedColumnsLength || visualColumnForPopulatedData <= endColumnFromSelection) {\r\n          var _this$hot$getCellMeta2 = this.hot.getCellMeta(startRow, visualColumnForPopulatedData),\r\n              skipColumnOnPaste = _this$hot$getCellMeta2.skipColumnOnPaste,\r\n              visualCol = _this$hot$getCellMeta2.visualCol;\r\n\r\n          visualColumnForPopulatedData = visualCol + 1;\r\n\r\n          if (skipColumnOnPaste === true) {\r\n            /* eslint-disable no-continue */\r\n            continue;\r\n          }\r\n\r\n          lastVisualColumn = visualCol;\r\n          var insertedColumn = newRow.length % populatedColumnsLength;\r\n          newRow.push(inputArray[insertedRow][insertedColumn]);\r\n        }\r\n\r\n        newRows.push(newRow);\r\n      }\r\n\r\n      this.hot.populateFromArray(startRow, startColumn, newRows, void 0, void 0, 'CopyPaste.paste', this.pasteMode);\r\n      return [startRow, startColumn, lastVisualRow, lastVisualColumn];\r\n    }\r\n    /**\r\n     * `copy` event callback on textarea element.\r\n     *\r\n     * @param {Event} event ClipboardEvent.\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"onCopy\",\r\n    value: function onCopy(event) {\r\n      var priv = privatePool.get(this);\r\n\r\n      if (!this.hot.isListening() && !priv.isTriggeredByCopy || this.isEditorOpened()) {\r\n        return;\r\n      }\r\n\r\n      this.setCopyableText();\r\n      priv.isTriggeredByCopy = false;\r\n      var rangedData = this.getRangedData(this.copyableRanges);\r\n      var allowCopying = !!this.hot.runHooks('beforeCopy', rangedData, this.copyableRanges);\r\n\r\n      if (allowCopying) {\r\n        var textPlain = stringify(rangedData);\r\n\r\n        if (event && event.clipboardData) {\r\n          var textHTML = _dataToHTML(rangedData, this.hot.rootDocument);\r\n\r\n          event.clipboardData.setData('text/plain', textPlain);\r\n          event.clipboardData.setData('text/html', [META_HEAD, textHTML].join(''));\r\n        } else if (typeof ClipboardEvent === 'undefined') {\r\n          this.hot.rootWindow.clipboardData.setData('Text', textPlain);\r\n        }\r\n\r\n        this.hot.runHooks('afterCopy', rangedData, this.copyableRanges);\r\n      }\r\n\r\n      event.preventDefault();\r\n    }\r\n    /**\r\n     * `cut` event callback on textarea element.\r\n     *\r\n     * @param {Event} event ClipboardEvent.\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"onCut\",\r\n    value: function onCut(event) {\r\n      var priv = privatePool.get(this);\r\n\r\n      if (!this.hot.isListening() && !priv.isTriggeredByCut || this.isEditorOpened()) {\r\n        return;\r\n      }\r\n\r\n      this.setCopyableText();\r\n      priv.isTriggeredByCut = false;\r\n      var rangedData = this.getRangedData(this.copyableRanges);\r\n      var allowCuttingOut = !!this.hot.runHooks('beforeCut', rangedData, this.copyableRanges);\r\n\r\n      if (allowCuttingOut) {\r\n        var textPlain = stringify(rangedData);\r\n\r\n        if (event && event.clipboardData) {\r\n          var textHTML = _dataToHTML(rangedData, this.hot.rootDocument);\r\n\r\n          event.clipboardData.setData('text/plain', textPlain);\r\n          event.clipboardData.setData('text/html', [META_HEAD, textHTML].join(''));\r\n        } else if (typeof ClipboardEvent === 'undefined') {\r\n          this.hot.rootWindow.clipboardData.setData('Text', textPlain);\r\n        }\r\n\r\n        this.hot.emptySelectedCells('CopyPaste.cut');\r\n        this.hot.runHooks('afterCut', rangedData, this.copyableRanges);\r\n      }\r\n\r\n      event.preventDefault();\r\n    }\r\n    /**\r\n     * `paste` event callback on textarea element.\r\n     *\r\n     * @param {Event} event ClipboardEvent or pseudo ClipboardEvent, if paste was called manually.\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"onPaste\",\r\n    value: function onPaste(event) {\r\n      if (!this.hot.isListening() || this.isEditorOpened()) {\r\n        return;\r\n      }\r\n\r\n      if (event && event.preventDefault) {\r\n        event.preventDefault();\r\n      }\r\n\r\n      var pastedData;\r\n\r\n      if (event && typeof event.clipboardData !== 'undefined') {\r\n        var textHTML = sanitize(event.clipboardData.getData('text/html'), {\r\n          ADD_TAGS: ['meta'],\r\n          ADD_ATTR: ['content'],\r\n          FORCE_BODY: true\r\n        });\r\n\r\n        if (textHTML && /(<table)|(<TABLE)/g.test(textHTML)) {\r\n          var parsedConfig = htmlToGridSettings(textHTML, this.hot.rootDocument);\r\n          pastedData = parsedConfig.data;\r\n        } else {\r\n          pastedData = event.clipboardData.getData('text/plain');\r\n        }\r\n      } else if (typeof ClipboardEvent === 'undefined' && typeof this.hot.rootWindow.clipboardData !== 'undefined') {\r\n        pastedData = this.hot.rootWindow.clipboardData.getData('Text');\r\n      }\r\n\r\n      if (typeof pastedData === 'string') {\r\n        pastedData = parse(pastedData);\r\n      }\r\n\r\n      if (pastedData && pastedData.length === 0) {\r\n        return;\r\n      }\r\n\r\n      if (this.hot.runHooks('beforePaste', pastedData, this.copyableRanges) === false) {\r\n        return;\r\n      }\r\n\r\n      var _this$populateValues = this.populateValues(pastedData),\r\n          _this$populateValues2 = _slicedToArray(_this$populateValues, 4),\r\n          startRow = _this$populateValues2[0],\r\n          startColumn = _this$populateValues2[1],\r\n          endRow = _this$populateValues2[2],\r\n          endColumn = _this$populateValues2[3];\r\n\r\n      this.hot.selectCell(startRow, startColumn, Math.min(this.hot.countRows() - 1, endRow), Math.min(this.hot.countCols() - 1, endColumn));\r\n      this.hot.runHooks('afterPaste', pastedData, this.copyableRanges);\r\n    }\r\n    /**\r\n     * Add copy, cut and paste options to the Context Menu.\r\n     *\r\n     * @private\r\n     * @param {object} options Contains default added options of the Context Menu.\r\n     */\r\n\r\n  }, {\r\n    key: \"onAfterContextMenuDefaultOptions\",\r\n    value: function onAfterContextMenuDefaultOptions(options) {\r\n      options.items.push({\r\n        name: '---------'\r\n      }, copyItem(this), cutItem(this));\r\n    }\r\n    /**\r\n     * Force focus on focusableElement.\r\n     *\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"onAfterOnCellMouseUp\",\r\n    value: function onAfterOnCellMouseUp() {\r\n      // Changing focused element will remove current selection. It's unnecessary in case when we give possibility\r\n      // for fragment selection\r\n      if (!this.hot.isListening() || this.isEditorOpened() || this.hot.getSettings().fragmentSelection) {\r\n        return;\r\n      }\r\n\r\n      this.getOrCreateFocusableElement();\r\n      this.focusableElement.focus();\r\n    }\r\n    /**\r\n     * Force focus on focusableElement after end of the selection.\r\n     *\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"onAfterSelectionEnd\",\r\n    value: function onAfterSelectionEnd() {\r\n      var _privatePool$get = privatePool.get(this),\r\n          isFragmentSelectionEnabled = _privatePool$get.isFragmentSelectionEnabled;\r\n\r\n      if (this.isEditorOpened()) {\r\n        return;\r\n      }\r\n\r\n      this.getOrCreateFocusableElement();\r\n\r\n      if (isFragmentSelectionEnabled && this.focusableElement.getFocusableElement() !== this.hot.rootDocument.activeElement && getSelectionText()) {\r\n        return;\r\n      }\r\n\r\n      this.setCopyableText();\r\n      this.focusableElement.focus();\r\n    }\r\n    /**\r\n     * `beforeKeyDown` listener to force focus of focusableElement.\r\n     *\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"onBeforeKeyDown\",\r\n    value: function onBeforeKeyDown() {\r\n      if (!this.hot.isListening() || this.isEditorOpened()) {\r\n        return;\r\n      }\r\n\r\n      var activeElement = this.hot.rootDocument.activeElement;\r\n      var activeEditor = this.hot.getActiveEditor();\r\n\r\n      if (!activeEditor || activeElement !== this.focusableElement.getFocusableElement() && activeElement !== activeEditor.select) {\r\n        return;\r\n      }\r\n\r\n      this.getOrCreateFocusableElement();\r\n      this.focusableElement.focus();\r\n    }\r\n    /**\r\n     * Destroys the plugin instance.\r\n     */\r\n\r\n  }, {\r\n    key: \"destroy\",\r\n    value: function destroy() {\r\n      if (this.focusableElement) {\r\n        destroyElement(this.focusableElement);\r\n        this.focusableElement = null;\r\n      }\r\n\r\n      _get(_getPrototypeOf(CopyPaste.prototype), \"destroy\", this).call(this);\r\n    }\r\n  }], [{\r\n    key: \"PLUGIN_KEY\",\r\n    get: function get() {\r\n      return PLUGIN_KEY;\r\n    }\r\n  }, {\r\n    key: \"PLUGIN_PRIORITY\",\r\n    get: function get() {\r\n      return PLUGIN_PRIORITY;\r\n    }\r\n  }]);\r\n\r\n  return CopyPaste;\r\n}(BasePlugin);"]},"metadata":{},"sourceType":"module"}