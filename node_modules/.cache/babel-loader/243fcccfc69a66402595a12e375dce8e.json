{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\dragAndDrop\\\\dragAndDrop.js\";\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Dropzone from 'react-dropzone-uploader';\nimport React from 'react';\nimport { message } from 'antd';\nimport Alert from '@material-ui/lab/Alert';\nimport Collapse from '@material-ui/core/Collapse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Layout = ({\n  input,\n  previews,\n  submitButton,\n  dropzoneProps,\n  files,\n  extra: {\n    maxFiles\n  }\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [submitButton, /*#__PURE__*/_jsxDEV(\"div\", { ...dropzoneProps,\n      children: [previews, files.length < maxFiles && input]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Layout;\n\nclass DragAndDrop extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileList: [],\n      success: false,\n      error: false,\n      uploaded: false,\n      errorAlerts: []\n    };\n\n    this.handleSubmit = (files, allFiles) => {\n      this.setState({\n        success: false,\n        uploaded: false,\n        error: false,\n        errorAlerts: [],\n        counter: 0\n      });\n      allFiles.forEach(file => {\n        const formData = new FormData();\n        formData.append('file', file.file);\n        this.uploadFile(formData);\n        file.remove();\n      });\n    };\n  }\n\n  async uploadFile(file) {\n    await fetch('http://localhost:5000/upload', {\n      // content-type header should not be specified!\n      method: 'POST',\n      body: file\n    }).then(response => {\n      // Do something with the successful response\n      if (response.status === 200) {\n        console.log(\"ADSAD\");\n\n        if (!this.state.success) {\n          this.setState({\n            success: true\n          });\n        }\n\n        let filename = null;\n\n        for (let value of file.values()) {\n          filename = value.name;\n        }\n\n        let extension = \"\";\n        let i = filename.lastIndexOf('.');\n\n        if (i > 0) {\n          extension = filename.substring(i + 1);\n        }\n\n        if (extension === \"pdf\") {\n          let body = {\n            fileName: filename,\n            user: this.props.user\n          };\n          fetch('http://localhost:5000/uploadHis', {\n            // content-type header should not be specified!\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n          }).then(response => console.log(response.json())).catch(error => message.error(error));\n        }\n      } else {\n        for (let value of file.values()) {\n          let joined = this.state.errorAlerts.concat(value.name);\n          this.setState({\n            errorAlerts: joined,\n            error: true\n          });\n        }\n      }\n    }).catch(error => message.error(error));\n  }\n\n  render() {\n    const errorAlerts = this.state.errorAlerts;\n    let errors = [];\n    console.log(errorAlerts);\n\n    if (errorAlerts.length > 1) {\n      for (let i = 0; i < errorAlerts.length; i++) {\n        let extension = \"\";\n        let j = errorAlerts[i].lastIndexOf('.');\n\n        if (j > 0) {\n          extension = errorAlerts[i].substring(j + 1);\n        }\n\n        if (extension === 'zip' || extension === 'pdf') {\n          errors.push( /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            children: [\"The file \", errorAlerts[i], \" already exists!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 23\n          }, this));\n        } else {\n          errors.push( /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            children: [\"The file \", errorAlerts[i], \" has an invalid format!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 23\n          }, this));\n        }\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Dropzone, {\n        LayoutComponent: Layout,\n        onSubmit: this.handleSubmit,\n        inputContent: \"Drop isometrics here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: this.state.success,\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          children: \"The files have been uploaded!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: this.state.error,\n        children: errors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default DragAndDrop;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/dragAndDrop/dragAndDrop.js"],"names":["Dropzone","React","message","Alert","Collapse","Layout","input","previews","submitButton","dropzoneProps","files","extra","maxFiles","length","DragAndDrop","Component","state","fileList","success","error","uploaded","errorAlerts","handleSubmit","allFiles","setState","counter","forEach","file","formData","FormData","append","uploadFile","remove","fetch","method","body","then","response","status","console","log","filename","value","values","name","extension","i","lastIndexOf","substring","fileName","user","props","headers","JSON","stringify","json","catch","joined","concat","render","errors","j","push"],"mappings":"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","sourcesContent":["import 'react-dropzone-uploader/dist/styles.css'\r\nimport Dropzone from 'react-dropzone-uploader'\r\nimport React from 'react'\r\nimport {message} from'antd'\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse'\r\n\r\nconst Layout = ({ input, previews, submitButton, dropzoneProps, files, extra: { maxFiles } }) => {\r\n  return (\r\n    <div>\r\n      \r\n      {submitButton}\r\n      <div {...dropzoneProps}>\r\n      \r\n      {previews}\r\n      {files.length < maxFiles && input}\r\n        \r\n      </div>\r\n\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nclass DragAndDrop extends React.Component{\r\n\r\n  state = {\r\n    fileList: [],\r\n    success: false,\r\n    error: false,\r\n    uploaded: false,\r\n    errorAlerts: [],\r\n  };\r\n\r\n  async uploadFile(file) {\r\n\r\n    await fetch('http://localhost:5000/upload', {\r\n      // content-type header should not be specified!\r\n      method: 'POST',\r\n      body: file,\r\n    })\r\n      .then(response => {\r\n        // Do something with the successful response\r\n        if (response.status === 200){\r\n          console.log(\"ADSAD\")\r\n          if(!this.state.success){\r\n              this.setState({\r\n                success : true,\r\n              })\r\n          }\r\n\r\n          let filename = null;\r\n          for (let value of file.values()){\r\n            filename = value.name\r\n          }\r\n          let extension = \"\";\r\n          let i = filename.lastIndexOf('.');\r\n          if (i > 0) {\r\n            extension = filename.substring(i+1);\r\n          }\r\n          if(extension === \"pdf\"){\r\n            let body =  {\r\n              fileName: filename,\r\n              user: this.props.user,\r\n            }\r\n            fetch('http://localhost:5000/uploadHis', {\r\n              // content-type header should not be specified!\r\n              method: 'POST',\r\n              headers: {\r\n                \"Content-Type\": \"application/json\"\r\n              },\r\n              body: JSON.stringify(body)\r\n            }).then(response => console.log(response.json()))\r\n            .catch(error => message.error(error))\r\n          }\r\n        }else{\r\n          for (let value of file.values()) {\r\n            let joined = this.state.errorAlerts.concat(value.name);\r\n            this.setState({\r\n              errorAlerts : joined,\r\n              error: true\r\n            })\r\n          }\r\n        }\r\n        \r\n      })\r\n      .catch(error => message.error(error)\r\n    );\r\n  }\r\n\r\n  handleSubmit = (files, allFiles) => {\r\n    this.setState({\r\n      success: false,\r\n      uploaded: false,\r\n      error: false,\r\n      errorAlerts: [],\r\n      counter: 0\r\n    })\r\n\r\n    allFiles.forEach(file => {\r\n      \r\n      const formData  = new FormData();\r\n      formData.append('file', file.file);      \r\n      this.uploadFile(formData);\r\n      file.remove();\r\n\r\n    });    \r\n  }\r\n\r\n  render(){\r\n    \r\n    const errorAlerts = this.state.errorAlerts;\r\n    let errors = []\r\n    console.log(errorAlerts)\r\n    if(errorAlerts.length > 1){\r\n      for(let i = 0; i < errorAlerts.length; i++){\r\n        let extension = \"\";\r\n        let j = errorAlerts[i].lastIndexOf('.');\r\n        if (j > 0) {\r\n          extension = errorAlerts[i].substring(j+1);\r\n        }\r\n        if (extension === 'zip' || extension === 'pdf' ){\r\n          errors.push(<Alert severity=\"error\"\r\n          >\r\n            The file {errorAlerts[i]} already exists!\r\n\r\n          </Alert>)\r\n        }else{\r\n          errors.push(<Alert severity=\"error\"\r\n          >\r\n            The file {errorAlerts[i]} has an invalid format!\r\n\r\n          </Alert>)\r\n        }\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <Dropzone\r\n          LayoutComponent={Layout}\r\n          onSubmit={this.handleSubmit}\r\n          inputContent=\"Drop isometrics here\"\r\n        />\r\n        <Collapse in={this.state.success}>\r\n\r\n            <Alert\r\n            >\r\n              The files have been uploaded!\r\n\r\n            </Alert>\r\n\r\n        </Collapse>\r\n        <Collapse in={this.state.error}>\r\n            {errors}\r\n\r\n        </Collapse>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DragAndDrop;"]},"metadata":{},"sourceType":"module"}