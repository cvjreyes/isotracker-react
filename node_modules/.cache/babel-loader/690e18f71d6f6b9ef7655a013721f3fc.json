{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\dragAndDrop\\\\dragAndDrop.js\";\n//Drag and drop para subir isometricas\nimport React, { useEffect } from 'react';\nimport 'antd/dist/antd.css';\nimport { Upload, message, Button } from 'antd';\nimport { InboxOutlined } from '@ant-design/icons';\nimport { Redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DragAndDrop extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileList: [],\n      uploading: false,\n      redirect: null\n    };\n  }\n\n  render() {\n    const {\n      Dragger\n    } = Upload;\n    var r;\n\n    const handleUpload = () => {\n      this.state.fileList.forEach(file => {\n        const formData = new FormData();\n        formData.append('file', file);\n        uploadFile(formData);\n      });\n      this.setState({\n        redirect: true\n      });\n    };\n\n    if (this.state.redirect) {\n      console.log(\"ASDSADS\");\n      r = /*#__PURE__*/_jsxDEV(Redirect, {\n        to: '/'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this);\n    }\n\n    function uploadFile(file) {\n      fetch('http://localhost:5000/upload', {\n        // content-type header should not be specified!\n        method: 'POST',\n        body: file\n      }).then(response => response.json()).then(success => {\n        // Do something with the successful response\n        message.success('Files uploaded successfully.');\n      }).catch(error => console.log(error));\n    }\n\n    const props = {\n      name: 'file',\n      multiple: true,\n      action: 'http://localhost:5000/upload',\n      onRemove: file => {\n        this.setState(state => {\n          const index = state.fileList.indexOf(file);\n          const newFileList = state.fileList.slice();\n          newFileList.splice(index, 1);\n          return {\n            fileList: newFileList\n          };\n        });\n      },\n      beforeUpload: file => {\n        this.setState(state => ({\n          fileList: [...state.fileList, file]\n        }));\n        return false;\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: d\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default DragAndDrop;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/dragAndDrop/dragAndDrop.js"],"names":["React","useEffect","Upload","message","Button","InboxOutlined","Redirect","DragAndDrop","Component","state","fileList","uploading","redirect","render","Dragger","r","handleUpload","forEach","file","formData","FormData","append","uploadFile","setState","console","log","fetch","method","body","then","response","json","success","catch","error","props","name","multiple","action","onRemove","index","indexOf","newFileList","slice","splice","beforeUpload","d"],"mappings":";AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,oBAAP;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA2BC,MAA3B,QAAwC,MAAxC;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAAQC,QAAR,QAAuB,kBAAvB;;;AAGA,MAAMC,WAAN,SAA0BP,KAAK,CAACQ,SAAhC,CAAyC;AAAA;AAAA;AAAA,SAEvCC,KAFuC,GAE/B;AACNC,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,SAAS,EAAE,KAFL;AAGNC,MAAAA,QAAQ,EAAE;AAHJ,KAF+B;AAAA;;AAQzCC,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEC,MAAAA;AAAF,QAAcZ,MAApB;AAEA,QAAIa,CAAJ;;AAEA,UAAMC,YAAY,GAAG,MAAK;AAExB,WAAKP,KAAL,CAAWC,QAAX,CAAoBO,OAApB,CAA4BC,IAAI,IAAI;AAClC,cAAMC,QAAQ,GAAI,IAAIC,QAAJ,EAAlB;AACAD,QAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBH,IAAxB;AACAI,QAAAA,UAAU,CAACH,QAAD,CAAV;AACD,OAJD;AAKA,WAAKI,QAAL,CAAc;AACZX,QAAAA,QAAQ,EAAE;AADE,OAAd;AAGD,KAVD;;AAYA,QAAG,KAAKH,KAAL,CAAWG,QAAd,EAAuB;AACrBY,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAV,MAAAA,CAAC,gBAAG,QAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AAAd;AAAA;AAAA;AAAA;AAAA,cAAJ;AACD;;AAGD,aAASO,UAAT,CAAoBJ,IAApB,EAA0B;AACxBQ,MAAAA,KAAK,CAAC,8BAAD,EAAiC;AACpC;AACAC,QAAAA,MAAM,EAAE,MAF4B;AAGpCC,QAAAA,IAAI,EAAEV;AAH8B,OAAjC,CAAL,CAKGW,IALH,CAKQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALpB,EAMGF,IANH,CAMQG,OAAO,IAAI;AACf;AACA7B,QAAAA,OAAO,CAAC6B,OAAR,CAAgB,8BAAhB;AACD,OATH,EAUGC,KAVH,CAUSC,KAAK,IAAIV,OAAO,CAACC,GAAR,CAAYS,KAAZ,CAVlB;AAYD;;AAED,UAAMC,KAAK,GAAG;AACZC,MAAAA,IAAI,EAAE,MADM;AAEZC,MAAAA,QAAQ,EAAE,IAFE;AAGZC,MAAAA,MAAM,EAAE,8BAHI;AAIZC,MAAAA,QAAQ,EAAErB,IAAI,IAAI;AAChB,aAAKK,QAAL,CAAcd,KAAK,IAAI;AACrB,gBAAM+B,KAAK,GAAG/B,KAAK,CAACC,QAAN,CAAe+B,OAAf,CAAuBvB,IAAvB,CAAd;AACA,gBAAMwB,WAAW,GAAGjC,KAAK,CAACC,QAAN,CAAeiC,KAAf,EAApB;AACAD,UAAAA,WAAW,CAACE,MAAZ,CAAmBJ,KAAnB,EAA0B,CAA1B;AACA,iBAAO;AACL9B,YAAAA,QAAQ,EAAEgC;AADL,WAAP;AAGD,SAPD;AAQD,OAbW;AAcZG,MAAAA,YAAY,EAAE3B,IAAI,IAAI;AACpB,aAAKK,QAAL,CAAcd,KAAK,KAAK;AACtBC,UAAAA,QAAQ,EAAE,CAAC,GAAGD,KAAK,CAACC,QAAV,EAAoBQ,IAApB;AADY,SAAL,CAAnB;AAGA,eAAO,KAAP;AACC;AAnBS,KAAd;AAsBI,wBACI;AAAA,gBACG4B;AADH;AAAA;AAAA;AAAA;AAAA,YADJ;AAKC;;AA1EkC;;AA6EzC,eAAevC,WAAf","sourcesContent":["//Drag and drop para subir isometricas\r\n\r\nimport React, { useEffect } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Upload, message , Button} from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nclass DragAndDrop extends React.Component{\r\n\r\n  state = {\r\n    fileList: [],\r\n    uploading: false,\r\n    redirect: null\r\n  };\r\n\r\nrender (){\r\n  \r\n  const { Dragger } = Upload;\r\n\r\n  var r;\r\n\r\n  const handleUpload = () =>{\r\n    \r\n    this.state.fileList.forEach(file => {\r\n      const formData  = new FormData();\r\n      formData.append('file', file)\r\n      uploadFile(formData);\r\n    });\r\n    this.setState({\r\n      redirect: true\r\n    }) \r\n  }\r\n\r\n  if(this.state.redirect){\r\n    console.log(\"ASDSADS\")\r\n    r=  <Redirect to={'/'}/>\r\n  }  \r\n\r\n\r\n  function uploadFile(file) {\r\n    fetch('http://localhost:5000/upload', {\r\n      // content-type header should not be specified!\r\n      method: 'POST',\r\n      body: file,\r\n    })\r\n      .then(response => response.json())\r\n      .then(success => {\r\n        // Do something with the successful response\r\n        message.success('Files uploaded successfully.');\r\n      })\r\n      .catch(error => console.log(error)\r\n    );\r\n  }\r\n\r\n  const props = {\r\n    name: 'file',\r\n    multiple: true,\r\n    action: 'http://localhost:5000/upload',\r\n    onRemove: file => {\r\n      this.setState(state => {\r\n        const index = state.fileList.indexOf(file);\r\n        const newFileList = state.fileList.slice();\r\n        newFileList.splice(index, 1);\r\n        return {\r\n          fileList: newFileList,\r\n        };\r\n      });\r\n    },\r\n    beforeUpload: file => {\r\n      this.setState(state => ({\r\n        fileList: [...state.fileList, file],\r\n      }));\r\n      return false;\r\n      },\r\n    };\r\n\r\n      return(\r\n          <div>\r\n            {d}\r\n          </div>\r\n      );\r\n      }\r\n}\r\n\r\nexport default DragAndDrop;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}