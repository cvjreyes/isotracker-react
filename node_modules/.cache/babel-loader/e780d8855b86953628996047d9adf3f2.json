{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\equipEstimatedDataTable\\\\equipEstimatedDataTable.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Table, Input, Button, Space } from 'antd';\nimport { SearchOutlined } from '@ant-design/icons';\nimport './equipEstimatedDataTable.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EquipEstimatedDataTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchText: '',\n      searchedColumn: '',\n      data: [],\n      displayData: [],\n      filterData: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      tab: this.props.currentTab,\n      selectedRows: [],\n      selectedRowsKeys: [],\n      updateData: this.props.updateData,\n      username: \"\",\n      acronyms: null,\n      steps: [],\n      filters: []\n    };\n\n    this.getColumnSearchProps = dataIndex => ({\n      render: text => text\n    });\n\n    this.handleReset = clearFilters => {\n      clearFilters();\n      this.setState({\n        searchText: ''\n      });\n    };\n\n    this.onSelectChange = (selectedRowKeys, selectedRows) => {\n      let ids = [];\n\n      for (let i = 0; i < selectedRows.length; i++) {\n        ids.push(selectedRows[i].id.props.children);\n      }\n\n      this.setState({\n        selectedRowsKeys: selectedRowKeys,\n        selectedRows: selectedRows\n      }); //this.setState({ selectedRows: selectedRows });\n\n      this.props.onChange(ids);\n    };\n  }\n\n  async componentDidMount() {\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/equipments/steps\", options).then(response => response.json()).then(async json => {\n      let percentages = [];\n\n      for (let i = 0; i < json.steps.length; i++) {\n        percentages.push(json.steps[i].percentage);\n      }\n\n      await this.setState({\n        steps: percentages\n      });\n    });\n    fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/equipments/estimated\", options).then(response => response.json()).then(async json => {\n      var rows = [];\n      var row = null;\n\n      for (let i = 0; i < json.rows.length; i++) {\n        let mod = 0;\n\n        if (json.rows[i].modelled) {\n          mod = json.rows[i].modelled;\n        }\n\n        if (i % 2 === 0) {\n          row = {\n            area: json.rows[i].area,\n            type: json.rows[i].type,\n            quantity: json.rows[i].quantity,\n            modelled: mod,\n            color: \"#fff\"\n          };\n        } else {\n          row = {\n            area: json.rows[i].area,\n            type: json.rows[i].type,\n            quantity: json.rows[i].quantity,\n            modelled: mod,\n            color: \"#eee\"\n          };\n        }\n\n        for (let j = 0; j < this.state.steps.length; j++) {\n          let currentStep = this.state.steps[j].toString();\n          row[currentStep] = json.rows[i][currentStep];\n        }\n\n        rows.push(row);\n      }\n\n      let filterRow = [{\n        area: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"filter__input\",\n            placeholder: \"Area\",\n            onChange: e => this.filter(0, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 33\n        }, this),\n        type: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"filter__input\",\n            placeholder: \"Type\",\n            onChange: e => this.filter(1, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 171\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 166\n        }, this),\n        quantity: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"filter__input\",\n            placeholder: \"Qty\",\n            onChange: e => this.filter(2, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 308\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 303\n        }, this),\n        modelled: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"filter__input\",\n            placeholder: \"Modelled\",\n            onChange: e => this.filter(3, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 443\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 438\n        }, this)\n      }];\n\n      for (let j = 0; j < this.state.steps.length; j++) {\n        let currentStep = this.state.steps[j].toString();\n        filterRow[0][currentStep] = /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"filter__input\",\n            placeholder: currentStep + \"%\",\n            onChange: e => this.filter(j + 4, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 40\n        }, this);\n      }\n\n      this.setState({\n        data: rows,\n        displayData: rows\n      });\n      await this.setState({\n        filters: filterRow\n      });\n    });\n  }\n\n  async filter(column, value) {\n    let fd = this.state.filterData;\n    fd[column] = value;\n    await this.setState({\n      filterData: fd\n    });\n    let auxDisplayData = this.state.data;\n    let resultData = [];\n    let fil,\n        exists = null;\n\n    for (let i = 0; i < auxDisplayData.length; i++) {\n      exists = true;\n\n      for (let column = 0; column < Object.keys(auxDisplayData[i]).length - 1; column++) {\n        let keys = Object.keys(auxDisplayData[i]);\n        keys.pop();\n        fil = keys[(column + this.state.steps.length) % keys.length];\n\n        if (this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].toString().includes(this.state.filterData[column])) {\n          exists = false;\n        }\n      }\n\n      if (exists) {\n        resultData.push(auxDisplayData[i]);\n      }\n    }\n\n    await this.setState({\n      displayData: resultData\n    });\n  }\n\n  render() {\n    const columns = [{\n      title: /*#__PURE__*/_jsxDEV(\"center\", {\n        className: \"dataTable__header__text\",\n        children: \"Area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'area',\n      key: 'area',\n      ...this.getColumnSearchProps('area'),\n      sorter: {\n        compare: (a, b) => a.area.localeCompare(b.area)\n      }\n    }, {\n      title: /*#__PURE__*/_jsxDEV(\"center\", {\n        className: \"dataTable__header__text\",\n        children: \"Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'type',\n      key: 'type',\n      ...this.getColumnSearchProps('type'),\n      sorter: {\n        compare: (a, b) => a.type.localeCompare(b.type)\n      }\n    }, {\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dataTable__header__text\",\n        children: \"Qty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'quantity',\n      key: 'quantity',\n      ...this.getColumnSearchProps('quantity'),\n      sorter: {\n        compare: (a, b) => a.quantity - b.quantity\n      }\n    }, {\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dataTable__header__text\",\n        children: \"Modelled\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'modelled',\n      key: 'modelled',\n      ...this.getColumnSearchProps('modelled'),\n      sorter: {\n        compare: (a, b) => a.modelled - b.modelled\n      }\n    }];\n\n    for (let i = 0; i < this.state.steps.length; i++) {\n      let index = this.state.steps[i];\n      columns.push({\n        title: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dataTable__header__text\",\n          children: [this.state.steps[i], \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 16\n        }, this),\n        dataIndex: index,\n        key: index,\n        ...this.getColumnSearchProps(index),\n        sorter: {\n          compare: (a, b) => a[index] - b[index]\n        }\n      });\n    }\n\n    var totalElements = null;\n\n    if (this.state.data.length === 0) {\n      totalElements = null;\n    } else {\n      totalElements = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          bottom: 25,\n          left: 0\n        },\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\"Total elements: \", this.state.data.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 24\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.updateData, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"estimatedDataTable__container\",\n        children: [/*#__PURE__*/_jsxDEV(Table, {\n          className: \"customTable\",\n          bordered: true,\n          columns: columns,\n          style: {\n            height: '540px'\n          },\n          dataSource: this.state.data,\n          scroll: {\n            y: 437\n          },\n          pagination: {\n            disabled: true,\n            defaultPageSize: 5000\n          },\n          size: \"small\",\n          rowClassName: record => record.color.replace('#', '')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 9\n        }, this), totalElements]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default EquipEstimatedDataTable;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/equipEstimatedDataTable/equipEstimatedDataTable.js"],"names":["React","Table","Input","Button","Space","SearchOutlined","EquipEstimatedDataTable","Component","state","searchText","searchedColumn","data","displayData","filterData","tab","props","currentTab","selectedRows","selectedRowsKeys","updateData","username","acronyms","steps","filters","getColumnSearchProps","dataIndex","render","text","handleReset","clearFilters","setState","onSelectChange","selectedRowKeys","ids","i","length","push","id","children","onChange","componentDidMount","options","method","headers","fetch","process","env","REACT_APP_SERVER","REACT_APP_NODE_PORT","then","response","json","percentages","percentage","rows","row","mod","modelled","area","type","quantity","color","j","currentStep","toString","filterRow","e","filter","target","value","column","fd","auxDisplayData","resultData","fil","exists","Object","keys","pop","includes","columns","title","key","sorter","compare","a","b","localeCompare","index","totalElements","position","bottom","left","height","y","disabled","defaultPageSize","record","replace"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Table, Input, Button, Space } from 'antd';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport './equipEstimatedDataTable.css'\r\n\r\nclass EquipEstimatedDataTable extends React.Component{\r\n  state = {\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    data: [],    \r\n    displayData: [],\r\n    filterData: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n    tab: this.props.currentTab,\r\n    selectedRows: [],\r\n    selectedRowsKeys: [],\r\n    updateData: this.props.updateData,\r\n    username: \"\",\r\n    acronyms : null,\r\n    steps: [],\r\n    filters: []\r\n  };\r\n\r\n  async componentDidMount(){\r\n\r\n    const options = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n    }\r\n\r\n\r\n    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/equipments/steps\", options)\r\n    .then(response => response.json())\r\n    .then(async json => {\r\n      let percentages = []\r\n      for(let i = 0; i < json.steps.length; i++){\r\n        percentages.push(json.steps[i].percentage)\r\n      }\r\n      await this.setState({steps : percentages});\r\n    }) \r\n\r\n\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/equipments/estimated\", options)\r\n      .then(response => response.json())\r\n      .then(async json => {\r\n        var rows = []\r\n        var row = null\r\n        \r\n        for(let i = 0; i < json.rows.length; i++){\r\n            let mod = 0\r\n            if(json.rows[i].modelled){\r\n              mod = json.rows[i].modelled\r\n            }\r\n            if(i % 2 === 0){\r\n              row = {area: json.rows[i].area, type: json.rows[i].type, quantity: json.rows[i].quantity, modelled: mod, color: \"#fff\"}\r\n            }else{\r\n              row = {area: json.rows[i].area, type: json.rows[i].type, quantity: json.rows[i].quantity, modelled: mod, color: \"#eee\"}\r\n            }\r\n            \r\n            for(let j = 0; j < this.state.steps.length; j++){\r\n              let currentStep = this.state.steps[j].toString()\r\n              row[currentStep] = json.rows[i][currentStep]\r\n            }\r\n            rows.push(row)\r\n        }\r\n        let filterRow = [{area: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Area\" onChange={(e) => this.filter(0, e.target.value)}/></div>, type: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Type\" onChange={(e) => this.filter(1, e.target.value)}/></div>, quantity: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Qty\" onChange={(e) => this.filter(2,e.target.value)}/></div>, modelled: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Modelled\" onChange={(e) => this.filter(3,e.target.value)}/></div>}]\r\n        for(let j = 0; j < this.state.steps.length; j++){\r\n          let currentStep = this.state.steps[j].toString()\r\n          filterRow[0][currentStep] =  <div><input type=\"text\" className=\"filter__input\" placeholder={currentStep+\"%\"} onChange={(e) => this.filter(j+4,e.target.value)}/></div>\r\n        }\r\n        this.setState({data : rows, displayData: rows});\r\n        await this.setState({filters : filterRow})\r\n\r\n    }) \r\n  }\r\n\r\n  async filter(column, value){\r\n    let fd = this.state.filterData\r\n    fd[column] = value\r\n    await this.setState({filterData: fd})\r\n\r\n    let auxDisplayData = this.state.data\r\n    let resultData = []\r\n    let fil, exists = null\r\n    for(let i = 0; i < auxDisplayData.length; i++){\r\n      exists = true\r\n      for(let column = 0; column < Object.keys(auxDisplayData[i]).length-1; column ++){\r\n        let keys = Object.keys(auxDisplayData[i])\r\n        keys.pop()\r\n        fil = keys[(column+this.state.steps.length) % keys.length]\r\n       \r\n        if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].toString().includes(this.state.filterData[column])){\r\n          exists = false    \r\n          \r\n        }\r\n        \r\n      }\r\n      if(exists){\r\n        resultData.push(auxDisplayData[i])\r\n      }\r\n    }\r\n    await this.setState({displayData: resultData})\r\n  }\r\n  \r\n  getColumnSearchProps = dataIndex => ({\r\n    \r\n    render: text => \r\n      \r\n      text\r\n    \r\n      \r\n  });\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys, selectedRows) => {\r\n    let ids = []\r\n    for(let i = 0; i < selectedRows.length; i++){\r\n      ids.push(selectedRows[i].id.props.children)\r\n    }\r\n    this.setState({\r\n      selectedRowsKeys: selectedRowKeys,\r\n      selectedRows: selectedRows\r\n    })\r\n    //this.setState({ selectedRows: selectedRows });\r\n    this.props.onChange(ids);\r\n    \r\n  };\r\n  \r\n\r\n  render() {\r\n\r\n    const columns = [\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Area</center>,\r\n        dataIndex: 'area',\r\n        key: 'area',\r\n        ...this.getColumnSearchProps('area'),\r\n        sorter:{\r\n          compare: (a, b) => a.area.localeCompare(b.area),\r\n        },\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Type</center>,\r\n        dataIndex: 'type',\r\n        key: 'type',\r\n        ...this.getColumnSearchProps('type'),\r\n        sorter:{\r\n          compare: (a, b) => a.type.localeCompare(b.type),\r\n        },\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">Qty</div>,\r\n        dataIndex: 'quantity',\r\n        key: 'quantity',\r\n        ...this.getColumnSearchProps('quantity'),\r\n        sorter: {\r\n          compare: (a, b) => a.quantity-b.quantity,\r\n        },\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">Modelled</div>,\r\n        dataIndex: 'modelled',\r\n        key: 'modelled',\r\n        ...this.getColumnSearchProps('modelled'),\r\n        sorter: {\r\n          compare: (a, b) => a.modelled-b.modelled,\r\n        },\r\n      },\r\n    ];\r\n    \r\n    for(let i = 0; i < this.state.steps.length; i++){\r\n      let index = this.state.steps[i]\r\n      columns.push({\r\n        title: <div className=\"dataTable__header__text\">{this.state.steps[i]}%</div>,\r\n        dataIndex: index,\r\n        key: index,\r\n        ...this.getColumnSearchProps(index),\r\n        sorter: {\r\n          compare: (a, b) => a[index] - b[index],\r\n        },\r\n      })\r\n    }\r\n \r\n    var totalElements = null;\r\n    if (this.state.data.length === 0){\r\n      totalElements = null;\r\n    }else{\r\n      totalElements = (<div style={{position: \"absolute\", bottom: 25, left:0}}>\r\n      <b>Total elements: {this.state.data.length}</b>\r\n     </div>);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {this.state.updateData}\r\n        <div className=\"estimatedDataTable__container\">\r\n        <Table className=\"customTable\" bordered = {true} columns={columns} style={{ height: '540px' }} dataSource={this.state.data} scroll={{y:437}} pagination={{disabled:true, defaultPageSize:5000}} size=\"small\"\r\n         rowClassName= {(record) => record.color.replace('#', '')}/>\r\n          {totalElements}\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EquipEstimatedDataTable;"]},"metadata":{},"sourceType":"module"}