{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n\nimport { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport { isObject } from \"../../../helpers/object.mjs\";\nimport { stringify } from \"../../../helpers/mixed.mjs\";\nimport { createDefaultHeaderSettings, createPlaceholderHeaderSettings } from \"./utils.mjs\";\n/**\r\n * A function that normalizes user-defined settings into one predictable\r\n * structure. Currently, the developer can declare nested headers by passing\r\n * the following unstructured (and sometimes uncompleted) array.\r\n *   [\r\n *     [{ label: 'A1', colspan: 2 }],\r\n *     [{ label: true }, 'B2', 4],\r\n *     [],\r\n *   ]\r\n *\r\n * The normalization process equalizes the length of columns to each header\r\n * layers to the same length and generates object settings with a common shape.\r\n * So the above mentioned example will be normalized into this:\r\n *   [\r\n *     [\r\n *       { label: 'A1', colspan: 2, isHidden: false, ... },\r\n *       { label: '', colspan: 1, isHidden: true, ... },\r\n *       { label: '', colspan: 1, isHidden: false, ... },\r\n *     ],\r\n *     [\r\n *       { label: 'true', colspan: 1, isHidden: false, ... },\r\n *       { label: 'B2', colspan: 1, isHidden: false, ... },\r\n *       { label: '4', colspan: 1, isHidden: false, ... },\r\n *     ],\r\n *     [\r\n *       { label: '', colspan: 1, isHidden: false, ... },\r\n *       { label: '', colspan: 1, isHidden: false, ... },\r\n *       { label: '', colspan: 1, isHidden: false, ... },\r\n *     ],\r\n *   ]\r\n *\r\n * @param {Array[]} sourceSettings An array with defined nested headers settings.\r\n * @param {number} [columnsLimit=Infinity] A number of columns to which the structure\r\n *                                         will be trimmed. While trimming the colspan\r\n *                                         values are adjusted to preserve the original\r\n *                                         structure.\r\n * @returns {Array[]}\r\n */\n\nexport function normalizeSettings(sourceSettings) {\n  var columnsLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  var normalizedSettings = [];\n\n  if (columnsLimit === 0) {\n    return normalizedSettings;\n  } // Normalize array items (header settings) into one shape - literal object with default props.\n\n\n  arrayEach(sourceSettings, function (headersSettings) {\n    var columns = [];\n    var columnIndex = 0;\n    normalizedSettings.push(columns);\n    arrayEach(headersSettings, function (sourceHeaderSettings) {\n      var headerSettings = createDefaultHeaderSettings();\n\n      if (isObject(sourceHeaderSettings)) {\n        var label = sourceHeaderSettings.label,\n            colspan = sourceHeaderSettings.colspan;\n        headerSettings.label = stringify(label);\n\n        if (typeof colspan === 'number' && colspan > 1) {\n          headerSettings.colspan = colspan;\n          headerSettings.origColspan = colspan;\n        }\n      } else {\n        headerSettings.label = stringify(sourceHeaderSettings);\n      }\n\n      columnIndex += headerSettings.origColspan;\n      var cancelProcessing = false;\n\n      if (columnIndex >= columnsLimit) {\n        // Adjust the colspan value to not overlap the columns limit.\n        headerSettings.colspan = headerSettings.origColspan - (columnIndex - columnsLimit);\n        headerSettings.origColspan = headerSettings.colspan;\n        cancelProcessing = true;\n      }\n\n      columns.push(headerSettings);\n\n      if (headerSettings.colspan > 1) {\n        for (var i = 0; i < headerSettings.colspan - 1; i++) {\n          columns.push(createPlaceholderHeaderSettings());\n        }\n      }\n\n      return !cancelProcessing;\n    });\n  });\n  var columnsLength = Math.max.apply(Math, _toConsumableArray(arrayMap(normalizedSettings, function (headersSettings) {\n    return headersSettings.length;\n  }))); // Normalize the length of each header layer to the same columns length.\n\n  arrayEach(normalizedSettings, function (headersSettings) {\n    if (headersSettings.length < columnsLength) {\n      var defaultSettings = arrayMap(new Array(columnsLength - headersSettings.length), function () {\n        return createDefaultHeaderSettings();\n      });\n      headersSettings.splice.apply(headersSettings, [headersSettings.length, 0].concat(_toConsumableArray(defaultSettings)));\n    }\n  });\n  return normalizedSettings;\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/nestedHeaders/stateManager/settingsNormalizer.mjs"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","arrayEach","arrayMap","isObject","stringify","createDefaultHeaderSettings","createPlaceholderHeaderSettings","normalizeSettings","sourceSettings","columnsLimit","arguments","undefined","Infinity","normalizedSettings","headersSettings","columns","columnIndex","push","sourceHeaderSettings","headerSettings","label","colspan","origColspan","cancelProcessing","columnsLength","Math","max","apply","defaultSettings","splice","concat"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.splice.js\";\r\nimport \"core-js/modules/es.array.concat.js\";\r\nimport \"core-js/modules/es.symbol.js\";\r\nimport \"core-js/modules/es.symbol.description.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.symbol.iterator.js\";\r\nimport \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\nimport \"core-js/modules/es.array.from.js\";\r\nimport \"core-js/modules/es.array.slice.js\";\r\nimport \"core-js/modules/es.function.name.js\";\r\n\r\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\r\n\r\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\r\n\r\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\r\n\r\n/* eslint-disable jsdoc/require-description-complete-sentence */\r\nimport { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\r\nimport { isObject } from \"../../../helpers/object.mjs\";\r\nimport { stringify } from \"../../../helpers/mixed.mjs\";\r\nimport { createDefaultHeaderSettings, createPlaceholderHeaderSettings } from \"./utils.mjs\";\r\n/**\r\n * A function that normalizes user-defined settings into one predictable\r\n * structure. Currently, the developer can declare nested headers by passing\r\n * the following unstructured (and sometimes uncompleted) array.\r\n *   [\r\n *     [{ label: 'A1', colspan: 2 }],\r\n *     [{ label: true }, 'B2', 4],\r\n *     [],\r\n *   ]\r\n *\r\n * The normalization process equalizes the length of columns to each header\r\n * layers to the same length and generates object settings with a common shape.\r\n * So the above mentioned example will be normalized into this:\r\n *   [\r\n *     [\r\n *       { label: 'A1', colspan: 2, isHidden: false, ... },\r\n *       { label: '', colspan: 1, isHidden: true, ... },\r\n *       { label: '', colspan: 1, isHidden: false, ... },\r\n *     ],\r\n *     [\r\n *       { label: 'true', colspan: 1, isHidden: false, ... },\r\n *       { label: 'B2', colspan: 1, isHidden: false, ... },\r\n *       { label: '4', colspan: 1, isHidden: false, ... },\r\n *     ],\r\n *     [\r\n *       { label: '', colspan: 1, isHidden: false, ... },\r\n *       { label: '', colspan: 1, isHidden: false, ... },\r\n *       { label: '', colspan: 1, isHidden: false, ... },\r\n *     ],\r\n *   ]\r\n *\r\n * @param {Array[]} sourceSettings An array with defined nested headers settings.\r\n * @param {number} [columnsLimit=Infinity] A number of columns to which the structure\r\n *                                         will be trimmed. While trimming the colspan\r\n *                                         values are adjusted to preserve the original\r\n *                                         structure.\r\n * @returns {Array[]}\r\n */\r\n\r\nexport function normalizeSettings(sourceSettings) {\r\n  var columnsLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\r\n  var normalizedSettings = [];\r\n\r\n  if (columnsLimit === 0) {\r\n    return normalizedSettings;\r\n  } // Normalize array items (header settings) into one shape - literal object with default props.\r\n\r\n\r\n  arrayEach(sourceSettings, function (headersSettings) {\r\n    var columns = [];\r\n    var columnIndex = 0;\r\n    normalizedSettings.push(columns);\r\n    arrayEach(headersSettings, function (sourceHeaderSettings) {\r\n      var headerSettings = createDefaultHeaderSettings();\r\n\r\n      if (isObject(sourceHeaderSettings)) {\r\n        var label = sourceHeaderSettings.label,\r\n            colspan = sourceHeaderSettings.colspan;\r\n        headerSettings.label = stringify(label);\r\n\r\n        if (typeof colspan === 'number' && colspan > 1) {\r\n          headerSettings.colspan = colspan;\r\n          headerSettings.origColspan = colspan;\r\n        }\r\n      } else {\r\n        headerSettings.label = stringify(sourceHeaderSettings);\r\n      }\r\n\r\n      columnIndex += headerSettings.origColspan;\r\n      var cancelProcessing = false;\r\n\r\n      if (columnIndex >= columnsLimit) {\r\n        // Adjust the colspan value to not overlap the columns limit.\r\n        headerSettings.colspan = headerSettings.origColspan - (columnIndex - columnsLimit);\r\n        headerSettings.origColspan = headerSettings.colspan;\r\n        cancelProcessing = true;\r\n      }\r\n\r\n      columns.push(headerSettings);\r\n\r\n      if (headerSettings.colspan > 1) {\r\n        for (var i = 0; i < headerSettings.colspan - 1; i++) {\r\n          columns.push(createPlaceholderHeaderSettings());\r\n        }\r\n      }\r\n\r\n      return !cancelProcessing;\r\n    });\r\n  });\r\n  var columnsLength = Math.max.apply(Math, _toConsumableArray(arrayMap(normalizedSettings, function (headersSettings) {\r\n    return headersSettings.length;\r\n  }))); // Normalize the length of each header layer to the same columns length.\r\n\r\n  arrayEach(normalizedSettings, function (headersSettings) {\r\n    if (headersSettings.length < columnsLength) {\r\n      var defaultSettings = arrayMap(new Array(columnsLength - headersSettings.length), function () {\r\n        return createDefaultHeaderSettings();\r\n      });\r\n      headersSettings.splice.apply(headersSettings, [headersSettings.length, 0].concat(_toConsumableArray(defaultSettings)));\r\n    }\r\n  });\r\n  return normalizedSettings;\r\n}"]},"metadata":{},"sourceType":"module"}