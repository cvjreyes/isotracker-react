{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport RowHeadersRenderer from \"./rowHeaders.mjs\";\nimport ColumnHeadersRenderer from \"./columnHeaders.mjs\";\nimport ColGroupRenderer from \"./colGroup.mjs\";\nimport RowsRenderer from \"./rows.mjs\";\nimport CellsRenderer from \"./cells.mjs\";\nimport TableRenderer from \"./table.mjs\";\n/**\n * Content renderer.\n *\n * @class Renderer\n */\n\nvar Renderer = /*#__PURE__*/function () {\n  function Renderer() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        TABLE = _ref.TABLE,\n        THEAD = _ref.THEAD,\n        COLGROUP = _ref.COLGROUP,\n        TBODY = _ref.TBODY,\n        rowUtils = _ref.rowUtils,\n        columnUtils = _ref.columnUtils,\n        cellRenderer = _ref.cellRenderer;\n\n    _classCallCheck(this, Renderer);\n    /**\n     * General renderer class used to render Walkontable content on screen.\n     *\n     * @type {TableRenderer}\n     */\n\n\n    this.renderer = new TableRenderer(TABLE, {\n      cellRenderer: cellRenderer\n    });\n    this.renderer.setRenderers({\n      rowHeaders: new RowHeadersRenderer(),\n      columnHeaders: new ColumnHeadersRenderer(THEAD),\n      colGroup: new ColGroupRenderer(COLGROUP),\n      rows: new RowsRenderer(TBODY),\n      cells: new CellsRenderer()\n    });\n    this.renderer.setAxisUtils(rowUtils, columnUtils);\n  }\n  /**\n   * Sets filter calculators for newly calculated row and column position. The filters are used to transform visual\n   * indexes (0 to N) to source indexes provided by Handsontable.\n   *\n   * @param {RowFilter} rowFilter The row filter instance.\n   * @param {ColumnFilter} columnFilter The column filter instance.\n   * @returns {Renderer}\n   */\n\n\n  _createClass(Renderer, [{\n    key: \"setFilters\",\n    value: function setFilters(rowFilter, columnFilter) {\n      this.renderer.setFilters(rowFilter, columnFilter);\n      return this;\n    }\n    /**\n     * Sets the viewport size of the rendered table.\n     *\n     * @param {number} rowsCount An amount of rows to render.\n     * @param {number} columnsCount An amount of columns to render.\n     * @returns {Renderer}\n     */\n\n  }, {\n    key: \"setViewportSize\",\n    value: function setViewportSize(rowsCount, columnsCount) {\n      this.renderer.setViewportSize(rowsCount, columnsCount);\n      return this;\n    }\n    /**\n     * Sets row and column header functions.\n     *\n     * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.\n     * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.\n     * @returns {Renderer}\n     */\n\n  }, {\n    key: \"setHeaderContentRenderers\",\n    value: function setHeaderContentRenderers(rowHeaders, columnHeaders) {\n      this.renderer.setHeaderContentRenderers(rowHeaders, columnHeaders);\n      return this;\n    }\n    /**\n     * Adjusts the table (preparing for render).\n     */\n\n  }, {\n    key: \"adjust\",\n    value: function adjust() {\n      this.renderer.adjust();\n    }\n    /**\n     * Renders the table.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.renderer.render();\n    }\n  }]);\n\n  return Renderer;\n}();\n\nexport { RowHeadersRenderer, ColumnHeadersRenderer, ColGroupRenderer, RowsRenderer, CellsRenderer, TableRenderer, Renderer };","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/3rdparty/walkontable/src/renderer/index.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","RowHeadersRenderer","ColumnHeadersRenderer","ColGroupRenderer","RowsRenderer","CellsRenderer","TableRenderer","Renderer","_ref","arguments","undefined","TABLE","THEAD","COLGROUP","TBODY","rowUtils","columnUtils","cellRenderer","renderer","setRenderers","rowHeaders","columnHeaders","colGroup","rows","cells","setAxisUtils","value","setFilters","rowFilter","columnFilter","setViewportSize","rowsCount","columnsCount","setHeaderContentRenderers","adjust","render"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport RowHeadersRenderer from \"./rowHeaders.mjs\";\nimport ColumnHeadersRenderer from \"./columnHeaders.mjs\";\nimport ColGroupRenderer from \"./colGroup.mjs\";\nimport RowsRenderer from \"./rows.mjs\";\nimport CellsRenderer from \"./cells.mjs\";\nimport TableRenderer from \"./table.mjs\";\n/**\n * Content renderer.\n *\n * @class Renderer\n */\n\nvar Renderer = /*#__PURE__*/function () {\n  function Renderer() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        TABLE = _ref.TABLE,\n        THEAD = _ref.THEAD,\n        COLGROUP = _ref.COLGROUP,\n        TBODY = _ref.TBODY,\n        rowUtils = _ref.rowUtils,\n        columnUtils = _ref.columnUtils,\n        cellRenderer = _ref.cellRenderer;\n\n    _classCallCheck(this, Renderer);\n\n    /**\n     * General renderer class used to render Walkontable content on screen.\n     *\n     * @type {TableRenderer}\n     */\n    this.renderer = new TableRenderer(TABLE, {\n      cellRenderer: cellRenderer\n    });\n    this.renderer.setRenderers({\n      rowHeaders: new RowHeadersRenderer(),\n      columnHeaders: new ColumnHeadersRenderer(THEAD),\n      colGroup: new ColGroupRenderer(COLGROUP),\n      rows: new RowsRenderer(TBODY),\n      cells: new CellsRenderer()\n    });\n    this.renderer.setAxisUtils(rowUtils, columnUtils);\n  }\n  /**\n   * Sets filter calculators for newly calculated row and column position. The filters are used to transform visual\n   * indexes (0 to N) to source indexes provided by Handsontable.\n   *\n   * @param {RowFilter} rowFilter The row filter instance.\n   * @param {ColumnFilter} columnFilter The column filter instance.\n   * @returns {Renderer}\n   */\n\n\n  _createClass(Renderer, [{\n    key: \"setFilters\",\n    value: function setFilters(rowFilter, columnFilter) {\n      this.renderer.setFilters(rowFilter, columnFilter);\n      return this;\n    }\n    /**\n     * Sets the viewport size of the rendered table.\n     *\n     * @param {number} rowsCount An amount of rows to render.\n     * @param {number} columnsCount An amount of columns to render.\n     * @returns {Renderer}\n     */\n\n  }, {\n    key: \"setViewportSize\",\n    value: function setViewportSize(rowsCount, columnsCount) {\n      this.renderer.setViewportSize(rowsCount, columnsCount);\n      return this;\n    }\n    /**\n     * Sets row and column header functions.\n     *\n     * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.\n     * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.\n     * @returns {Renderer}\n     */\n\n  }, {\n    key: \"setHeaderContentRenderers\",\n    value: function setHeaderContentRenderers(rowHeaders, columnHeaders) {\n      this.renderer.setHeaderContentRenderers(rowHeaders, columnHeaders);\n      return this;\n    }\n    /**\n     * Adjusts the table (preparing for render).\n     */\n\n  }, {\n    key: \"adjust\",\n    value: function adjust() {\n      this.renderer.adjust();\n    }\n    /**\n     * Renders the table.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.renderer.render();\n    }\n  }]);\n\n  return Renderer;\n}();\n\nexport { RowHeadersRenderer, ColumnHeadersRenderer, ColGroupRenderer, RowsRenderer, CellsRenderer, TableRenderer, Renderer };"]},"metadata":{},"sourceType":"module"}