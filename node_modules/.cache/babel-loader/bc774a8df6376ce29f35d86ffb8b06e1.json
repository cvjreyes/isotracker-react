{"ast":null,"code":";\n\n(function (root, factory, undef) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"), require(\"./evpkdf\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\", \"./evpkdf\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  /**\r\n   * Cipher core components.\r\n   */\n  CryptoJS.lib.Cipher || function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var Base64 = C_enc.Base64;\n    var C_algo = C.algo;\n    var EvpKDF = C_algo.EvpKDF;\n    /**\r\n     * Abstract base cipher template.\r\n     *\r\n     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\r\n     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\r\n     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\r\n     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\r\n     */\n\n    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n      /**\r\n       * Configuration options.\r\n       *\r\n       * @property {WordArray} iv The IV to use for this operation.\r\n       */\n      cfg: Base.extend(),\n\n      /**\r\n       * Creates this cipher in encryption mode.\r\n       *\r\n       * @param {WordArray} key The key.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {Cipher} A cipher instance.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\r\n       */\n      createEncryptor: function (key, cfg) {\n        return this.create(this._ENC_XFORM_MODE, key, cfg);\n      },\n\n      /**\r\n       * Creates this cipher in decryption mode.\r\n       *\r\n       * @param {WordArray} key The key.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {Cipher} A cipher instance.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\r\n       */\n      createDecryptor: function (key, cfg) {\n        return this.create(this._DEC_XFORM_MODE, key, cfg);\n      },\n\n      /**\r\n       * Initializes a newly created cipher.\r\n       *\r\n       * @param {number} xformMode Either the encryption or decryption transormation mode constant.\r\n       * @param {WordArray} key The key.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @example\r\n       *\r\n       *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\r\n       */\n      init: function (xformMode, key, cfg) {\n        // Apply config defaults\n        this.cfg = this.cfg.extend(cfg); // Store transform mode and key\n\n        this._xformMode = xformMode;\n        this._key = key; // Set initial values\n\n        this.reset();\n      },\n\n      /**\r\n       * Resets this cipher to its initial state.\r\n       *\r\n       * @example\r\n       *\r\n       *     cipher.reset();\r\n       */\n      reset: function () {\n        // Reset data buffer\n        BufferedBlockAlgorithm.reset.call(this); // Perform concrete-cipher logic\n\n        this._doReset();\n      },\n\n      /**\r\n       * Adds data to be encrypted or decrypted.\r\n       *\r\n       * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\r\n       *\r\n       * @return {WordArray} The data after processing.\r\n       *\r\n       * @example\r\n       *\r\n       *     var encrypted = cipher.process('data');\r\n       *     var encrypted = cipher.process(wordArray);\r\n       */\n      process: function (dataUpdate) {\n        // Append\n        this._append(dataUpdate); // Process available blocks\n\n\n        return this._process();\n      },\n\n      /**\r\n       * Finalizes the encryption or decryption process.\r\n       * Note that the finalize operation is effectively a destructive, read-once operation.\r\n       *\r\n       * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\r\n       *\r\n       * @return {WordArray} The data after final processing.\r\n       *\r\n       * @example\r\n       *\r\n       *     var encrypted = cipher.finalize();\r\n       *     var encrypted = cipher.finalize('data');\r\n       *     var encrypted = cipher.finalize(wordArray);\r\n       */\n      finalize: function (dataUpdate) {\n        // Final data update\n        if (dataUpdate) {\n          this._append(dataUpdate);\n        } // Perform concrete-cipher logic\n\n\n        var finalProcessedData = this._doFinalize();\n\n        return finalProcessedData;\n      },\n      keySize: 128 / 32,\n      ivSize: 128 / 32,\n      _ENC_XFORM_MODE: 1,\n      _DEC_XFORM_MODE: 2,\n\n      /**\r\n       * Creates shortcut functions to a cipher's object interface.\r\n       *\r\n       * @param {Cipher} cipher The cipher to create a helper for.\r\n       *\r\n       * @return {Object} An object with encrypt and decrypt shortcut functions.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\r\n       */\n      _createHelper: function () {\n        function selectCipherStrategy(key) {\n          if (typeof key == 'string') {\n            return PasswordBasedCipher;\n          } else {\n            return SerializableCipher;\n          }\n        }\n\n        return function (cipher) {\n          return {\n            encrypt: function (message, key, cfg) {\n              return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n            },\n            decrypt: function (ciphertext, key, cfg) {\n              return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n            }\n          };\n        };\n      }()\n    });\n    /**\r\n     * Abstract base stream cipher template.\r\n     *\r\n     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\r\n     */\n\n    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n      _doFinalize: function () {\n        // Process partial blocks\n        var finalProcessedBlocks = this._process(!!'flush');\n\n        return finalProcessedBlocks;\n      },\n      blockSize: 1\n    });\n    /**\r\n     * Mode namespace.\r\n     */\n\n    var C_mode = C.mode = {};\n    /**\r\n     * Abstract base block cipher mode template.\r\n     */\n\n    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n      /**\r\n       * Creates this mode for encryption.\r\n       *\r\n       * @param {Cipher} cipher A block cipher instance.\r\n       * @param {Array} iv The IV words.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\r\n       */\n      createEncryptor: function (cipher, iv) {\n        return this.Encryptor.create(cipher, iv);\n      },\n\n      /**\r\n       * Creates this mode for decryption.\r\n       *\r\n       * @param {Cipher} cipher A block cipher instance.\r\n       * @param {Array} iv The IV words.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\r\n       */\n      createDecryptor: function (cipher, iv) {\n        return this.Decryptor.create(cipher, iv);\n      },\n\n      /**\r\n       * Initializes a newly created mode.\r\n       *\r\n       * @param {Cipher} cipher A block cipher instance.\r\n       * @param {Array} iv The IV words.\r\n       *\r\n       * @example\r\n       *\r\n       *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\r\n       */\n      init: function (cipher, iv) {\n        this._cipher = cipher;\n        this._iv = iv;\n      }\n    });\n    /**\r\n     * Cipher Block Chaining mode.\r\n     */\n\n    var CBC = C_mode.CBC = function () {\n      /**\r\n       * Abstract base CBC mode.\r\n       */\n      var CBC = BlockCipherMode.extend();\n      /**\r\n       * CBC encryptor.\r\n       */\n\n      CBC.Encryptor = CBC.extend({\n        /**\r\n         * Processes the data block at offset.\r\n         *\r\n         * @param {Array} words The data words to operate on.\r\n         * @param {number} offset The offset where the block starts.\r\n         *\r\n         * @example\r\n         *\r\n         *     mode.processBlock(data.words, offset);\r\n         */\n        processBlock: function (words, offset) {\n          // Shortcuts\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize; // XOR and encrypt\n\n          xorBlock.call(this, words, offset, blockSize);\n          cipher.encryptBlock(words, offset); // Remember this block to use with next block\n\n          this._prevBlock = words.slice(offset, offset + blockSize);\n        }\n      });\n      /**\r\n       * CBC decryptor.\r\n       */\n\n      CBC.Decryptor = CBC.extend({\n        /**\r\n         * Processes the data block at offset.\r\n         *\r\n         * @param {Array} words The data words to operate on.\r\n         * @param {number} offset The offset where the block starts.\r\n         *\r\n         * @example\r\n         *\r\n         *     mode.processBlock(data.words, offset);\r\n         */\n        processBlock: function (words, offset) {\n          // Shortcuts\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize; // Remember this block to use with next block\n\n          var thisBlock = words.slice(offset, offset + blockSize); // Decrypt and XOR\n\n          cipher.decryptBlock(words, offset);\n          xorBlock.call(this, words, offset, blockSize); // This block becomes the previous block\n\n          this._prevBlock = thisBlock;\n        }\n      });\n\n      function xorBlock(words, offset, blockSize) {\n        var block; // Shortcut\n\n        var iv = this._iv; // Choose mixing block\n\n        if (iv) {\n          block = iv; // Remove IV for subsequent blocks\n\n          this._iv = undefined;\n        } else {\n          block = this._prevBlock;\n        } // XOR blocks\n\n\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= block[i];\n        }\n      }\n\n      return CBC;\n    }();\n    /**\r\n     * Padding namespace.\r\n     */\n\n\n    var C_pad = C.pad = {};\n    /**\r\n     * PKCS #5/7 padding strategy.\r\n     */\n\n    var Pkcs7 = C_pad.Pkcs7 = {\n      /**\r\n       * Pads data using the algorithm defined in PKCS #5/7.\r\n       *\r\n       * @param {WordArray} data The data to pad.\r\n       * @param {number} blockSize The multiple that the data should be padded to.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\r\n       */\n      pad: function (data, blockSize) {\n        // Shortcut\n        var blockSizeBytes = blockSize * 4; // Count padding bytes\n\n        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; // Create padding word\n\n        var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes; // Create padding\n\n        var paddingWords = [];\n\n        for (var i = 0; i < nPaddingBytes; i += 4) {\n          paddingWords.push(paddingWord);\n        }\n\n        var padding = WordArray.create(paddingWords, nPaddingBytes); // Add padding\n\n        data.concat(padding);\n      },\n\n      /**\r\n       * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\r\n       *\r\n       * @param {WordArray} data The data to unpad.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     CryptoJS.pad.Pkcs7.unpad(wordArray);\r\n       */\n      unpad: function (data) {\n        // Get number of padding bytes from last byte\n        var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff; // Remove padding\n\n        data.sigBytes -= nPaddingBytes;\n      }\n    };\n    /**\r\n     * Abstract base block cipher template.\r\n     *\r\n     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\r\n     */\n\n    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n      /**\r\n       * Configuration options.\r\n       *\r\n       * @property {Mode} mode The block mode to use. Default: CBC\r\n       * @property {Padding} padding The padding strategy to use. Default: Pkcs7\r\n       */\n      cfg: Cipher.cfg.extend({\n        mode: CBC,\n        padding: Pkcs7\n      }),\n      reset: function () {\n        var modeCreator; // Reset cipher\n\n        Cipher.reset.call(this); // Shortcuts\n\n        var cfg = this.cfg;\n        var iv = cfg.iv;\n        var mode = cfg.mode; // Reset block mode\n\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          modeCreator = mode.createEncryptor;\n        } else\n          /* if (this._xformMode == this._DEC_XFORM_MODE) */\n          {\n            modeCreator = mode.createDecryptor; // Keep at least one block in the buffer for unpadding\n\n            this._minBufferSize = 1;\n          }\n\n        if (this._mode && this._mode.__creator == modeCreator) {\n          this._mode.init(this, iv && iv.words);\n        } else {\n          this._mode = modeCreator.call(mode, this, iv && iv.words);\n          this._mode.__creator = modeCreator;\n        }\n      },\n      _doProcessBlock: function (words, offset) {\n        this._mode.processBlock(words, offset);\n      },\n      _doFinalize: function () {\n        var finalProcessedBlocks; // Shortcut\n\n        var padding = this.cfg.padding; // Finalize\n\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          // Pad data\n          padding.pad(this._data, this.blockSize); // Process final blocks\n\n          finalProcessedBlocks = this._process(!!'flush');\n        } else\n          /* if (this._xformMode == this._DEC_XFORM_MODE) */\n          {\n            // Process final blocks\n            finalProcessedBlocks = this._process(!!'flush'); // Unpad data\n\n            padding.unpad(finalProcessedBlocks);\n          }\n\n        return finalProcessedBlocks;\n      },\n      blockSize: 128 / 32\n    });\n    /**\r\n     * A collection of cipher parameters.\r\n     *\r\n     * @property {WordArray} ciphertext The raw ciphertext.\r\n     * @property {WordArray} key The key to this ciphertext.\r\n     * @property {WordArray} iv The IV used in the ciphering operation.\r\n     * @property {WordArray} salt The salt used with a key derivation function.\r\n     * @property {Cipher} algorithm The cipher algorithm.\r\n     * @property {Mode} mode The block mode used in the ciphering operation.\r\n     * @property {Padding} padding The padding scheme used in the ciphering operation.\r\n     * @property {number} blockSize The block size of the cipher.\r\n     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\r\n     */\n\n    var CipherParams = C_lib.CipherParams = Base.extend({\n      /**\r\n       * Initializes a newly created cipher params object.\r\n       *\r\n       * @param {Object} cipherParams An object with any of the possible cipher parameters.\r\n       *\r\n       * @example\r\n       *\r\n       *     var cipherParams = CryptoJS.lib.CipherParams.create({\r\n       *         ciphertext: ciphertextWordArray,\r\n       *         key: keyWordArray,\r\n       *         iv: ivWordArray,\r\n       *         salt: saltWordArray,\r\n       *         algorithm: CryptoJS.algo.AES,\r\n       *         mode: CryptoJS.mode.CBC,\r\n       *         padding: CryptoJS.pad.PKCS7,\r\n       *         blockSize: 4,\r\n       *         formatter: CryptoJS.format.OpenSSL\r\n       *     });\r\n       */\n      init: function (cipherParams) {\n        this.mixIn(cipherParams);\n      },\n\n      /**\r\n       * Converts this cipher params object to a string.\r\n       *\r\n       * @param {Format} formatter (Optional) The formatting strategy to use.\r\n       *\r\n       * @return {string} The stringified cipher params.\r\n       *\r\n       * @throws Error If neither the formatter nor the default formatter is set.\r\n       *\r\n       * @example\r\n       *\r\n       *     var string = cipherParams + '';\r\n       *     var string = cipherParams.toString();\r\n       *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\r\n       */\n      toString: function (formatter) {\n        return (formatter || this.formatter).stringify(this);\n      }\n    });\n    /**\r\n     * Format namespace.\r\n     */\n\n    var C_format = C.format = {};\n    /**\r\n     * OpenSSL formatting strategy.\r\n     */\n\n    var OpenSSLFormatter = C_format.OpenSSL = {\n      /**\r\n       * Converts a cipher params object to an OpenSSL-compatible string.\r\n       *\r\n       * @param {CipherParams} cipherParams The cipher params object.\r\n       *\r\n       * @return {string} The OpenSSL-compatible string.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\r\n       */\n      stringify: function (cipherParams) {\n        var wordArray; // Shortcuts\n\n        var ciphertext = cipherParams.ciphertext;\n        var salt = cipherParams.salt; // Format\n\n        if (salt) {\n          wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n        } else {\n          wordArray = ciphertext;\n        }\n\n        return wordArray.toString(Base64);\n      },\n\n      /**\r\n       * Converts an OpenSSL-compatible string to a cipher params object.\r\n       *\r\n       * @param {string} openSSLStr The OpenSSL-compatible string.\r\n       *\r\n       * @return {CipherParams} The cipher params object.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\r\n       */\n      parse: function (openSSLStr) {\n        var salt; // Parse base64\n\n        var ciphertext = Base64.parse(openSSLStr); // Shortcut\n\n        var ciphertextWords = ciphertext.words; // Test for salt\n\n        if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n          // Extract salt\n          salt = WordArray.create(ciphertextWords.slice(2, 4)); // Remove salt from ciphertext\n\n          ciphertextWords.splice(0, 4);\n          ciphertext.sigBytes -= 16;\n        }\n\n        return CipherParams.create({\n          ciphertext: ciphertext,\n          salt: salt\n        });\n      }\n    };\n    /**\r\n     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\r\n     */\n\n    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n      /**\r\n       * Configuration options.\r\n       *\r\n       * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\r\n       */\n      cfg: Base.extend({\n        format: OpenSSLFormatter\n      }),\n\n      /**\r\n       * Encrypts a message.\r\n       *\r\n       * @param {Cipher} cipher The cipher algorithm to use.\r\n       * @param {WordArray|string} message The message to encrypt.\r\n       * @param {WordArray} key The key.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {CipherParams} A cipher params object.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\r\n       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\r\n       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n       */\n      encrypt: function (cipher, message, key, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg); // Encrypt\n\n        var encryptor = cipher.createEncryptor(key, cfg);\n        var ciphertext = encryptor.finalize(message); // Shortcut\n\n        var cipherCfg = encryptor.cfg; // Create and return serializable cipher params\n\n        return CipherParams.create({\n          ciphertext: ciphertext,\n          key: key,\n          iv: cipherCfg.iv,\n          algorithm: cipher,\n          mode: cipherCfg.mode,\n          padding: cipherCfg.padding,\n          blockSize: cipher.blockSize,\n          formatter: cfg.format\n        });\n      },\n\n      /**\r\n       * Decrypts serialized ciphertext.\r\n       *\r\n       * @param {Cipher} cipher The cipher algorithm to use.\r\n       * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n       * @param {WordArray} key The key.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {WordArray} The plaintext.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n       *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n       */\n      decrypt: function (cipher, ciphertext, key, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg); // Convert string to CipherParams\n\n        ciphertext = this._parse(ciphertext, cfg.format); // Decrypt\n\n        var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n        return plaintext;\n      },\n\n      /**\r\n       * Converts serialized ciphertext to CipherParams,\r\n       * else assumed CipherParams already and returns ciphertext unchanged.\r\n       *\r\n       * @param {CipherParams|string} ciphertext The ciphertext.\r\n       * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\r\n       *\r\n       * @return {CipherParams} The unserialized ciphertext.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\r\n       */\n      _parse: function (ciphertext, format) {\n        if (typeof ciphertext == 'string') {\n          return format.parse(ciphertext, this);\n        } else {\n          return ciphertext;\n        }\n      }\n    });\n    /**\r\n     * Key derivation function namespace.\r\n     */\n\n    var C_kdf = C.kdf = {};\n    /**\r\n     * OpenSSL key derivation function.\r\n     */\n\n    var OpenSSLKdf = C_kdf.OpenSSL = {\n      /**\r\n       * Derives a key and IV from a password.\r\n       *\r\n       * @param {string} password The password to derive from.\r\n       * @param {number} keySize The size in words of the key to generate.\r\n       * @param {number} ivSize The size in words of the IV to generate.\r\n       * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\r\n       *\r\n       * @return {CipherParams} A cipher params object with the key, IV, and salt.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\r\n       *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\r\n       */\n      execute: function (password, keySize, ivSize, salt) {\n        // Generate random salt\n        if (!salt) {\n          salt = WordArray.random(64 / 8);\n        } // Derive key and IV\n\n\n        var key = EvpKDF.create({\n          keySize: keySize + ivSize\n        }).compute(password, salt); // Separate key and IV\n\n        var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n        key.sigBytes = keySize * 4; // Return params\n\n        return CipherParams.create({\n          key: key,\n          iv: iv,\n          salt: salt\n        });\n      }\n    };\n    /**\r\n     * A serializable cipher wrapper that derives the key from a password,\r\n     * and returns ciphertext as a serializable cipher params object.\r\n     */\n\n    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n      /**\r\n       * Configuration options.\r\n       *\r\n       * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\r\n       */\n      cfg: SerializableCipher.cfg.extend({\n        kdf: OpenSSLKdf\n      }),\n\n      /**\r\n       * Encrypts a message using a password.\r\n       *\r\n       * @param {Cipher} cipher The cipher algorithm to use.\r\n       * @param {WordArray|string} message The message to encrypt.\r\n       * @param {string} password The password.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {CipherParams} A cipher params object.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\r\n       *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\r\n       */\n      encrypt: function (cipher, message, password, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg); // Derive key and other params\n\n        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize); // Add IV to config\n\n        cfg.iv = derivedParams.iv; // Encrypt\n\n        var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg); // Mix in derived params\n\n        ciphertext.mixIn(derivedParams);\n        return ciphertext;\n      },\n\n      /**\r\n       * Decrypts serialized ciphertext using a password.\r\n       *\r\n       * @param {Cipher} cipher The cipher algorithm to use.\r\n       * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n       * @param {string} password The password.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {WordArray} The plaintext.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\r\n       *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\r\n       */\n      decrypt: function (cipher, ciphertext, password, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg); // Convert string to CipherParams\n\n        ciphertext = this._parse(ciphertext, cfg.format); // Derive key and other params\n\n        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt); // Add IV to config\n\n        cfg.iv = derivedParams.iv; // Decrypt\n\n        var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n        return plaintext;\n      }\n    });\n  }();\n});","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/crypto-js/cipher-core.js"],"names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","lib","Cipher","undefined","C","C_lib","Base","WordArray","BufferedBlockAlgorithm","C_enc","enc","Utf8","Base64","C_algo","algo","EvpKDF","extend","cfg","createEncryptor","key","create","_ENC_XFORM_MODE","createDecryptor","_DEC_XFORM_MODE","init","xformMode","_xformMode","_key","reset","call","_doReset","process","dataUpdate","_append","_process","finalize","finalProcessedData","_doFinalize","keySize","ivSize","_createHelper","selectCipherStrategy","PasswordBasedCipher","SerializableCipher","cipher","encrypt","message","decrypt","ciphertext","StreamCipher","finalProcessedBlocks","blockSize","C_mode","mode","BlockCipherMode","iv","Encryptor","Decryptor","_cipher","_iv","CBC","processBlock","words","offset","xorBlock","encryptBlock","_prevBlock","slice","thisBlock","decryptBlock","block","i","C_pad","pad","Pkcs7","data","blockSizeBytes","nPaddingBytes","sigBytes","paddingWord","paddingWords","push","padding","concat","unpad","BlockCipher","modeCreator","_minBufferSize","_mode","__creator","_doProcessBlock","_data","CipherParams","cipherParams","mixIn","toString","formatter","stringify","C_format","format","OpenSSLFormatter","OpenSSL","wordArray","salt","parse","openSSLStr","ciphertextWords","splice","encryptor","cipherCfg","algorithm","_parse","plaintext","C_kdf","kdf","OpenSSLKdf","execute","password","random","compute","derivedParams"],"mappings":"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","sourcesContent":[";(function (root, factory, undef) {\r\n\tif (typeof exports === \"object\") {\r\n\t\t// CommonJS\r\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./evpkdf\"));\r\n\t}\r\n\telse if (typeof define === \"function\" && define.amd) {\r\n\t\t// AMD\r\n\t\tdefine([\"./core\", \"./evpkdf\"], factory);\r\n\t}\r\n\telse {\r\n\t\t// Global (browser)\r\n\t\tfactory(root.CryptoJS);\r\n\t}\r\n}(this, function (CryptoJS) {\r\n\r\n\t/**\r\n\t * Cipher core components.\r\n\t */\r\n\tCryptoJS.lib.Cipher || (function (undefined) {\r\n\t    // Shortcuts\r\n\t    var C = CryptoJS;\r\n\t    var C_lib = C.lib;\r\n\t    var Base = C_lib.Base;\r\n\t    var WordArray = C_lib.WordArray;\r\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\r\n\t    var C_enc = C.enc;\r\n\t    var Utf8 = C_enc.Utf8;\r\n\t    var Base64 = C_enc.Base64;\r\n\t    var C_algo = C.algo;\r\n\t    var EvpKDF = C_algo.EvpKDF;\r\n\r\n\t    /**\r\n\t     * Abstract base cipher template.\r\n\t     *\r\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\r\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\r\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\r\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\r\n\t     */\r\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\r\n\t        /**\r\n\t         * Configuration options.\r\n\t         *\r\n\t         * @property {WordArray} iv The IV to use for this operation.\r\n\t         */\r\n\t        cfg: Base.extend(),\r\n\r\n\t        /**\r\n\t         * Creates this cipher in encryption mode.\r\n\t         *\r\n\t         * @param {WordArray} key The key.\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n\t         *\r\n\t         * @return {Cipher} A cipher instance.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\r\n\t         */\r\n\t        createEncryptor: function (key, cfg) {\r\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Creates this cipher in decryption mode.\r\n\t         *\r\n\t         * @param {WordArray} key The key.\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n\t         *\r\n\t         * @return {Cipher} A cipher instance.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\r\n\t         */\r\n\t        createDecryptor: function (key, cfg) {\r\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Initializes a newly created cipher.\r\n\t         *\r\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\r\n\t         * @param {WordArray} key The key.\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\r\n\t         */\r\n\t        init: function (xformMode, key, cfg) {\r\n\t            // Apply config defaults\r\n\t            this.cfg = this.cfg.extend(cfg);\r\n\r\n\t            // Store transform mode and key\r\n\t            this._xformMode = xformMode;\r\n\t            this._key = key;\r\n\r\n\t            // Set initial values\r\n\t            this.reset();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Resets this cipher to its initial state.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     cipher.reset();\r\n\t         */\r\n\t        reset: function () {\r\n\t            // Reset data buffer\r\n\t            BufferedBlockAlgorithm.reset.call(this);\r\n\r\n\t            // Perform concrete-cipher logic\r\n\t            this._doReset();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Adds data to be encrypted or decrypted.\r\n\t         *\r\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\r\n\t         *\r\n\t         * @return {WordArray} The data after processing.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var encrypted = cipher.process('data');\r\n\t         *     var encrypted = cipher.process(wordArray);\r\n\t         */\r\n\t        process: function (dataUpdate) {\r\n\t            // Append\r\n\t            this._append(dataUpdate);\r\n\r\n\t            // Process available blocks\r\n\t            return this._process();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Finalizes the encryption or decryption process.\r\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\r\n\t         *\r\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\r\n\t         *\r\n\t         * @return {WordArray} The data after final processing.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var encrypted = cipher.finalize();\r\n\t         *     var encrypted = cipher.finalize('data');\r\n\t         *     var encrypted = cipher.finalize(wordArray);\r\n\t         */\r\n\t        finalize: function (dataUpdate) {\r\n\t            // Final data update\r\n\t            if (dataUpdate) {\r\n\t                this._append(dataUpdate);\r\n\t            }\r\n\r\n\t            // Perform concrete-cipher logic\r\n\t            var finalProcessedData = this._doFinalize();\r\n\r\n\t            return finalProcessedData;\r\n\t        },\r\n\r\n\t        keySize: 128/32,\r\n\r\n\t        ivSize: 128/32,\r\n\r\n\t        _ENC_XFORM_MODE: 1,\r\n\r\n\t        _DEC_XFORM_MODE: 2,\r\n\r\n\t        /**\r\n\t         * Creates shortcut functions to a cipher's object interface.\r\n\t         *\r\n\t         * @param {Cipher} cipher The cipher to create a helper for.\r\n\t         *\r\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\r\n\t         */\r\n\t        _createHelper: (function () {\r\n\t            function selectCipherStrategy(key) {\r\n\t                if (typeof key == 'string') {\r\n\t                    return PasswordBasedCipher;\r\n\t                } else {\r\n\t                    return SerializableCipher;\r\n\t                }\r\n\t            }\r\n\r\n\t            return function (cipher) {\r\n\t                return {\r\n\t                    encrypt: function (message, key, cfg) {\r\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\r\n\t                    },\r\n\r\n\t                    decrypt: function (ciphertext, key, cfg) {\r\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\r\n\t                    }\r\n\t                };\r\n\t            };\r\n\t        }())\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Abstract base stream cipher template.\r\n\t     *\r\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\r\n\t     */\r\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\r\n\t        _doFinalize: function () {\r\n\t            // Process partial blocks\r\n\t            var finalProcessedBlocks = this._process(!!'flush');\r\n\r\n\t            return finalProcessedBlocks;\r\n\t        },\r\n\r\n\t        blockSize: 1\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Mode namespace.\r\n\t     */\r\n\t    var C_mode = C.mode = {};\r\n\r\n\t    /**\r\n\t     * Abstract base block cipher mode template.\r\n\t     */\r\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\r\n\t        /**\r\n\t         * Creates this mode for encryption.\r\n\t         *\r\n\t         * @param {Cipher} cipher A block cipher instance.\r\n\t         * @param {Array} iv The IV words.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\r\n\t         */\r\n\t        createEncryptor: function (cipher, iv) {\r\n\t            return this.Encryptor.create(cipher, iv);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Creates this mode for decryption.\r\n\t         *\r\n\t         * @param {Cipher} cipher A block cipher instance.\r\n\t         * @param {Array} iv The IV words.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\r\n\t         */\r\n\t        createDecryptor: function (cipher, iv) {\r\n\t            return this.Decryptor.create(cipher, iv);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Initializes a newly created mode.\r\n\t         *\r\n\t         * @param {Cipher} cipher A block cipher instance.\r\n\t         * @param {Array} iv The IV words.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\r\n\t         */\r\n\t        init: function (cipher, iv) {\r\n\t            this._cipher = cipher;\r\n\t            this._iv = iv;\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Cipher Block Chaining mode.\r\n\t     */\r\n\t    var CBC = C_mode.CBC = (function () {\r\n\t        /**\r\n\t         * Abstract base CBC mode.\r\n\t         */\r\n\t        var CBC = BlockCipherMode.extend();\r\n\r\n\t        /**\r\n\t         * CBC encryptor.\r\n\t         */\r\n\t        CBC.Encryptor = CBC.extend({\r\n\t            /**\r\n\t             * Processes the data block at offset.\r\n\t             *\r\n\t             * @param {Array} words The data words to operate on.\r\n\t             * @param {number} offset The offset where the block starts.\r\n\t             *\r\n\t             * @example\r\n\t             *\r\n\t             *     mode.processBlock(data.words, offset);\r\n\t             */\r\n\t            processBlock: function (words, offset) {\r\n\t                // Shortcuts\r\n\t                var cipher = this._cipher;\r\n\t                var blockSize = cipher.blockSize;\r\n\r\n\t                // XOR and encrypt\r\n\t                xorBlock.call(this, words, offset, blockSize);\r\n\t                cipher.encryptBlock(words, offset);\r\n\r\n\t                // Remember this block to use with next block\r\n\t                this._prevBlock = words.slice(offset, offset + blockSize);\r\n\t            }\r\n\t        });\r\n\r\n\t        /**\r\n\t         * CBC decryptor.\r\n\t         */\r\n\t        CBC.Decryptor = CBC.extend({\r\n\t            /**\r\n\t             * Processes the data block at offset.\r\n\t             *\r\n\t             * @param {Array} words The data words to operate on.\r\n\t             * @param {number} offset The offset where the block starts.\r\n\t             *\r\n\t             * @example\r\n\t             *\r\n\t             *     mode.processBlock(data.words, offset);\r\n\t             */\r\n\t            processBlock: function (words, offset) {\r\n\t                // Shortcuts\r\n\t                var cipher = this._cipher;\r\n\t                var blockSize = cipher.blockSize;\r\n\r\n\t                // Remember this block to use with next block\r\n\t                var thisBlock = words.slice(offset, offset + blockSize);\r\n\r\n\t                // Decrypt and XOR\r\n\t                cipher.decryptBlock(words, offset);\r\n\t                xorBlock.call(this, words, offset, blockSize);\r\n\r\n\t                // This block becomes the previous block\r\n\t                this._prevBlock = thisBlock;\r\n\t            }\r\n\t        });\r\n\r\n\t        function xorBlock(words, offset, blockSize) {\r\n\t            var block;\r\n\r\n\t            // Shortcut\r\n\t            var iv = this._iv;\r\n\r\n\t            // Choose mixing block\r\n\t            if (iv) {\r\n\t                block = iv;\r\n\r\n\t                // Remove IV for subsequent blocks\r\n\t                this._iv = undefined;\r\n\t            } else {\r\n\t                block = this._prevBlock;\r\n\t            }\r\n\r\n\t            // XOR blocks\r\n\t            for (var i = 0; i < blockSize; i++) {\r\n\t                words[offset + i] ^= block[i];\r\n\t            }\r\n\t        }\r\n\r\n\t        return CBC;\r\n\t    }());\r\n\r\n\t    /**\r\n\t     * Padding namespace.\r\n\t     */\r\n\t    var C_pad = C.pad = {};\r\n\r\n\t    /**\r\n\t     * PKCS #5/7 padding strategy.\r\n\t     */\r\n\t    var Pkcs7 = C_pad.Pkcs7 = {\r\n\t        /**\r\n\t         * Pads data using the algorithm defined in PKCS #5/7.\r\n\t         *\r\n\t         * @param {WordArray} data The data to pad.\r\n\t         * @param {number} blockSize The multiple that the data should be padded to.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\r\n\t         */\r\n\t        pad: function (data, blockSize) {\r\n\t            // Shortcut\r\n\t            var blockSizeBytes = blockSize * 4;\r\n\r\n\t            // Count padding bytes\r\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\r\n\r\n\t            // Create padding word\r\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\r\n\r\n\t            // Create padding\r\n\t            var paddingWords = [];\r\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {\r\n\t                paddingWords.push(paddingWord);\r\n\t            }\r\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\r\n\r\n\t            // Add padding\r\n\t            data.concat(padding);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\r\n\t         *\r\n\t         * @param {WordArray} data The data to unpad.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\r\n\t         */\r\n\t        unpad: function (data) {\r\n\t            // Get number of padding bytes from last byte\r\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\r\n\r\n\t            // Remove padding\r\n\t            data.sigBytes -= nPaddingBytes;\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Abstract base block cipher template.\r\n\t     *\r\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\r\n\t     */\r\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\r\n\t        /**\r\n\t         * Configuration options.\r\n\t         *\r\n\t         * @property {Mode} mode The block mode to use. Default: CBC\r\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\r\n\t         */\r\n\t        cfg: Cipher.cfg.extend({\r\n\t            mode: CBC,\r\n\t            padding: Pkcs7\r\n\t        }),\r\n\r\n\t        reset: function () {\r\n\t            var modeCreator;\r\n\r\n\t            // Reset cipher\r\n\t            Cipher.reset.call(this);\r\n\r\n\t            // Shortcuts\r\n\t            var cfg = this.cfg;\r\n\t            var iv = cfg.iv;\r\n\t            var mode = cfg.mode;\r\n\r\n\t            // Reset block mode\r\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\r\n\t                modeCreator = mode.createEncryptor;\r\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\r\n\t                modeCreator = mode.createDecryptor;\r\n\t                // Keep at least one block in the buffer for unpadding\r\n\t                this._minBufferSize = 1;\r\n\t            }\r\n\r\n\t            if (this._mode && this._mode.__creator == modeCreator) {\r\n\t                this._mode.init(this, iv && iv.words);\r\n\t            } else {\r\n\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\r\n\t                this._mode.__creator = modeCreator;\r\n\t            }\r\n\t        },\r\n\r\n\t        _doProcessBlock: function (words, offset) {\r\n\t            this._mode.processBlock(words, offset);\r\n\t        },\r\n\r\n\t        _doFinalize: function () {\r\n\t            var finalProcessedBlocks;\r\n\r\n\t            // Shortcut\r\n\t            var padding = this.cfg.padding;\r\n\r\n\t            // Finalize\r\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\r\n\t                // Pad data\r\n\t                padding.pad(this._data, this.blockSize);\r\n\r\n\t                // Process final blocks\r\n\t                finalProcessedBlocks = this._process(!!'flush');\r\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\r\n\t                // Process final blocks\r\n\t                finalProcessedBlocks = this._process(!!'flush');\r\n\r\n\t                // Unpad data\r\n\t                padding.unpad(finalProcessedBlocks);\r\n\t            }\r\n\r\n\t            return finalProcessedBlocks;\r\n\t        },\r\n\r\n\t        blockSize: 128/32\r\n\t    });\r\n\r\n\t    /**\r\n\t     * A collection of cipher parameters.\r\n\t     *\r\n\t     * @property {WordArray} ciphertext The raw ciphertext.\r\n\t     * @property {WordArray} key The key to this ciphertext.\r\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\r\n\t     * @property {WordArray} salt The salt used with a key derivation function.\r\n\t     * @property {Cipher} algorithm The cipher algorithm.\r\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\r\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\r\n\t     * @property {number} blockSize The block size of the cipher.\r\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\r\n\t     */\r\n\t    var CipherParams = C_lib.CipherParams = Base.extend({\r\n\t        /**\r\n\t         * Initializes a newly created cipher params object.\r\n\t         *\r\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\r\n\t         *         ciphertext: ciphertextWordArray,\r\n\t         *         key: keyWordArray,\r\n\t         *         iv: ivWordArray,\r\n\t         *         salt: saltWordArray,\r\n\t         *         algorithm: CryptoJS.algo.AES,\r\n\t         *         mode: CryptoJS.mode.CBC,\r\n\t         *         padding: CryptoJS.pad.PKCS7,\r\n\t         *         blockSize: 4,\r\n\t         *         formatter: CryptoJS.format.OpenSSL\r\n\t         *     });\r\n\t         */\r\n\t        init: function (cipherParams) {\r\n\t            this.mixIn(cipherParams);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Converts this cipher params object to a string.\r\n\t         *\r\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\r\n\t         *\r\n\t         * @return {string} The stringified cipher params.\r\n\t         *\r\n\t         * @throws Error If neither the formatter nor the default formatter is set.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var string = cipherParams + '';\r\n\t         *     var string = cipherParams.toString();\r\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\r\n\t         */\r\n\t        toString: function (formatter) {\r\n\t            return (formatter || this.formatter).stringify(this);\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Format namespace.\r\n\t     */\r\n\t    var C_format = C.format = {};\r\n\r\n\t    /**\r\n\t     * OpenSSL formatting strategy.\r\n\t     */\r\n\t    var OpenSSLFormatter = C_format.OpenSSL = {\r\n\t        /**\r\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\r\n\t         *\r\n\t         * @param {CipherParams} cipherParams The cipher params object.\r\n\t         *\r\n\t         * @return {string} The OpenSSL-compatible string.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\r\n\t         */\r\n\t        stringify: function (cipherParams) {\r\n\t            var wordArray;\r\n\r\n\t            // Shortcuts\r\n\t            var ciphertext = cipherParams.ciphertext;\r\n\t            var salt = cipherParams.salt;\r\n\r\n\t            // Format\r\n\t            if (salt) {\r\n\t                wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\r\n\t            } else {\r\n\t                wordArray = ciphertext;\r\n\t            }\r\n\r\n\t            return wordArray.toString(Base64);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\r\n\t         *\r\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\r\n\t         *\r\n\t         * @return {CipherParams} The cipher params object.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\r\n\t         */\r\n\t        parse: function (openSSLStr) {\r\n\t            var salt;\r\n\r\n\t            // Parse base64\r\n\t            var ciphertext = Base64.parse(openSSLStr);\r\n\r\n\t            // Shortcut\r\n\t            var ciphertextWords = ciphertext.words;\r\n\r\n\t            // Test for salt\r\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\r\n\t                // Extract salt\r\n\t                salt = WordArray.create(ciphertextWords.slice(2, 4));\r\n\r\n\t                // Remove salt from ciphertext\r\n\t                ciphertextWords.splice(0, 4);\r\n\t                ciphertext.sigBytes -= 16;\r\n\t            }\r\n\r\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\r\n\t     */\r\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\r\n\t        /**\r\n\t         * Configuration options.\r\n\t         *\r\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\r\n\t         */\r\n\t        cfg: Base.extend({\r\n\t            format: OpenSSLFormatter\r\n\t        }),\r\n\r\n\t        /**\r\n\t         * Encrypts a message.\r\n\t         *\r\n\t         * @param {Cipher} cipher The cipher algorithm to use.\r\n\t         * @param {WordArray|string} message The message to encrypt.\r\n\t         * @param {WordArray} key The key.\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n\t         *\r\n\t         * @return {CipherParams} A cipher params object.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\r\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\r\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n\t         */\r\n\t        encrypt: function (cipher, message, key, cfg) {\r\n\t            // Apply config defaults\r\n\t            cfg = this.cfg.extend(cfg);\r\n\r\n\t            // Encrypt\r\n\t            var encryptor = cipher.createEncryptor(key, cfg);\r\n\t            var ciphertext = encryptor.finalize(message);\r\n\r\n\t            // Shortcut\r\n\t            var cipherCfg = encryptor.cfg;\r\n\r\n\t            // Create and return serializable cipher params\r\n\t            return CipherParams.create({\r\n\t                ciphertext: ciphertext,\r\n\t                key: key,\r\n\t                iv: cipherCfg.iv,\r\n\t                algorithm: cipher,\r\n\t                mode: cipherCfg.mode,\r\n\t                padding: cipherCfg.padding,\r\n\t                blockSize: cipher.blockSize,\r\n\t                formatter: cfg.format\r\n\t            });\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Decrypts serialized ciphertext.\r\n\t         *\r\n\t         * @param {Cipher} cipher The cipher algorithm to use.\r\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n\t         * @param {WordArray} key The key.\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n\t         *\r\n\t         * @return {WordArray} The plaintext.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n\t         */\r\n\t        decrypt: function (cipher, ciphertext, key, cfg) {\r\n\t            // Apply config defaults\r\n\t            cfg = this.cfg.extend(cfg);\r\n\r\n\t            // Convert string to CipherParams\r\n\t            ciphertext = this._parse(ciphertext, cfg.format);\r\n\r\n\t            // Decrypt\r\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\r\n\r\n\t            return plaintext;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Converts serialized ciphertext to CipherParams,\r\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\r\n\t         *\r\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\r\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\r\n\t         *\r\n\t         * @return {CipherParams} The unserialized ciphertext.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\r\n\t         */\r\n\t        _parse: function (ciphertext, format) {\r\n\t            if (typeof ciphertext == 'string') {\r\n\t                return format.parse(ciphertext, this);\r\n\t            } else {\r\n\t                return ciphertext;\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Key derivation function namespace.\r\n\t     */\r\n\t    var C_kdf = C.kdf = {};\r\n\r\n\t    /**\r\n\t     * OpenSSL key derivation function.\r\n\t     */\r\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {\r\n\t        /**\r\n\t         * Derives a key and IV from a password.\r\n\t         *\r\n\t         * @param {string} password The password to derive from.\r\n\t         * @param {number} keySize The size in words of the key to generate.\r\n\t         * @param {number} ivSize The size in words of the IV to generate.\r\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\r\n\t         *\r\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\r\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\r\n\t         */\r\n\t        execute: function (password, keySize, ivSize, salt) {\r\n\t            // Generate random salt\r\n\t            if (!salt) {\r\n\t                salt = WordArray.random(64/8);\r\n\t            }\r\n\r\n\t            // Derive key and IV\r\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\r\n\r\n\t            // Separate key and IV\r\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\r\n\t            key.sigBytes = keySize * 4;\r\n\r\n\t            // Return params\r\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * A serializable cipher wrapper that derives the key from a password,\r\n\t     * and returns ciphertext as a serializable cipher params object.\r\n\t     */\r\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\r\n\t        /**\r\n\t         * Configuration options.\r\n\t         *\r\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\r\n\t         */\r\n\t        cfg: SerializableCipher.cfg.extend({\r\n\t            kdf: OpenSSLKdf\r\n\t        }),\r\n\r\n\t        /**\r\n\t         * Encrypts a message using a password.\r\n\t         *\r\n\t         * @param {Cipher} cipher The cipher algorithm to use.\r\n\t         * @param {WordArray|string} message The message to encrypt.\r\n\t         * @param {string} password The password.\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n\t         *\r\n\t         * @return {CipherParams} A cipher params object.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\r\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\r\n\t         */\r\n\t        encrypt: function (cipher, message, password, cfg) {\r\n\t            // Apply config defaults\r\n\t            cfg = this.cfg.extend(cfg);\r\n\r\n\t            // Derive key and other params\r\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\r\n\r\n\t            // Add IV to config\r\n\t            cfg.iv = derivedParams.iv;\r\n\r\n\t            // Encrypt\r\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\r\n\r\n\t            // Mix in derived params\r\n\t            ciphertext.mixIn(derivedParams);\r\n\r\n\t            return ciphertext;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Decrypts serialized ciphertext using a password.\r\n\t         *\r\n\t         * @param {Cipher} cipher The cipher algorithm to use.\r\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n\t         * @param {string} password The password.\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n\t         *\r\n\t         * @return {WordArray} The plaintext.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\r\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\r\n\t         */\r\n\t        decrypt: function (cipher, ciphertext, password, cfg) {\r\n\t            // Apply config defaults\r\n\t            cfg = this.cfg.extend(cfg);\r\n\r\n\t            // Convert string to CipherParams\r\n\t            ciphertext = this._parse(ciphertext, cfg.format);\r\n\r\n\t            // Derive key and other params\r\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\r\n\r\n\t            // Add IV to config\r\n\t            cfg.iv = derivedParams.iv;\r\n\r\n\t            // Decrypt\r\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\r\n\r\n\t            return plaintext;\r\n\t        }\r\n\t    });\r\n\t}());\r\n\r\n\r\n}));"]},"metadata":{},"sourceType":"script"}