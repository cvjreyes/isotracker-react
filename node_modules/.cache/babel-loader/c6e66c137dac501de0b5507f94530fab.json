{"ast":null,"code":"'use strict';\n\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\n\nvar isRegExp = require('../internals/is-regexp');\n\nvar anObject = require('../internals/an-object');\n\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar speciesConstructor = require('../internals/species-constructor');\n\nvar advanceStringIndex = require('../internals/advance-string-index');\n\nvar toLength = require('../internals/to-length');\n\nvar callRegExpExec = require('../internals/regexp-exec-abstract');\n\nvar regexpExec = require('../internals/regexp-exec');\n\nvar fails = require('../internals/fails');\n\nvar arrayPush = [].push;\nvar min = Math.min;\nvar MAX_UINT32 = 0xFFFFFFFF; // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\n\nvar SUPPORTS_Y = !fails(function () {\n  return !RegExp(MAX_UINT32, 'y');\n}); // @@split logic\n\nfixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n\n  if ('abbc'.split(/(b)*/)[1] == 'c' || 'test'.split(/(?:)/, -1).length != 4 || 'ab'.split(/(?:ab)*/).length != 2 || '.'.split(/(.?)(.?)/).length != 4 || '.'.split(/()()/).length > 1 || ''.split(/.?/).length) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function internalSplit(separator, limit) {\n      var string = String(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string]; // If `separator` is not a regex, use native split\n\n      if (!isRegExp(separator)) {\n        return nativeSplit.call(string, separator, lim);\n      }\n\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0; // Make `global` and avoid `lastIndex` issues by working with a copy\n\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n\n      if (lastLastIndex === string.length) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n\n      return output.length > lim ? output.slice(0, lim) : output;\n    }; // Chakra, V8\n\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function internalSplit(separator, limit) {\n      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [// `String.prototype.split` method\n  // https://tc39.es/ecma262/#sec-string.prototype.split\n  function split(separator, limit) {\n    var O = requireObjectCoercible(this);\n    var splitter = separator == undefined ? undefined : separator[SPLIT];\n    return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);\n  }, // `RegExp.prototype[@@split]` method\n  // https://tc39.es/ecma262/#sec-regexp.prototype-@@split\n  //\n  // NOTE: This cannot be properly polyfilled in engines that don't support\n  // the 'y' flag.\n  function (regexp, limit) {\n    var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);\n    if (res.done) return res.value;\n    var rx = anObject(regexp);\n    var S = String(this);\n    var C = speciesConstructor(rx, RegExp);\n    var unicodeMatching = rx.unicode;\n    var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g'); // ^(? + rx + ) is needed, in combination with some S slicing, to\n    // simulate the 'y' flag.\n\n    var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n    var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n    if (lim === 0) return [];\n    if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n    var p = 0;\n    var q = 0;\n    var A = [];\n\n    while (q < S.length) {\n      splitter.lastIndex = SUPPORTS_Y ? q : 0;\n      var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n      var e;\n\n      if (z === null || (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {\n        q = advanceStringIndex(S, q, unicodeMatching);\n      } else {\n        A.push(S.slice(p, q));\n        if (A.length === lim) return A;\n\n        for (var i = 1; i <= z.length - 1; i++) {\n          A.push(z[i]);\n          if (A.length === lim) return A;\n        }\n\n        q = p = e;\n      }\n    }\n\n    A.push(S.slice(p));\n    return A;\n  }];\n}, !SUPPORTS_Y);","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/core-js/modules/es.string.split.js"],"names":["fixRegExpWellKnownSymbolLogic","require","isRegExp","anObject","requireObjectCoercible","speciesConstructor","advanceStringIndex","toLength","callRegExpExec","regexpExec","fails","arrayPush","push","min","Math","MAX_UINT32","SUPPORTS_Y","RegExp","SPLIT","nativeSplit","maybeCallNative","internalSplit","split","length","separator","limit","string","String","lim","undefined","call","output","flags","ignoreCase","multiline","unicode","sticky","lastLastIndex","separatorCopy","source","match","lastIndex","lastLength","slice","index","apply","test","O","splitter","regexp","res","done","value","rx","S","C","unicodeMatching","p","q","A","z","e","i"],"mappings":"AAAA;;AACA,IAAIA,6BAA6B,GAAGC,OAAO,CAAC,iDAAD,CAA3C;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIG,sBAAsB,GAAGH,OAAO,CAAC,uCAAD,CAApC;;AACA,IAAII,kBAAkB,GAAGJ,OAAO,CAAC,kCAAD,CAAhC;;AACA,IAAIK,kBAAkB,GAAGL,OAAO,CAAC,mCAAD,CAAhC;;AACA,IAAIM,QAAQ,GAAGN,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIO,cAAc,GAAGP,OAAO,CAAC,mCAAD,CAA5B;;AACA,IAAIQ,UAAU,GAAGR,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAIS,KAAK,GAAGT,OAAO,CAAC,oBAAD,CAAnB;;AAEA,IAAIU,SAAS,GAAG,GAAGC,IAAnB;AACA,IAAIC,GAAG,GAAGC,IAAI,CAACD,GAAf;AACA,IAAIE,UAAU,GAAG,UAAjB,C,CAEA;;AACA,IAAIC,UAAU,GAAG,CAACN,KAAK,CAAC,YAAY;AAAE,SAAO,CAACO,MAAM,CAACF,UAAD,EAAa,GAAb,CAAd;AAAkC,CAAjD,CAAvB,C,CAEA;;AACAf,6BAA6B,CAAC,OAAD,EAAU,CAAV,EAAa,UAAUkB,KAAV,EAAiBC,WAAjB,EAA8BC,eAA9B,EAA+C;AACvF,MAAIC,aAAJ;;AACA,MACE,OAAOC,KAAP,CAAa,MAAb,EAAqB,CAArB,KAA2B,GAA3B,IACA,OAAOA,KAAP,CAAa,MAAb,EAAqB,CAAC,CAAtB,EAAyBC,MAAzB,IAAmC,CADnC,IAEA,KAAKD,KAAL,CAAW,SAAX,EAAsBC,MAAtB,IAAgC,CAFhC,IAGA,IAAID,KAAJ,CAAU,UAAV,EAAsBC,MAAtB,IAAgC,CAHhC,IAIA,IAAID,KAAJ,CAAU,MAAV,EAAkBC,MAAlB,GAA2B,CAJ3B,IAKA,GAAGD,KAAH,CAAS,IAAT,EAAeC,MANjB,EAOE;AACA;AACAF,IAAAA,aAAa,GAAG,uBAAUG,SAAV,EAAqBC,KAArB,EAA4B;AAC1C,UAAIC,MAAM,GAAGC,MAAM,CAACvB,sBAAsB,CAAC,IAAD,CAAvB,CAAnB;AACA,UAAIwB,GAAG,GAAGH,KAAK,KAAKI,SAAV,GAAsBd,UAAtB,GAAmCU,KAAK,KAAK,CAAvD;AACA,UAAIG,GAAG,KAAK,CAAZ,EAAe,OAAO,EAAP;AACf,UAAIJ,SAAS,KAAKK,SAAlB,EAA6B,OAAO,CAACH,MAAD,CAAP,CAJa,CAK1C;;AACA,UAAI,CAACxB,QAAQ,CAACsB,SAAD,CAAb,EAA0B;AACxB,eAAOL,WAAW,CAACW,IAAZ,CAAiBJ,MAAjB,EAAyBF,SAAzB,EAAoCI,GAApC,CAAP;AACD;;AACD,UAAIG,MAAM,GAAG,EAAb;AACA,UAAIC,KAAK,GAAG,CAACR,SAAS,CAACS,UAAV,GAAuB,GAAvB,GAA6B,EAA9B,KACCT,SAAS,CAACU,SAAV,GAAsB,GAAtB,GAA4B,EAD7B,KAECV,SAAS,CAACW,OAAV,GAAoB,GAApB,GAA0B,EAF3B,KAGCX,SAAS,CAACY,MAAV,GAAmB,GAAnB,GAAyB,EAH1B,CAAZ;AAIA,UAAIC,aAAa,GAAG,CAApB,CAd0C,CAe1C;;AACA,UAAIC,aAAa,GAAG,IAAIrB,MAAJ,CAAWO,SAAS,CAACe,MAArB,EAA6BP,KAAK,GAAG,GAArC,CAApB;AACA,UAAIQ,KAAJ,EAAWC,SAAX,EAAsBC,UAAtB;;AACA,aAAOF,KAAK,GAAG/B,UAAU,CAACqB,IAAX,CAAgBQ,aAAhB,EAA+BZ,MAA/B,CAAf,EAAuD;AACrDe,QAAAA,SAAS,GAAGH,aAAa,CAACG,SAA1B;;AACA,YAAIA,SAAS,GAAGJ,aAAhB,EAA+B;AAC7BN,UAAAA,MAAM,CAACnB,IAAP,CAAYc,MAAM,CAACiB,KAAP,CAAaN,aAAb,EAA4BG,KAAK,CAACI,KAAlC,CAAZ;AACA,cAAIJ,KAAK,CAACjB,MAAN,GAAe,CAAf,IAAoBiB,KAAK,CAACI,KAAN,GAAclB,MAAM,CAACH,MAA7C,EAAqDZ,SAAS,CAACkC,KAAV,CAAgBd,MAAhB,EAAwBS,KAAK,CAACG,KAAN,CAAY,CAAZ,CAAxB;AACrDD,UAAAA,UAAU,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASjB,MAAtB;AACAc,UAAAA,aAAa,GAAGI,SAAhB;AACA,cAAIV,MAAM,CAACR,MAAP,IAAiBK,GAArB,EAA0B;AAC3B;;AACD,YAAIU,aAAa,CAACG,SAAd,KAA4BD,KAAK,CAACI,KAAtC,EAA6CN,aAAa,CAACG,SAAd,GATQ,CASmB;AACzE;;AACD,UAAIJ,aAAa,KAAKX,MAAM,CAACH,MAA7B,EAAqC;AACnC,YAAImB,UAAU,IAAI,CAACJ,aAAa,CAACQ,IAAd,CAAmB,EAAnB,CAAnB,EAA2Cf,MAAM,CAACnB,IAAP,CAAY,EAAZ;AAC5C,OAFD,MAEOmB,MAAM,CAACnB,IAAP,CAAYc,MAAM,CAACiB,KAAP,CAAaN,aAAb,CAAZ;;AACP,aAAON,MAAM,CAACR,MAAP,GAAgBK,GAAhB,GAAsBG,MAAM,CAACY,KAAP,CAAa,CAAb,EAAgBf,GAAhB,CAAtB,GAA6CG,MAApD;AACD,KAjCD,CAFA,CAoCF;;AACC,GA5CD,MA4CO,IAAI,IAAIT,KAAJ,CAAUO,SAAV,EAAqB,CAArB,EAAwBN,MAA5B,EAAoC;AACzCF,IAAAA,aAAa,GAAG,uBAAUG,SAAV,EAAqBC,KAArB,EAA4B;AAC1C,aAAOD,SAAS,KAAKK,SAAd,IAA2BJ,KAAK,KAAK,CAArC,GAAyC,EAAzC,GAA8CN,WAAW,CAACW,IAAZ,CAAiB,IAAjB,EAAuBN,SAAvB,EAAkCC,KAAlC,CAArD;AACD,KAFD;AAGD,GAJM,MAIAJ,aAAa,GAAGF,WAAhB;;AAEP,SAAO,CACL;AACA;AACA,WAASG,KAAT,CAAeE,SAAf,EAA0BC,KAA1B,EAAiC;AAC/B,QAAIsB,CAAC,GAAG3C,sBAAsB,CAAC,IAAD,CAA9B;AACA,QAAI4C,QAAQ,GAAGxB,SAAS,IAAIK,SAAb,GAAyBA,SAAzB,GAAqCL,SAAS,CAACN,KAAD,CAA7D;AACA,WAAO8B,QAAQ,KAAKnB,SAAb,GACHmB,QAAQ,CAAClB,IAAT,CAAcN,SAAd,EAAyBuB,CAAzB,EAA4BtB,KAA5B,CADG,GAEHJ,aAAa,CAACS,IAAd,CAAmBH,MAAM,CAACoB,CAAD,CAAzB,EAA8BvB,SAA9B,EAAyCC,KAAzC,CAFJ;AAGD,GATI,EAUL;AACA;AACA;AACA;AACA;AACA,YAAUwB,MAAV,EAAkBxB,KAAlB,EAAyB;AACvB,QAAIyB,GAAG,GAAG9B,eAAe,CAACC,aAAD,EAAgB4B,MAAhB,EAAwB,IAAxB,EAA8BxB,KAA9B,EAAqCJ,aAAa,KAAKF,WAAvD,CAAzB;AACA,QAAI+B,GAAG,CAACC,IAAR,EAAc,OAAOD,GAAG,CAACE,KAAX;AAEd,QAAIC,EAAE,GAAGlD,QAAQ,CAAC8C,MAAD,CAAjB;AACA,QAAIK,CAAC,GAAG3B,MAAM,CAAC,IAAD,CAAd;AACA,QAAI4B,CAAC,GAAGlD,kBAAkB,CAACgD,EAAD,EAAKpC,MAAL,CAA1B;AAEA,QAAIuC,eAAe,GAAGH,EAAE,CAAClB,OAAzB;AACA,QAAIH,KAAK,GAAG,CAACqB,EAAE,CAACpB,UAAH,GAAgB,GAAhB,GAAsB,EAAvB,KACCoB,EAAE,CAACnB,SAAH,GAAe,GAAf,GAAqB,EADtB,KAECmB,EAAE,CAAClB,OAAH,GAAa,GAAb,GAAmB,EAFpB,KAGCnB,UAAU,GAAG,GAAH,GAAS,GAHpB,CAAZ,CATuB,CAcvB;AACA;;AACA,QAAIgC,QAAQ,GAAG,IAAIO,CAAJ,CAAMvC,UAAU,GAAGqC,EAAH,GAAQ,SAASA,EAAE,CAACd,MAAZ,GAAqB,GAA7C,EAAkDP,KAAlD,CAAf;AACA,QAAIJ,GAAG,GAAGH,KAAK,KAAKI,SAAV,GAAsBd,UAAtB,GAAmCU,KAAK,KAAK,CAAvD;AACA,QAAIG,GAAG,KAAK,CAAZ,EAAe,OAAO,EAAP;AACf,QAAI0B,CAAC,CAAC/B,MAAF,KAAa,CAAjB,EAAoB,OAAOf,cAAc,CAACwC,QAAD,EAAWM,CAAX,CAAd,KAAgC,IAAhC,GAAuC,CAACA,CAAD,CAAvC,GAA6C,EAApD;AACpB,QAAIG,CAAC,GAAG,CAAR;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,CAAC,GAAG,EAAR;;AACA,WAAOD,CAAC,GAAGJ,CAAC,CAAC/B,MAAb,EAAqB;AACnByB,MAAAA,QAAQ,CAACP,SAAT,GAAqBzB,UAAU,GAAG0C,CAAH,GAAO,CAAtC;AACA,UAAIE,CAAC,GAAGpD,cAAc,CAACwC,QAAD,EAAWhC,UAAU,GAAGsC,CAAH,GAAOA,CAAC,CAACX,KAAF,CAAQe,CAAR,CAA5B,CAAtB;AACA,UAAIG,CAAJ;;AACA,UACED,CAAC,KAAK,IAAN,IACA,CAACC,CAAC,GAAGhD,GAAG,CAACN,QAAQ,CAACyC,QAAQ,CAACP,SAAT,IAAsBzB,UAAU,GAAG,CAAH,GAAO0C,CAAvC,CAAD,CAAT,EAAsDJ,CAAC,CAAC/B,MAAxD,CAAR,MAA6EkC,CAF/E,EAGE;AACAC,QAAAA,CAAC,GAAGpD,kBAAkB,CAACgD,CAAD,EAAII,CAAJ,EAAOF,eAAP,CAAtB;AACD,OALD,MAKO;AACLG,QAAAA,CAAC,CAAC/C,IAAF,CAAO0C,CAAC,CAACX,KAAF,CAAQc,CAAR,EAAWC,CAAX,CAAP;AACA,YAAIC,CAAC,CAACpC,MAAF,KAAaK,GAAjB,EAAsB,OAAO+B,CAAP;;AACtB,aAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,CAAC,CAACrC,MAAF,GAAW,CAAhC,EAAmCuC,CAAC,EAApC,EAAwC;AACtCH,UAAAA,CAAC,CAAC/C,IAAF,CAAOgD,CAAC,CAACE,CAAD,CAAR;AACA,cAAIH,CAAC,CAACpC,MAAF,KAAaK,GAAjB,EAAsB,OAAO+B,CAAP;AACvB;;AACDD,QAAAA,CAAC,GAAGD,CAAC,GAAGI,CAAR;AACD;AACF;;AACDF,IAAAA,CAAC,CAAC/C,IAAF,CAAO0C,CAAC,CAACX,KAAF,CAAQc,CAAR,CAAP;AACA,WAAOE,CAAP;AACD,GA3DI,CAAP;AA6DD,CAjH4B,EAiH1B,CAAC3C,UAjHyB,CAA7B","sourcesContent":["'use strict';\r\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\r\nvar isRegExp = require('../internals/is-regexp');\r\nvar anObject = require('../internals/an-object');\r\nvar requireObjectCoercible = require('../internals/require-object-coercible');\r\nvar speciesConstructor = require('../internals/species-constructor');\r\nvar advanceStringIndex = require('../internals/advance-string-index');\r\nvar toLength = require('../internals/to-length');\r\nvar callRegExpExec = require('../internals/regexp-exec-abstract');\r\nvar regexpExec = require('../internals/regexp-exec');\r\nvar fails = require('../internals/fails');\r\n\r\nvar arrayPush = [].push;\r\nvar min = Math.min;\r\nvar MAX_UINT32 = 0xFFFFFFFF;\r\n\r\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\r\nvar SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });\r\n\r\n// @@split logic\r\nfixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {\r\n  var internalSplit;\r\n  if (\r\n    'abbc'.split(/(b)*/)[1] == 'c' ||\r\n    'test'.split(/(?:)/, -1).length != 4 ||\r\n    'ab'.split(/(?:ab)*/).length != 2 ||\r\n    '.'.split(/(.?)(.?)/).length != 4 ||\r\n    '.'.split(/()()/).length > 1 ||\r\n    ''.split(/.?/).length\r\n  ) {\r\n    // based on es5-shim implementation, need to rework it\r\n    internalSplit = function (separator, limit) {\r\n      var string = String(requireObjectCoercible(this));\r\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\r\n      if (lim === 0) return [];\r\n      if (separator === undefined) return [string];\r\n      // If `separator` is not a regex, use native split\r\n      if (!isRegExp(separator)) {\r\n        return nativeSplit.call(string, separator, lim);\r\n      }\r\n      var output = [];\r\n      var flags = (separator.ignoreCase ? 'i' : '') +\r\n                  (separator.multiline ? 'm' : '') +\r\n                  (separator.unicode ? 'u' : '') +\r\n                  (separator.sticky ? 'y' : '');\r\n      var lastLastIndex = 0;\r\n      // Make `global` and avoid `lastIndex` issues by working with a copy\r\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\r\n      var match, lastIndex, lastLength;\r\n      while (match = regexpExec.call(separatorCopy, string)) {\r\n        lastIndex = separatorCopy.lastIndex;\r\n        if (lastIndex > lastLastIndex) {\r\n          output.push(string.slice(lastLastIndex, match.index));\r\n          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));\r\n          lastLength = match[0].length;\r\n          lastLastIndex = lastIndex;\r\n          if (output.length >= lim) break;\r\n        }\r\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\r\n      }\r\n      if (lastLastIndex === string.length) {\r\n        if (lastLength || !separatorCopy.test('')) output.push('');\r\n      } else output.push(string.slice(lastLastIndex));\r\n      return output.length > lim ? output.slice(0, lim) : output;\r\n    };\r\n  // Chakra, V8\r\n  } else if ('0'.split(undefined, 0).length) {\r\n    internalSplit = function (separator, limit) {\r\n      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);\r\n    };\r\n  } else internalSplit = nativeSplit;\r\n\r\n  return [\r\n    // `String.prototype.split` method\r\n    // https://tc39.es/ecma262/#sec-string.prototype.split\r\n    function split(separator, limit) {\r\n      var O = requireObjectCoercible(this);\r\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\r\n      return splitter !== undefined\r\n        ? splitter.call(separator, O, limit)\r\n        : internalSplit.call(String(O), separator, limit);\r\n    },\r\n    // `RegExp.prototype[@@split]` method\r\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split\r\n    //\r\n    // NOTE: This cannot be properly polyfilled in engines that don't support\r\n    // the 'y' flag.\r\n    function (regexp, limit) {\r\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);\r\n      if (res.done) return res.value;\r\n\r\n      var rx = anObject(regexp);\r\n      var S = String(this);\r\n      var C = speciesConstructor(rx, RegExp);\r\n\r\n      var unicodeMatching = rx.unicode;\r\n      var flags = (rx.ignoreCase ? 'i' : '') +\r\n                  (rx.multiline ? 'm' : '') +\r\n                  (rx.unicode ? 'u' : '') +\r\n                  (SUPPORTS_Y ? 'y' : 'g');\r\n\r\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\r\n      // simulate the 'y' flag.\r\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\r\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\r\n      if (lim === 0) return [];\r\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\r\n      var p = 0;\r\n      var q = 0;\r\n      var A = [];\r\n      while (q < S.length) {\r\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\r\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\r\n        var e;\r\n        if (\r\n          z === null ||\r\n          (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\r\n        ) {\r\n          q = advanceStringIndex(S, q, unicodeMatching);\r\n        } else {\r\n          A.push(S.slice(p, q));\r\n          if (A.length === lim) return A;\r\n          for (var i = 1; i <= z.length - 1; i++) {\r\n            A.push(z[i]);\r\n            if (A.length === lim) return A;\r\n          }\r\n          q = p = e;\r\n        }\r\n      }\r\n      A.push(S.slice(p));\r\n      return A;\r\n    }\r\n  ];\r\n}, !SUPPORTS_Y);\r\n"]},"metadata":{},"sourceType":"script"}