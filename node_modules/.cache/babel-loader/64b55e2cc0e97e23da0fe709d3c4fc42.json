{"ast":null,"code":"import { defineGetter } from \"../../../../../helpers/object.mjs\";\nvar MIXIN_NAME = 'stickyRowsBottom';\n/**\r\n * Mixin for the subclasses of `Table` with implementations of\r\n * helper methods that are related to rows.\r\n * This mixin is meant to be applied in the subclasses of `Table`\r\n * that use sticky rendering of the bottom rows in the vertical axis.\r\n *\r\n * @type {object}\r\n */\n\nvar stickyRowsBottom = {\n  /**\r\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\r\n   *\r\n   * @returns {number}\r\n   */\n  getFirstRenderedRow: function getFirstRenderedRow() {\n    var totalRows = this.wot.getSetting('totalRows');\n    var fixedRowsBottom = this.wot.getSetting('fixedRowsBottom');\n    var index = totalRows - fixedRowsBottom;\n\n    if (totalRows === 0 || fixedRowsBottom === 0) {\n      return -1;\n    }\n\n    if (index < 0) {\n      return 0;\n    }\n\n    return index;\n  },\n\n  /**\r\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\r\n   * Assumes that all rendered rows are fully visible.\r\n   *\r\n   * @returns {number}\r\n   */\n  getFirstVisibleRow: function getFirstVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n\n  /**\r\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\r\n   *\r\n   * @returns {number}\r\n   */\n  getLastRenderedRow: function getLastRenderedRow() {\n    return this.wot.getSetting('totalRows') - 1;\n  },\n\n  /**\r\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\r\n   * Assumes that all rendered rows are fully visible.\r\n   *\r\n   * @returns {number}\r\n   */\n  getLastVisibleRow: function getLastVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n\n  /**\r\n   * Get the number of rendered rows.\r\n   *\r\n   * @returns {number}\r\n   */\n  getRenderedRowsCount: function getRenderedRowsCount() {\n    var totalRows = this.wot.getSetting('totalRows');\n    return Math.min(this.wot.getSetting('fixedRowsBottom'), totalRows);\n  },\n\n  /**\r\n   * Get the number of fully visible rows in the viewport.\r\n   * Assumes that all rendered rows are fully visible.\r\n   *\r\n   * @returns {number}\r\n   */\n  getVisibleRowsCount: function getVisibleRowsCount() {\n    return this.getRenderedRowsCount();\n  }\n};\ndefineGetter(stickyRowsBottom, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyRowsBottom;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/3rdparty/walkontable/src/table/mixin/stickyRowsBottom.mjs"],"names":["defineGetter","MIXIN_NAME","stickyRowsBottom","getFirstRenderedRow","totalRows","wot","getSetting","fixedRowsBottom","index","getFirstVisibleRow","getLastRenderedRow","getLastVisibleRow","getRenderedRowsCount","Math","min","getVisibleRowsCount","writable","enumerable"],"mappings":"AAAA,SAASA,YAAT,QAA6B,mCAA7B;AACA,IAAIC,UAAU,GAAG,kBAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,gBAAgB,GAAG;AACrB;AACF;AACA;AACA;AACA;AACEC,EAAAA,mBAAmB,EAAE,SAASA,mBAAT,GAA+B;AAClD,QAAIC,SAAS,GAAG,KAAKC,GAAL,CAASC,UAAT,CAAoB,WAApB,CAAhB;AACA,QAAIC,eAAe,GAAG,KAAKF,GAAL,CAASC,UAAT,CAAoB,iBAApB,CAAtB;AACA,QAAIE,KAAK,GAAGJ,SAAS,GAAGG,eAAxB;;AAEA,QAAIH,SAAS,KAAK,CAAd,IAAmBG,eAAe,KAAK,CAA3C,EAA8C;AAC5C,aAAO,CAAC,CAAR;AACD;;AAED,QAAIC,KAAK,GAAG,CAAZ,EAAe;AACb,aAAO,CAAP;AACD;;AAED,WAAOA,KAAP;AACD,GApBoB;;AAsBrB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,GAA8B;AAChD,WAAO,KAAKN,mBAAL,EAAP;AACD,GA9BoB;;AAgCrB;AACF;AACA;AACA;AACA;AACEO,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,GAA8B;AAChD,WAAO,KAAKL,GAAL,CAASC,UAAT,CAAoB,WAApB,IAAmC,CAA1C;AACD,GAvCoB;;AAyCrB;AACF;AACA;AACA;AACA;AACA;AACEK,EAAAA,iBAAiB,EAAE,SAASA,iBAAT,GAA6B;AAC9C,WAAO,KAAKD,kBAAL,EAAP;AACD,GAjDoB;;AAmDrB;AACF;AACA;AACA;AACA;AACEE,EAAAA,oBAAoB,EAAE,SAASA,oBAAT,GAAgC;AACpD,QAAIR,SAAS,GAAG,KAAKC,GAAL,CAASC,UAAT,CAAoB,WAApB,CAAhB;AACA,WAAOO,IAAI,CAACC,GAAL,CAAS,KAAKT,GAAL,CAASC,UAAT,CAAoB,iBAApB,CAAT,EAAiDF,SAAjD,CAAP;AACD,GA3DoB;;AA6DrB;AACF;AACA;AACA;AACA;AACA;AACEW,EAAAA,mBAAmB,EAAE,SAASA,mBAAT,GAA+B;AAClD,WAAO,KAAKH,oBAAL,EAAP;AACD;AArEoB,CAAvB;AAuEAZ,YAAY,CAACE,gBAAD,EAAmB,YAAnB,EAAiCD,UAAjC,EAA6C;AACvDe,EAAAA,QAAQ,EAAE,KAD6C;AAEvDC,EAAAA,UAAU,EAAE;AAF2C,CAA7C,CAAZ;AAIA,eAAef,gBAAf","sourcesContent":["import { defineGetter } from \"../../../../../helpers/object.mjs\";\r\nvar MIXIN_NAME = 'stickyRowsBottom';\r\n/**\r\n * Mixin for the subclasses of `Table` with implementations of\r\n * helper methods that are related to rows.\r\n * This mixin is meant to be applied in the subclasses of `Table`\r\n * that use sticky rendering of the bottom rows in the vertical axis.\r\n *\r\n * @type {object}\r\n */\r\n\r\nvar stickyRowsBottom = {\r\n  /**\r\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getFirstRenderedRow: function getFirstRenderedRow() {\r\n    var totalRows = this.wot.getSetting('totalRows');\r\n    var fixedRowsBottom = this.wot.getSetting('fixedRowsBottom');\r\n    var index = totalRows - fixedRowsBottom;\r\n\r\n    if (totalRows === 0 || fixedRowsBottom === 0) {\r\n      return -1;\r\n    }\r\n\r\n    if (index < 0) {\r\n      return 0;\r\n    }\r\n\r\n    return index;\r\n  },\r\n\r\n  /**\r\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\r\n   * Assumes that all rendered rows are fully visible.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getFirstVisibleRow: function getFirstVisibleRow() {\r\n    return this.getFirstRenderedRow();\r\n  },\r\n\r\n  /**\r\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getLastRenderedRow: function getLastRenderedRow() {\r\n    return this.wot.getSetting('totalRows') - 1;\r\n  },\r\n\r\n  /**\r\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\r\n   * Assumes that all rendered rows are fully visible.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getLastVisibleRow: function getLastVisibleRow() {\r\n    return this.getLastRenderedRow();\r\n  },\r\n\r\n  /**\r\n   * Get the number of rendered rows.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getRenderedRowsCount: function getRenderedRowsCount() {\r\n    var totalRows = this.wot.getSetting('totalRows');\r\n    return Math.min(this.wot.getSetting('fixedRowsBottom'), totalRows);\r\n  },\r\n\r\n  /**\r\n   * Get the number of fully visible rows in the viewport.\r\n   * Assumes that all rendered rows are fully visible.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getVisibleRowsCount: function getVisibleRowsCount() {\r\n    return this.getRenderedRowsCount();\r\n  }\r\n};\r\ndefineGetter(stickyRowsBottom, 'MIXIN_NAME', MIXIN_NAME, {\r\n  writable: false,\r\n  enumerable: false\r\n});\r\nexport default stickyRowsBottom;"]},"metadata":{},"sourceType":"module"}