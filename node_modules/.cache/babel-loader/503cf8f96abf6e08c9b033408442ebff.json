{"ast":null,"code":"import staticRegister from \"../utils/staticRegister.mjs\";\nimport { registerEditor } from \"../editors/registry.mjs\";\nimport { registerRenderer } from \"../renderers/registry.mjs\";\nimport { registerValidator } from \"../validators/registry.mjs\";\n\nvar _staticRegister = staticRegister('cellTypes'),\n    register = _staticRegister.register,\n    getItem = _staticRegister.getItem,\n    hasItem = _staticRegister.hasItem,\n    getNames = _staticRegister.getNames,\n    getValues = _staticRegister.getValues;\n/**\n * Retrieve cell type object.\n *\n * @param {string} name Cell type identification.\n * @returns {object} Returns cell type object.\n */\n\n\nfunction _getItem(name) {\n  if (!hasItem(name)) {\n    throw Error(\"You declared cell type \\\"\".concat(name, \"\\\" as a string that is not mapped to a known object.\\n                 Cell type must be an object or a string mapped to an object registered by\\n                 \\\"Handsontable.cellTypes.registerCellType\\\" method\"));\n  }\n\n  return getItem(name);\n}\n/**\n * Register cell type under specified name.\n *\n * @param {string} name Cell type identification.\n * @param {object} type An object with contains keys (eq: `editor`, `renderer`, `validator`) which describes specified behaviour of the cell.\n */\n\n\nfunction _register(name, type) {\n  if (typeof name !== 'string') {\n    type = name;\n    name = type.CELL_TYPE;\n  }\n\n  var _type = type,\n      editor = _type.editor,\n      renderer = _type.renderer,\n      validator = _type.validator;\n\n  if (editor) {\n    registerEditor(name, editor);\n  }\n\n  if (renderer) {\n    registerRenderer(name, renderer);\n  }\n\n  if (validator) {\n    registerValidator(name, validator);\n  }\n\n  register(name, type);\n}\n\nexport { _register as registerCellType, _getItem as getCellType, hasItem as hasCellType, getNames as getRegisteredCellTypeNames, getValues as getRegisteredCellTypes };","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/cellTypes/registry.mjs"],"names":["staticRegister","registerEditor","registerRenderer","registerValidator","_staticRegister","register","getItem","hasItem","getNames","getValues","_getItem","name","Error","concat","_register","type","CELL_TYPE","_type","editor","renderer","validator","registerCellType","getCellType","hasCellType","getRegisteredCellTypeNames","getRegisteredCellTypes"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,6BAA3B;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,iBAAT,QAAkC,4BAAlC;;AAEA,IAAIC,eAAe,GAAGJ,cAAc,CAAC,WAAD,CAApC;AAAA,IACIK,QAAQ,GAAGD,eAAe,CAACC,QAD/B;AAAA,IAEIC,OAAO,GAAGF,eAAe,CAACE,OAF9B;AAAA,IAGIC,OAAO,GAAGH,eAAe,CAACG,OAH9B;AAAA,IAIIC,QAAQ,GAAGJ,eAAe,CAACI,QAJ/B;AAAA,IAKIC,SAAS,GAAGL,eAAe,CAACK,SALhC;AAMA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAI,CAACJ,OAAO,CAACI,IAAD,CAAZ,EAAoB;AAClB,UAAMC,KAAK,CAAC,4BAA4BC,MAA5B,CAAmCF,IAAnC,EAAyC,uNAAzC,CAAD,CAAX;AACD;;AAED,SAAOL,OAAO,CAACK,IAAD,CAAd;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASG,SAAT,CAAmBH,IAAnB,EAAyBI,IAAzB,EAA+B;AAC7B,MAAI,OAAOJ,IAAP,KAAgB,QAApB,EAA8B;AAC5BI,IAAAA,IAAI,GAAGJ,IAAP;AACAA,IAAAA,IAAI,GAAGI,IAAI,CAACC,SAAZ;AACD;;AAED,MAAIC,KAAK,GAAGF,IAAZ;AAAA,MACIG,MAAM,GAAGD,KAAK,CAACC,MADnB;AAAA,MAEIC,QAAQ,GAAGF,KAAK,CAACE,QAFrB;AAAA,MAGIC,SAAS,GAAGH,KAAK,CAACG,SAHtB;;AAKA,MAAIF,MAAJ,EAAY;AACVjB,IAAAA,cAAc,CAACU,IAAD,EAAOO,MAAP,CAAd;AACD;;AAED,MAAIC,QAAJ,EAAc;AACZjB,IAAAA,gBAAgB,CAACS,IAAD,EAAOQ,QAAP,CAAhB;AACD;;AAED,MAAIC,SAAJ,EAAe;AACbjB,IAAAA,iBAAiB,CAACQ,IAAD,EAAOS,SAAP,CAAjB;AACD;;AAEDf,EAAAA,QAAQ,CAACM,IAAD,EAAOI,IAAP,CAAR;AACD;;AAED,SAASD,SAAS,IAAIO,gBAAtB,EAAwCX,QAAQ,IAAIY,WAApD,EAAiEf,OAAO,IAAIgB,WAA5E,EAAyFf,QAAQ,IAAIgB,0BAArG,EAAiIf,SAAS,IAAIgB,sBAA9I","sourcesContent":["import staticRegister from \"../utils/staticRegister.mjs\";\nimport { registerEditor } from \"../editors/registry.mjs\";\nimport { registerRenderer } from \"../renderers/registry.mjs\";\nimport { registerValidator } from \"../validators/registry.mjs\";\n\nvar _staticRegister = staticRegister('cellTypes'),\n    register = _staticRegister.register,\n    getItem = _staticRegister.getItem,\n    hasItem = _staticRegister.hasItem,\n    getNames = _staticRegister.getNames,\n    getValues = _staticRegister.getValues;\n/**\n * Retrieve cell type object.\n *\n * @param {string} name Cell type identification.\n * @returns {object} Returns cell type object.\n */\n\n\nfunction _getItem(name) {\n  if (!hasItem(name)) {\n    throw Error(\"You declared cell type \\\"\".concat(name, \"\\\" as a string that is not mapped to a known object.\\n                 Cell type must be an object or a string mapped to an object registered by\\n                 \\\"Handsontable.cellTypes.registerCellType\\\" method\"));\n  }\n\n  return getItem(name);\n}\n/**\n * Register cell type under specified name.\n *\n * @param {string} name Cell type identification.\n * @param {object} type An object with contains keys (eq: `editor`, `renderer`, `validator`) which describes specified behaviour of the cell.\n */\n\n\nfunction _register(name, type) {\n  if (typeof name !== 'string') {\n    type = name;\n    name = type.CELL_TYPE;\n  }\n\n  var _type = type,\n      editor = _type.editor,\n      renderer = _type.renderer,\n      validator = _type.validator;\n\n  if (editor) {\n    registerEditor(name, editor);\n  }\n\n  if (renderer) {\n    registerRenderer(name, renderer);\n  }\n\n  if (validator) {\n    registerValidator(name, validator);\n  }\n\n  register(name, type);\n}\n\nexport { _register as registerCellType, _getItem as getCellType, hasItem as hasCellType, getNames as getRegisteredCellTypeNames, getValues as getRegisteredCellTypes };"]},"metadata":{},"sourceType":"module"}