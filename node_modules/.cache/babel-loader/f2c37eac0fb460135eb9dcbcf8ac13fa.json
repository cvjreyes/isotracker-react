{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { CellCoords, CellRange } from \"../../../3rdparty/walkontable/src/index.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\n/**\r\n * Class responsible for all of the Autofill-related operations on merged cells.\r\n *\r\n * @class AutofillCalculations\r\n * @plugin MergeCells\r\n * @util\r\n */\n\nvar AutofillCalculations = /*#__PURE__*/function () {\n  function AutofillCalculations(plugin) {\n    _classCallCheck(this, AutofillCalculations);\n    /**\r\n     * Reference to the Merge Cells plugin.\r\n     *\r\n     * @type {MergeCells}\r\n     */\n\n\n    this.plugin = plugin;\n    /**\r\n     * Reference to the MergedCellsCollection class instance.\r\n     *\r\n     * @type {MergedCellsCollection}\r\n     */\n\n    this.mergedCellsCollection = this.plugin.mergedCellsCollection;\n    /**\r\n     * Cache of the currently processed autofill data.\r\n     *\r\n     * @private\r\n     * @type {object}\r\n     */\n\n    this.currentFillData = null;\n  }\n  /**\r\n   * Correct the provided selection area, so it's not selecting only a part of a merged cell.\r\n   *\r\n   * @param {Array} selectionArea The selection to correct.\r\n   */\n\n\n  _createClass(AutofillCalculations, [{\n    key: \"correctSelectionAreaSize\",\n    value: function correctSelectionAreaSize(selectionArea) {\n      if (selectionArea[0] === selectionArea[2] && selectionArea[1] === selectionArea[3]) {\n        var mergedCell = this.mergedCellsCollection.get(selectionArea[0], selectionArea[1]);\n\n        if (mergedCell) {\n          selectionArea[2] = selectionArea[0] + mergedCell.rowspan - 1;\n          selectionArea[3] = selectionArea[1] + mergedCell.colspan - 1;\n        }\n      }\n    }\n    /**\r\n     * Get the direction of the autofill process.\r\n     *\r\n     * @param {Array} selectionArea The selection area.\r\n     * @param {Array} finalArea The final area (base + drag).\r\n     * @returns {string} `up`, `down`, `left` or `right`.\r\n     */\n\n  }, {\n    key: \"getDirection\",\n    value: function getDirection(selectionArea, finalArea) {\n      var direction = null;\n\n      if (finalArea[0] === selectionArea[0] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n        direction = 'down';\n      } else if (finalArea[2] === selectionArea[2] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n        direction = 'up';\n      } else if (finalArea[1] === selectionArea[1] && finalArea[2] === selectionArea[2]) {\n        direction = 'right';\n      } else {\n        direction = 'left';\n      }\n\n      return direction;\n    }\n    /**\r\n     * Snap the drag area to the farthest merged cell, so it won't clip any of the merged cells.\r\n     *\r\n     * @param {Array} baseArea The base selected area.\r\n     * @param {Array} dragArea The drag area.\r\n     * @param {string} dragDirection The autofill drag direction.\r\n     * @param {Array} foundMergedCells MergeCellCoords found in the base selection area.\r\n     * @returns {Array} The new drag area.\r\n     */\n\n  }, {\n    key: \"snapDragArea\",\n    value: function snapDragArea(baseArea, dragArea, dragDirection, foundMergedCells) {\n      var newDragArea = dragArea.slice(0);\n      var fillSize = this.getAutofillSize(baseArea, dragArea, dragDirection);\n\n      var _baseArea = _slicedToArray(baseArea, 4),\n          baseAreaStartRow = _baseArea[0],\n          baseAreaStartColumn = _baseArea[1],\n          baseAreaEndRow = _baseArea[2],\n          baseAreaEndColumn = _baseArea[3];\n\n      var verticalDirection = ['up', 'down'].indexOf(dragDirection) > -1;\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n      var partials = fillSize - fulls;\n      var farthestCollection = this.getFarthestCollection(baseArea, dragArea, dragDirection, foundMergedCells);\n\n      if (farthestCollection) {\n        if (dragDirection === 'down') {\n          var fill = farthestCollection.row + farthestCollection.rowspan - baseAreaStartRow - partials;\n          var newLimit = newDragArea[2] + fill;\n\n          if (newLimit >= this.plugin.hot.countRows()) {\n            newDragArea[2] -= partials;\n          } else {\n            newDragArea[2] += partials ? fill : 0;\n          }\n        } else if (dragDirection === 'right') {\n          var _fill = farthestCollection.col + farthestCollection.colspan - baseAreaStartColumn - partials;\n\n          var _newLimit = newDragArea[3] + _fill;\n\n          if (_newLimit >= this.plugin.hot.countCols()) {\n            newDragArea[3] -= partials;\n          } else {\n            newDragArea[3] += partials ? _fill : 0;\n          }\n        } else if (dragDirection === 'up') {\n          var _fill2 = baseAreaEndRow - partials - farthestCollection.row + 1;\n\n          var _newLimit2 = newDragArea[0] + _fill2;\n\n          if (_newLimit2 < 0) {\n            newDragArea[0] += partials;\n          } else {\n            newDragArea[0] -= partials ? _fill2 : 0;\n          }\n        } else if (dragDirection === 'left') {\n          var _fill3 = baseAreaEndColumn - partials - farthestCollection.col + 1;\n\n          var _newLimit3 = newDragArea[1] + _fill3;\n\n          if (_newLimit3 < 0) {\n            newDragArea[1] += partials;\n          } else {\n            newDragArea[1] -= partials ? _fill3 : 0;\n          }\n        }\n      }\n\n      this.updateCurrentFillCache({\n        baseArea: baseArea,\n        dragDirection: dragDirection,\n        foundMergedCells: foundMergedCells,\n        fillSize: fillSize,\n        dragArea: newDragArea,\n        cycleLength: fullCycle\n      });\n      return newDragArea;\n    }\n    /**\r\n     * Update the current fill cache with the provided object.\r\n     *\r\n     * @private\r\n     * @param {object} updateObject The current filled object cache.\r\n     */\n\n  }, {\n    key: \"updateCurrentFillCache\",\n    value: function updateCurrentFillCache(updateObject) {\n      if (!this.currentFillData) {\n        this.currentFillData = {};\n      }\n\n      extend(this.currentFillData, updateObject);\n    }\n    /**\r\n     * Get the \"length\" of the drag area.\r\n     *\r\n     * @private\r\n     * @param {Array} baseArea The base selection area.\r\n     * @param {Array} dragArea The drag area (containing the base area).\r\n     * @param {string} direction The drag direction.\r\n     * @returns {number|null} The \"length\" (height or width, depending on the direction) of the drag.\r\n     */\n\n  }, {\n    key: \"getAutofillSize\",\n    value: function getAutofillSize(baseArea, dragArea, direction) {\n      var _baseArea2 = _slicedToArray(baseArea, 4),\n          baseAreaStartRow = _baseArea2[0],\n          baseAreaStartColumn = _baseArea2[1],\n          baseAreaEndRow = _baseArea2[2],\n          baseAreaEndColumn = _baseArea2[3];\n\n      var _dragArea = _slicedToArray(dragArea, 4),\n          dragAreaStartRow = _dragArea[0],\n          dragAreaStartColumn = _dragArea[1],\n          dragAreaEndRow = _dragArea[2],\n          dragAreaEndColumn = _dragArea[3];\n\n      switch (direction) {\n        case 'up':\n          return baseAreaStartRow - dragAreaStartRow;\n\n        case 'down':\n          return dragAreaEndRow - baseAreaEndRow;\n\n        case 'left':\n          return baseAreaStartColumn - dragAreaStartColumn;\n\n        case 'right':\n          return dragAreaEndColumn - baseAreaEndColumn;\n\n        default:\n          return null;\n      }\n    }\n    /**\r\n     * Trim the default drag area (containing the selection area) to the drag-only area.\r\n     *\r\n     * @private\r\n     * @param {Array} baseArea The base selection area.\r\n     * @param {Array} dragArea The base selection area extended by the drag area.\r\n     * @param {string} direction Drag direction.\r\n     * @returns {Array|null} Array representing the drag area coordinates.\r\n     */\n\n  }, {\n    key: \"getDragArea\",\n    value: function getDragArea(baseArea, dragArea, direction) {\n      var _baseArea3 = _slicedToArray(baseArea, 4),\n          baseAreaStartRow = _baseArea3[0],\n          baseAreaStartColumn = _baseArea3[1],\n          baseAreaEndRow = _baseArea3[2],\n          baseAreaEndColumn = _baseArea3[3];\n\n      var _dragArea2 = _slicedToArray(dragArea, 4),\n          dragAreaStartRow = _dragArea2[0],\n          dragAreaStartColumn = _dragArea2[1],\n          dragAreaEndRow = _dragArea2[2],\n          dragAreaEndColumn = _dragArea2[3];\n\n      switch (direction) {\n        case 'up':\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaStartRow - 1, baseAreaEndColumn];\n\n        case 'down':\n          return [baseAreaEndRow + 1, baseAreaStartColumn, dragAreaEndRow, baseAreaEndColumn];\n\n        case 'left':\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaEndRow, baseAreaStartColumn - 1];\n\n        case 'right':\n          return [baseAreaStartRow, baseAreaEndColumn + 1, dragAreaEndRow, dragAreaEndColumn];\n\n        default:\n          return null;\n      }\n    }\n    /**\r\n     * Get the to-be-farthest merged cell in the newly filled area.\r\n     *\r\n     * @private\r\n     * @param {Array} baseArea The base selection area.\r\n     * @param {Array} dragArea The drag area (containing the base area).\r\n     * @param {string} direction The drag direction.\r\n     * @param {Array} mergedCellArray Array of the merged cells found in the base area.\r\n     * @returns {MergedCellCoords|null}\r\n     */\n\n  }, {\n    key: \"getFarthestCollection\",\n    value: function getFarthestCollection(baseArea, dragArea, direction, mergedCellArray) {\n      var _baseArea4 = _slicedToArray(baseArea, 4),\n          baseAreaStartRow = _baseArea4[0],\n          baseAreaStartColumn = _baseArea4[1],\n          baseAreaEndRow = _baseArea4[2],\n          baseAreaEndColumn = _baseArea4[3];\n\n      var verticalDirection = ['up', 'down'].indexOf(direction) > -1;\n      var baseEnd = verticalDirection ? baseAreaEndRow : baseAreaEndColumn;\n      var baseStart = verticalDirection ? baseAreaStartRow : baseAreaStartColumn;\n      var fillSize = this.getAutofillSize(baseArea, dragArea, direction);\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n      var partials = fillSize - fulls;\n      var inclusionFunctionName = null;\n      var farthestCollection = null;\n      var endOfDragRecreationIndex = null;\n\n      switch (direction) {\n        case 'up':\n          inclusionFunctionName = 'includesVertically';\n          endOfDragRecreationIndex = baseEnd - partials + 1;\n          break;\n\n        case 'left':\n          inclusionFunctionName = 'includesHorizontally';\n          endOfDragRecreationIndex = baseEnd - partials + 1;\n          break;\n\n        case 'down':\n          inclusionFunctionName = 'includesVertically';\n          endOfDragRecreationIndex = baseStart + partials - 1;\n          break;\n\n        case 'right':\n          inclusionFunctionName = 'includesHorizontally';\n          endOfDragRecreationIndex = baseStart + partials - 1;\n          break;\n\n        default:\n      }\n\n      arrayEach(mergedCellArray, function (currentCollection) {\n        if (currentCollection[inclusionFunctionName](endOfDragRecreationIndex) && currentCollection.isFarther(farthestCollection, direction)) {\n          farthestCollection = currentCollection;\n        }\n      });\n      return farthestCollection;\n    }\n    /**\r\n     * Recreate the merged cells after the autofill process.\r\n     *\r\n     * @param {Array} changes Changes made.\r\n     */\n\n  }, {\n    key: \"recreateAfterDataPopulation\",\n    value: function recreateAfterDataPopulation(changes) {\n      if (!this.currentFillData) {\n        return;\n      }\n\n      var fillRange = this.getRangeFromChanges(changes);\n      var foundMergedCells = this.currentFillData.foundMergedCells;\n      var dragDirection = this.currentFillData.dragDirection;\n\n      var inBounds = function inBounds(current, offset) {\n        switch (dragDirection) {\n          case 'up':\n            return current.row - offset >= fillRange.from.row;\n\n          case 'down':\n            return current.row + current.rowspan - 1 + offset <= fillRange.to.row;\n\n          case 'left':\n            return current.col - offset >= fillRange.from.column;\n\n          case 'right':\n            return current.col + current.colspan - 1 + offset <= fillRange.to.column;\n\n          default:\n            return null;\n        }\n      };\n\n      var fillOffset = 0;\n      var current = null;\n      var multiplier = 1;\n\n      do {\n        for (var j = 0; j < foundMergedCells.length; j += 1) {\n          current = foundMergedCells[j];\n          fillOffset = multiplier * this.currentFillData.cycleLength;\n\n          if (inBounds(current, fillOffset)) {\n            switch (dragDirection) {\n              case 'up':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row - fillOffset,\n                  rowspan: current.rowspan,\n                  col: current.col,\n                  colspan: current.colspan\n                });\n                break;\n\n              case 'down':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row + fillOffset,\n                  rowspan: current.rowspan,\n                  col: current.col,\n                  colspan: current.colspan\n                });\n                break;\n\n              case 'left':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row,\n                  rowspan: current.rowspan,\n                  col: current.col - fillOffset,\n                  colspan: current.colspan\n                });\n                break;\n\n              case 'right':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row,\n                  rowspan: current.rowspan,\n                  col: current.col + fillOffset,\n                  colspan: current.colspan\n                });\n                break;\n\n              default:\n            }\n          }\n\n          if (j === foundMergedCells.length - 1) {\n            multiplier += 1;\n          }\n        }\n      } while (inBounds(current, fillOffset));\n\n      this.currentFillData = null;\n      this.plugin.hot.render();\n    }\n    /**\r\n     * Get the drag range from the changes made.\r\n     *\r\n     * @private\r\n     * @param {Array} changes The changes made.\r\n     * @returns {object} Object with `from` and `to` properties, both containing `row` and `column` keys.\r\n     */\n\n  }, {\n    key: \"getRangeFromChanges\",\n    value: function getRangeFromChanges(changes) {\n      var _this = this;\n\n      var rows = {\n        min: null,\n        max: null\n      };\n      var columns = {\n        min: null,\n        max: null\n      };\n      arrayEach(changes, function (change) {\n        var rowIndex = change[0];\n\n        var columnIndex = _this.plugin.hot.propToCol(change[1]);\n\n        if (rows.min === null || rowIndex < rows.min) {\n          rows.min = rowIndex;\n        }\n\n        if (rows.max === null || rowIndex > rows.max) {\n          rows.max = rowIndex;\n        }\n\n        if (columns.min === null || columnIndex < columns.min) {\n          columns.min = columnIndex;\n        }\n\n        if (columns.max === null || columnIndex > columns.max) {\n          columns.max = columnIndex;\n        }\n      });\n      return {\n        from: {\n          row: rows.min,\n          column: columns.min\n        },\n        to: {\n          row: rows.max,\n          column: columns.max\n        }\n      };\n    }\n    /**\r\n     * Check if the drag area contains any merged cells.\r\n     *\r\n     * @param {Array} baseArea The base selection area.\r\n     * @param {Array} fullArea The base area extended by the drag area.\r\n     * @param {string} direction Drag direction.\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"dragAreaOverlapsCollections\",\n    value: function dragAreaOverlapsCollections(baseArea, fullArea, direction) {\n      var dragArea = this.getDragArea(baseArea, fullArea, direction);\n\n      var _dragArea3 = _slicedToArray(dragArea, 4),\n          dragAreaStartRow = _dragArea3[0],\n          dragAreaStartColumn = _dragArea3[1],\n          dragAreaEndRow = _dragArea3[2],\n          dragAreaEndColumn = _dragArea3[3];\n\n      var topLeft = new CellCoords(dragAreaStartRow, dragAreaStartColumn);\n      var bottomRight = new CellCoords(dragAreaEndRow, dragAreaEndColumn);\n      var dragRange = new CellRange(topLeft, topLeft, bottomRight);\n      return !!this.mergedCellsCollection.getWithinRange(dragRange, true);\n    }\n  }]);\n\n  return AutofillCalculations;\n}();\n\nexport default AutofillCalculations;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/mergeCells/calculations/autofill.mjs"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","extend","CellCoords","CellRange","arrayEach","AutofillCalculations","plugin","mergedCellsCollection","currentFillData","correctSelectionAreaSize","selectionArea","mergedCell","get","rowspan","colspan","getDirection","finalArea","direction","snapDragArea","baseArea","dragArea","dragDirection","foundMergedCells","newDragArea","fillSize","getAutofillSize","_baseArea","baseAreaStartRow","baseAreaStartColumn","baseAreaEndRow","baseAreaEndColumn","verticalDirection","indexOf","fullCycle","fulls","Math","floor","partials","farthestCollection","getFarthestCollection","fill","row","newLimit","hot","countRows","_fill","col","_newLimit","countCols","_fill2","_newLimit2","_fill3","_newLimit3","updateCurrentFillCache","cycleLength","updateObject","_baseArea2","_dragArea","dragAreaStartRow","dragAreaStartColumn","dragAreaEndRow","dragAreaEndColumn","getDragArea","_baseArea3","_dragArea2","mergedCellArray","_baseArea4","baseEnd","baseStart","inclusionFunctionName","endOfDragRecreationIndex","currentCollection","isFarther","recreateAfterDataPopulation","changes","fillRange","getRangeFromChanges","inBounds","current","offset","to","column","fillOffset","multiplier","j","add","render","_this","rows","min","max","columns","change","rowIndex","columnIndex","propToCol","dragAreaOverlapsCollections","fullArea","_dragArea3","topLeft","bottomRight","dragRange","getWithinRange"],"mappings":"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","sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\r\n\r\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\r\n\r\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\r\n\r\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\r\n\r\nimport \"core-js/modules/es.array.slice.js\";\r\nimport \"core-js/modules/es.array.index-of.js\";\r\nimport \"core-js/modules/es.symbol.js\";\r\nimport \"core-js/modules/es.symbol.description.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.symbol.iterator.js\";\r\nimport \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\nimport \"core-js/modules/es.function.name.js\";\r\nimport \"core-js/modules/es.array.from.js\";\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nimport { extend } from \"../../../helpers/object.mjs\";\r\nimport { CellCoords, CellRange } from \"../../../3rdparty/walkontable/src/index.mjs\";\r\nimport { arrayEach } from \"../../../helpers/array.mjs\";\r\n/**\r\n * Class responsible for all of the Autofill-related operations on merged cells.\r\n *\r\n * @class AutofillCalculations\r\n * @plugin MergeCells\r\n * @util\r\n */\r\n\r\nvar AutofillCalculations = /*#__PURE__*/function () {\r\n  function AutofillCalculations(plugin) {\r\n    _classCallCheck(this, AutofillCalculations);\r\n\r\n    /**\r\n     * Reference to the Merge Cells plugin.\r\n     *\r\n     * @type {MergeCells}\r\n     */\r\n    this.plugin = plugin;\r\n    /**\r\n     * Reference to the MergedCellsCollection class instance.\r\n     *\r\n     * @type {MergedCellsCollection}\r\n     */\r\n\r\n    this.mergedCellsCollection = this.plugin.mergedCellsCollection;\r\n    /**\r\n     * Cache of the currently processed autofill data.\r\n     *\r\n     * @private\r\n     * @type {object}\r\n     */\r\n\r\n    this.currentFillData = null;\r\n  }\r\n  /**\r\n   * Correct the provided selection area, so it's not selecting only a part of a merged cell.\r\n   *\r\n   * @param {Array} selectionArea The selection to correct.\r\n   */\r\n\r\n\r\n  _createClass(AutofillCalculations, [{\r\n    key: \"correctSelectionAreaSize\",\r\n    value: function correctSelectionAreaSize(selectionArea) {\r\n      if (selectionArea[0] === selectionArea[2] && selectionArea[1] === selectionArea[3]) {\r\n        var mergedCell = this.mergedCellsCollection.get(selectionArea[0], selectionArea[1]);\r\n\r\n        if (mergedCell) {\r\n          selectionArea[2] = selectionArea[0] + mergedCell.rowspan - 1;\r\n          selectionArea[3] = selectionArea[1] + mergedCell.colspan - 1;\r\n        }\r\n      }\r\n    }\r\n    /**\r\n     * Get the direction of the autofill process.\r\n     *\r\n     * @param {Array} selectionArea The selection area.\r\n     * @param {Array} finalArea The final area (base + drag).\r\n     * @returns {string} `up`, `down`, `left` or `right`.\r\n     */\r\n\r\n  }, {\r\n    key: \"getDirection\",\r\n    value: function getDirection(selectionArea, finalArea) {\r\n      var direction = null;\r\n\r\n      if (finalArea[0] === selectionArea[0] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\r\n        direction = 'down';\r\n      } else if (finalArea[2] === selectionArea[2] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\r\n        direction = 'up';\r\n      } else if (finalArea[1] === selectionArea[1] && finalArea[2] === selectionArea[2]) {\r\n        direction = 'right';\r\n      } else {\r\n        direction = 'left';\r\n      }\r\n\r\n      return direction;\r\n    }\r\n    /**\r\n     * Snap the drag area to the farthest merged cell, so it won't clip any of the merged cells.\r\n     *\r\n     * @param {Array} baseArea The base selected area.\r\n     * @param {Array} dragArea The drag area.\r\n     * @param {string} dragDirection The autofill drag direction.\r\n     * @param {Array} foundMergedCells MergeCellCoords found in the base selection area.\r\n     * @returns {Array} The new drag area.\r\n     */\r\n\r\n  }, {\r\n    key: \"snapDragArea\",\r\n    value: function snapDragArea(baseArea, dragArea, dragDirection, foundMergedCells) {\r\n      var newDragArea = dragArea.slice(0);\r\n      var fillSize = this.getAutofillSize(baseArea, dragArea, dragDirection);\r\n\r\n      var _baseArea = _slicedToArray(baseArea, 4),\r\n          baseAreaStartRow = _baseArea[0],\r\n          baseAreaStartColumn = _baseArea[1],\r\n          baseAreaEndRow = _baseArea[2],\r\n          baseAreaEndColumn = _baseArea[3];\r\n\r\n      var verticalDirection = ['up', 'down'].indexOf(dragDirection) > -1;\r\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\r\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\r\n      var partials = fillSize - fulls;\r\n      var farthestCollection = this.getFarthestCollection(baseArea, dragArea, dragDirection, foundMergedCells);\r\n\r\n      if (farthestCollection) {\r\n        if (dragDirection === 'down') {\r\n          var fill = farthestCollection.row + farthestCollection.rowspan - baseAreaStartRow - partials;\r\n          var newLimit = newDragArea[2] + fill;\r\n\r\n          if (newLimit >= this.plugin.hot.countRows()) {\r\n            newDragArea[2] -= partials;\r\n          } else {\r\n            newDragArea[2] += partials ? fill : 0;\r\n          }\r\n        } else if (dragDirection === 'right') {\r\n          var _fill = farthestCollection.col + farthestCollection.colspan - baseAreaStartColumn - partials;\r\n\r\n          var _newLimit = newDragArea[3] + _fill;\r\n\r\n          if (_newLimit >= this.plugin.hot.countCols()) {\r\n            newDragArea[3] -= partials;\r\n          } else {\r\n            newDragArea[3] += partials ? _fill : 0;\r\n          }\r\n        } else if (dragDirection === 'up') {\r\n          var _fill2 = baseAreaEndRow - partials - farthestCollection.row + 1;\r\n\r\n          var _newLimit2 = newDragArea[0] + _fill2;\r\n\r\n          if (_newLimit2 < 0) {\r\n            newDragArea[0] += partials;\r\n          } else {\r\n            newDragArea[0] -= partials ? _fill2 : 0;\r\n          }\r\n        } else if (dragDirection === 'left') {\r\n          var _fill3 = baseAreaEndColumn - partials - farthestCollection.col + 1;\r\n\r\n          var _newLimit3 = newDragArea[1] + _fill3;\r\n\r\n          if (_newLimit3 < 0) {\r\n            newDragArea[1] += partials;\r\n          } else {\r\n            newDragArea[1] -= partials ? _fill3 : 0;\r\n          }\r\n        }\r\n      }\r\n\r\n      this.updateCurrentFillCache({\r\n        baseArea: baseArea,\r\n        dragDirection: dragDirection,\r\n        foundMergedCells: foundMergedCells,\r\n        fillSize: fillSize,\r\n        dragArea: newDragArea,\r\n        cycleLength: fullCycle\r\n      });\r\n      return newDragArea;\r\n    }\r\n    /**\r\n     * Update the current fill cache with the provided object.\r\n     *\r\n     * @private\r\n     * @param {object} updateObject The current filled object cache.\r\n     */\r\n\r\n  }, {\r\n    key: \"updateCurrentFillCache\",\r\n    value: function updateCurrentFillCache(updateObject) {\r\n      if (!this.currentFillData) {\r\n        this.currentFillData = {};\r\n      }\r\n\r\n      extend(this.currentFillData, updateObject);\r\n    }\r\n    /**\r\n     * Get the \"length\" of the drag area.\r\n     *\r\n     * @private\r\n     * @param {Array} baseArea The base selection area.\r\n     * @param {Array} dragArea The drag area (containing the base area).\r\n     * @param {string} direction The drag direction.\r\n     * @returns {number|null} The \"length\" (height or width, depending on the direction) of the drag.\r\n     */\r\n\r\n  }, {\r\n    key: \"getAutofillSize\",\r\n    value: function getAutofillSize(baseArea, dragArea, direction) {\r\n      var _baseArea2 = _slicedToArray(baseArea, 4),\r\n          baseAreaStartRow = _baseArea2[0],\r\n          baseAreaStartColumn = _baseArea2[1],\r\n          baseAreaEndRow = _baseArea2[2],\r\n          baseAreaEndColumn = _baseArea2[3];\r\n\r\n      var _dragArea = _slicedToArray(dragArea, 4),\r\n          dragAreaStartRow = _dragArea[0],\r\n          dragAreaStartColumn = _dragArea[1],\r\n          dragAreaEndRow = _dragArea[2],\r\n          dragAreaEndColumn = _dragArea[3];\r\n\r\n      switch (direction) {\r\n        case 'up':\r\n          return baseAreaStartRow - dragAreaStartRow;\r\n\r\n        case 'down':\r\n          return dragAreaEndRow - baseAreaEndRow;\r\n\r\n        case 'left':\r\n          return baseAreaStartColumn - dragAreaStartColumn;\r\n\r\n        case 'right':\r\n          return dragAreaEndColumn - baseAreaEndColumn;\r\n\r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n    /**\r\n     * Trim the default drag area (containing the selection area) to the drag-only area.\r\n     *\r\n     * @private\r\n     * @param {Array} baseArea The base selection area.\r\n     * @param {Array} dragArea The base selection area extended by the drag area.\r\n     * @param {string} direction Drag direction.\r\n     * @returns {Array|null} Array representing the drag area coordinates.\r\n     */\r\n\r\n  }, {\r\n    key: \"getDragArea\",\r\n    value: function getDragArea(baseArea, dragArea, direction) {\r\n      var _baseArea3 = _slicedToArray(baseArea, 4),\r\n          baseAreaStartRow = _baseArea3[0],\r\n          baseAreaStartColumn = _baseArea3[1],\r\n          baseAreaEndRow = _baseArea3[2],\r\n          baseAreaEndColumn = _baseArea3[3];\r\n\r\n      var _dragArea2 = _slicedToArray(dragArea, 4),\r\n          dragAreaStartRow = _dragArea2[0],\r\n          dragAreaStartColumn = _dragArea2[1],\r\n          dragAreaEndRow = _dragArea2[2],\r\n          dragAreaEndColumn = _dragArea2[3];\r\n\r\n      switch (direction) {\r\n        case 'up':\r\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaStartRow - 1, baseAreaEndColumn];\r\n\r\n        case 'down':\r\n          return [baseAreaEndRow + 1, baseAreaStartColumn, dragAreaEndRow, baseAreaEndColumn];\r\n\r\n        case 'left':\r\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaEndRow, baseAreaStartColumn - 1];\r\n\r\n        case 'right':\r\n          return [baseAreaStartRow, baseAreaEndColumn + 1, dragAreaEndRow, dragAreaEndColumn];\r\n\r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n    /**\r\n     * Get the to-be-farthest merged cell in the newly filled area.\r\n     *\r\n     * @private\r\n     * @param {Array} baseArea The base selection area.\r\n     * @param {Array} dragArea The drag area (containing the base area).\r\n     * @param {string} direction The drag direction.\r\n     * @param {Array} mergedCellArray Array of the merged cells found in the base area.\r\n     * @returns {MergedCellCoords|null}\r\n     */\r\n\r\n  }, {\r\n    key: \"getFarthestCollection\",\r\n    value: function getFarthestCollection(baseArea, dragArea, direction, mergedCellArray) {\r\n      var _baseArea4 = _slicedToArray(baseArea, 4),\r\n          baseAreaStartRow = _baseArea4[0],\r\n          baseAreaStartColumn = _baseArea4[1],\r\n          baseAreaEndRow = _baseArea4[2],\r\n          baseAreaEndColumn = _baseArea4[3];\r\n\r\n      var verticalDirection = ['up', 'down'].indexOf(direction) > -1;\r\n      var baseEnd = verticalDirection ? baseAreaEndRow : baseAreaEndColumn;\r\n      var baseStart = verticalDirection ? baseAreaStartRow : baseAreaStartColumn;\r\n      var fillSize = this.getAutofillSize(baseArea, dragArea, direction);\r\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\r\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\r\n      var partials = fillSize - fulls;\r\n      var inclusionFunctionName = null;\r\n      var farthestCollection = null;\r\n      var endOfDragRecreationIndex = null;\r\n\r\n      switch (direction) {\r\n        case 'up':\r\n          inclusionFunctionName = 'includesVertically';\r\n          endOfDragRecreationIndex = baseEnd - partials + 1;\r\n          break;\r\n\r\n        case 'left':\r\n          inclusionFunctionName = 'includesHorizontally';\r\n          endOfDragRecreationIndex = baseEnd - partials + 1;\r\n          break;\r\n\r\n        case 'down':\r\n          inclusionFunctionName = 'includesVertically';\r\n          endOfDragRecreationIndex = baseStart + partials - 1;\r\n          break;\r\n\r\n        case 'right':\r\n          inclusionFunctionName = 'includesHorizontally';\r\n          endOfDragRecreationIndex = baseStart + partials - 1;\r\n          break;\r\n\r\n        default:\r\n      }\r\n\r\n      arrayEach(mergedCellArray, function (currentCollection) {\r\n        if (currentCollection[inclusionFunctionName](endOfDragRecreationIndex) && currentCollection.isFarther(farthestCollection, direction)) {\r\n          farthestCollection = currentCollection;\r\n        }\r\n      });\r\n      return farthestCollection;\r\n    }\r\n    /**\r\n     * Recreate the merged cells after the autofill process.\r\n     *\r\n     * @param {Array} changes Changes made.\r\n     */\r\n\r\n  }, {\r\n    key: \"recreateAfterDataPopulation\",\r\n    value: function recreateAfterDataPopulation(changes) {\r\n      if (!this.currentFillData) {\r\n        return;\r\n      }\r\n\r\n      var fillRange = this.getRangeFromChanges(changes);\r\n      var foundMergedCells = this.currentFillData.foundMergedCells;\r\n      var dragDirection = this.currentFillData.dragDirection;\r\n\r\n      var inBounds = function inBounds(current, offset) {\r\n        switch (dragDirection) {\r\n          case 'up':\r\n            return current.row - offset >= fillRange.from.row;\r\n\r\n          case 'down':\r\n            return current.row + current.rowspan - 1 + offset <= fillRange.to.row;\r\n\r\n          case 'left':\r\n            return current.col - offset >= fillRange.from.column;\r\n\r\n          case 'right':\r\n            return current.col + current.colspan - 1 + offset <= fillRange.to.column;\r\n\r\n          default:\r\n            return null;\r\n        }\r\n      };\r\n\r\n      var fillOffset = 0;\r\n      var current = null;\r\n      var multiplier = 1;\r\n\r\n      do {\r\n        for (var j = 0; j < foundMergedCells.length; j += 1) {\r\n          current = foundMergedCells[j];\r\n          fillOffset = multiplier * this.currentFillData.cycleLength;\r\n\r\n          if (inBounds(current, fillOffset)) {\r\n            switch (dragDirection) {\r\n              case 'up':\r\n                this.plugin.mergedCellsCollection.add({\r\n                  row: current.row - fillOffset,\r\n                  rowspan: current.rowspan,\r\n                  col: current.col,\r\n                  colspan: current.colspan\r\n                });\r\n                break;\r\n\r\n              case 'down':\r\n                this.plugin.mergedCellsCollection.add({\r\n                  row: current.row + fillOffset,\r\n                  rowspan: current.rowspan,\r\n                  col: current.col,\r\n                  colspan: current.colspan\r\n                });\r\n                break;\r\n\r\n              case 'left':\r\n                this.plugin.mergedCellsCollection.add({\r\n                  row: current.row,\r\n                  rowspan: current.rowspan,\r\n                  col: current.col - fillOffset,\r\n                  colspan: current.colspan\r\n                });\r\n                break;\r\n\r\n              case 'right':\r\n                this.plugin.mergedCellsCollection.add({\r\n                  row: current.row,\r\n                  rowspan: current.rowspan,\r\n                  col: current.col + fillOffset,\r\n                  colspan: current.colspan\r\n                });\r\n                break;\r\n\r\n              default:\r\n            }\r\n          }\r\n\r\n          if (j === foundMergedCells.length - 1) {\r\n            multiplier += 1;\r\n          }\r\n        }\r\n      } while (inBounds(current, fillOffset));\r\n\r\n      this.currentFillData = null;\r\n      this.plugin.hot.render();\r\n    }\r\n    /**\r\n     * Get the drag range from the changes made.\r\n     *\r\n     * @private\r\n     * @param {Array} changes The changes made.\r\n     * @returns {object} Object with `from` and `to` properties, both containing `row` and `column` keys.\r\n     */\r\n\r\n  }, {\r\n    key: \"getRangeFromChanges\",\r\n    value: function getRangeFromChanges(changes) {\r\n      var _this = this;\r\n\r\n      var rows = {\r\n        min: null,\r\n        max: null\r\n      };\r\n      var columns = {\r\n        min: null,\r\n        max: null\r\n      };\r\n      arrayEach(changes, function (change) {\r\n        var rowIndex = change[0];\r\n\r\n        var columnIndex = _this.plugin.hot.propToCol(change[1]);\r\n\r\n        if (rows.min === null || rowIndex < rows.min) {\r\n          rows.min = rowIndex;\r\n        }\r\n\r\n        if (rows.max === null || rowIndex > rows.max) {\r\n          rows.max = rowIndex;\r\n        }\r\n\r\n        if (columns.min === null || columnIndex < columns.min) {\r\n          columns.min = columnIndex;\r\n        }\r\n\r\n        if (columns.max === null || columnIndex > columns.max) {\r\n          columns.max = columnIndex;\r\n        }\r\n      });\r\n      return {\r\n        from: {\r\n          row: rows.min,\r\n          column: columns.min\r\n        },\r\n        to: {\r\n          row: rows.max,\r\n          column: columns.max\r\n        }\r\n      };\r\n    }\r\n    /**\r\n     * Check if the drag area contains any merged cells.\r\n     *\r\n     * @param {Array} baseArea The base selection area.\r\n     * @param {Array} fullArea The base area extended by the drag area.\r\n     * @param {string} direction Drag direction.\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"dragAreaOverlapsCollections\",\r\n    value: function dragAreaOverlapsCollections(baseArea, fullArea, direction) {\r\n      var dragArea = this.getDragArea(baseArea, fullArea, direction);\r\n\r\n      var _dragArea3 = _slicedToArray(dragArea, 4),\r\n          dragAreaStartRow = _dragArea3[0],\r\n          dragAreaStartColumn = _dragArea3[1],\r\n          dragAreaEndRow = _dragArea3[2],\r\n          dragAreaEndColumn = _dragArea3[3];\r\n\r\n      var topLeft = new CellCoords(dragAreaStartRow, dragAreaStartColumn);\r\n      var bottomRight = new CellCoords(dragAreaEndRow, dragAreaEndColumn);\r\n      var dragRange = new CellRange(topLeft, topLeft, bottomRight);\r\n      return !!this.mergedCellsCollection.getWithinRange(dragRange, true);\r\n    }\r\n  }]);\r\n\r\n  return AutofillCalculations;\r\n}();\r\n\r\nexport default AutofillCalculations;"]},"metadata":{},"sourceType":"module"}