{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\uploadInstrumentationModelledPopUp\\\\uploadInstrumentationModelledPopUp.js\";\nimport React, { Component } from 'react';\nimport Modal from 'react-awesome-modal';\nimport '../uploadReportPopUp/uploadReportPopUp.css';\nimport readXlsxFile from 'read-excel-file';\nimport { readString } from 'react-papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class UploadInstrumentationModelledPopUp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false,\n      file: null,\n      error: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.uploadReport = this.uploadReport.bind(this);\n    this.id = props.id;\n  }\n\n  openModal() {\n    this.setState({\n      visible: true,\n      error: false,\n      file: null\n    });\n  }\n\n  closeModal() {\n    document.getElementById(\"fileToUpload\").value = null;\n    this.setState({\n      visible: false,\n      file: null\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      file: event.target.files[0]\n    });\n  }\n\n  uploadReport(event) {\n    event.preventDefault();\n    this.props.setUploading(true);\n\n    if (this.state.file.name.substring(this.state.file.name.length - 4, this.state.file.name.length) === \"xlsx\") {\n      readXlsxFile(this.state.file).then(async rows => {\n        const options = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(rows)\n        };\n        await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/uploadInstModelledReport\", options).then(response => response.json()).then(async json => {\n          if (json.invalid) {\n            await this.setState({\n              error: true\n            });\n          }\n        });\n      });\n    } else {\n      let reader = new FileReader();\n\n      reader.onload = async function (e) {\n        const csv = reader.result;\n        const options = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(readString(csv).data)\n        };\n        console.log(readString(csv).data);\n        await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/uploadInstModelledReport\", options).then(response => response.json());\n      };\n\n      reader.readAsText(this.state.file);\n    }\n\n    this.closeModal();\n    this.props.setUploading(false);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      style: {\n        float: \"left\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        value: \"Upload dinsts\",\n        style: {\n          marginTop: \"10px\",\n          marginLeft: \"10px\",\n          height: \"150px\",\n          width: \"150px\"\n        },\n        className: \"btn btn-bg btn-info\",\n        onClick: () => this.openModal()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Modal, {\n          visible: this.state.visible,\n          width: \"650\",\n          height: \"180\",\n          effect: \"fadeInUp\",\n          onClickAway: () => this.closeModal(),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popUp__container\",\n            children: /*#__PURE__*/_jsxDEV(\"center\", {\n              className: \"popUp__title\",\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Upload your modelled instrumentation report\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 62\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"select__container\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: this.uploadReport,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                name: \"fileToUpload\",\n                id: \"fileToUpload\",\n                onChange: this.handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"submit\",\n                style: {\n                  marginLeft: \"10px\"\n                },\n                className: \"btn btn-sm btn-success\",\n                value: \"Upload\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/uploadInstrumentationModelledPopUp/uploadInstrumentationModelledPopUp.js"],"names":["React","Component","Modal","readXlsxFile","readString","UploadInstrumentationModelledPopUp","constructor","props","state","visible","file","error","handleChange","bind","uploadReport","id","openModal","setState","closeModal","document","getElementById","value","event","target","files","preventDefault","setUploading","name","substring","length","then","rows","options","method","headers","body","JSON","stringify","fetch","process","env","REACT_APP_SERVER","REACT_APP_NODE_PORT","response","json","invalid","reader","FileReader","onload","e","csv","result","data","console","log","readAsText","render","float","marginTop","marginLeft","height","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\nimport '../uploadReportPopUp/uploadReportPopUp.css'\r\nimport readXlsxFile from 'read-excel-file'\r\nimport { readString } from 'react-papaparse'\r\n\r\nexport default class UploadInstrumentationModelledPopUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible : false,\r\n            file: null,\r\n            error: false,\r\n            \r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.uploadReport = this.uploadReport.bind(this);\r\n        this.id = props.id;\r\n    }\r\n\r\n   \r\n\r\n    openModal() {      \r\n        this.setState({\r\n            visible : true,\r\n            error: false,\r\n            file: null\r\n        });\r\n    }\r\n\r\n    closeModal() {\r\n        document.getElementById(\"fileToUpload\").value = null\r\n        this.setState({\r\n            visible : false,\r\n            file: null,\r\n        });\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({file: event.target.files[0]})\r\n    }\r\n\r\n    uploadReport(event){\r\n        event.preventDefault()\r\n        this.props.setUploading(true)\r\n\r\n        if(this.state.file.name.substring(this.state.file.name.length-4, this.state.file.name.length) === \"xlsx\"){\r\n            readXlsxFile(this.state.file).then(async(rows) => {\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(rows)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/uploadInstModelledReport\", options)\r\n                .then(response => response.json())\r\n                .then(async json =>{\r\n                    if(json.invalid){\r\n                        await this.setState({error:true})\r\n\r\n                    }\r\n                })\r\n                \r\n            })\r\n        }else{\r\n            let reader = new FileReader();\r\n            reader.onload = async function (e){\r\n                const csv = reader.result\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(readString(csv).data)\r\n                }\r\n                console.log(readString(csv).data)\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/uploadInstModelledReport\", options)\r\n                .then(response => response.json())\r\n\r\n            }\r\n            reader.readAsText(this.state.file)\r\n        }\r\n        this.closeModal()\r\n        this.props.setUploading(false)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section style={{float:\"left\"}}>\r\n                <input type=\"button\"  value=\"Upload dinsts\" style={{marginTop:\"10px\",marginLeft:\"10px\", height:\"150px\", width:\"150px\"}} className=\"btn btn-bg btn-info\"  onClick={() => this.openModal()} />\r\n                <div>\r\n                    <Modal visible={this.state.visible} width=\"650\" height=\"180\" effect=\"fadeInUp\" onClickAway={() => this.closeModal()}>\r\n                        <div className=\"popUp__container\" >\r\n                            <center className=\"popUp__title\"><h2>Upload your modelled instrumentation report</h2></center>\r\n                                \r\n                        </div>\r\n                        <div className=\"select__container\">\r\n                            <form onSubmit={this.uploadReport}>\r\n                                <input type=\"file\" name=\"fileToUpload\" id=\"fileToUpload\" onChange={this.handleChange}/>\r\n                                <input type=\"submit\" style={{marginLeft:\"10px\"}} className=\"btn btn-sm btn-success\" value=\"Upload\"/>\r\n                            </form>\r\n                        </div> \r\n\r\n                        \r\n                    </Modal>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}