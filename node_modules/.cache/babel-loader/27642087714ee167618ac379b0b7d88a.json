{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n/**\r\n * Depth-first pre-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR)).\r\n *\r\n * @type {string}\r\n */\n\n\nexport var TRAVERSAL_DF_PRE = 'DF-pre-order';\n/**\r\n * @param {Function} callback A callback which will be called on each visited node.\r\n * @param {*} context A context to pass through.\r\n * @returns {boolean}\r\n */\n\nexport function depthFirstPreOrder(callback, context) {\n  var continueTraverse = callback.call(context, this);\n\n  for (var i = 0; i < this.childs.length; i++) {\n    if (continueTraverse === false) {\n      return false;\n    }\n\n    continueTraverse = depthFirstPreOrder.call(this.childs[i], callback, context);\n  }\n\n  return continueTraverse;\n}\n/**\r\n * Depth-first post-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Post-order_(NLR)).\r\n *\r\n * @type {string}\r\n */\n\nexport var TRAVERSAL_DF_POST = 'DF-post-order';\n/**\r\n * @param {Function} callback A callback which will be called on each visited node.\r\n * @param {*} context A context to pass through.\r\n * @returns {boolean}\r\n */\n\nfunction depthFirstPostOrder(callback, context) {\n  for (var i = 0; i < this.childs.length; i++) {\n    var continueTraverse = depthFirstPostOrder.call(this.childs[i], callback, context);\n\n    if (continueTraverse === false) {\n      return false;\n    }\n  }\n\n  return callback.call(context, this);\n}\n/**\r\n * Breadth-first traversal strategy (https://en.wikipedia.org/wiki/Tree_traversal#Breadth-first_search_/_level_order).\r\n *\r\n * @type {string}\r\n */\n\n\nexport var TRAVERSAL_BF = 'BF';\n/**\r\n * @param {Function} callback A callback which will be called on each visited node.\r\n * @param {*} context A context to pass through.\r\n */\n\nfunction breadthFirst(callback, context) {\n  var queue = [this];\n  /**\r\n   * Internal processor.\r\n   */\n\n  function process() {\n    if (queue.length === 0) {\n      return;\n    }\n\n    var node = queue.shift();\n    queue.push.apply(queue, _toConsumableArray(node.childs));\n\n    if (callback.call(context, node) !== false) {\n      process();\n    }\n  }\n\n  process();\n}\n/**\r\n * Default strategy for tree traversal.\r\n *\r\n * @type {string}\r\n */\n\n\nvar DEFAULT_TRAVERSAL_STRATEGY = TRAVERSAL_BF;\n/**\r\n * Collection of all available tree traversal strategies.\r\n *\r\n * @type {Map<string, Function>}\r\n */\n\nvar TRAVERSAL_STRATEGIES = new Map([[TRAVERSAL_DF_PRE, depthFirstPreOrder], [TRAVERSAL_DF_POST, depthFirstPostOrder], [TRAVERSAL_BF, breadthFirst]]);\n/**\r\n *\r\n */\n\nvar TreeNode = /*#__PURE__*/function () {\n  /**\r\n   * A tree data.\r\n   *\r\n   * @type {object}\r\n   */\n\n  /**\r\n   * A parent node.\r\n   *\r\n   * @type {TreeNode}\r\n   */\n\n  /**\r\n   * A tree leaves.\r\n   *\r\n   * @type {TreeNode[]}\r\n   */\n  function TreeNode(data) {\n    _classCallCheck(this, TreeNode);\n\n    _defineProperty(this, \"data\", {});\n\n    _defineProperty(this, \"parent\", null);\n\n    _defineProperty(this, \"childs\", []);\n\n    this.data = data;\n  }\n  /**\r\n   * Adds a node to tree leaves. Added node is linked with the parent node through \"parent\" property.\r\n   *\r\n   * @param {TreeNode} node A TreeNode to add.\r\n   */\n\n\n  _createClass(TreeNode, [{\n    key: \"addChild\",\n    value: function addChild(node) {\n      node.parent = this;\n      this.childs.push(node);\n    }\n    /* eslint-disable jsdoc/require-description-complete-sentence */\n\n    /**\r\n     * @memberof TreeNode#\r\n     * @function cloneTree\r\n     *\r\n     * Clones a tree structure deeply.\r\n     *\r\n     * For example, for giving a tree structure:\r\n     *      .--(B1)--.\r\n     *   .-(C1)   .-(C2)-.----.\r\n     *  (D1)     (D2)   (D3) (D4)\r\n     *\r\n     * Cloning a tree starting from C2 node creates a mirrored tree structure.\r\n     *     .-(C2')-.-----.\r\n     *    (D2')   (D3') (D4')\r\n     *\r\n     * The cloned tree can be safely modified without affecting the original structure.\r\n     * After modification, the clone can be merged with a tree using the \"replaceTreeWith\" method.\r\n     *\r\n     * @param {TreeNode} [nodeTree=this] A TreeNode to clone.\r\n     * @returns {TreeNode}\r\n     */\n\n    /* eslint-enable jsdoc/require-description-complete-sentence */\n\n  }, {\n    key: \"cloneTree\",\n    value: function cloneTree() {\n      var nodeTree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;\n      var clonedNode = new TreeNode(_objectSpread({}, nodeTree.data));\n\n      for (var i = 0; i < nodeTree.childs.length; i++) {\n        clonedNode.addChild(this.cloneTree(nodeTree.childs[i]));\n      }\n\n      return clonedNode;\n    }\n    /**\r\n     * Replaces the current node with a passed tree structure.\r\n     *\r\n     * @param {TreeNode} nodeTree A TreeNode to replace with.\r\n     */\n\n  }, {\n    key: \"replaceTreeWith\",\n    value: function replaceTreeWith(nodeTree) {\n      this.data = _objectSpread({}, nodeTree.data);\n      this.childs = [];\n\n      for (var i = 0; i < nodeTree.childs.length; i++) {\n        this.addChild(nodeTree.childs[i]);\n      }\n    }\n    /**\r\n     * Traverses the tree structure through node childs. The walk down traversing supports\r\n     * a three different strategies.\r\n     *  - Depth-first pre-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR));\r\n     *  - Depth-first post-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Post-order_(NLR));\r\n     *  - Breadth-first traversal strategy (https://en.wikipedia.org/wiki/Tree_traversal#Breadth-first_search_/_level_order).\r\n     *\r\n     * @param {Function} callback The callback function which will be called for each node.\r\n     * @param {string} [traversalStrategy=DEFAULT_TRAVERSAL_STRATEGY] Traversing strategy.\r\n     */\n\n  }, {\n    key: \"walkDown\",\n    value: function walkDown(callback) {\n      var traversalStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_TRAVERSAL_STRATEGY;\n\n      if (!TRAVERSAL_STRATEGIES.has(traversalStrategy)) {\n        throw new Error(\"Traversal strategy \\\"\".concat(traversalStrategy, \"\\\" does not exist\"));\n      }\n\n      TRAVERSAL_STRATEGIES.get(traversalStrategy).call(this, callback, this);\n    }\n    /**\r\n     * Traverses the tree structure through node parents.\r\n     *\r\n     * @param {Function} callback The callback function which will be called for each node.\r\n     */\n\n  }, {\n    key: \"walkUp\",\n    value: function walkUp(callback) {\n      var context = this;\n\n      var process = function process(node) {\n        var continueTraverse = callback.call(context, node);\n\n        if (continueTraverse !== false && node.parent !== null) {\n          process(node.parent);\n        }\n      };\n\n      process(this);\n    }\n  }]);\n\n  return TreeNode;\n}();\n\nexport { TreeNode as default };","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/utils/dataStructures/tree.mjs"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","configurable","writable","_createClass","protoProps","staticProps","prototype","obj","value","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","o","minLen","_arrayLikeToArray","n","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","arr2","TRAVERSAL_DF_PRE","depthFirstPreOrder","callback","context","continueTraverse","childs","TRAVERSAL_DF_POST","depthFirstPostOrder","TRAVERSAL_BF","breadthFirst","queue","process","node","shift","DEFAULT_TRAVERSAL_STRATEGY","TRAVERSAL_STRATEGIES","Map","TreeNode","data","addChild","parent","cloneTree","nodeTree","undefined","clonedNode","replaceTreeWith","walkDown","traversalStrategy","has","Error","concat","get","walkUp","default"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\r\n\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\nimport \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.map.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\nimport \"core-js/modules/es.symbol.js\";\r\nimport \"core-js/modules/es.symbol.description.js\";\r\nimport \"core-js/modules/es.symbol.iterator.js\";\r\nimport \"core-js/modules/es.array.from.js\";\r\nimport \"core-js/modules/es.array.slice.js\";\r\nimport \"core-js/modules/es.function.name.js\";\r\nimport \"core-js/modules/es.object.keys.js\";\r\nimport \"core-js/modules/es.array.filter.js\";\r\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\r\nimport \"core-js/modules/web.dom-collections.for-each.js\";\r\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\r\n\r\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\r\n\r\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\r\n\r\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\r\n\r\n/**\r\n * Depth-first pre-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR)).\r\n *\r\n * @type {string}\r\n */\r\nexport var TRAVERSAL_DF_PRE = 'DF-pre-order';\r\n/**\r\n * @param {Function} callback A callback which will be called on each visited node.\r\n * @param {*} context A context to pass through.\r\n * @returns {boolean}\r\n */\r\n\r\nexport function depthFirstPreOrder(callback, context) {\r\n  var continueTraverse = callback.call(context, this);\r\n\r\n  for (var i = 0; i < this.childs.length; i++) {\r\n    if (continueTraverse === false) {\r\n      return false;\r\n    }\r\n\r\n    continueTraverse = depthFirstPreOrder.call(this.childs[i], callback, context);\r\n  }\r\n\r\n  return continueTraverse;\r\n}\r\n/**\r\n * Depth-first post-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Post-order_(NLR)).\r\n *\r\n * @type {string}\r\n */\r\n\r\nexport var TRAVERSAL_DF_POST = 'DF-post-order';\r\n/**\r\n * @param {Function} callback A callback which will be called on each visited node.\r\n * @param {*} context A context to pass through.\r\n * @returns {boolean}\r\n */\r\n\r\nfunction depthFirstPostOrder(callback, context) {\r\n  for (var i = 0; i < this.childs.length; i++) {\r\n    var continueTraverse = depthFirstPostOrder.call(this.childs[i], callback, context);\r\n\r\n    if (continueTraverse === false) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return callback.call(context, this);\r\n}\r\n/**\r\n * Breadth-first traversal strategy (https://en.wikipedia.org/wiki/Tree_traversal#Breadth-first_search_/_level_order).\r\n *\r\n * @type {string}\r\n */\r\n\r\n\r\nexport var TRAVERSAL_BF = 'BF';\r\n/**\r\n * @param {Function} callback A callback which will be called on each visited node.\r\n * @param {*} context A context to pass through.\r\n */\r\n\r\nfunction breadthFirst(callback, context) {\r\n  var queue = [this];\r\n  /**\r\n   * Internal processor.\r\n   */\r\n\r\n  function process() {\r\n    if (queue.length === 0) {\r\n      return;\r\n    }\r\n\r\n    var node = queue.shift();\r\n    queue.push.apply(queue, _toConsumableArray(node.childs));\r\n\r\n    if (callback.call(context, node) !== false) {\r\n      process();\r\n    }\r\n  }\r\n\r\n  process();\r\n}\r\n/**\r\n * Default strategy for tree traversal.\r\n *\r\n * @type {string}\r\n */\r\n\r\n\r\nvar DEFAULT_TRAVERSAL_STRATEGY = TRAVERSAL_BF;\r\n/**\r\n * Collection of all available tree traversal strategies.\r\n *\r\n * @type {Map<string, Function>}\r\n */\r\n\r\nvar TRAVERSAL_STRATEGIES = new Map([[TRAVERSAL_DF_PRE, depthFirstPreOrder], [TRAVERSAL_DF_POST, depthFirstPostOrder], [TRAVERSAL_BF, breadthFirst]]);\r\n/**\r\n *\r\n */\r\n\r\nvar TreeNode = /*#__PURE__*/function () {\r\n  /**\r\n   * A tree data.\r\n   *\r\n   * @type {object}\r\n   */\r\n\r\n  /**\r\n   * A parent node.\r\n   *\r\n   * @type {TreeNode}\r\n   */\r\n\r\n  /**\r\n   * A tree leaves.\r\n   *\r\n   * @type {TreeNode[]}\r\n   */\r\n  function TreeNode(data) {\r\n    _classCallCheck(this, TreeNode);\r\n\r\n    _defineProperty(this, \"data\", {});\r\n\r\n    _defineProperty(this, \"parent\", null);\r\n\r\n    _defineProperty(this, \"childs\", []);\r\n\r\n    this.data = data;\r\n  }\r\n  /**\r\n   * Adds a node to tree leaves. Added node is linked with the parent node through \"parent\" property.\r\n   *\r\n   * @param {TreeNode} node A TreeNode to add.\r\n   */\r\n\r\n\r\n  _createClass(TreeNode, [{\r\n    key: \"addChild\",\r\n    value: function addChild(node) {\r\n      node.parent = this;\r\n      this.childs.push(node);\r\n    }\r\n    /* eslint-disable jsdoc/require-description-complete-sentence */\r\n\r\n    /**\r\n     * @memberof TreeNode#\r\n     * @function cloneTree\r\n     *\r\n     * Clones a tree structure deeply.\r\n     *\r\n     * For example, for giving a tree structure:\r\n     *      .--(B1)--.\r\n     *   .-(C1)   .-(C2)-.----.\r\n     *  (D1)     (D2)   (D3) (D4)\r\n     *\r\n     * Cloning a tree starting from C2 node creates a mirrored tree structure.\r\n     *     .-(C2')-.-----.\r\n     *    (D2')   (D3') (D4')\r\n     *\r\n     * The cloned tree can be safely modified without affecting the original structure.\r\n     * After modification, the clone can be merged with a tree using the \"replaceTreeWith\" method.\r\n     *\r\n     * @param {TreeNode} [nodeTree=this] A TreeNode to clone.\r\n     * @returns {TreeNode}\r\n     */\r\n\r\n    /* eslint-enable jsdoc/require-description-complete-sentence */\r\n\r\n  }, {\r\n    key: \"cloneTree\",\r\n    value: function cloneTree() {\r\n      var nodeTree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;\r\n      var clonedNode = new TreeNode(_objectSpread({}, nodeTree.data));\r\n\r\n      for (var i = 0; i < nodeTree.childs.length; i++) {\r\n        clonedNode.addChild(this.cloneTree(nodeTree.childs[i]));\r\n      }\r\n\r\n      return clonedNode;\r\n    }\r\n    /**\r\n     * Replaces the current node with a passed tree structure.\r\n     *\r\n     * @param {TreeNode} nodeTree A TreeNode to replace with.\r\n     */\r\n\r\n  }, {\r\n    key: \"replaceTreeWith\",\r\n    value: function replaceTreeWith(nodeTree) {\r\n      this.data = _objectSpread({}, nodeTree.data);\r\n      this.childs = [];\r\n\r\n      for (var i = 0; i < nodeTree.childs.length; i++) {\r\n        this.addChild(nodeTree.childs[i]);\r\n      }\r\n    }\r\n    /**\r\n     * Traverses the tree structure through node childs. The walk down traversing supports\r\n     * a three different strategies.\r\n     *  - Depth-first pre-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR));\r\n     *  - Depth-first post-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Post-order_(NLR));\r\n     *  - Breadth-first traversal strategy (https://en.wikipedia.org/wiki/Tree_traversal#Breadth-first_search_/_level_order).\r\n     *\r\n     * @param {Function} callback The callback function which will be called for each node.\r\n     * @param {string} [traversalStrategy=DEFAULT_TRAVERSAL_STRATEGY] Traversing strategy.\r\n     */\r\n\r\n  }, {\r\n    key: \"walkDown\",\r\n    value: function walkDown(callback) {\r\n      var traversalStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_TRAVERSAL_STRATEGY;\r\n\r\n      if (!TRAVERSAL_STRATEGIES.has(traversalStrategy)) {\r\n        throw new Error(\"Traversal strategy \\\"\".concat(traversalStrategy, \"\\\" does not exist\"));\r\n      }\r\n\r\n      TRAVERSAL_STRATEGIES.get(traversalStrategy).call(this, callback, this);\r\n    }\r\n    /**\r\n     * Traverses the tree structure through node parents.\r\n     *\r\n     * @param {Function} callback The callback function which will be called for each node.\r\n     */\r\n\r\n  }, {\r\n    key: \"walkUp\",\r\n    value: function walkUp(callback) {\r\n      var context = this;\r\n\r\n      var process = function process(node) {\r\n        var continueTraverse = callback.call(context, node);\r\n\r\n        if (continueTraverse !== false && node.parent !== null) {\r\n          process(node.parent);\r\n        }\r\n      };\r\n\r\n      process(this);\r\n    }\r\n  }]);\r\n\r\n  return TreeNode;\r\n}();\r\n\r\nexport { TreeNode as default };"]},"metadata":{},"sourceType":"module"}