{"ast":null,"code":"import { isObject, deepClone } from \"../helpers/object.mjs\";\nimport { arrayEach } from \"./../helpers/array.mjs\";\nimport { isUndefined } from \"../helpers/mixed.mjs\";\nimport { extendNotExistingKeys, normalizeLanguageCode, warnUserAboutLanguageRegistration } from \"./utils.mjs\";\nimport staticRegister from \"../utils/staticRegister.mjs\";\nimport { getPhraseFormatters } from \"./phraseFormatters/index.mjs\";\nimport DEFAULT_DICTIONARY from \"./languages/en-US.mjs\";\nimport * as _dictionaryKeys from \"./constants.mjs\";\nexport { _dictionaryKeys as dictionaryKeys };\nexport var DEFAULT_LANGUAGE_CODE = DEFAULT_DICTIONARY.languageCode;\n\nvar _staticRegister = staticRegister('languagesDictionaries'),\n    registerGloballyLanguageDictionary = _staticRegister.register,\n    getGlobalLanguageDictionary = _staticRegister.getItem,\n    hasGlobalLanguageDictionary = _staticRegister.hasItem,\n    getGlobalLanguagesDictionaries = _staticRegister.getValues;\n/**\n * Register automatically the default language dictionary.\n */\n\n\nregisterLanguageDictionary(DEFAULT_DICTIONARY);\n/**\n * Register language dictionary for specific language code.\n *\n * @param {string|object} languageCodeOrDictionary Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE' or object representing dictionary.\n * @param {object} dictionary Dictionary for specific language (optional if first parameter has already dictionary).\n * @returns {object}\n */\n\nexport function registerLanguageDictionary(languageCodeOrDictionary, dictionary) {\n  var languageCode = languageCodeOrDictionary;\n  var dictionaryObject = dictionary; // Dictionary passed as first argument.\n\n  if (isObject(languageCodeOrDictionary)) {\n    dictionaryObject = languageCodeOrDictionary;\n    languageCode = dictionaryObject.languageCode;\n  }\n\n  extendLanguageDictionary(languageCode, dictionaryObject);\n  registerGloballyLanguageDictionary(languageCode, deepClone(dictionaryObject)); // We do not allow user to work with dictionary by reference, it can cause lot of bugs.\n\n  return deepClone(dictionaryObject);\n}\n/**\n * Extend handled dictionary by default language dictionary. As result, if any dictionary key isn't defined for specific language, it will be filled with default language value (\"dictionary gaps\" are supplemented).\n *\n * @private\n * @param {string} languageCode Language code.\n * @param {object} dictionary Dictionary which is extended.\n */\n\nfunction extendLanguageDictionary(languageCode, dictionary) {\n  if (languageCode !== DEFAULT_LANGUAGE_CODE) {\n    extendNotExistingKeys(dictionary, getGlobalLanguageDictionary(DEFAULT_LANGUAGE_CODE));\n  }\n}\n/**\n * Get language dictionary for specific language code.\n *\n * @param {string} languageCode Language code.\n * @returns {object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\n\n\nexport function getLanguageDictionary(languageCode) {\n  if (!hasLanguageDictionary(languageCode)) {\n    return null;\n  }\n\n  return deepClone(getGlobalLanguageDictionary(languageCode));\n}\n/**\n *\n * Get if language with specified language code was registered.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {boolean}\n */\n\nexport function hasLanguageDictionary(languageCode) {\n  return hasGlobalLanguageDictionary(languageCode);\n}\n/**\n * Get default language dictionary.\n *\n * @returns {object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\n\nexport function getDefaultLanguageDictionary() {\n  return DEFAULT_DICTIONARY;\n}\n/**\n * Get registered language dictionaries.\n *\n * @returns {Array}\n */\n\nexport function getLanguagesDictionaries() {\n  return getGlobalLanguagesDictionaries();\n}\n/**\n * Get phrase for specified dictionary key.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @param {string} dictionaryKey Constant which is dictionary key.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {string}\n */\n\nexport function getTranslatedPhrase(languageCode, dictionaryKey, argumentsForFormatters) {\n  var languageDictionary = getLanguageDictionary(languageCode);\n\n  if (languageDictionary === null) {\n    return null;\n  }\n\n  var phrasePropositions = languageDictionary[dictionaryKey];\n\n  if (isUndefined(phrasePropositions)) {\n    return null;\n  }\n\n  var formattedPhrase = getFormattedPhrase(phrasePropositions, argumentsForFormatters);\n\n  if (Array.isArray(formattedPhrase)) {\n    return formattedPhrase[0];\n  }\n\n  return formattedPhrase;\n}\n/**\n * Get formatted phrase from phrases propositions for specified dictionary key.\n *\n * @private\n * @param {Array|string} phrasePropositions List of phrase propositions.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {Array|string}\n */\n\nfunction getFormattedPhrase(phrasePropositions, argumentsForFormatters) {\n  var formattedPhrasePropositions = phrasePropositions;\n  arrayEach(getPhraseFormatters(), function (formatter) {\n    formattedPhrasePropositions = formatter(phrasePropositions, argumentsForFormatters);\n  });\n  return formattedPhrasePropositions;\n}\n/**\n * Returns valid language code. If the passed language code doesn't exist default one will be used.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {string}\n */\n\n\nexport function getValidLanguageCode(languageCode) {\n  var normalizedLanguageCode = normalizeLanguageCode(languageCode);\n\n  if (!hasLanguageDictionary(normalizedLanguageCode)) {\n    normalizedLanguageCode = DEFAULT_LANGUAGE_CODE;\n    warnUserAboutLanguageRegistration(languageCode);\n  }\n\n  return normalizedLanguageCode;\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/i18n/registry.mjs"],"names":["isObject","deepClone","arrayEach","isUndefined","extendNotExistingKeys","normalizeLanguageCode","warnUserAboutLanguageRegistration","staticRegister","getPhraseFormatters","DEFAULT_DICTIONARY","_dictionaryKeys","dictionaryKeys","DEFAULT_LANGUAGE_CODE","languageCode","_staticRegister","registerGloballyLanguageDictionary","register","getGlobalLanguageDictionary","getItem","hasGlobalLanguageDictionary","hasItem","getGlobalLanguagesDictionaries","getValues","registerLanguageDictionary","languageCodeOrDictionary","dictionary","dictionaryObject","extendLanguageDictionary","getLanguageDictionary","hasLanguageDictionary","getDefaultLanguageDictionary","getLanguagesDictionaries","getTranslatedPhrase","dictionaryKey","argumentsForFormatters","languageDictionary","phrasePropositions","formattedPhrase","getFormattedPhrase","Array","isArray","formattedPhrasePropositions","formatter","getValidLanguageCode","normalizedLanguageCode"],"mappings":"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","sourcesContent":["import { isObject, deepClone } from \"../helpers/object.mjs\";\nimport { arrayEach } from \"./../helpers/array.mjs\";\nimport { isUndefined } from \"../helpers/mixed.mjs\";\nimport { extendNotExistingKeys, normalizeLanguageCode, warnUserAboutLanguageRegistration } from \"./utils.mjs\";\nimport staticRegister from \"../utils/staticRegister.mjs\";\nimport { getPhraseFormatters } from \"./phraseFormatters/index.mjs\";\nimport DEFAULT_DICTIONARY from \"./languages/en-US.mjs\";\nimport * as _dictionaryKeys from \"./constants.mjs\";\nexport { _dictionaryKeys as dictionaryKeys };\nexport var DEFAULT_LANGUAGE_CODE = DEFAULT_DICTIONARY.languageCode;\n\nvar _staticRegister = staticRegister('languagesDictionaries'),\n    registerGloballyLanguageDictionary = _staticRegister.register,\n    getGlobalLanguageDictionary = _staticRegister.getItem,\n    hasGlobalLanguageDictionary = _staticRegister.hasItem,\n    getGlobalLanguagesDictionaries = _staticRegister.getValues;\n/**\n * Register automatically the default language dictionary.\n */\n\n\nregisterLanguageDictionary(DEFAULT_DICTIONARY);\n/**\n * Register language dictionary for specific language code.\n *\n * @param {string|object} languageCodeOrDictionary Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE' or object representing dictionary.\n * @param {object} dictionary Dictionary for specific language (optional if first parameter has already dictionary).\n * @returns {object}\n */\n\nexport function registerLanguageDictionary(languageCodeOrDictionary, dictionary) {\n  var languageCode = languageCodeOrDictionary;\n  var dictionaryObject = dictionary; // Dictionary passed as first argument.\n\n  if (isObject(languageCodeOrDictionary)) {\n    dictionaryObject = languageCodeOrDictionary;\n    languageCode = dictionaryObject.languageCode;\n  }\n\n  extendLanguageDictionary(languageCode, dictionaryObject);\n  registerGloballyLanguageDictionary(languageCode, deepClone(dictionaryObject)); // We do not allow user to work with dictionary by reference, it can cause lot of bugs.\n\n  return deepClone(dictionaryObject);\n}\n/**\n * Extend handled dictionary by default language dictionary. As result, if any dictionary key isn't defined for specific language, it will be filled with default language value (\"dictionary gaps\" are supplemented).\n *\n * @private\n * @param {string} languageCode Language code.\n * @param {object} dictionary Dictionary which is extended.\n */\n\nfunction extendLanguageDictionary(languageCode, dictionary) {\n  if (languageCode !== DEFAULT_LANGUAGE_CODE) {\n    extendNotExistingKeys(dictionary, getGlobalLanguageDictionary(DEFAULT_LANGUAGE_CODE));\n  }\n}\n/**\n * Get language dictionary for specific language code.\n *\n * @param {string} languageCode Language code.\n * @returns {object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\n\n\nexport function getLanguageDictionary(languageCode) {\n  if (!hasLanguageDictionary(languageCode)) {\n    return null;\n  }\n\n  return deepClone(getGlobalLanguageDictionary(languageCode));\n}\n/**\n *\n * Get if language with specified language code was registered.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {boolean}\n */\n\nexport function hasLanguageDictionary(languageCode) {\n  return hasGlobalLanguageDictionary(languageCode);\n}\n/**\n * Get default language dictionary.\n *\n * @returns {object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\n\nexport function getDefaultLanguageDictionary() {\n  return DEFAULT_DICTIONARY;\n}\n/**\n * Get registered language dictionaries.\n *\n * @returns {Array}\n */\n\nexport function getLanguagesDictionaries() {\n  return getGlobalLanguagesDictionaries();\n}\n/**\n * Get phrase for specified dictionary key.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @param {string} dictionaryKey Constant which is dictionary key.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {string}\n */\n\nexport function getTranslatedPhrase(languageCode, dictionaryKey, argumentsForFormatters) {\n  var languageDictionary = getLanguageDictionary(languageCode);\n\n  if (languageDictionary === null) {\n    return null;\n  }\n\n  var phrasePropositions = languageDictionary[dictionaryKey];\n\n  if (isUndefined(phrasePropositions)) {\n    return null;\n  }\n\n  var formattedPhrase = getFormattedPhrase(phrasePropositions, argumentsForFormatters);\n\n  if (Array.isArray(formattedPhrase)) {\n    return formattedPhrase[0];\n  }\n\n  return formattedPhrase;\n}\n/**\n * Get formatted phrase from phrases propositions for specified dictionary key.\n *\n * @private\n * @param {Array|string} phrasePropositions List of phrase propositions.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {Array|string}\n */\n\nfunction getFormattedPhrase(phrasePropositions, argumentsForFormatters) {\n  var formattedPhrasePropositions = phrasePropositions;\n  arrayEach(getPhraseFormatters(), function (formatter) {\n    formattedPhrasePropositions = formatter(phrasePropositions, argumentsForFormatters);\n  });\n  return formattedPhrasePropositions;\n}\n/**\n * Returns valid language code. If the passed language code doesn't exist default one will be used.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {string}\n */\n\n\nexport function getValidLanguageCode(languageCode) {\n  var normalizedLanguageCode = normalizeLanguageCode(languageCode);\n\n  if (!hasLanguageDictionary(normalizedLanguageCode)) {\n    normalizedLanguageCode = DEFAULT_LANGUAGE_CODE;\n    warnUserAboutLanguageRegistration(languageCode);\n  }\n\n  return normalizedLanguageCode;\n}"]},"metadata":{},"sourceType":"module"}