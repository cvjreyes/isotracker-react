{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\dragAndDrop\\\\dragAndDrop.js\";\n//Drag and drop para subir isometricas\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Upload, message, Button } from 'antd';\nimport { InboxOutlined } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DragAndDrop extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileList: [],\n      uploading: false\n    };\n  }\n\n  render() {\n    handleUpload = () => {\n      const {\n        fileList\n      } = this.state;\n      const formData = new FormData();\n      fileList.forEach(file => {\n        formData.append('files[]', file);\n      });\n      this.setState({\n        uploading: true\n      }); // You can use any AJAX library you like\n\n      reqwest({\n        url: 'http://',\n        method: 'post',\n        processData: false,\n        data: formData,\n        success: () => {\n          this.setState({\n            fileList: [],\n            uploading: false\n          });\n          message.success('upload successfully.');\n        },\n        error: () => {\n          this.setState({\n            uploading: false\n          });\n          message.error('upload failed.');\n        }\n      });\n    };\n\n    const {\n      Dragger\n    } = Upload;\n    const props = {\n      name: 'file',\n      multiple: true,\n      action: 'http://localhost:5000/upload',\n      onRemove: file => {\n        this.setState(state => {\n          const index = state.fileList.indexOf(file);\n          const newFileList = state.fileList.slice();\n          newFileList.splice(index, 1);\n          return {\n            fileList: newFileList\n          };\n        });\n      },\n      beforeUpload: file => {\n        this.setState(state => ({\n          fileList: [...state.fileList, file]\n        }));\n        return false;\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: this.handleUpload,\n        disabled: this.state.fileList.length === 0,\n        loading: this.state.uploading,\n        style: {\n          marginTop: 16\n        },\n        children: this.state.uploading ? 'Uploading' : 'Start Upload'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Dragger, { ...props,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ant-upload-drag-icon\",\n          children: /*#__PURE__*/_jsxDEV(InboxOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ant-upload-text\",\n          children: \"Click or drag the isometrics to this area to upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ant-upload-hint\",\n          children: \"You can drop single or multiple isometrics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this), \",\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default DragAndDrop;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/dragAndDrop/dragAndDrop.js"],"names":["React","Upload","message","Button","InboxOutlined","DragAndDrop","Component","state","fileList","uploading","render","handleUpload","formData","FormData","forEach","file","append","setState","reqwest","url","method","processData","data","success","error","Dragger","props","name","multiple","action","onRemove","index","indexOf","newFileList","slice","splice","beforeUpload","length","marginTop"],"mappings":"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","sourcesContent":["//Drag and drop para subir isometricas\r\n\r\nimport React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Upload, message , Button} from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\n\r\n\r\nclass DragAndDrop extends React.Component{\r\n\r\n  state = {\r\n    fileList: [],\r\n    uploading: false,\r\n  };\r\n\r\nrender (){\r\n  \r\n  handleUpload = () => {\r\n    const { fileList } = this.state;\r\n    const formData = new FormData();\r\n    fileList.forEach(file => {\r\n      formData.append('files[]', file);\r\n    });\r\n\r\n    this.setState({\r\n      uploading: true,\r\n    });\r\n\r\n    // You can use any AJAX library you like\r\n    reqwest({\r\n      url: 'http://',\r\n      method: 'post',\r\n      processData: false,\r\n      data: formData,\r\n      success: () => {\r\n        this.setState({\r\n          fileList: [],\r\n          uploading: false,\r\n        });\r\n        message.success('upload successfully.');\r\n      },\r\n      error: () => {\r\n        this.setState({\r\n          uploading: false,\r\n        });\r\n        message.error('upload failed.');\r\n      },\r\n    });\r\n  };\r\nconst { Dragger } = Upload;\r\n\r\nconst props = {\r\n  name: 'file',\r\n  multiple: true,\r\n  action: 'http://localhost:5000/upload',\r\n  onRemove: file => {\r\n    this.setState(state => {\r\n      const index = state.fileList.indexOf(file);\r\n      const newFileList = state.fileList.slice();\r\n      newFileList.splice(index, 1);\r\n      return {\r\n        fileList: newFileList,\r\n      };\r\n    });\r\n  },\r\n  beforeUpload: file => {\r\n    this.setState(state => ({\r\n       fileList: [...state.fileList, file],\r\n    }));\r\n    return false;\r\n    },\r\n  };\r\n\r\n    return(\r\n        <div>\r\n          <Button\r\n          type=\"primary\"\r\n          onClick={this.handleUpload}\r\n          disabled={this.state.fileList.length === 0}\r\n          loading={this.state.uploading}\r\n          style={{ marginTop: 16 }}\r\n        >\r\n          {this.state.uploading ? 'Uploading' : 'Start Upload'}\r\n        </Button>\r\n            <Dragger {...props}>\r\n              \r\n                <p className=\"ant-upload-drag-icon\">\r\n                  <InboxOutlined />\r\n                </p>\r\n                <p className=\"ant-upload-text\">Click or drag the isometrics to this area to upload</p>\r\n                <p className=\"ant-upload-hint\">\r\n                  You can drop single or multiple isometrics\r\n                </p>\r\n            </Dragger>,\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default DragAndDrop;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}