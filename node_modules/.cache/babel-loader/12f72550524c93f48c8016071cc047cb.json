{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { extend, clone } from \"../../../helpers/object.mjs\";\nimport { substitute } from \"../../../helpers/string.mjs\";\n/**\n * @plugin ExportFile\n * @private\n */\n\nvar BaseType = /*#__PURE__*/function () {\n  function BaseType(dataProvider, options) {\n    _classCallCheck(this, BaseType);\n    /**\n     * Data provider.\n     *\n     * @type {DataProvider}\n     */\n\n\n    this.dataProvider = dataProvider;\n    /**\n     * Format type class options.\n     *\n     * @type {object}\n     */\n\n    this.options = this._mergeOptions(options);\n    this.dataProvider.setOptions(this.options);\n  }\n  /**\n   * Merge options provided by users with defaults.\n   *\n   * @param {object} options An object with options to merge with.\n   * @returns {object} Returns new options object.\n   */\n\n\n  _createClass(BaseType, [{\n    key: \"_mergeOptions\",\n    value: function _mergeOptions(options) {\n      var _options = clone(this.constructor.DEFAULT_OPTIONS);\n\n      var date = new Date();\n      _options = extend(clone(BaseType.DEFAULT_OPTIONS), _options);\n      _options = extend(_options, options);\n      _options.filename = substitute(_options.filename, {\n        YYYY: date.getFullYear(),\n        MM: \"\".concat(date.getMonth() + 1).padStart(2, '0'),\n        DD: \"\".concat(date.getDate()).padStart(2, '0')\n      });\n      return _options;\n    }\n  }], [{\n    key: \"DEFAULT_OPTIONS\",\n    get:\n    /**\n     * Default options.\n     *\n     * @returns {object}\n     */\n    function get() {\n      return {\n        mimeType: 'text/plain',\n        fileExtension: 'txt',\n        filename: 'Handsontable [YYYY]-[MM]-[DD]',\n        encoding: 'utf-8',\n        bom: false,\n        columnHeaders: false,\n        rowHeaders: false,\n        exportHiddenColumns: false,\n        exportHiddenRows: false,\n        range: []\n      };\n    }\n  }]);\n\n  return BaseType;\n}();\n\nexport default BaseType;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/exportFile/types/_base.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","extend","clone","substitute","BaseType","dataProvider","options","_mergeOptions","setOptions","value","_options","constructor","DEFAULT_OPTIONS","date","Date","filename","YYYY","getFullYear","MM","concat","getMonth","padStart","DD","getDate","get","mimeType","fileExtension","encoding","bom","columnHeaders","rowHeaders","exportHiddenColumns","exportHiddenRows","range"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.string.pad-start.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { extend, clone } from \"../../../helpers/object.mjs\";\nimport { substitute } from \"../../../helpers/string.mjs\";\n/**\n * @plugin ExportFile\n * @private\n */\n\nvar BaseType = /*#__PURE__*/function () {\n  function BaseType(dataProvider, options) {\n    _classCallCheck(this, BaseType);\n\n    /**\n     * Data provider.\n     *\n     * @type {DataProvider}\n     */\n    this.dataProvider = dataProvider;\n    /**\n     * Format type class options.\n     *\n     * @type {object}\n     */\n\n    this.options = this._mergeOptions(options);\n    this.dataProvider.setOptions(this.options);\n  }\n  /**\n   * Merge options provided by users with defaults.\n   *\n   * @param {object} options An object with options to merge with.\n   * @returns {object} Returns new options object.\n   */\n\n\n  _createClass(BaseType, [{\n    key: \"_mergeOptions\",\n    value: function _mergeOptions(options) {\n      var _options = clone(this.constructor.DEFAULT_OPTIONS);\n\n      var date = new Date();\n      _options = extend(clone(BaseType.DEFAULT_OPTIONS), _options);\n      _options = extend(_options, options);\n      _options.filename = substitute(_options.filename, {\n        YYYY: date.getFullYear(),\n        MM: \"\".concat(date.getMonth() + 1).padStart(2, '0'),\n        DD: \"\".concat(date.getDate()).padStart(2, '0')\n      });\n      return _options;\n    }\n  }], [{\n    key: \"DEFAULT_OPTIONS\",\n    get:\n    /**\n     * Default options.\n     *\n     * @returns {object}\n     */\n    function get() {\n      return {\n        mimeType: 'text/plain',\n        fileExtension: 'txt',\n        filename: 'Handsontable [YYYY]-[MM]-[DD]',\n        encoding: 'utf-8',\n        bom: false,\n        columnHeaders: false,\n        rowHeaders: false,\n        exportHiddenColumns: false,\n        exportHiddenRows: false,\n        range: []\n      };\n    }\n  }]);\n\n  return BaseType;\n}();\n\nexport default BaseType;"]},"metadata":{},"sourceType":"module"}