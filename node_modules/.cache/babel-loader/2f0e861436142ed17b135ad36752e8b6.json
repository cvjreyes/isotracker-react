{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\pages\\\\pipingProduction\\\\pipingProduction.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { HotTable } from '@handsontable/react';\nimport IdleTimer from 'react-idle-timer';\nimport { useHistory } from \"react-router\";\nimport BackIcon from \"../../assets/images/back.svg\";\nimport AlertF from \"../../components/alert/alert\";\nimport './pipingProduction.css';\nimport SaveIcon from \"../../assets/images/save.svg\";\nimport { Line } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport NavBarProdCurve from '../../components/navBarProdCurve/navBarProdCurve'; //Página de home con el menú para ir a las aplicaciones de isotracker\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PITRequests = () => {\n  _s();\n\n  const history = useHistory();\n\n  const CryptoJS = require(\"crypto-js\");\n\n  const SecureStorage = require(\"secure-web-storage\");\n\n  var SECRET_KEY = 'sanud2ha8shd72h';\n  var secureStorage = new SecureStorage(localStorage, {\n    hash: function hash(key) {\n      key = CryptoJS.SHA256(key, SECRET_KEY);\n      return key.toString();\n    },\n    encrypt: function encrypt(data) {\n      data = CryptoJS.AES.encrypt(data, SECRET_KEY);\n      data = data.toString();\n      return data;\n    },\n    decrypt: function decrypt(data) {\n      data = CryptoJS.AES.decrypt(data, SECRET_KEY);\n      data = data.toString(CryptoJS.enc.Utf8);\n      return data;\n    }\n  });\n  const [updateData, setUpdateData] = useState(false);\n  const [updateRows, setUpdateRows] = useState(false);\n  const [tables, setTables] = useState([]);\n  const [materials, setMaterials] = useState();\n  const [materialsList, setMaterialsList] = useState([]);\n  const [piping, setPiping] = useState();\n  const [management, setManagement] = useState([]);\n  const [estimatedData, setEstimatedData] = useState({});\n  const [forecastData, setForecastData] = useState({});\n  const [estimatedMaterialData, setEstimatedMaterialData] = useState({});\n  const [overallTable, setOverallTable] = useState();\n  const [success, setSuccess] = useState(false);\n  const [spanAlert, setSpanAlert] = useState(false);\n  const [pipingAlert, setPipingAlert] = useState(false);\n  const [materialsAlert, setMaterialsAlert] = useState(false);\n  const [lineChart, setLineChart] = useState();\n  document.body.style.zoom = 1;\n\n  function handleOnIdle() {\n    const body = {\n      user: secureStorage.getItem(\"user\")\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/exitEditCSP\", options).then(response => response.json()).then(async json => {});\n    secureStorage.clear();\n    history.push(\"/\" + process.env.REACT_APP_PROJECT);\n  }\n\n  function getRandomColor() {\n    var letters = '0123456789ABCDEF'.split('');\n    var color = '#';\n\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n\n    return color;\n  }\n\n  useEffect(async () => {\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/getEstimatedByMaterial\", options).then(response => response.json()).then(async json => {\n      let est = estimatedMaterialData;\n\n      for (let i = 0; i < json.estimated.length; i++) {\n        est[json.estimated[i].id] = json.estimated[i].estimated;\n      }\n\n      await setEstimatedMaterialData(est);\n    });\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/getIssuedByMatWeek\", options).then(response => response.json()).then(async json => {\n      const issued = json.issued;\n      await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/getEstimatedMatWeek\", options).then(response => response.json()).then(async json => {\n        const estimated = json.estimated;\n        fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/getForecastMatWeek\", options).then(response => response.json()).then(async json => {\n          const forecast = json.forecast;\n          let tables = [];\n          let material = estimated[0].material_id;\n          const settings = {\n            licenseKey: 'non-commercial-and-evaluation',\n            colWidths: 40,\n            rowHeaderWidth: 190 //... other options\n\n          };\n          let weeks = [];\n          let graphData = [];\n          let est = {};\n          let sumEst = {};\n          let sumReal = {};\n          let sumForc = {};\n          let sumEstGraph = [];\n          let sumRealGraph = [];\n          let sumForcGraph = [];\n          let countEst = 0;\n          let countReal = 0;\n          let countForc = 0;\n          let forc = {};\n          let col = [];\n          let sumEstCells = [];\n\n          for (let i = 0; i < estimated.length; i++) {\n            if (estimated[i].material_id === material) {\n              weeks.push(estimated[i].week.toString());\n              est[estimated[i].week.toString()] = estimated[i].estimated;\n              forc[forecast[i].week.toString()] = forecast[i].estimated;\n              countEst += estimated[i].estimated;\n              sumEst[estimated[i].week.toString()] = countEst;\n\n              if (issued[material]) {\n                if (issued[material][estimated[i].week]) {\n                  countReal += issued[material][estimated[i].week];\n                }\n              }\n\n              if (forc[material]) {\n                if (issued[material][estimated[i].week]) {\n                  countReal += issued[material][estimated[i].week];\n                }\n              }\n\n              sumReal[estimated[i].week.toString()] = countReal;\n              col.push({\n                data: estimated[i].week.toString(),\n                type: \"numeric\"\n              });\n              sumEstCells.push({\n                row: 1,\n                col: i,\n                readOnly: true\n              });\n              sumEstCells.push({\n                row: 3,\n                col: i,\n                readOnly: true\n              });\n            } else {\n              let estData = estimatedData;\n              estData[material] = est;\n              await setEstimatedData(estData);\n              let forcData = forecastData;\n              forcData[material] = forc;\n              await setForecastData(forcData);\n              let totalEst = estimatedMaterialData[estimated[i - 1].material_id];\n\n              if (!totalEst) {\n                totalEst = 0;\n              }\n\n              let diff = countEst - totalEst;\n              let warning = null;\n\n              if (totalEst < countEst) {\n                warning = /*#__PURE__*/_jsxDEV(\"text\", {\n                  className: \"warning__text\",\n                  children: [\"*Estimated exceeded by \", diff, \"!\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 51\n                }, this);\n              }\n\n              if (!totalEst) {\n                totalEst = \"(0 estimated)\";\n              } else {\n                totalEst = \"(\" + totalEst.toString() + \" estimated)\";\n              }\n\n              await tables.push( /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"hot-app\",\n                children: [/*#__PURE__*/_jsxDEV(\"text\", {\n                  className: \"materials__title\",\n                  children: [estimated[i - 1].name.toUpperCase(), \" Isometrics \", /*#__PURE__*/_jsxDEV(\"text\", {\n                    style: {\n                      fontSize: \"17px\"\n                    },\n                    children: totalEst\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 199,\n                    columnNumber: 155\n                  }, this), \" \", warning]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 73\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"save__button\",\n                  onClick: () => submitEstimatedForecast(estimated[i - 1].material_id),\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: SaveIcon,\n                    alt: \"save\",\n                    className: \"save__icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 199,\n                    columnNumber: 321\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 221\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    marginTop: \"10px\"\n                  },\n                  children: /*#__PURE__*/_jsxDEV(HotTable, {\n                    data: [est, issued[material], forc, sumEst, sumReal],\n                    colHeaders: weeks,\n                    rowHeaders: [\"Estimated\", \"Real\", \"Forecast\", \"Estimated progress\", \"Real progress\"],\n                    width: \"1800\",\n                    height: \"200\",\n                    settings: settings,\n                    manualColumnResize: true,\n                    manualRowResize: true,\n                    columns: col,\n                    filters: true,\n                    cell: sumEstCells\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 200,\n                    columnNumber: 69\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 55\n              }, this));\n              Object.keys(sumEst).map(function (key, index) {\n                sumEstGraph.push(sumEst[key]);\n              });\n              Object.keys(sumReal).map(function (key, index) {\n                sumRealGraph.push(sumReal[key]);\n              });\n              Object.keys(forc).map(function (key, index) {\n                if (key === \"1\") {\n                  if (forc[key]) {\n                    sumForcGraph.push(forc[key]);\n                  } else {\n                    sumForcGraph.push(0);\n                  }\n                } else {\n                  if (forc[key]) {\n                    console.log(forc[key - 1] + forc[key]);\n                    sumForcGraph.push(forc[key - 1] + forc[key]);\n                  } else {\n                    sumForcGraph.push(forc[key - 1]);\n                    console.log(forc[key - 1]);\n                  }\n                }\n              });\n              graphData.push({\n                label: 'Estimated ' + estimated[i - 1].name,\n                fill: false,\n                lineTension: 0.2,\n                backgroundColor: 'rgb(148,0,211)',\n                borderColor: 'rgb(75,0,130)',\n                borderWidth: 1,\n                data: sumEstGraph\n              });\n              graphData.push({\n                label: 'Real ' + estimated[i - 1].name,\n                fill: false,\n                lineTension: 0.2,\n                backgroundColor: 'rgb(148,0,211)',\n                borderColor: 'rgb(75,0,130)',\n                borderWidth: 1,\n                data: sumRealGraph\n              });\n              graphData.push({\n                label: 'Forecast ' + estimated[i - 1].name,\n                fill: false,\n                lineTension: 0.2,\n                backgroundColor: 'rgb(148,0,211)',\n                borderColor: 'rgb(75,0,130)',\n                borderWidth: 1,\n                data: sumForcGraph\n              });\n              weeks = [estimated[i].week.toString()];\n              est = {};\n              forc = {};\n              sumEst = {};\n              sumReal = {};\n              sumEstGraph = [];\n              sumRealGraph = [];\n              sumForcGraph = [];\n              est[estimated[i].week.toString()] = estimated[i].estimated;\n              forc[forecast[i].week.toString()] = forecast[i].estimated;\n\n              if (issued[estimated[i].material_id]) {\n                if (issued[estimated[i].material_id][\"1\"]) {\n                  countReal = issued[estimated[i].material_id][estimated[i].week];\n                } else {\n                  countReal = 0;\n                }\n              } else {\n                countReal = 0;\n              }\n\n              sumReal[estimated[i].week.toString()] = countReal;\n\n              if (estimated[i].estimated) {\n                countEst = estimated[i].estimated;\n              } else {\n                countEst = 0;\n              }\n\n              sumEst[estimated[i].week.toString()] = countEst;\n              col = [{\n                data: estimated[i].week.toString(),\n                type: \"numeric\"\n              }];\n              material = estimated[i].material_id;\n            }\n          }\n\n          let estData = estimatedData;\n          estData[material] = est;\n          await setEstimatedData(estData);\n          let forcData = forecastData;\n          forcData[material] = forc;\n          await setForecastData(forcData);\n          let totalEst = estimatedMaterialData[material];\n\n          if (!totalEst) {\n            totalEst = 0;\n          }\n\n          let diff = countEst - totalEst;\n          let warning = null;\n\n          if (totalEst < countEst) {\n            warning = /*#__PURE__*/_jsxDEV(\"text\", {\n              className: \"warning__text\",\n              children: [\"*Estimated exceeded by \", diff, \"!\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 43\n            }, this);\n          }\n\n          if (!totalEst) {\n            totalEst = \"(0 estimated)\";\n          } else {\n            totalEst = \"(\" + totalEst.toString() + \" estimated)\";\n          }\n\n          await tables.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hot-app\",\n            children: [/*#__PURE__*/_jsxDEV(\"text\", {\n              className: \"materials__title\",\n              children: [estimated[estimated.length - 1].name.toUpperCase(), \" Isometrics \", /*#__PURE__*/_jsxDEV(\"text\", {\n                style: {\n                  fontSize: \"17px\"\n                },\n                children: totalEst\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 162\n              }, this), \" \", warning]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 65\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"save__button\",\n              onClick: () => submitEstimatedForecast(material),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: SaveIcon,\n                alt: \"save\",\n                className: \"save__icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 310\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 228\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: \"10px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(HotTable, {\n                data: [est, issued[material], forc, sumEst, sumReal],\n                colHeaders: weeks,\n                rowHeaders: [\"Estimated\", \"Real\", \"Forecast\", \"Estimated progress\", \"Real progress\"],\n                width: \"1800\",\n                height: \"200\",\n                settings: settings,\n                manualColumnResize: true,\n                manualRowResize: true,\n                columns: col,\n                filters: true,\n                cell: sumEstCells\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 61\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 47\n          }, this));\n          setTables(tables);\n          let overallTable = [];\n          let totalEstimated = 0;\n          let estimatedOverall = {};\n          let esimatedOverallSum = {};\n          let estimatedOverallCount = 0;\n          let estimatedOverallGraph = [];\n          let realOverall = {};\n          let realOverallSum = {};\n          let realOverallCount = 0;\n          let realOverallGraph = [];\n          Object.keys(estimatedMaterialData).map(function (key, index) {\n            totalEstimated += estimatedMaterialData[key];\n          });\n          Object.keys(issued).map(function (key, index) {\n            Object.keys(issued[key]).map(function (k, index) {\n              if (realOverall[k]) {\n                realOverall[k] += issued[key][k];\n              } else {\n                realOverall[k] = issued[key][k];\n              }\n            });\n          });\n          Object.keys(estimated).map(function (key, index) {\n            if (estimatedOverall[estimated[key].week]) {\n              estimatedOverall[estimated[key].week] += estimated[key].estimated;\n            } else {\n              estimatedOverall[estimated[key].week] = estimated[key].estimated;\n            }\n          });\n          let labels = [];\n          await Object.keys(estimatedOverall).map(function (key, index) {\n            if (realOverall[key]) {\n              realOverallCount += realOverall[key];\n            }\n\n            realOverallSum[key] = realOverallCount;\n            estimatedOverallCount += estimatedOverall[key];\n            esimatedOverallSum[key] = estimatedOverallCount;\n            estimatedOverallGraph.push(estimatedOverallCount);\n            realOverallGraph.push(realOverallCount);\n            labels.push(\"W\" + key.toString());\n          });\n          graphData.push({\n            label: 'Estimated Overall',\n            fill: false,\n            lineTension: 0.2,\n            backgroundColor: 'rgb(148,0,211)',\n            borderColor: 'rgb(75,0,130)',\n            borderWidth: 1,\n            data: estimatedOverallGraph\n          });\n          graphData.push({\n            label: 'Real Overall',\n            fill: false,\n            lineTension: 0.2,\n            backgroundColor: 'rgb(220,20,60)',\n            borderColor: 'rgb(255,0,0)',\n            borderWidth: 1,\n            data: realOverallGraph\n          });\n          warning = null;\n\n          if (totalEstimated < estimatedOverallCount) {\n            warning = /*#__PURE__*/_jsxDEV(\"text\", {\n              className: \"warning__text\",\n              children: [\"*Estimated exceeded by \", estimatedOverallCount - totalEstimated, \"!\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 43\n            }, this);\n          }\n\n          await overallTable.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"hot-app\",\n            children: [/*#__PURE__*/_jsxDEV(\"text\", {\n              className: \"materials__title\",\n              children: [\"OVERALL Isometrics \", /*#__PURE__*/_jsxDEV(\"text\", {\n                style: {\n                  fontSize: \"17px\"\n                },\n                children: [\"(\", totalEstimated, \" estimated)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 125\n              }, this), \" \", warning]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 71\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"save__button\",\n              onClick: () => submitEstimatedForecast(material),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: SaveIcon,\n                alt: \"save\",\n                className: \"save__icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 291\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 209\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: \"10px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(HotTable, {\n                data: [estimatedOverall, realOverall, esimatedOverallSum, realOverallSum],\n                colHeaders: weeks,\n                rowHeaders: [\"Estimated\", \"Real\", \"Estimated progress\", \"Real progress\"],\n                width: \"1800\",\n                height: \"200\",\n                settings: settings,\n                manualColumnResize: true,\n                manualRowResize: true,\n                columns: col,\n                filters: true,\n                cell: sumEstCells\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 61\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 53\n          }, this));\n          await setOverallTable(overallTable);\n          await setLineChart( /*#__PURE__*/_jsxDEV(Line, {\n            data: {\n              labels: labels,\n              datasets: graphData\n            },\n            options: {\n              hover: {\n                mode: 'new mode'\n              },\n              plugins: {\n                title: {\n                  display: true,\n                  text: \"Isometrics Production Curves\"\n                },\n                legend: {\n                  display: true,\n                  position: \"left\"\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 48\n          }, this));\n        });\n      });\n    });\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/getMaterials\", options).then(response => response.json()).then(async json => {\n      const materials = json.materials;\n      let mat = [];\n      let matList = [];\n\n      for (let i = 0; i < materials.length; i++) {\n        mat.push({\n          \"id\": materials[i].id,\n          \"Material\": materials[i].name\n        });\n        matList.push(materials[i].name);\n      }\n\n      await setMaterials(mat);\n      await setMaterialsList(matList);\n    });\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/getMaterialsPipingClass\", options).then(response => response.json()).then(async json => {\n      const materials = json.materials;\n      let piping = [];\n\n      for (let i = 0; i < materials.length; i++) {\n        piping.push({\n          \"id\": materials[i].piping_id,\n          \"PipingClass\": materials[i].piping,\n          \"Material\": materials[i].material\n        });\n      }\n\n      await setPiping(piping);\n    });\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/getProjectSpan\", options).then(response => response.json()).then(async json => {\n      const span = json.span;\n      await setManagement({\n        \"Starting date\": span[0].starting_date.toString().substring(8, 10) + \"/\" + span[0].starting_date.toString().substring(5, 7) + \"/\" + span[0].starting_date.toString().substring(0, 4),\n        \"Finishing date\": span[0].finishing_date.toString().substring(8, 10) + \"/\" + span[0].finishing_date.toString().substring(5, 7) + \"/\" + span[0].finishing_date.toString().substring(0, 4)\n      });\n    });\n  }, [updateData]);\n\n  async function addRowMaterials() {\n    let m = materials;\n    m.push({\n      \"id\": \"\",\n      \"Material\": \"\"\n    });\n    await setMaterials(m);\n    await setUpdateRows(!updateRows);\n  }\n\n  async function addRowPiping() {\n    let p = piping;\n    p.push({\n      \"id\": \"\",\n      \"Material\": \"\"\n    });\n    await setPiping(p);\n    await setUpdateRows(!updateRows);\n  }\n\n  async function submitChangesMaterials() {\n    const body = {\n      materials: materials\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/submitMaterials\", options).then(response => response.json()).then(async json => {\n      if (json.success) {\n        await setMaterialsAlert(true);\n        await setUpdateData(!updateData);\n      }\n    });\n  }\n\n  async function submitChangesPiping() {\n    const body = {\n      piping: piping\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/submitPipingClass\", options).then(response => response.json()).then(async json => {\n      if (json.success) {\n        await setPipingAlert(true);\n        await setUpdateData(!updateData);\n      }\n    });\n  }\n\n  async function submitManagement() {\n    const body = {\n      span: management\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/submitProjectSpan\", options).then(response => response.json()).then(async json => {\n      if (json.success) {\n        await setSpanAlert(true);\n        await setUpdateData(!updateData);\n      }\n    });\n  }\n\n  async function submitEstimatedForecast(material_id) {\n    const body = {\n      material_id: material_id,\n      estimated: estimatedData[material_id],\n      forecast: forecastData[material_id]\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/submitEstimatedForecast\", options).then(response => response.json()).then(async json => {\n      if (json.success) {\n        await setSuccess(true);\n        await setUpdateData(!updateData);\n      }\n    });\n  }\n\n  const matSettings = {\n    licenseKey: 'non-commercial-and-evaluation',\n    colWidths: 400 //... other options\n\n  };\n  const pipingSettings = {\n    licenseKey: 'non-commercial-and-evaluation',\n    colWidths: 200 //... other options\n\n  };\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    children: [updateData, updateRows, /*#__PURE__*/_jsxDEV(IdleTimer, {\n      timeout: 1000 * 60 * 15,\n      onIdle: handleOnIdle,\n      debounce: 250\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NavBarProdCurve, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `alert alert-success ${spanAlert ? 'alert-shown' : 'alert-hidden'}`,\n      onTransitionEnd: () => setSpanAlert(false),\n      children: /*#__PURE__*/_jsxDEV(AlertF, {\n        type: \"success\",\n        text: \"Project week span saved!\",\n        margin: \"0px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `alert alert-success ${pipingAlert ? 'alert-shown' : 'alert-hidden'}`,\n      onTransitionEnd: () => setPipingAlert(false),\n      children: /*#__PURE__*/_jsxDEV(AlertF, {\n        type: \"success\",\n        text: \"Piping classes saved!\",\n        margin: \"0px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `alert alert-success ${materialsAlert ? 'alert-shown' : 'alert-hidden'}`,\n      onTransitionEnd: () => setMaterialsAlert(false),\n      children: /*#__PURE__*/_jsxDEV(AlertF, {\n        type: \"success\",\n        text: \"Materials saved!\",\n        margin: \"0px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `alert alert-success ${success ? 'alert-shown' : 'alert-hidden'}`,\n      onTransitionEnd: () => setSuccess(false),\n      children: /*#__PURE__*/_jsxDEV(AlertF, {\n        type: \"success\",\n        text: \"Changes saved!\",\n        margin: \"0px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back__button\",\n      onClick: () => history.push('/' + process.env.REACT_APP_PROJECT + '/piping'),\n      style: {\n        width: \"175px\",\n        marginLeft: \"100px\",\n        marginTop: \"120px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: BackIcon,\n        alt: \"hold\",\n        className: \"navBar__icon\",\n        style: {\n          marginRight: \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 182\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"back__button__text\",\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 272\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph__container\",\n        children: lineChart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"materials__pc__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"hot-app\",\n          style: {\n            marginBottom: \"20px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(HotTable, {\n            data: materials,\n            colHeaders: [\"<b>Material</b>\"],\n            rowHeaders: true,\n            width: \"450\",\n            height: \"200\",\n            settings: matSettings,\n            manualColumnResize: true,\n            manualRowResize: true,\n            columns: [{\n              data: \"Material\"\n            }],\n            filters: true,\n            dropdownMenu: ['make_read_only', '---------', 'alignment', '---------', 'filter_by_condition', '---------', 'filter_operators', '---------', 'filter_by_condition2', '---------', 'filter_by_value', '---------', 'filter_action_bar']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn btn-sm btn-info\",\n          onClick: () => addRowMaterials(),\n          style: {\n            marginRight: \"5px\",\n            fontSize: \"16px\",\n            width: \"60px\",\n            borderRadius: \"10px\",\n            backgroundColor: \"#338DF1\",\n            marginLeft: \"165px\"\n          },\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn btn-sm btn-success\",\n          onClick: () => submitChangesMaterials(),\n          style: {\n            marginRight: \"5px\",\n            fontSize: \"16px\",\n            width: \"60px\",\n            borderRadius: \"10px\",\n            backgroundColor: \"#7BD36D\"\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"hot-app\",\n          style: {\n            marginBottom: \"20px\",\n            marginTop: \"40px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(HotTable, {\n            data: piping,\n            colHeaders: [\"<b>Piping class</b>\", \"<b>Material</b>\"],\n            rowHeaders: true,\n            width: \"500\",\n            height: \"200\",\n            settings: pipingSettings,\n            manualColumnResize: true,\n            manualRowResize: true,\n            columns: [{\n              data: \"PipingClass\"\n            }, {\n              data: \"Material\",\n              type: \"dropdown\",\n              strict: \"true\",\n              source: materialsList\n            }],\n            filters: true,\n            dropdownMenu: ['make_read_only', '---------', 'alignment', '---------', 'filter_by_condition', '---------', 'filter_operators', '---------', 'filter_by_condition2', '---------', 'filter_by_value', '---------', 'filter_action_bar']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn btn-sm btn-info\",\n          onClick: () => addRowPiping(),\n          style: {\n            marginRight: \"5px\",\n            fontSize: \"16px\",\n            width: \"60px\",\n            borderRadius: \"10px\",\n            backgroundColor: \"#338DF1\",\n            marginLeft: \"165px\"\n          },\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn btn-sm btn-success\",\n          onClick: () => submitChangesPiping(),\n          style: {\n            marginRight: \"5px\",\n            fontSize: \"16px\",\n            width: \"60px\",\n            borderRadius: \"10px\",\n            backgroundColor: \"#7BD36D\"\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"management__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"text\", {\n        className: \"materials__title\",\n        children: \"Project Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save__button\",\n        onClick: () => submitManagement(),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: SaveIcon,\n          alt: \"save\",\n          className: \"save__icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 84\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(HotTable, {\n          data: management,\n          colHeaders: [\"<b>Starting date</b>\", \"<b>Finishing date</b>\"],\n          rowHeaders: true,\n          width: \"500\",\n          height: \"120\",\n          settings: pipingSettings,\n          manualColumnResize: true,\n          manualRowResize: true,\n          columns: [{\n            data: \"Starting date\",\n            type: \"date\"\n          }, {\n            data: \"Finishing date\",\n            type: \"date\"\n          }],\n          filters: true,\n          dropdownMenu: ['make_read_only', '---------', 'alignment', '---------', 'filter_by_condition', '---------', 'filter_operators', '---------', 'filter_by_condition2', '---------', 'filter_by_value', '---------', 'filter_action_bar']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"materials__tables__container\",\n      children: [overallTable, tables]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 615,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PITRequests, \"CsJvgzQXAzpHKok42JBVZW+rijE=\", false, function () {\n  return [useHistory];\n});\n\n_c = PITRequests;\nexport default PITRequests;\n\nvar _c;\n\n$RefreshReg$(_c, \"PITRequests\");","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/pages/pipingProduction/pipingProduction.js"],"names":["React","useState","useEffect","HotTable","IdleTimer","useHistory","AlertF","Line","Chart","NavBarProdCurve","PITRequests","history","CryptoJS","require","SecureStorage","SECRET_KEY","secureStorage","localStorage","hash","key","SHA256","toString","encrypt","data","AES","decrypt","enc","Utf8","updateData","setUpdateData","updateRows","setUpdateRows","tables","setTables","materials","setMaterials","materialsList","setMaterialsList","piping","setPiping","management","setManagement","estimatedData","setEstimatedData","forecastData","setForecastData","estimatedMaterialData","setEstimatedMaterialData","overallTable","setOverallTable","success","setSuccess","spanAlert","setSpanAlert","pipingAlert","setPipingAlert","materialsAlert","setMaterialsAlert","lineChart","setLineChart","document","body","style","zoom","handleOnIdle","user","getItem","options","method","headers","JSON","stringify","fetch","process","env","REACT_APP_SERVER","REACT_APP_NODE_PORT","then","response","json","clear","push","REACT_APP_PROJECT","getRandomColor","letters","split","color","i","Math","floor","random","est","estimated","length","id","issued","forecast","material","material_id","settings","licenseKey","colWidths","rowHeaderWidth","weeks","graphData","sumEst","sumReal","sumForc","sumEstGraph","sumRealGraph","sumForcGraph","countEst","countReal","countForc","forc","col","sumEstCells","week","type","row","readOnly","estData","forcData","totalEst","diff","warning","name","toUpperCase","fontSize","submitEstimatedForecast","SaveIcon","marginTop","Object","keys","map","index","console","log","label","fill","lineTension","backgroundColor","borderColor","borderWidth","totalEstimated","estimatedOverall","esimatedOverallSum","estimatedOverallCount","estimatedOverallGraph","realOverall","realOverallSum","realOverallCount","realOverallGraph","k","labels","datasets","hover","mode","plugins","title","display","text","legend","position","mat","matList","piping_id","span","starting_date","substring","finishing_date","addRowMaterials","m","addRowPiping","p","submitChangesMaterials","submitChangesPiping","submitManagement","matSettings","pipingSettings","width","marginLeft","BackIcon","marginRight","marginBottom","borderRadius","strict","source"],"mappings":"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","sourcesContent":["\r\nimport React, { useState , useEffect} from 'react'\r\nimport { HotTable } from '@handsontable/react';\r\n\r\nimport IdleTimer from 'react-idle-timer'\r\nimport {useHistory} from \"react-router\";\r\nimport BackIcon from \"../../assets/images/back.svg\"\r\n\r\nimport AlertF from \"../../components/alert/alert\"\r\n\r\nimport './pipingProduction.css'\r\nimport SaveIcon from \"../../assets/images/save.svg\"\r\nimport { Line } from 'react-chartjs-2';\r\nimport Chart from 'chart.js/auto';\r\nimport NavBarProdCurve from '../../components/navBarProdCurve/navBarProdCurve';\r\n//Página de home con el menú para ir a las aplicaciones de isotracker\r\n\r\nconst PITRequests = () =>{\r\n\r\n    const history = useHistory();\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    const [updateData, setUpdateData] = useState(false)\r\n    const [updateRows, setUpdateRows] = useState(false)\r\n    const [tables, setTables] = useState([])\r\n    const [materials, setMaterials] = useState()\r\n    const [materialsList, setMaterialsList] = useState([])\r\n    const [piping, setPiping] = useState()\r\n    const [management, setManagement] = useState([])\r\n\r\n    const [estimatedData, setEstimatedData] = useState({})\r\n    const [forecastData, setForecastData] = useState({})\r\n    const [estimatedMaterialData, setEstimatedMaterialData] = useState({})\r\n    const [overallTable, setOverallTable] = useState()\r\n\r\n    const [success, setSuccess] = useState(false)\r\n    const [spanAlert, setSpanAlert] = useState(false)\r\n    const [pipingAlert, setPipingAlert] = useState(false)\r\n    const [materialsAlert, setMaterialsAlert] = useState(false)\r\n\r\n    const [lineChart, setLineChart] = useState()\r\n\r\n    document.body.style.zoom = 1\r\n\r\n    function handleOnIdle(){\r\n        const body = {\r\n            user: secureStorage.getItem(\"user\"),\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n        secureStorage.clear()\r\n        history.push(\"/\" + process.env.REACT_APP_PROJECT)\r\n    }\r\n\r\n    function getRandomColor() {\r\n        var letters = '0123456789ABCDEF'.split('');\r\n        var color = '#';\r\n        for (var i = 0; i < 6; i++ ) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n            }\r\n\r\n    useEffect(async() =>{\r\n\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getEstimatedByMaterial\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                let est = estimatedMaterialData\r\n                for(let i = 0; i < json.estimated.length; i++){\r\n                    est[json.estimated[i].id] = json.estimated[i].estimated\r\n                }\r\n                await setEstimatedMaterialData(est)\r\n            })\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getIssuedByMatWeek\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            const issued = json.issued\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getEstimatedMatWeek\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n\r\n                    const estimated = json.estimated\r\n                    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getForecastMatWeek\", options)\r\n                        .then(response => response.json())\r\n                        .then(async json => {\r\n                            const forecast = json.forecast\r\n                            let tables = []\r\n                            let material = estimated[0].material_id\r\n                            const settings = {\r\n                                licenseKey: 'non-commercial-and-evaluation',\r\n                                colWidths: 40,\r\n                                rowHeaderWidth: 190\r\n                                //... other options\r\n                            }\r\n\r\n                            let weeks = []\r\n                            let graphData = []\r\n                            let est = {}\r\n                            let sumEst = {}\r\n                            let sumReal = {}\r\n                            let sumForc = {}\r\n                            let sumEstGraph = []\r\n                            let sumRealGraph = []\r\n                            let sumForcGraph = []\r\n                            let countEst = 0\r\n                            let countReal = 0\r\n                            let countForc = 0\r\n                            let forc = {}\r\n                            let col = []\r\n                            let sumEstCells = []\r\n\r\n                            for(let i = 0; i < estimated.length; i++){\r\n                                if(estimated[i].material_id === material){\r\n                                    weeks.push(estimated[i].week.toString())\r\n                                    est[estimated[i].week.toString()] = estimated[i].estimated\r\n                                    forc[forecast[i].week.toString()] = forecast[i].estimated\r\n                                    countEst += estimated[i].estimated\r\n                                    sumEst[estimated[i].week.toString()] = countEst\r\n                                    if(issued[material]){\r\n                                        if(issued[material][estimated[i].week]){\r\n                                            countReal += issued[material][estimated[i].week]\r\n                                        }\r\n                                    }\r\n                                    if(forc[material]){\r\n                                        if(issued[material][estimated[i].week]){\r\n                                            countReal += issued[material][estimated[i].week]\r\n                                        }\r\n                                    }\r\n                                    sumReal[estimated[i].week.toString()] = countReal\r\n                                    col.push({ data: estimated[i].week.toString(), type: \"numeric\"})\r\n                                    sumEstCells.push({row: 1, col: i, readOnly:true})\r\n                                    sumEstCells.push({row: 3, col: i, readOnly:true})\r\n                                }else{\r\n                                    let estData = estimatedData\r\n                                    estData[material] = est\r\n                                    await setEstimatedData(estData)\r\n                                    let forcData = forecastData\r\n                                    forcData[material] = forc\r\n                                    await setForecastData(forcData)\r\n                                    let totalEst = estimatedMaterialData[estimated[i-1].material_id]\r\n                                    if(!totalEst){\r\n                                        totalEst = 0\r\n                                    }\r\n                                    let diff = countEst - totalEst\r\n                                    let warning = null\r\n                                    if(totalEst < countEst){\r\n                                        warning = <text className=\"warning__text\">*Estimated exceeded by {diff}!</text>\r\n                                    }\r\n                                    if(!totalEst){\r\n                                        totalEst = \"(0 estimated)\"\r\n                                    }else{\r\n                                        totalEst = \"(\" + totalEst.toString() + \" estimated)\"\r\n                                    }\r\n\r\n                                    await tables.push(<div id=\"hot-app\"><text className=\"materials__title\">{estimated[i-1].name.toUpperCase()} Isometrics <text style={{fontSize:\"17px\"}}>{totalEst}</text> {warning}</text><button className=\"save__button\" onClick={()=> submitEstimatedForecast(estimated[i-1].material_id)}><img src={SaveIcon} alt=\"save\" className=\"save__icon\"></img></button>\r\n                                    <div style={{marginTop:\"10px\"}}><HotTable\r\n                                    data={[est, issued[material], forc, sumEst, sumReal]}\r\n                                    colHeaders={weeks}\r\n                                    rowHeaders={[\"Estimated\", \"Real\", \"Forecast\", \"Estimated progress\", \"Real progress\"]}\r\n                                    width=\"1800\"\r\n                                    height=\"200\"\r\n                                    settings={settings} \r\n                                    manualColumnResize={true}\r\n                                    manualRowResize={true}\r\n                                    columns= {col}\r\n                                    filters={true}\r\n                                    cell = {sumEstCells}\r\n                                /></div></div>)\r\n\r\n                                Object.keys(sumEst).map(function(key, index) {\r\n                                    sumEstGraph.push(sumEst[key])\r\n                                });\r\n\r\n                                Object.keys(sumReal).map(function(key, index) {\r\n                                    sumRealGraph.push(sumReal[key])\r\n                                });\r\n                                Object.keys(forc).map(function(key, index) {\r\n                                    if(key === \"1\"){\r\n                                        if(forc[key]){\r\n                                            sumForcGraph.push(forc[key])\r\n                                        }else{\r\n                                            sumForcGraph.push(0)\r\n                                        }\r\n                                    }else{\r\n                                        if(forc[key]){\r\n                                            console.log(forc[key-1] + forc[key])\r\n                                            sumForcGraph.push(forc[key-1] + forc[key])\r\n                                        }else{\r\n                                            sumForcGraph.push(forc[key-1])\r\n                                            console.log(forc[key-1])\r\n                                        }\r\n                                    }\r\n                                    \r\n                                });\r\n\r\n                                graphData.push({\r\n                                    label: 'Estimated ' + estimated[i-1].name,\r\n                                    fill: false,\r\n                                    lineTension: 0.2,\r\n                                    backgroundColor: 'rgb(148,0,211)',\r\n                                    borderColor: 'rgb(75,0,130)',\r\n                                    borderWidth: 1,\r\n                                    data: sumEstGraph\r\n                                })\r\n\r\n                                graphData.push({\r\n                                    label: 'Real ' + estimated[i-1].name,\r\n                                    fill: false,\r\n                                    lineTension: 0.2,\r\n                                    backgroundColor: 'rgb(148,0,211)',\r\n                                    borderColor: 'rgb(75,0,130)',\r\n                                    borderWidth: 1,\r\n                                    data: sumRealGraph\r\n                                })\r\n\r\n                                graphData.push({\r\n                                    label: 'Forecast ' + estimated[i-1].name,\r\n                                    fill: false,\r\n                                    lineTension: 0.2,\r\n                                    backgroundColor: 'rgb(148,0,211)',\r\n                                    borderColor: 'rgb(75,0,130)',\r\n                                    borderWidth: 1,\r\n                                    data: sumForcGraph\r\n                                })\r\n    \r\n\r\n                                weeks = [estimated[i].week.toString()]\r\n                                est = {}\r\n                                forc = {}\r\n                                sumEst = {}\r\n                                sumReal = {}\r\n                                sumEstGraph = []\r\n                                sumRealGraph = []\r\n                                sumForcGraph = []\r\n                                est[estimated[i].week.toString()] = estimated[i].estimated\r\n                                forc[forecast[i].week.toString()] = forecast[i].estimated\r\n                                if(issued[estimated[i].material_id]){\r\n                                    if(issued[estimated[i].material_id][\"1\"]){\r\n                                        countReal = issued[estimated[i].material_id][estimated[i].week]\r\n                                    }else{\r\n                                        countReal = 0\r\n                                    }\r\n                                }else{\r\n                                    countReal = 0\r\n                                }\r\n                                sumReal[estimated[i].week.toString()] = countReal\r\n\r\n                                if(estimated[i].estimated){\r\n                                    countEst = estimated[i].estimated\r\n                                }else{\r\n                                    countEst = 0\r\n                                }\r\n                                sumEst[estimated[i].week.toString()] = countEst\r\n                                \r\n                                col = [{ data: estimated[i].week.toString(), type: \"numeric\"}]\r\n                                material = estimated[i].material_id\r\n                                }\r\n                            }\r\n                            let estData = estimatedData\r\n                            estData[material] = est\r\n                            await setEstimatedData(estData)\r\n                            let forcData = forecastData\r\n                            forcData[material] = forc\r\n                            await setForecastData(forcData)\r\n                            let totalEst = estimatedMaterialData[material]\r\n                            if(!totalEst){\r\n                                totalEst = 0\r\n                            }\r\n                            let diff = countEst - totalEst\r\n                            let warning = null\r\n                            if(totalEst < countEst){\r\n                                warning = <text className=\"warning__text\">*Estimated exceeded by {diff}!</text>\r\n                            }\r\n                            if(!totalEst){\r\n                                totalEst = \"(0 estimated)\"\r\n                            }else{\r\n                                totalEst = \"(\" + totalEst.toString() + \" estimated)\"\r\n                            }\r\n\r\n                            await tables.push(<div id=\"hot-app\"><text className=\"materials__title\">{estimated[estimated.length-1].name.toUpperCase()} Isometrics <text style={{fontSize:\"17px\"}}>{totalEst}</text> {warning}</text><button className=\"save__button\" onClick={()=> submitEstimatedForecast(material)}><img src={SaveIcon} alt=\"save\" className=\"save__icon\"></img></button>\r\n                            <div style={{marginTop:\"10px\"}}><HotTable\r\n                                    data={[est, issued[material], forc, sumEst, sumReal]}\r\n                                    colHeaders={weeks}\r\n                                    rowHeaders={[\"Estimated\", \"Real\", \"Forecast\", \"Estimated progress\", \"Real progress\"]}\r\n                                    width=\"1800\"\r\n                                    height=\"200\"\r\n                                    settings={settings} \r\n                                    manualColumnResize={true}\r\n                                    manualRowResize={true}\r\n                                    columns= {col}\r\n                                    filters={true}\r\n                                    cell = {sumEstCells}\r\n                                /></div></div>)\r\n\r\n                            setTables(tables)\r\n                        \r\n                            let overallTable = []\r\n                            let totalEstimated = 0\r\n\r\n                            let estimatedOverall = {}\r\n                            let esimatedOverallSum = {}\r\n                            let estimatedOverallCount = 0\r\n                            let estimatedOverallGraph = []\r\n\r\n                            let realOverall = {}\r\n                            let realOverallSum = {}\r\n                            let realOverallCount = 0\r\n                            let realOverallGraph = []\r\n\r\n                            Object.keys(estimatedMaterialData).map(function(key, index) {\r\n                                totalEstimated += estimatedMaterialData[key]\r\n                            });\r\n\r\n                            Object.keys(issued).map(function(key, index) {\r\n                                Object.keys(issued[key]).map(function(k, index) {\r\n                                    if(realOverall[k]){\r\n                                        realOverall[k] += issued[key][k]\r\n                                    }else{\r\n                                        realOverall[k] = issued[key][k]\r\n                                    }\r\n                                })\r\n                            });\r\n\r\n                            Object.keys(estimated).map(function(key, index) {\r\n                                if(estimatedOverall[estimated[key].week]){\r\n                                    estimatedOverall[estimated[key].week] += estimated[key].estimated\r\n                                }else{\r\n                                    estimatedOverall[estimated[key].week] = estimated[key].estimated\r\n                                }\r\n                            });\r\n\r\n                            let labels = []\r\n                            await Object.keys(estimatedOverall).map(function(key, index) {\r\n                                if(realOverall[key]){\r\n                                    realOverallCount += realOverall[key]\r\n                                }\r\n                                realOverallSum[key] = realOverallCount\r\n                                estimatedOverallCount += estimatedOverall[key]\r\n                                esimatedOverallSum[key] = estimatedOverallCount\r\n                                estimatedOverallGraph.push(estimatedOverallCount)\r\n                                realOverallGraph.push(realOverallCount)\r\n\r\n                                labels.push(\"W\" + key.toString())\r\n                            });\r\n\r\n                            \r\n\r\n                            graphData.push({\r\n                                label: 'Estimated Overall',\r\n                                fill: false,\r\n                                lineTension: 0.2,\r\n                                backgroundColor: 'rgb(148,0,211)',\r\n                                borderColor: 'rgb(75,0,130)',\r\n                                borderWidth: 1,\r\n                                data: estimatedOverallGraph\r\n                            })\r\n\r\n                            graphData.push({\r\n                                label: 'Real Overall',\r\n                                fill: false,\r\n                                lineTension: 0.2,\r\n                                backgroundColor: 'rgb(220,20,60)',\r\n                                borderColor: 'rgb(255,0,0)',\r\n                                borderWidth: 1,\r\n                                data: realOverallGraph\r\n                            })\r\n\r\n                            warning = null\r\n                            if(totalEstimated < estimatedOverallCount){\r\n                                warning = <text className=\"warning__text\">*Estimated exceeded by {estimatedOverallCount-totalEstimated}!</text>\r\n                            }\r\n\r\n                            await overallTable.push(<div id=\"hot-app\"><text className=\"materials__title\">OVERALL Isometrics <text style={{fontSize:\"17px\"}}>({totalEstimated} estimated)</text> {warning}</text><button className=\"save__button\" onClick={()=> submitEstimatedForecast(material)}><img src={SaveIcon} alt=\"save\" className=\"save__icon\"></img></button>\r\n                            <div style={{marginTop:\"10px\"}}><HotTable\r\n                                    data={[estimatedOverall, realOverall, esimatedOverallSum, realOverallSum]}\r\n                                    colHeaders={weeks}\r\n                                    rowHeaders={[\"Estimated\", \"Real\", \"Estimated progress\", \"Real progress\"]}\r\n                                    width=\"1800\"\r\n                                    height=\"200\"\r\n                                    settings={settings} \r\n                                    manualColumnResize={true}\r\n                                    manualRowResize={true}\r\n                                    columns= {col}\r\n                                    filters={true}\r\n                                    cell = {sumEstCells}\r\n                                /></div></div>)\r\n\r\n                            await setOverallTable(overallTable)\r\n                            await setLineChart(<Line\r\n                                data={{\r\n                                    labels: labels,\r\n                                    datasets: graphData\r\n                                }}\r\n                                options={{\r\n                                    hover: {\r\n                                        mode: 'new mode'\r\n                                      },\r\n                                    plugins: {\r\n                                        title: {\r\n                                            display: true,\r\n                                            text: \"Isometrics Production Curves\"\r\n                                        },\r\n                                        legend: {\r\n                                            display: true,\r\n                                            position: \"left\"\r\n                                        },\r\n                                        \r\n                                    }\r\n                                    \r\n                                }}\r\n                            />)\r\n                        })\r\n                })\r\n         })  \r\n\r\n        \r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getMaterials\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                const materials = json.materials\r\n                let mat = []\r\n                let matList = []\r\n                for(let i = 0; i < materials.length; i++){\r\n                    mat.push({\"id\": materials[i].id, \"Material\": materials[i].name})\r\n                    matList.push(materials[i].name)\r\n                }\r\n                await setMaterials(mat)\r\n                await setMaterialsList(matList)\r\n            })\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getMaterialsPipingClass\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                const materials = json.materials                        \r\n                let piping = []\r\n                for(let i = 0; i < materials.length; i++){\r\n                    piping.push({\"id\": materials[i].piping_id, \"PipingClass\": materials[i].piping, \"Material\": materials[i].material})\r\n                }\r\n                \r\n                await setPiping(piping)\r\n        })\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getProjectSpan\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                const span = json.span\r\n                await setManagement({\"Starting date\": span[0].starting_date.toString().substring(8,10) + \"/\" + span[0].starting_date.toString().substring(5,7) + \"/\" + span[0].starting_date.toString().substring(0,4), \"Finishing date\": span[0].finishing_date.toString().substring(8,10) + \"/\" + span[0].finishing_date.toString().substring(5,7) + \"/\" + span[0].finishing_date.toString().substring(0,4)})\r\n            })\r\n\r\n    }, [updateData])\r\n\r\n    async function addRowMaterials(){\r\n        let m = materials\r\n        m.push({\"id\": \"\", \"Material\": \"\"})\r\n        await setMaterials(m)\r\n        await setUpdateRows(!updateRows)\r\n    }\r\n\r\n    async function addRowPiping(){\r\n        let p = piping\r\n        p.push({\"id\": \"\", \"Material\": \"\"})\r\n        await setPiping(p)\r\n        await setUpdateRows(!updateRows)\r\n    }\r\n\r\n    async function submitChangesMaterials(){\r\n        const body ={\r\n            materials : materials\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submitMaterials\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            if(json.success){\r\n                await setMaterialsAlert(true)\r\n                await setUpdateData(!updateData)\r\n            }\r\n        })\r\n    }\r\n\r\n    async function submitChangesPiping(){\r\n        const body ={\r\n            piping : piping\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submitPipingClass\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            if(json.success){\r\n                await setPipingAlert(true)\r\n                await setUpdateData(!updateData)\r\n            }\r\n        })\r\n    }\r\n\r\n    async function submitManagement(){\r\n        const body ={\r\n            span : management\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submitProjectSpan\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            if(json.success){\r\n                await setSpanAlert(true)\r\n                await setUpdateData(!updateData)\r\n            }\r\n        })\r\n    }\r\n\r\n    async function submitEstimatedForecast(material_id){\r\n        const body ={\r\n            material_id : material_id,\r\n            estimated: estimatedData[material_id],\r\n            forecast: forecastData[material_id]\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submitEstimatedForecast\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            if(json.success){\r\n                await setSuccess(true)\r\n                await setUpdateData(!updateData)\r\n            }\r\n        })        \r\n    }\r\n    \r\n    const matSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 400,\r\n        //... other options\r\n    }\r\n\r\n    const pipingSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 200,\r\n        //... other options\r\n    }\r\n    \r\n    return(\r\n\r\n        <body>\r\n            {updateData}\r\n            {updateRows}\r\n            <IdleTimer\r\n                timeout={1000 * 60 * 15}\r\n                onIdle={handleOnIdle}\r\n                debounce={250}\r\n            />\r\n            <NavBarProdCurve/>\r\n            <div className={`alert alert-success ${spanAlert ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setSpanAlert(false)}>\r\n                <AlertF type=\"success\" text=\"Project week span saved!\" margin=\"0px\"/>\r\n            </div>\r\n            <div className={`alert alert-success ${pipingAlert ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setPipingAlert(false)}>\r\n                <AlertF type=\"success\" text=\"Piping classes saved!\" margin=\"0px\"/>\r\n            </div>\r\n            <div className={`alert alert-success ${materialsAlert ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setMaterialsAlert(false)}>\r\n                <AlertF type=\"success\" text=\"Materials saved!\" margin=\"0px\"/>\r\n            </div>\r\n            <div className={`alert alert-success ${success ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setSuccess(false)}>\r\n                <AlertF type=\"success\" text=\"Changes saved!\" margin=\"0px\"/>\r\n            </div>\r\n            <button className=\"back__button\" onClick={()=>history.push('/'+process.env.REACT_APP_PROJECT+'/piping')} style={{width:\"175px\", marginLeft:\"100px\", marginTop: \"120px\"}}><img src={BackIcon} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"back__button__text\">Back</p></button>\r\n            <div className=\"top__container\">\r\n                <div className=\"graph__container\">\r\n                {lineChart}\r\n                </div>\r\n                <div className=\"materials__pc__container\">\r\n                <div id=\"hot-app\" style={{marginBottom:\"20px\"}}>\r\n                    <HotTable\r\n                        data={materials}\r\n                        colHeaders = {[\"<b>Material</b>\"]}\r\n                        rowHeaders={true}\r\n                        width=\"450\"\r\n                        height=\"200\"\r\n                        settings={matSettings} \r\n                        manualColumnResize={true}\r\n                        manualRowResize={true}\r\n                        columns= {[{ data: \"Material\"}]}\r\n                        filters={true}\r\n                        dropdownMenu= {[\r\n                            'make_read_only',\r\n                            '---------',\r\n                            'alignment',\r\n                            '---------',\r\n                            'filter_by_condition',\r\n                            '---------',\r\n                            'filter_operators',\r\n                            '---------',\r\n                            'filter_by_condition2',\r\n                            '---------',\r\n                            'filter_by_value',\r\n                            '---------',\r\n                            'filter_action_bar',\r\n                        ]}\r\n                    />\r\n                    </div>\r\n                        <button class=\"btn btn-sm btn-info\" onClick={() => addRowMaterials()} style={{marginRight:\"5px\", fontSize:\"16px\",width:\"60px\", borderRadius:\"10px\", backgroundColor:\"#338DF1\", marginLeft:\"165px\"}}>Add</button>\r\n                        <button class=\"btn btn-sm btn-success\" onClick={() => submitChangesMaterials()} style={{marginRight:\"5px\", fontSize:\"16px\", width:\"60px\", borderRadius:\"10px\", backgroundColor:\"#7BD36D\"}}>Save</button>\r\n                    <div id=\"hot-app\" style={{marginBottom:\"20px\", marginTop:\"40px\"}}>\r\n                    <HotTable\r\n                        data={piping}\r\n                        colHeaders = {[\"<b>Piping class</b>\", \"<b>Material</b>\"]}\r\n                        rowHeaders={true}\r\n                        width=\"500\"\r\n                        height=\"200\"\r\n                        settings={pipingSettings} \r\n                        manualColumnResize={true}\r\n                        manualRowResize={true}\r\n                        columns= {[{ data: \"PipingClass\"}, { data: \"Material\", type:\"dropdown\",strict:\"true\", source: materialsList}]}\r\n                        filters={true}\r\n                        dropdownMenu= {[\r\n                            'make_read_only',\r\n                            '---------',\r\n                            'alignment',\r\n                            '---------',\r\n                            'filter_by_condition',\r\n                            '---------',\r\n                            'filter_operators',\r\n                            '---------',\r\n                            'filter_by_condition2',\r\n                            '---------',\r\n                            'filter_by_value',\r\n                            '---------',\r\n                            'filter_action_bar',\r\n                        ]}\r\n                    />\r\n                    </div>\r\n                    <button class=\"btn btn-sm btn-info\" onClick={() => addRowPiping()} style={{marginRight:\"5px\", fontSize:\"16px\",width:\"60px\", borderRadius:\"10px\", backgroundColor:\"#338DF1\", marginLeft:\"165px\"}}>Add</button>\r\n                    <button class=\"btn btn-sm btn-success\" onClick={() => submitChangesPiping()} style={{marginRight:\"5px\", fontSize:\"16px\", width:\"60px\", borderRadius:\"10px\", backgroundColor:\"#7BD36D\"}}>Save</button>\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"management__container\">\r\n                <text className=\"materials__title\">Project Management</text>\r\n                <button className=\"save__button\" onClick={()=> submitManagement()}><img src={SaveIcon} alt=\"save\" className=\"save__icon\"></img></button>\r\n \r\n                <div style={{marginTop:\"10px\"}}>\r\n                    <HotTable\r\n                        data={management}\r\n                        colHeaders = {[\"<b>Starting date</b>\", \"<b>Finishing date</b>\"]}\r\n                        rowHeaders={true}\r\n                        width=\"500\"\r\n                        height=\"120\"\r\n                        settings={pipingSettings} \r\n                        manualColumnResize={true}\r\n                        manualRowResize={true}\r\n                        columns= {[{ data: \"Starting date\", type:\"date\"}, { data: \"Finishing date\", type:\"date\"}]}\r\n                        filters={true}\r\n                        dropdownMenu= {[\r\n                            'make_read_only',\r\n                            '---------',\r\n                            'alignment',\r\n                            '---------',\r\n                            'filter_by_condition',\r\n                            '---------',\r\n                            'filter_operators',\r\n                            '---------',\r\n                            'filter_by_condition2',\r\n                            '---------',\r\n                            'filter_by_value',\r\n                            '---------',\r\n                            'filter_action_bar',\r\n                        ]}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"materials__tables__container\">\r\n                {overallTable}\r\n                {tables}\r\n            </div>\r\n        </body>\r\n    );\r\n};\r\n\r\nexport default PITRequests;"]},"metadata":{},"sourceType":"module"}