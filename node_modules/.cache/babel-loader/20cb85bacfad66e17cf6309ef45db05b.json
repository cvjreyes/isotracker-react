{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport staticRegister from \"../../../utils/staticRegister.mjs\";\nimport { isUndefined } from \"../../../helpers/mixed.mjs\";\nimport { warn } from \"../../../helpers/console.mjs\";\nimport { PLUGIN_KEY } from \"../formulas.mjs\";\nimport { DEFAULT_LICENSE_KEY, getEngineSettingsWithDefaultsAndOverrides } from \"./settings.mjs\";\n/**\r\n * Prepares and returns the collection for the engine relationship with the HoT instances.\r\n *\r\n * @returns {Map}\r\n */\n\nfunction getEngineRelationshipRegistry() {\n  var registryKey = 'engine_relationship';\n  var pluginStaticRegistry = staticRegister(PLUGIN_KEY);\n\n  if (!pluginStaticRegistry.hasItem(registryKey)) {\n    pluginStaticRegistry.register(registryKey, new Map());\n  }\n\n  return pluginStaticRegistry.getItem(registryKey);\n}\n/**\r\n * Prepares and returns the collection for the engine shared usage.\r\n *\r\n * @returns {Map}\r\n */\n\n\nfunction getSharedEngineUsageRegistry() {\n  var registryKey = 'shared_engine_usage';\n  var pluginStaticRegistry = staticRegister(PLUGIN_KEY);\n\n  if (!pluginStaticRegistry.hasItem(registryKey)) {\n    pluginStaticRegistry.register(registryKey, new Map());\n  }\n\n  return pluginStaticRegistry.getItem(registryKey);\n}\n/**\r\n * Setups the engine instance. It either creates a new (possibly shared) engine instance, or attaches\r\n * the plugin to an already-existing instance.\r\n *\r\n * @param {Handsontable} hotInstance Handsontable instance.\r\n * @returns {null|object} Returns the engine instance if everything worked right and `null` otherwise.\r\n */\n\n\nexport function setupEngine(hotInstance) {\n  var hotSettings = hotInstance.getSettings();\n  var pluginSettings = hotSettings[PLUGIN_KEY];\n  var engineConfigItem = pluginSettings === null || pluginSettings === void 0 ? void 0 : pluginSettings.engine;\n\n  if (pluginSettings === true) {\n    return null;\n  }\n\n  if (isUndefined(engineConfigItem)) {\n    return null;\n  } // `engine.hyperformula` or `engine` is the engine class\n\n\n  if (typeof engineConfigItem.hyperformula === 'function' || typeof engineConfigItem === 'function') {\n    var _engineConfigItem$hyp;\n\n    return registerEngine((_engineConfigItem$hyp = engineConfigItem.hyperformula) !== null && _engineConfigItem$hyp !== void 0 ? _engineConfigItem$hyp : engineConfigItem, hotSettings, hotInstance); // `engine` is the engine instance\n  } else if (_typeof(engineConfigItem) === 'object' && isUndefined(engineConfigItem.hyperformula)) {\n    var engineRelationship = getEngineRelationshipRegistry();\n    var sharedEngineUsage = getSharedEngineUsageRegistry().get(engineConfigItem);\n\n    if (!engineRelationship.has(engineConfigItem)) {\n      engineRelationship.set(engineConfigItem, []);\n    }\n\n    engineRelationship.get(engineConfigItem).push(hotInstance);\n\n    if (sharedEngineUsage) {\n      sharedEngineUsage.push(hotInstance.guid);\n    }\n\n    if (!engineConfigItem.getConfig().licenseKey) {\n      engineConfigItem.updateConfig({\n        licenseKey: DEFAULT_LICENSE_KEY\n      });\n    }\n\n    return engineConfigItem;\n  }\n\n  return null;\n}\n/**\r\n * Registers the engine in the global register and attaches the needed event listeners.\r\n *\r\n * @param {Function} engineClass The engine class.\r\n * @param {object} hotSettings The Handsontable settings.\r\n * @param {Handsontable} hotInstance Handsontable instance.\r\n * @returns {object} Returns the engine instance.\r\n */\n\nexport function registerEngine(engineClass, hotSettings, hotInstance) {\n  var pluginSettings = hotSettings[PLUGIN_KEY];\n  var engineSettings = getEngineSettingsWithDefaultsAndOverrides(hotSettings);\n  var engineRegistry = getEngineRelationshipRegistry();\n  var sharedEngineRegistry = getSharedEngineUsageRegistry();\n  registerCustomFunctions(engineClass, pluginSettings.functions);\n  registerLanguage(engineClass, pluginSettings.language); // Create instance\n\n  var engineInstance = engineClass.buildEmpty(engineSettings); // Add it to global registry\n\n  engineRegistry.set(engineInstance, [hotInstance]);\n  sharedEngineRegistry.set(engineInstance, [hotInstance.guid]);\n  registerNamedExpressions(engineInstance, pluginSettings.namedExpressions); // Add hooks needed for cross-referencing sheets\n\n  engineInstance.on('sheetAdded', function () {\n    engineInstance.rebuildAndRecalculate();\n  });\n  engineInstance.on('sheetRemoved', function () {\n    engineInstance.rebuildAndRecalculate();\n  });\n  return engineInstance;\n}\n/**\r\n * Returns the list of the Handsontable instances linked to the specific engine instance.\r\n *\r\n * @param {object} engine The engine instance.\r\n * @returns {Map<number, Handsontable>} Returns Map with Handsontable instances.\r\n */\n\nexport function getRegisteredHotInstances(engine) {\n  var _engineRegistry$get;\n\n  var engineRegistry = getEngineRelationshipRegistry();\n  var hotInstances = engineRegistry.size === 0 ? [] : Array.from((_engineRegistry$get = engineRegistry.get(engine)) !== null && _engineRegistry$get !== void 0 ? _engineRegistry$get : []);\n  return new Map(hotInstances.map(function (hot) {\n    return [hot.getPlugin('formulas').sheetId, hot];\n  }));\n}\n/**\r\n * Removes the HOT instance from the global register's engine usage array, and if there are no HOT instances left,\r\n * unregisters the engine itself.\r\n *\r\n * @param {object} engine The engine instance.\r\n * @param {string} hotInstance The Handsontable instance.\r\n */\n\nexport function unregisterEngine(engine, hotInstance) {\n  if (engine) {\n    var engineRegistry = getEngineRelationshipRegistry();\n    var engineHotRelationship = engineRegistry.get(engine);\n    var sharedEngineRegistry = getSharedEngineUsageRegistry();\n    var sharedEngineUsage = sharedEngineRegistry.get(engine);\n\n    if (engineHotRelationship && engineHotRelationship.includes(hotInstance)) {\n      engineHotRelationship.splice(engineHotRelationship.indexOf(hotInstance), 1);\n\n      if (engineHotRelationship.length === 0) {\n        engineRegistry.delete(engine);\n      }\n    }\n\n    if (sharedEngineUsage && sharedEngineUsage.includes(hotInstance.guid)) {\n      sharedEngineUsage.splice(sharedEngineUsage.indexOf(hotInstance.guid), 1);\n\n      if (sharedEngineUsage.length === 0) {\n        sharedEngineRegistry.delete(engine);\n        engine.destroy();\n      }\n    }\n  }\n}\n/**\r\n * Registers the custom functions for the engine.\r\n *\r\n * @param {Function} engineClass The engine class.\r\n * @param {Array} customFunctions The custom functions array.\r\n */\n\nexport function registerCustomFunctions(engineClass, customFunctions) {\n  if (customFunctions) {\n    customFunctions.forEach(function (func) {\n      var name = func.name,\n          plugin = func.plugin,\n          translations = func.translations;\n\n      try {\n        engineClass.registerFunction(name, plugin, translations);\n      } catch (e) {\n        warn(e.message);\n      }\n    });\n  }\n}\n/**\r\n * Registers the provided language for the engine.\r\n *\r\n * @param {Function} engineClass The engine class.\r\n * @param {object} languageSetting The engine's language object.\r\n */\n\nexport function registerLanguage(engineClass, languageSetting) {\n  if (languageSetting) {\n    var langCode = languageSetting.langCode;\n\n    try {\n      engineClass.registerLanguage(langCode, languageSetting);\n    } catch (e) {\n      warn(e.message);\n    }\n  }\n}\n/**\r\n * Registers the provided named expressions in the engine instance.\r\n *\r\n * @param {object} engineInstance The engine instance.\r\n * @param {Array} namedExpressions Array of the named expressions to be registered.\r\n */\n\nexport function registerNamedExpressions(engineInstance, namedExpressions) {\n  if (namedExpressions) {\n    engineInstance.suspendEvaluation();\n    namedExpressions.forEach(function (namedExp) {\n      var name = namedExp.name,\n          expression = namedExp.expression,\n          scope = namedExp.scope,\n          options = namedExp.options;\n\n      try {\n        engineInstance.addNamedExpression(name, expression, scope, options);\n      } catch (e) {\n        warn(e.message);\n      }\n    });\n    engineInstance.resumeEvaluation();\n  }\n}\n/**\r\n * Sets up a new sheet.\r\n *\r\n * @param {object} engineInstance The engine instance.\r\n * @param {string} sheetName The new sheet name.\r\n * @returns {*}\r\n */\n\nexport function setupSheet(engineInstance, sheetName) {\n  if (isUndefined(sheetName) || !engineInstance.doesSheetExist(sheetName)) {\n    sheetName = engineInstance.addSheet(sheetName);\n  }\n\n  return sheetName;\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/formulas/engine/register.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","staticRegister","isUndefined","warn","PLUGIN_KEY","DEFAULT_LICENSE_KEY","getEngineSettingsWithDefaultsAndOverrides","getEngineRelationshipRegistry","registryKey","pluginStaticRegistry","hasItem","register","Map","getItem","getSharedEngineUsageRegistry","setupEngine","hotInstance","hotSettings","getSettings","pluginSettings","engineConfigItem","engine","hyperformula","_engineConfigItem$hyp","registerEngine","engineRelationship","sharedEngineUsage","get","has","set","push","guid","getConfig","licenseKey","updateConfig","engineClass","engineSettings","engineRegistry","sharedEngineRegistry","registerCustomFunctions","functions","registerLanguage","language","engineInstance","buildEmpty","registerNamedExpressions","namedExpressions","on","rebuildAndRecalculate","getRegisteredHotInstances","_engineRegistry$get","hotInstances","size","Array","from","map","hot","getPlugin","sheetId","unregisterEngine","engineHotRelationship","includes","splice","indexOf","length","delete","destroy","customFunctions","forEach","func","name","plugin","translations","registerFunction","e","message","languageSetting","langCode","suspendEvaluation","namedExp","expression","scope","options","addNamedExpression","resumeEvaluation","setupSheet","sheetName","doesSheetExist","addSheet"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nimport \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.map.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\nimport \"core-js/modules/es.array.from.js\";\r\nimport \"core-js/modules/es.array.map.js\";\r\nimport \"core-js/modules/es.array.includes.js\";\r\nimport \"core-js/modules/es.string.includes.js\";\r\nimport \"core-js/modules/es.array.splice.js\";\r\nimport \"core-js/modules/es.array.index-of.js\";\r\nimport \"core-js/modules/web.dom-collections.for-each.js\";\r\nimport \"core-js/modules/es.function.name.js\";\r\nimport \"core-js/modules/es.symbol.js\";\r\nimport \"core-js/modules/es.symbol.description.js\";\r\nimport \"core-js/modules/es.symbol.iterator.js\";\r\nimport staticRegister from \"../../../utils/staticRegister.mjs\";\r\nimport { isUndefined } from \"../../../helpers/mixed.mjs\";\r\nimport { warn } from \"../../../helpers/console.mjs\";\r\nimport { PLUGIN_KEY } from \"../formulas.mjs\";\r\nimport { DEFAULT_LICENSE_KEY, getEngineSettingsWithDefaultsAndOverrides } from \"./settings.mjs\";\r\n/**\r\n * Prepares and returns the collection for the engine relationship with the HoT instances.\r\n *\r\n * @returns {Map}\r\n */\r\n\r\nfunction getEngineRelationshipRegistry() {\r\n  var registryKey = 'engine_relationship';\r\n  var pluginStaticRegistry = staticRegister(PLUGIN_KEY);\r\n\r\n  if (!pluginStaticRegistry.hasItem(registryKey)) {\r\n    pluginStaticRegistry.register(registryKey, new Map());\r\n  }\r\n\r\n  return pluginStaticRegistry.getItem(registryKey);\r\n}\r\n/**\r\n * Prepares and returns the collection for the engine shared usage.\r\n *\r\n * @returns {Map}\r\n */\r\n\r\n\r\nfunction getSharedEngineUsageRegistry() {\r\n  var registryKey = 'shared_engine_usage';\r\n  var pluginStaticRegistry = staticRegister(PLUGIN_KEY);\r\n\r\n  if (!pluginStaticRegistry.hasItem(registryKey)) {\r\n    pluginStaticRegistry.register(registryKey, new Map());\r\n  }\r\n\r\n  return pluginStaticRegistry.getItem(registryKey);\r\n}\r\n/**\r\n * Setups the engine instance. It either creates a new (possibly shared) engine instance, or attaches\r\n * the plugin to an already-existing instance.\r\n *\r\n * @param {Handsontable} hotInstance Handsontable instance.\r\n * @returns {null|object} Returns the engine instance if everything worked right and `null` otherwise.\r\n */\r\n\r\n\r\nexport function setupEngine(hotInstance) {\r\n  var hotSettings = hotInstance.getSettings();\r\n  var pluginSettings = hotSettings[PLUGIN_KEY];\r\n  var engineConfigItem = pluginSettings === null || pluginSettings === void 0 ? void 0 : pluginSettings.engine;\r\n\r\n  if (pluginSettings === true) {\r\n    return null;\r\n  }\r\n\r\n  if (isUndefined(engineConfigItem)) {\r\n    return null;\r\n  } // `engine.hyperformula` or `engine` is the engine class\r\n\r\n\r\n  if (typeof engineConfigItem.hyperformula === 'function' || typeof engineConfigItem === 'function') {\r\n    var _engineConfigItem$hyp;\r\n\r\n    return registerEngine((_engineConfigItem$hyp = engineConfigItem.hyperformula) !== null && _engineConfigItem$hyp !== void 0 ? _engineConfigItem$hyp : engineConfigItem, hotSettings, hotInstance); // `engine` is the engine instance\r\n  } else if (_typeof(engineConfigItem) === 'object' && isUndefined(engineConfigItem.hyperformula)) {\r\n    var engineRelationship = getEngineRelationshipRegistry();\r\n    var sharedEngineUsage = getSharedEngineUsageRegistry().get(engineConfigItem);\r\n\r\n    if (!engineRelationship.has(engineConfigItem)) {\r\n      engineRelationship.set(engineConfigItem, []);\r\n    }\r\n\r\n    engineRelationship.get(engineConfigItem).push(hotInstance);\r\n\r\n    if (sharedEngineUsage) {\r\n      sharedEngineUsage.push(hotInstance.guid);\r\n    }\r\n\r\n    if (!engineConfigItem.getConfig().licenseKey) {\r\n      engineConfigItem.updateConfig({\r\n        licenseKey: DEFAULT_LICENSE_KEY\r\n      });\r\n    }\r\n\r\n    return engineConfigItem;\r\n  }\r\n\r\n  return null;\r\n}\r\n/**\r\n * Registers the engine in the global register and attaches the needed event listeners.\r\n *\r\n * @param {Function} engineClass The engine class.\r\n * @param {object} hotSettings The Handsontable settings.\r\n * @param {Handsontable} hotInstance Handsontable instance.\r\n * @returns {object} Returns the engine instance.\r\n */\r\n\r\nexport function registerEngine(engineClass, hotSettings, hotInstance) {\r\n  var pluginSettings = hotSettings[PLUGIN_KEY];\r\n  var engineSettings = getEngineSettingsWithDefaultsAndOverrides(hotSettings);\r\n  var engineRegistry = getEngineRelationshipRegistry();\r\n  var sharedEngineRegistry = getSharedEngineUsageRegistry();\r\n  registerCustomFunctions(engineClass, pluginSettings.functions);\r\n  registerLanguage(engineClass, pluginSettings.language); // Create instance\r\n\r\n  var engineInstance = engineClass.buildEmpty(engineSettings); // Add it to global registry\r\n\r\n  engineRegistry.set(engineInstance, [hotInstance]);\r\n  sharedEngineRegistry.set(engineInstance, [hotInstance.guid]);\r\n  registerNamedExpressions(engineInstance, pluginSettings.namedExpressions); // Add hooks needed for cross-referencing sheets\r\n\r\n  engineInstance.on('sheetAdded', function () {\r\n    engineInstance.rebuildAndRecalculate();\r\n  });\r\n  engineInstance.on('sheetRemoved', function () {\r\n    engineInstance.rebuildAndRecalculate();\r\n  });\r\n  return engineInstance;\r\n}\r\n/**\r\n * Returns the list of the Handsontable instances linked to the specific engine instance.\r\n *\r\n * @param {object} engine The engine instance.\r\n * @returns {Map<number, Handsontable>} Returns Map with Handsontable instances.\r\n */\r\n\r\nexport function getRegisteredHotInstances(engine) {\r\n  var _engineRegistry$get;\r\n\r\n  var engineRegistry = getEngineRelationshipRegistry();\r\n  var hotInstances = engineRegistry.size === 0 ? [] : Array.from((_engineRegistry$get = engineRegistry.get(engine)) !== null && _engineRegistry$get !== void 0 ? _engineRegistry$get : []);\r\n  return new Map(hotInstances.map(function (hot) {\r\n    return [hot.getPlugin('formulas').sheetId, hot];\r\n  }));\r\n}\r\n/**\r\n * Removes the HOT instance from the global register's engine usage array, and if there are no HOT instances left,\r\n * unregisters the engine itself.\r\n *\r\n * @param {object} engine The engine instance.\r\n * @param {string} hotInstance The Handsontable instance.\r\n */\r\n\r\nexport function unregisterEngine(engine, hotInstance) {\r\n  if (engine) {\r\n    var engineRegistry = getEngineRelationshipRegistry();\r\n    var engineHotRelationship = engineRegistry.get(engine);\r\n    var sharedEngineRegistry = getSharedEngineUsageRegistry();\r\n    var sharedEngineUsage = sharedEngineRegistry.get(engine);\r\n\r\n    if (engineHotRelationship && engineHotRelationship.includes(hotInstance)) {\r\n      engineHotRelationship.splice(engineHotRelationship.indexOf(hotInstance), 1);\r\n\r\n      if (engineHotRelationship.length === 0) {\r\n        engineRegistry.delete(engine);\r\n      }\r\n    }\r\n\r\n    if (sharedEngineUsage && sharedEngineUsage.includes(hotInstance.guid)) {\r\n      sharedEngineUsage.splice(sharedEngineUsage.indexOf(hotInstance.guid), 1);\r\n\r\n      if (sharedEngineUsage.length === 0) {\r\n        sharedEngineRegistry.delete(engine);\r\n        engine.destroy();\r\n      }\r\n    }\r\n  }\r\n}\r\n/**\r\n * Registers the custom functions for the engine.\r\n *\r\n * @param {Function} engineClass The engine class.\r\n * @param {Array} customFunctions The custom functions array.\r\n */\r\n\r\nexport function registerCustomFunctions(engineClass, customFunctions) {\r\n  if (customFunctions) {\r\n    customFunctions.forEach(function (func) {\r\n      var name = func.name,\r\n          plugin = func.plugin,\r\n          translations = func.translations;\r\n\r\n      try {\r\n        engineClass.registerFunction(name, plugin, translations);\r\n      } catch (e) {\r\n        warn(e.message);\r\n      }\r\n    });\r\n  }\r\n}\r\n/**\r\n * Registers the provided language for the engine.\r\n *\r\n * @param {Function} engineClass The engine class.\r\n * @param {object} languageSetting The engine's language object.\r\n */\r\n\r\nexport function registerLanguage(engineClass, languageSetting) {\r\n  if (languageSetting) {\r\n    var langCode = languageSetting.langCode;\r\n\r\n    try {\r\n      engineClass.registerLanguage(langCode, languageSetting);\r\n    } catch (e) {\r\n      warn(e.message);\r\n    }\r\n  }\r\n}\r\n/**\r\n * Registers the provided named expressions in the engine instance.\r\n *\r\n * @param {object} engineInstance The engine instance.\r\n * @param {Array} namedExpressions Array of the named expressions to be registered.\r\n */\r\n\r\nexport function registerNamedExpressions(engineInstance, namedExpressions) {\r\n  if (namedExpressions) {\r\n    engineInstance.suspendEvaluation();\r\n    namedExpressions.forEach(function (namedExp) {\r\n      var name = namedExp.name,\r\n          expression = namedExp.expression,\r\n          scope = namedExp.scope,\r\n          options = namedExp.options;\r\n\r\n      try {\r\n        engineInstance.addNamedExpression(name, expression, scope, options);\r\n      } catch (e) {\r\n        warn(e.message);\r\n      }\r\n    });\r\n    engineInstance.resumeEvaluation();\r\n  }\r\n}\r\n/**\r\n * Sets up a new sheet.\r\n *\r\n * @param {object} engineInstance The engine instance.\r\n * @param {string} sheetName The new sheet name.\r\n * @returns {*}\r\n */\r\n\r\nexport function setupSheet(engineInstance, sheetName) {\r\n  if (isUndefined(sheetName) || !engineInstance.doesSheetExist(sheetName)) {\r\n    sheetName = engineInstance.addSheet(sheetName);\r\n  }\r\n\r\n  return sheetName;\r\n}"]},"metadata":{},"sourceType":"module"}