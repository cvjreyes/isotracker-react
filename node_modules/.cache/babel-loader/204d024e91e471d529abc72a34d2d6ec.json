{"ast":null,"code":"export var operations = {};\n/**\n * Get operation closure with pre-bound arguments.\n *\n * @param {string} id Operator `id`.\n * @returns {Function}\n */\n\nexport function getOperationFunc(id) {\n  if (!operations[id]) {\n    throw Error(\"Operation with id \\\"\".concat(id, \"\\\" does not exist.\"));\n  }\n\n  var func = operations[id].func;\n  return function (conditions, value) {\n    return func(conditions, value);\n  };\n}\n/**\n * Return name of operation which is displayed inside UI component, basing on it's `id`.\n *\n * @param {string} id `Id` of operation.\n * @returns {string}\n */\n\nexport function getOperationName(id) {\n  return operations[id].name;\n}\n/**\n * Operator registerer.\n *\n * @param {string} id Operation `id`.\n * @param {string} name Operation name which is displayed inside UI component.\n * @param {Function} func Operation function.\n */\n\nexport function registerOperation(id, name, func) {\n  operations[id] = {\n    name: name,\n    func: func\n  };\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/filters/logicalOperationRegisterer.mjs"],"names":["operations","getOperationFunc","id","Error","concat","func","conditions","value","getOperationName","name","registerOperation"],"mappings":"AACA,OAAO,IAAIA,UAAU,GAAG,EAAjB;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAT,CAA0BC,EAA1B,EAA8B;AACnC,MAAI,CAACF,UAAU,CAACE,EAAD,CAAf,EAAqB;AACnB,UAAMC,KAAK,CAAC,uBAAuBC,MAAvB,CAA8BF,EAA9B,EAAkC,oBAAlC,CAAD,CAAX;AACD;;AAED,MAAIG,IAAI,GAAGL,UAAU,CAACE,EAAD,CAAV,CAAeG,IAA1B;AACA,SAAO,UAAUC,UAAV,EAAsBC,KAAtB,EAA6B;AAClC,WAAOF,IAAI,CAACC,UAAD,EAAaC,KAAb,CAAX;AACD,GAFD;AAGD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAT,CAA0BN,EAA1B,EAA8B;AACnC,SAAOF,UAAU,CAACE,EAAD,CAAV,CAAeO,IAAtB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,iBAAT,CAA2BR,EAA3B,EAA+BO,IAA/B,EAAqCJ,IAArC,EAA2C;AAChDL,EAAAA,UAAU,CAACE,EAAD,CAAV,GAAiB;AACfO,IAAAA,IAAI,EAAEA,IADS;AAEfJ,IAAAA,IAAI,EAAEA;AAFS,GAAjB;AAID","sourcesContent":["import \"core-js/modules/es.function.name.js\";\nexport var operations = {};\n/**\n * Get operation closure with pre-bound arguments.\n *\n * @param {string} id Operator `id`.\n * @returns {Function}\n */\n\nexport function getOperationFunc(id) {\n  if (!operations[id]) {\n    throw Error(\"Operation with id \\\"\".concat(id, \"\\\" does not exist.\"));\n  }\n\n  var func = operations[id].func;\n  return function (conditions, value) {\n    return func(conditions, value);\n  };\n}\n/**\n * Return name of operation which is displayed inside UI component, basing on it's `id`.\n *\n * @param {string} id `Id` of operation.\n * @returns {string}\n */\n\nexport function getOperationName(id) {\n  return operations[id].name;\n}\n/**\n * Operator registerer.\n *\n * @param {string} id Operation `id`.\n * @param {string} name Operation name which is displayed inside UI component.\n * @param {Function} func Operation function.\n */\n\nexport function registerOperation(id, name, func) {\n  operations[id] = {\n    name: name,\n    func: func\n  };\n}"]},"metadata":{},"sourceType":"module"}