{"ast":null,"code":"/**\r\n * The NodeModifiers module is responsible for the modification of a tree structure\r\n * in a way to achieve new column headers state.\r\n */\nimport { collapseNode } from \"./collapse.mjs\";\nimport { expandNode } from \"./expand.mjs\";\nimport { hideColumn } from \"./hideColumn.mjs\";\nimport { showColumn } from \"./showColumn.mjs\";\nvar availableModifiers = new Map([['collapse', collapseNode], ['expand', expandNode], ['hide-column', hideColumn], ['show-column', showColumn]]);\n/**\r\n * An entry point for triggering a node modifiers. If the triggered action\r\n * does not exist the exception is thrown.\r\n *\r\n * @param {string} actionName An action name to trigger.\r\n * @param {TreeNode} nodeToProcess A tree node to process.\r\n * @param {number} gridColumnIndex The visual column index that comes from the nested headers grid.\r\n *                                 The index, as opposed to the `columnIndex` in the tree node\r\n *                                 (which describes the column index of the root node of the header\r\n *                                 element), describes the index passed from the grid. Hence, the\r\n *                                 index can be between the column index of the node and its colspan\r\n *                                 width.\r\n * @returns {object}\r\n */\n\nexport function triggerNodeModification(actionName, nodeToProcess, gridColumnIndex) {\n  if (!availableModifiers.has(actionName)) {\n    throw new Error(\"The node modifier action (\\\"\".concat(actionName, \"\\\") does not exist.\"));\n  }\n\n  return availableModifiers.get(actionName)(nodeToProcess, gridColumnIndex);\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/nestedHeaders/stateManager/nodeModifiers/index.mjs"],"names":["collapseNode","expandNode","hideColumn","showColumn","availableModifiers","Map","triggerNodeModification","actionName","nodeToProcess","gridColumnIndex","has","Error","concat","get"],"mappings":"AAMA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,IAAIC,kBAAkB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,CAAC,UAAD,EAAaL,YAAb,CAAD,EAA6B,CAAC,QAAD,EAAWC,UAAX,CAA7B,EAAqD,CAAC,aAAD,EAAgBC,UAAhB,CAArD,EAAkF,CAAC,aAAD,EAAgBC,UAAhB,CAAlF,CAAR,CAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,uBAAT,CAAiCC,UAAjC,EAA6CC,aAA7C,EAA4DC,eAA5D,EAA6E;AAClF,MAAI,CAACL,kBAAkB,CAACM,GAAnB,CAAuBH,UAAvB,CAAL,EAAyC;AACvC,UAAM,IAAII,KAAJ,CAAU,+BAA+BC,MAA/B,CAAsCL,UAAtC,EAAkD,qBAAlD,CAAV,CAAN;AACD;;AAED,SAAOH,kBAAkB,CAACS,GAAnB,CAAuBN,UAAvB,EAAmCC,aAAnC,EAAkDC,eAAlD,CAAP;AACD","sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.map.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\n\r\n/**\r\n * The NodeModifiers module is responsible for the modification of a tree structure\r\n * in a way to achieve new column headers state.\r\n */\r\nimport { collapseNode } from \"./collapse.mjs\";\r\nimport { expandNode } from \"./expand.mjs\";\r\nimport { hideColumn } from \"./hideColumn.mjs\";\r\nimport { showColumn } from \"./showColumn.mjs\";\r\nvar availableModifiers = new Map([['collapse', collapseNode], ['expand', expandNode], ['hide-column', hideColumn], ['show-column', showColumn]]);\r\n/**\r\n * An entry point for triggering a node modifiers. If the triggered action\r\n * does not exist the exception is thrown.\r\n *\r\n * @param {string} actionName An action name to trigger.\r\n * @param {TreeNode} nodeToProcess A tree node to process.\r\n * @param {number} gridColumnIndex The visual column index that comes from the nested headers grid.\r\n *                                 The index, as opposed to the `columnIndex` in the tree node\r\n *                                 (which describes the column index of the root node of the header\r\n *                                 element), describes the index passed from the grid. Hence, the\r\n *                                 index can be between the column index of the node and its colspan\r\n *                                 width.\r\n * @returns {object}\r\n */\r\n\r\nexport function triggerNodeModification(actionName, nodeToProcess, gridColumnIndex) {\r\n  if (!availableModifiers.has(actionName)) {\r\n    throw new Error(\"The node modifier action (\\\"\".concat(actionName, \"\\\") does not exist.\"));\r\n  }\r\n\r\n  return availableModifiers.get(actionName)(nodeToProcess, gridColumnIndex);\r\n}"]},"metadata":{},"sourceType":"module"}