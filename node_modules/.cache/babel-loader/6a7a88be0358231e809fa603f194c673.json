{"ast":null,"code":"import { getValidSelection } from \"../utils.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\nexport var KEY = 'col_left';\n/**\r\n * @returns {object}\r\n */\n\nexport default function columnLeftItem() {\n  return {\n    key: KEY,\n    name: function name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_INSERT_LEFT);\n    },\n    callback: function callback(key, normalizedSelection) {\n      var isSelectedByCorner = this.selection.isSelectedByCorner();\n      var columnLeft = 0;\n\n      if (!isSelectedByCorner) {\n        var latestSelection = normalizedSelection[Math.max(normalizedSelection.length - 1, 0)];\n        columnLeft = latestSelection.start.col;\n      }\n\n      this.alter('insert_col', columnLeft, 1, 'ContextMenu.columnLeft');\n\n      if (isSelectedByCorner) {\n        this.selectAll();\n      }\n    },\n    disabled: function disabled() {\n      if (!this.isColumnModificationAllowed()) {\n        return true;\n      }\n\n      var selected = getValidSelection(this);\n\n      if (!selected) {\n        return true;\n      }\n\n      if (this.selection.isSelectedByCorner()) {\n        var totalColumns = this.countCols(); // Enable \"Insert column left\" only when there is at least one column.\n\n        return totalColumns === 0;\n      }\n\n      return this.selection.isSelectedByRowHeader() || this.countCols() >= this.getSettings().maxCols;\n    },\n    hidden: function hidden() {\n      return !this.getSettings().allowInsertColumn;\n    }\n  };\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/contextMenu/predefinedItems/columnLeft.mjs"],"names":["getValidSelection","C","KEY","columnLeftItem","key","name","getTranslatedPhrase","CONTEXTMENU_ITEMS_INSERT_LEFT","callback","normalizedSelection","isSelectedByCorner","selection","columnLeft","latestSelection","Math","max","length","start","col","alter","selectAll","disabled","isColumnModificationAllowed","selected","totalColumns","countCols","isSelectedByRowHeader","getSettings","maxCols","hidden","allowInsertColumn"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,cAAlC;AACA,OAAO,KAAKC,CAAZ,MAAmB,6BAAnB;AACA,OAAO,IAAIC,GAAG,GAAG,UAAV;AACP;AACA;AACA;;AAEA,eAAe,SAASC,cAAT,GAA0B;AACvC,SAAO;AACLC,IAAAA,GAAG,EAAEF,GADA;AAELG,IAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,aAAO,KAAKC,mBAAL,CAAyBL,CAAC,CAACM,6BAA3B,CAAP;AACD,KAJI;AAKLC,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBJ,GAAlB,EAAuBK,mBAAvB,EAA4C;AACpD,UAAIC,kBAAkB,GAAG,KAAKC,SAAL,CAAeD,kBAAf,EAAzB;AACA,UAAIE,UAAU,GAAG,CAAjB;;AAEA,UAAI,CAACF,kBAAL,EAAyB;AACvB,YAAIG,eAAe,GAAGJ,mBAAmB,CAACK,IAAI,CAACC,GAAL,CAASN,mBAAmB,CAACO,MAApB,GAA6B,CAAtC,EAAyC,CAAzC,CAAD,CAAzC;AACAJ,QAAAA,UAAU,GAAGC,eAAe,CAACI,KAAhB,CAAsBC,GAAnC;AACD;;AAED,WAAKC,KAAL,CAAW,YAAX,EAAyBP,UAAzB,EAAqC,CAArC,EAAwC,wBAAxC;;AAEA,UAAIF,kBAAJ,EAAwB;AACtB,aAAKU,SAAL;AACD;AACF,KAnBI;AAoBLC,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,UAAI,CAAC,KAAKC,2BAAL,EAAL,EAAyC;AACvC,eAAO,IAAP;AACD;;AAED,UAAIC,QAAQ,GAAGvB,iBAAiB,CAAC,IAAD,CAAhC;;AAEA,UAAI,CAACuB,QAAL,EAAe;AACb,eAAO,IAAP;AACD;;AAED,UAAI,KAAKZ,SAAL,CAAeD,kBAAf,EAAJ,EAAyC;AACvC,YAAIc,YAAY,GAAG,KAAKC,SAAL,EAAnB,CADuC,CACF;;AAErC,eAAOD,YAAY,KAAK,CAAxB;AACD;;AAED,aAAO,KAAKb,SAAL,CAAee,qBAAf,MAA0C,KAAKD,SAAL,MAAoB,KAAKE,WAAL,GAAmBC,OAAxF;AACD,KAtCI;AAuCLC,IAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,aAAO,CAAC,KAAKF,WAAL,GAAmBG,iBAA3B;AACD;AAzCI,GAAP;AA2CD","sourcesContent":["import { getValidSelection } from \"../utils.mjs\";\r\nimport * as C from \"../../../i18n/constants.mjs\";\r\nexport var KEY = 'col_left';\r\n/**\r\n * @returns {object}\r\n */\r\n\r\nexport default function columnLeftItem() {\r\n  return {\r\n    key: KEY,\r\n    name: function name() {\r\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_INSERT_LEFT);\r\n    },\r\n    callback: function callback(key, normalizedSelection) {\r\n      var isSelectedByCorner = this.selection.isSelectedByCorner();\r\n      var columnLeft = 0;\r\n\r\n      if (!isSelectedByCorner) {\r\n        var latestSelection = normalizedSelection[Math.max(normalizedSelection.length - 1, 0)];\r\n        columnLeft = latestSelection.start.col;\r\n      }\r\n\r\n      this.alter('insert_col', columnLeft, 1, 'ContextMenu.columnLeft');\r\n\r\n      if (isSelectedByCorner) {\r\n        this.selectAll();\r\n      }\r\n    },\r\n    disabled: function disabled() {\r\n      if (!this.isColumnModificationAllowed()) {\r\n        return true;\r\n      }\r\n\r\n      var selected = getValidSelection(this);\r\n\r\n      if (!selected) {\r\n        return true;\r\n      }\r\n\r\n      if (this.selection.isSelectedByCorner()) {\r\n        var totalColumns = this.countCols(); // Enable \"Insert column left\" only when there is at least one column.\r\n\r\n        return totalColumns === 0;\r\n      }\r\n\r\n      return this.selection.isSelectedByRowHeader() || this.countCols() >= this.getSettings().maxCols;\r\n    },\r\n    hidden: function hidden() {\r\n      return !this.getSettings().allowInsertColumn;\r\n    }\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}