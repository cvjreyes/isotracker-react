{"ast":null,"code":"'use strict';\n\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\n\nvar anObject = require('../internals/an-object');\n\nvar toLength = require('../internals/to-length');\n\nvar toInteger = require('../internals/to-integer');\n\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar advanceStringIndex = require('../internals/advance-string-index');\n\nvar getSubstitution = require('../internals/get-substitution');\n\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\nvar max = Math.max;\nvar min = Math.min;\n\nvar maybeToString = function maybeToString(it) {\n  return it === undefined ? it : String(it);\n}; // @@replace logic\n\n\nfixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {\n  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;\n  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;\n  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';\n  return [// `String.prototype.replace` method\n  // https://tc39.es/ecma262/#sec-string.prototype.replace\n  function replace(searchValue, replaceValue) {\n    var O = requireObjectCoercible(this);\n    var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];\n    return replacer !== undefined ? replacer.call(searchValue, O, replaceValue) : nativeReplace.call(String(O), searchValue, replaceValue);\n  }, // `RegExp.prototype[@@replace]` method\n  // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace\n  function (regexp, replaceValue) {\n    if (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0 || typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1) {\n      var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n    }\n\n    var rx = anObject(regexp);\n    var S = String(this);\n    var functionalReplace = typeof replaceValue === 'function';\n    if (!functionalReplace) replaceValue = String(replaceValue);\n    var global = rx.global;\n\n    if (global) {\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n    }\n\n    var results = [];\n\n    while (true) {\n      var result = regExpExec(rx, S);\n      if (result === null) break;\n      results.push(result);\n      if (!global) break;\n      var matchStr = String(result[0]);\n      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n    }\n\n    var accumulatedResult = '';\n    var nextSourcePosition = 0;\n\n    for (var i = 0; i < results.length; i++) {\n      result = results[i];\n      var matched = String(result[0]);\n      var position = max(min(toInteger(result.index), S.length), 0);\n      var captures = []; // NOTE: This is equivalent to\n      //   captures = result.slice(1).map(maybeToString)\n      // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n      // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n      // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n\n      for (var j = 1; j < result.length; j++) {\n        captures.push(maybeToString(result[j]));\n      }\n\n      var namedCaptures = result.groups;\n\n      if (functionalReplace) {\n        var replacerArgs = [matched].concat(captures, position, S);\n        if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n        var replacement = String(replaceValue.apply(undefined, replacerArgs));\n      } else {\n        replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n      }\n\n      if (position >= nextSourcePosition) {\n        accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n        nextSourcePosition = position + matched.length;\n      }\n    }\n\n    return accumulatedResult + S.slice(nextSourcePosition);\n  }];\n});","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/core-js/modules/es.string.replace.js"],"names":["fixRegExpWellKnownSymbolLogic","require","anObject","toLength","toInteger","requireObjectCoercible","advanceStringIndex","getSubstitution","regExpExec","max","Math","min","maybeToString","it","undefined","String","REPLACE","nativeReplace","maybeCallNative","reason","REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE","REPLACE_KEEPS_$0","UNSAFE_SUBSTITUTE","replace","searchValue","replaceValue","O","replacer","call","regexp","indexOf","res","done","value","rx","S","functionalReplace","global","fullUnicode","unicode","lastIndex","results","result","push","matchStr","accumulatedResult","nextSourcePosition","i","length","matched","position","index","captures","j","namedCaptures","groups","replacerArgs","concat","replacement","apply","slice"],"mappings":"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","sourcesContent":["'use strict';\r\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\r\nvar anObject = require('../internals/an-object');\r\nvar toLength = require('../internals/to-length');\r\nvar toInteger = require('../internals/to-integer');\r\nvar requireObjectCoercible = require('../internals/require-object-coercible');\r\nvar advanceStringIndex = require('../internals/advance-string-index');\r\nvar getSubstitution = require('../internals/get-substitution');\r\nvar regExpExec = require('../internals/regexp-exec-abstract');\r\n\r\nvar max = Math.max;\r\nvar min = Math.min;\r\n\r\nvar maybeToString = function (it) {\r\n  return it === undefined ? it : String(it);\r\n};\r\n\r\n// @@replace logic\r\nfixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {\r\n  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;\r\n  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;\r\n  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';\r\n\r\n  return [\r\n    // `String.prototype.replace` method\r\n    // https://tc39.es/ecma262/#sec-string.prototype.replace\r\n    function replace(searchValue, replaceValue) {\r\n      var O = requireObjectCoercible(this);\r\n      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];\r\n      return replacer !== undefined\r\n        ? replacer.call(searchValue, O, replaceValue)\r\n        : nativeReplace.call(String(O), searchValue, replaceValue);\r\n    },\r\n    // `RegExp.prototype[@@replace]` method\r\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace\r\n    function (regexp, replaceValue) {\r\n      if (\r\n        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||\r\n        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)\r\n      ) {\r\n        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);\r\n        if (res.done) return res.value;\r\n      }\r\n\r\n      var rx = anObject(regexp);\r\n      var S = String(this);\r\n\r\n      var functionalReplace = typeof replaceValue === 'function';\r\n      if (!functionalReplace) replaceValue = String(replaceValue);\r\n\r\n      var global = rx.global;\r\n      if (global) {\r\n        var fullUnicode = rx.unicode;\r\n        rx.lastIndex = 0;\r\n      }\r\n      var results = [];\r\n      while (true) {\r\n        var result = regExpExec(rx, S);\r\n        if (result === null) break;\r\n\r\n        results.push(result);\r\n        if (!global) break;\r\n\r\n        var matchStr = String(result[0]);\r\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\r\n      }\r\n\r\n      var accumulatedResult = '';\r\n      var nextSourcePosition = 0;\r\n      for (var i = 0; i < results.length; i++) {\r\n        result = results[i];\r\n\r\n        var matched = String(result[0]);\r\n        var position = max(min(toInteger(result.index), S.length), 0);\r\n        var captures = [];\r\n        // NOTE: This is equivalent to\r\n        //   captures = result.slice(1).map(maybeToString)\r\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\r\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\r\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\r\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\r\n        var namedCaptures = result.groups;\r\n        if (functionalReplace) {\r\n          var replacerArgs = [matched].concat(captures, position, S);\r\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\r\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\r\n        } else {\r\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\r\n        }\r\n        if (position >= nextSourcePosition) {\r\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\r\n          nextSourcePosition = position + matched.length;\r\n        }\r\n      }\r\n      return accumulatedResult + S.slice(nextSourcePosition);\r\n    }\r\n  ];\r\n});\r\n"]},"metadata":{},"sourceType":"script"}