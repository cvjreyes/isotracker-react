{"ast":null,"code":"import staticRegister from \"./../../utils/staticRegister.mjs\";\nimport pluralizeFn from \"./pluralize.mjs\";\n\nvar _staticRegister = staticRegister('phraseFormatters'),\n    registerGloballyPhraseFormatter = _staticRegister.register,\n    getGlobalPhraseFormatters = _staticRegister.getValues;\n/**\n * Register phrase formatter.\n *\n * @param {string} name Name of formatter.\n * @param {Function} formatterFn Function which will be applied on phrase propositions. It will transform them if it's possible.\n */\n\n\nexport function register(name, formatterFn) {\n  registerGloballyPhraseFormatter(name, formatterFn);\n}\n/**\n * Get all registered previously formatters.\n *\n * @returns {Array}\n */\n\nexport function getAll() {\n  return getGlobalPhraseFormatters();\n}\nexport { register as registerPhraseFormatter, getAll as getPhraseFormatters };\nregister('pluralize', pluralizeFn);","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/i18n/phraseFormatters/index.mjs"],"names":["staticRegister","pluralizeFn","_staticRegister","registerGloballyPhraseFormatter","register","getGlobalPhraseFormatters","getValues","name","formatterFn","getAll","registerPhraseFormatter","getPhraseFormatters"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kCAA3B;AACA,OAAOC,WAAP,MAAwB,iBAAxB;;AAEA,IAAIC,eAAe,GAAGF,cAAc,CAAC,kBAAD,CAApC;AAAA,IACIG,+BAA+B,GAAGD,eAAe,CAACE,QADtD;AAAA,IAEIC,yBAAyB,GAAGH,eAAe,CAACI,SAFhD;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASF,QAAT,CAAkBG,IAAlB,EAAwBC,WAAxB,EAAqC;AAC1CL,EAAAA,+BAA+B,CAACI,IAAD,EAAOC,WAAP,CAA/B;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,MAAT,GAAkB;AACvB,SAAOJ,yBAAyB,EAAhC;AACD;AACD,SAASD,QAAQ,IAAIM,uBAArB,EAA8CD,MAAM,IAAIE,mBAAxD;AACAP,QAAQ,CAAC,WAAD,EAAcH,WAAd,CAAR","sourcesContent":["import staticRegister from \"./../../utils/staticRegister.mjs\";\nimport pluralizeFn from \"./pluralize.mjs\";\n\nvar _staticRegister = staticRegister('phraseFormatters'),\n    registerGloballyPhraseFormatter = _staticRegister.register,\n    getGlobalPhraseFormatters = _staticRegister.getValues;\n/**\n * Register phrase formatter.\n *\n * @param {string} name Name of formatter.\n * @param {Function} formatterFn Function which will be applied on phrase propositions. It will transform them if it's possible.\n */\n\n\nexport function register(name, formatterFn) {\n  registerGloballyPhraseFormatter(name, formatterFn);\n}\n/**\n * Get all registered previously formatters.\n *\n * @returns {Array}\n */\n\nexport function getAll() {\n  return getGlobalPhraseFormatters();\n}\nexport { register as registerPhraseFormatter, getAll as getPhraseFormatters };\nregister('pluralize', pluralizeFn);"]},"metadata":{},"sourceType":"module"}