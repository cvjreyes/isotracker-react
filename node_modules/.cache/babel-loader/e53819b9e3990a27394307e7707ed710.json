{"ast":null,"code":";\n\n(function (root, factory, undef) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\", \"./cipher-core\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  /**\r\n   * ANSI X.923 padding strategy.\r\n   */\n  CryptoJS.pad.AnsiX923 = {\n    pad: function (data, blockSize) {\n      // Shortcuts\n      var dataSigBytes = data.sigBytes;\n      var blockSizeBytes = blockSize * 4; // Count padding bytes\n\n      var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes; // Compute last byte position\n\n      var lastBytePos = dataSigBytes + nPaddingBytes - 1; // Pad\n\n      data.clamp();\n      data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;\n      data.sigBytes += nPaddingBytes;\n    },\n    unpad: function (data) {\n      // Get number of padding bytes from last byte\n      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff; // Remove padding\n\n      data.sigBytes -= nPaddingBytes;\n    }\n  };\n  return CryptoJS.pad.Ansix923;\n});","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/crypto-js/pad-ansix923.js"],"names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","pad","AnsiX923","data","blockSize","dataSigBytes","sigBytes","blockSizeBytes","nPaddingBytes","lastBytePos","clamp","words","unpad","Ansix923"],"mappings":"AAAA;;AAAE,WAAUA,IAAV,EAAgBC,OAAhB,EAAyBC,KAAzB,EAAgC;AACjC,MAAI,OAAOC,OAAP,KAAmB,QAAvB,EAAiC;AAChC;AACAC,IAAAA,MAAM,CAACD,OAAP,GAAiBA,OAAO,GAAGF,OAAO,CAACI,OAAO,CAAC,QAAD,CAAR,EAAoBA,OAAO,CAAC,eAAD,CAA3B,CAAlC;AACA,GAHD,MAIK,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AACpD;AACAD,IAAAA,MAAM,CAAC,CAAC,QAAD,EAAW,eAAX,CAAD,EAA8BL,OAA9B,CAAN;AACA,GAHI,MAIA;AACJ;AACAA,IAAAA,OAAO,CAACD,IAAI,CAACQ,QAAN,CAAP;AACA;AACD,CAbC,EAaA,IAbA,EAaM,UAAUA,QAAV,EAAoB;AAE3B;AACD;AACA;AACCA,EAAAA,QAAQ,CAACC,GAAT,CAAaC,QAAb,GAAwB;AACpBD,IAAAA,GAAG,EAAE,UAAUE,IAAV,EAAgBC,SAAhB,EAA2B;AAC5B;AACA,UAAIC,YAAY,GAAGF,IAAI,CAACG,QAAxB;AACA,UAAIC,cAAc,GAAGH,SAAS,GAAG,CAAjC,CAH4B,CAK5B;;AACA,UAAII,aAAa,GAAGD,cAAc,GAAGF,YAAY,GAAGE,cAApD,CAN4B,CAQ5B;;AACA,UAAIE,WAAW,GAAGJ,YAAY,GAAGG,aAAf,GAA+B,CAAjD,CAT4B,CAW5B;;AACAL,MAAAA,IAAI,CAACO,KAAL;AACAP,MAAAA,IAAI,CAACQ,KAAL,CAAWF,WAAW,KAAK,CAA3B,KAAiCD,aAAa,IAAK,KAAMC,WAAW,GAAG,CAAf,GAAoB,CAA5E;AACAN,MAAAA,IAAI,CAACG,QAAL,IAAiBE,aAAjB;AACH,KAhBmB;AAkBpBI,IAAAA,KAAK,EAAE,UAAUT,IAAV,EAAgB;AACnB;AACA,UAAIK,aAAa,GAAGL,IAAI,CAACQ,KAAL,CAAYR,IAAI,CAACG,QAAL,GAAgB,CAAjB,KAAwB,CAAnC,IAAwC,IAA5D,CAFmB,CAInB;;AACAH,MAAAA,IAAI,CAACG,QAAL,IAAiBE,aAAjB;AACH;AAxBmB,GAAxB;AA4BA,SAAOR,QAAQ,CAACC,GAAT,CAAaY,QAApB;AAEA,CAhDC,CAAD","sourcesContent":[";(function (root, factory, undef) {\r\n\tif (typeof exports === \"object\") {\r\n\t\t// CommonJS\r\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\r\n\t}\r\n\telse if (typeof define === \"function\" && define.amd) {\r\n\t\t// AMD\r\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\r\n\t}\r\n\telse {\r\n\t\t// Global (browser)\r\n\t\tfactory(root.CryptoJS);\r\n\t}\r\n}(this, function (CryptoJS) {\r\n\r\n\t/**\r\n\t * ANSI X.923 padding strategy.\r\n\t */\r\n\tCryptoJS.pad.AnsiX923 = {\r\n\t    pad: function (data, blockSize) {\r\n\t        // Shortcuts\r\n\t        var dataSigBytes = data.sigBytes;\r\n\t        var blockSizeBytes = blockSize * 4;\r\n\r\n\t        // Count padding bytes\r\n\t        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;\r\n\r\n\t        // Compute last byte position\r\n\t        var lastBytePos = dataSigBytes + nPaddingBytes - 1;\r\n\r\n\t        // Pad\r\n\t        data.clamp();\r\n\t        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);\r\n\t        data.sigBytes += nPaddingBytes;\r\n\t    },\r\n\r\n\t    unpad: function (data) {\r\n\t        // Get number of padding bytes from last byte\r\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\r\n\r\n\t        // Remove padding\r\n\t        data.sigBytes -= nPaddingBytes;\r\n\t    }\r\n\t};\r\n\r\n\r\n\treturn CryptoJS.pad.Ansix923;\r\n\r\n}));"]},"metadata":{},"sourceType":"script"}