{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { columnFactory, expandMetaType } from \"../utils.mjs\";\nimport LazyFactoryMap from \"../lazyFactoryMap.mjs\";\n/**\r\n * List of props which have to be cleared in the column meta-layer. That props have a\r\n * different meaning when using in column meta.\r\n *\r\n * @type {string[]}\r\n */\n\nvar COLUMNS_PROPS_CONFLICTS = ['data', 'width'];\n/**\r\n * The column meta object is a root of all settings defined in the column property of the Handsontable\r\n * settings. Each column in the Handsontable is associated with a unique meta object which is managed by\r\n * this layer. Adding, removing, or changing property in that object has a direct reflection only for\r\n * the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower\r\n * layers (prototype lookup).\r\n *\r\n * +-------------+.\r\n * │ GlobalMeta  │\r\n * │ (prototype) │\r\n * +-------------+\\\r\n *       │         \\\r\n *       │          \\\r\n *      \\│/         _\\|\r\n * +-------------+    +-------------+.\r\n * │ TableMeta   │    │ ColumnMeta  │\r\n * │ (instance)  │    │ (prototype) │\r\n * +-------------+    +-------------+.\r\n *                         │\r\n *                         │\r\n *                        \\│/\r\n *                    +-------------+.\r\n *                    │  CellMeta   │\r\n *                    │ (instance)  │\r\n *                    +-------------+.\r\n */\n\nvar ColumnMeta = /*#__PURE__*/function () {\n  function ColumnMeta(globalMeta) {\n    var _this = this;\n\n    _classCallCheck(this, ColumnMeta);\n    /**\r\n     * Reference to the GlobalMeta layer. While creating new column meta objects, all new objects\r\n     * inherit properties from the GlobalMeta layer.\r\n     *\r\n     * @type {GlobalMeta}\r\n     */\n\n\n    this.globalMeta = globalMeta;\n    /**\r\n     * The LazyFactoryMap structure, holder for column meta objects where each column meta is\r\n     * stored under the physical column index.\r\n     *\r\n     * @type {LazyFactoryMap}\r\n     */\n\n    this.metas = new LazyFactoryMap(function () {\n      return _this._createMeta();\n    });\n  }\n  /**\r\n   * Updates column meta object by merging settings with the current state.\r\n   *\r\n   * @param {number} physicalColumn The physical column index which points what column meta object is updated.\r\n   * @param {object} settings An object to merge with.\r\n   */\n\n\n  _createClass(ColumnMeta, [{\n    key: \"updateMeta\",\n    value: function updateMeta(physicalColumn, settings) {\n      var meta = this.getMeta(physicalColumn);\n      extend(meta, settings);\n      extend(meta, expandMetaType(settings.type, meta));\n    }\n    /**\r\n     * Creates one or more columns at specific position.\r\n     *\r\n     * @param {number} physicalColumn The physical column index which points from what position the column is added.\r\n     * @param {number} amount An amount of columns to add.\r\n     */\n\n  }, {\n    key: \"createColumn\",\n    value: function createColumn(physicalColumn, amount) {\n      this.metas.insert(physicalColumn, amount);\n    }\n    /**\r\n     * Removes one or more columns from the collection.\r\n     *\r\n     * @param {number} physicalColumn The physical column index which points from what position the column is removed.\r\n     * @param {number} amount An amount columns to remove.\r\n     */\n\n  }, {\n    key: \"removeColumn\",\n    value: function removeColumn(physicalColumn, amount) {\n      this.metas.remove(physicalColumn, amount);\n    }\n    /**\r\n     * Gets settings object for this layer.\r\n     *\r\n     * @param {number} physicalColumn The physical column index.\r\n     * @returns {object}\r\n     */\n\n  }, {\n    key: \"getMeta\",\n    value: function getMeta(physicalColumn) {\n      return this.metas.obtain(physicalColumn);\n    }\n    /**\r\n     * Gets constructor of the column meta object. Necessary for inheritance - creating the next meta layers.\r\n     *\r\n     * @param {number} physicalColumn The physical column index.\r\n     * @returns {Function}\r\n     */\n\n  }, {\n    key: \"getMetaConstructor\",\n    value: function getMetaConstructor(physicalColumn) {\n      return this.metas.obtain(physicalColumn).constructor;\n    }\n    /**\r\n     * Clears all saved column meta objects.\r\n     */\n\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this.metas.clear();\n    }\n    /**\r\n     * Creates and returns new column meta object with properties inherited from the global meta layer.\r\n     *\r\n     * @private\r\n     * @returns {object}\r\n     */\n\n  }, {\n    key: \"_createMeta\",\n    value: function _createMeta() {\n      return columnFactory(this.globalMeta.getMetaConstructor(), COLUMNS_PROPS_CONFLICTS).prototype;\n    }\n  }]);\n\n  return ColumnMeta;\n}();\n\nexport { ColumnMeta as default };","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/dataMap/metaManager/metaLayers/columnMeta.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","extend","columnFactory","expandMetaType","LazyFactoryMap","COLUMNS_PROPS_CONFLICTS","ColumnMeta","globalMeta","_this","metas","_createMeta","value","updateMeta","physicalColumn","settings","meta","getMeta","type","createColumn","amount","insert","removeColumn","remove","obtain","getMetaConstructor","constructor","clearCache","clear","default"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nimport { extend } from \"../../../helpers/object.mjs\";\r\nimport { columnFactory, expandMetaType } from \"../utils.mjs\";\r\nimport LazyFactoryMap from \"../lazyFactoryMap.mjs\";\r\n/**\r\n * List of props which have to be cleared in the column meta-layer. That props have a\r\n * different meaning when using in column meta.\r\n *\r\n * @type {string[]}\r\n */\r\n\r\nvar COLUMNS_PROPS_CONFLICTS = ['data', 'width'];\r\n/**\r\n * The column meta object is a root of all settings defined in the column property of the Handsontable\r\n * settings. Each column in the Handsontable is associated with a unique meta object which is managed by\r\n * this layer. Adding, removing, or changing property in that object has a direct reflection only for\r\n * the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower\r\n * layers (prototype lookup).\r\n *\r\n * +-------------+.\r\n * │ GlobalMeta  │\r\n * │ (prototype) │\r\n * +-------------+\\\r\n *       │         \\\r\n *       │          \\\r\n *      \\│/         _\\|\r\n * +-------------+    +-------------+.\r\n * │ TableMeta   │    │ ColumnMeta  │\r\n * │ (instance)  │    │ (prototype) │\r\n * +-------------+    +-------------+.\r\n *                         │\r\n *                         │\r\n *                        \\│/\r\n *                    +-------------+.\r\n *                    │  CellMeta   │\r\n *                    │ (instance)  │\r\n *                    +-------------+.\r\n */\r\n\r\nvar ColumnMeta = /*#__PURE__*/function () {\r\n  function ColumnMeta(globalMeta) {\r\n    var _this = this;\r\n\r\n    _classCallCheck(this, ColumnMeta);\r\n\r\n    /**\r\n     * Reference to the GlobalMeta layer. While creating new column meta objects, all new objects\r\n     * inherit properties from the GlobalMeta layer.\r\n     *\r\n     * @type {GlobalMeta}\r\n     */\r\n    this.globalMeta = globalMeta;\r\n    /**\r\n     * The LazyFactoryMap structure, holder for column meta objects where each column meta is\r\n     * stored under the physical column index.\r\n     *\r\n     * @type {LazyFactoryMap}\r\n     */\r\n\r\n    this.metas = new LazyFactoryMap(function () {\r\n      return _this._createMeta();\r\n    });\r\n  }\r\n  /**\r\n   * Updates column meta object by merging settings with the current state.\r\n   *\r\n   * @param {number} physicalColumn The physical column index which points what column meta object is updated.\r\n   * @param {object} settings An object to merge with.\r\n   */\r\n\r\n\r\n  _createClass(ColumnMeta, [{\r\n    key: \"updateMeta\",\r\n    value: function updateMeta(physicalColumn, settings) {\r\n      var meta = this.getMeta(physicalColumn);\r\n      extend(meta, settings);\r\n      extend(meta, expandMetaType(settings.type, meta));\r\n    }\r\n    /**\r\n     * Creates one or more columns at specific position.\r\n     *\r\n     * @param {number} physicalColumn The physical column index which points from what position the column is added.\r\n     * @param {number} amount An amount of columns to add.\r\n     */\r\n\r\n  }, {\r\n    key: \"createColumn\",\r\n    value: function createColumn(physicalColumn, amount) {\r\n      this.metas.insert(physicalColumn, amount);\r\n    }\r\n    /**\r\n     * Removes one or more columns from the collection.\r\n     *\r\n     * @param {number} physicalColumn The physical column index which points from what position the column is removed.\r\n     * @param {number} amount An amount columns to remove.\r\n     */\r\n\r\n  }, {\r\n    key: \"removeColumn\",\r\n    value: function removeColumn(physicalColumn, amount) {\r\n      this.metas.remove(physicalColumn, amount);\r\n    }\r\n    /**\r\n     * Gets settings object for this layer.\r\n     *\r\n     * @param {number} physicalColumn The physical column index.\r\n     * @returns {object}\r\n     */\r\n\r\n  }, {\r\n    key: \"getMeta\",\r\n    value: function getMeta(physicalColumn) {\r\n      return this.metas.obtain(physicalColumn);\r\n    }\r\n    /**\r\n     * Gets constructor of the column meta object. Necessary for inheritance - creating the next meta layers.\r\n     *\r\n     * @param {number} physicalColumn The physical column index.\r\n     * @returns {Function}\r\n     */\r\n\r\n  }, {\r\n    key: \"getMetaConstructor\",\r\n    value: function getMetaConstructor(physicalColumn) {\r\n      return this.metas.obtain(physicalColumn).constructor;\r\n    }\r\n    /**\r\n     * Clears all saved column meta objects.\r\n     */\r\n\r\n  }, {\r\n    key: \"clearCache\",\r\n    value: function clearCache() {\r\n      this.metas.clear();\r\n    }\r\n    /**\r\n     * Creates and returns new column meta object with properties inherited from the global meta layer.\r\n     *\r\n     * @private\r\n     * @returns {object}\r\n     */\r\n\r\n  }, {\r\n    key: \"_createMeta\",\r\n    value: function _createMeta() {\r\n      return columnFactory(this.globalMeta.getMetaConstructor(), COLUMNS_PROPS_CONFLICTS).prototype;\r\n    }\r\n  }]);\r\n\r\n  return ColumnMeta;\r\n}();\r\n\r\nexport { ColumnMeta as default };"]},"metadata":{},"sourceType":"module"}