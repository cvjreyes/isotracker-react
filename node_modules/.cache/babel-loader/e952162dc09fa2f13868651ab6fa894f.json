{"ast":null,"code":";\n\n(function (root, factory) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n    /**\r\n     * HMAC algorithm.\r\n     */\n\n    var HMAC = C_algo.HMAC = Base.extend({\n      /**\r\n       * Initializes a newly created HMAC.\r\n       *\r\n       * @param {Hasher} hasher The hash algorithm to use.\r\n       * @param {WordArray|string} key The secret key.\r\n       *\r\n       * @example\r\n       *\r\n       *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\r\n       */\n      init: function (hasher, key) {\n        // Init hasher\n        hasher = this._hasher = new hasher.init(); // Convert string to WordArray, else assume WordArray already\n\n        if (typeof key == 'string') {\n          key = Utf8.parse(key);\n        } // Shortcuts\n\n\n        var hasherBlockSize = hasher.blockSize;\n        var hasherBlockSizeBytes = hasherBlockSize * 4; // Allow arbitrary length keys\n\n        if (key.sigBytes > hasherBlockSizeBytes) {\n          key = hasher.finalize(key);\n        } // Clamp excess bits\n\n\n        key.clamp(); // Clone key for inner and outer pads\n\n        var oKey = this._oKey = key.clone();\n        var iKey = this._iKey = key.clone(); // Shortcuts\n\n        var oKeyWords = oKey.words;\n        var iKeyWords = iKey.words; // XOR keys with pad constants\n\n        for (var i = 0; i < hasherBlockSize; i++) {\n          oKeyWords[i] ^= 0x5c5c5c5c;\n          iKeyWords[i] ^= 0x36363636;\n        }\n\n        oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes; // Set initial values\n\n        this.reset();\n      },\n\n      /**\r\n       * Resets this HMAC to its initial state.\r\n       *\r\n       * @example\r\n       *\r\n       *     hmacHasher.reset();\r\n       */\n      reset: function () {\n        // Shortcut\n        var hasher = this._hasher; // Reset\n\n        hasher.reset();\n        hasher.update(this._iKey);\n      },\n\n      /**\r\n       * Updates this HMAC with a message.\r\n       *\r\n       * @param {WordArray|string} messageUpdate The message to append.\r\n       *\r\n       * @return {HMAC} This HMAC instance.\r\n       *\r\n       * @example\r\n       *\r\n       *     hmacHasher.update('message');\r\n       *     hmacHasher.update(wordArray);\r\n       */\n      update: function (messageUpdate) {\n        this._hasher.update(messageUpdate); // Chainable\n\n\n        return this;\n      },\n\n      /**\r\n       * Finalizes the HMAC computation.\r\n       * Note that the finalize operation is effectively a destructive, read-once operation.\r\n       *\r\n       * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n       *\r\n       * @return {WordArray} The HMAC.\r\n       *\r\n       * @example\r\n       *\r\n       *     var hmac = hmacHasher.finalize();\r\n       *     var hmac = hmacHasher.finalize('message');\r\n       *     var hmac = hmacHasher.finalize(wordArray);\r\n       */\n      finalize: function (messageUpdate) {\n        // Shortcut\n        var hasher = this._hasher; // Compute HMAC\n\n        var innerHash = hasher.finalize(messageUpdate);\n        hasher.reset();\n        var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n        return hmac;\n      }\n    });\n  })();\n});","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/crypto-js/hmac.js"],"names":["root","factory","exports","module","require","define","amd","CryptoJS","C","C_lib","lib","Base","C_enc","enc","Utf8","C_algo","algo","HMAC","extend","init","hasher","key","_hasher","parse","hasherBlockSize","blockSize","hasherBlockSizeBytes","sigBytes","finalize","clamp","oKey","_oKey","clone","iKey","_iKey","oKeyWords","words","iKeyWords","i","reset","update","messageUpdate","innerHash","hmac","concat"],"mappings":"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","sourcesContent":[";(function (root, factory) {\r\n\tif (typeof exports === \"object\") {\r\n\t\t// CommonJS\r\n\t\tmodule.exports = exports = factory(require(\"./core\"));\r\n\t}\r\n\telse if (typeof define === \"function\" && define.amd) {\r\n\t\t// AMD\r\n\t\tdefine([\"./core\"], factory);\r\n\t}\r\n\telse {\r\n\t\t// Global (browser)\r\n\t\tfactory(root.CryptoJS);\r\n\t}\r\n}(this, function (CryptoJS) {\r\n\r\n\t(function () {\r\n\t    // Shortcuts\r\n\t    var C = CryptoJS;\r\n\t    var C_lib = C.lib;\r\n\t    var Base = C_lib.Base;\r\n\t    var C_enc = C.enc;\r\n\t    var Utf8 = C_enc.Utf8;\r\n\t    var C_algo = C.algo;\r\n\r\n\t    /**\r\n\t     * HMAC algorithm.\r\n\t     */\r\n\t    var HMAC = C_algo.HMAC = Base.extend({\r\n\t        /**\r\n\t         * Initializes a newly created HMAC.\r\n\t         *\r\n\t         * @param {Hasher} hasher The hash algorithm to use.\r\n\t         * @param {WordArray|string} key The secret key.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\r\n\t         */\r\n\t        init: function (hasher, key) {\r\n\t            // Init hasher\r\n\t            hasher = this._hasher = new hasher.init();\r\n\r\n\t            // Convert string to WordArray, else assume WordArray already\r\n\t            if (typeof key == 'string') {\r\n\t                key = Utf8.parse(key);\r\n\t            }\r\n\r\n\t            // Shortcuts\r\n\t            var hasherBlockSize = hasher.blockSize;\r\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\r\n\r\n\t            // Allow arbitrary length keys\r\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\r\n\t                key = hasher.finalize(key);\r\n\t            }\r\n\r\n\t            // Clamp excess bits\r\n\t            key.clamp();\r\n\r\n\t            // Clone key for inner and outer pads\r\n\t            var oKey = this._oKey = key.clone();\r\n\t            var iKey = this._iKey = key.clone();\r\n\r\n\t            // Shortcuts\r\n\t            var oKeyWords = oKey.words;\r\n\t            var iKeyWords = iKey.words;\r\n\r\n\t            // XOR keys with pad constants\r\n\t            for (var i = 0; i < hasherBlockSize; i++) {\r\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\r\n\t                iKeyWords[i] ^= 0x36363636;\r\n\t            }\r\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\r\n\r\n\t            // Set initial values\r\n\t            this.reset();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Resets this HMAC to its initial state.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     hmacHasher.reset();\r\n\t         */\r\n\t        reset: function () {\r\n\t            // Shortcut\r\n\t            var hasher = this._hasher;\r\n\r\n\t            // Reset\r\n\t            hasher.reset();\r\n\t            hasher.update(this._iKey);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Updates this HMAC with a message.\r\n\t         *\r\n\t         * @param {WordArray|string} messageUpdate The message to append.\r\n\t         *\r\n\t         * @return {HMAC} This HMAC instance.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     hmacHasher.update('message');\r\n\t         *     hmacHasher.update(wordArray);\r\n\t         */\r\n\t        update: function (messageUpdate) {\r\n\t            this._hasher.update(messageUpdate);\r\n\r\n\t            // Chainable\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Finalizes the HMAC computation.\r\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\r\n\t         *\r\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n\t         *\r\n\t         * @return {WordArray} The HMAC.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var hmac = hmacHasher.finalize();\r\n\t         *     var hmac = hmacHasher.finalize('message');\r\n\t         *     var hmac = hmacHasher.finalize(wordArray);\r\n\t         */\r\n\t        finalize: function (messageUpdate) {\r\n\t            // Shortcut\r\n\t            var hasher = this._hasher;\r\n\r\n\t            // Compute HMAC\r\n\t            var innerHash = hasher.finalize(messageUpdate);\r\n\t            hasher.reset();\r\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\r\n\r\n\t            return hmac;\r\n\t        }\r\n\t    });\r\n\t}());\r\n\r\n\r\n}));"]},"metadata":{},"sourceType":"script"}