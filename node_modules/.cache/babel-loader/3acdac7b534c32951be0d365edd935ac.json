{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\dragAndDrop\\\\dragAndDrop.js\";\n//Drag and drop para subir isometricas\nimport React, { useEffect } from 'react';\nimport 'antd/dist/antd.css';\nimport { Upload, message, Button } from 'antd';\nimport { InboxOutlined } from '@ant-design/icons';\nimport Alert from '@material-ui/lab/Alert';\nimport Collapse from '@material-ui/core/Collapse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DragAndDrop extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileList: [],\n      uploading: false,\n      clear: false,\n      success: false,\n      error: false,\n      errorAlerts: []\n    };\n\n    this.handleUpload = () => {\n      this.setState({\n        success: false,\n        error: false,\n        errorAlerts: []\n      });\n      this.state.fileList.forEach(file => {\n        const formData = new FormData();\n        formData.append('file', file);\n        this.uploadFile(formData);\n      });\n    };\n  }\n\n  uploadFile(file) {\n    fetch('http://localhost:5000/upload', {\n      // content-type header should not be specified!\n      method: 'POST',\n      body: file\n    }).then(response => {\n      // Do something with the successful response\n      if (response.status === 200) {\n        for (var value of file.values()) {\n          this.setState({\n            success: true\n          });\n        }\n      } else {\n        for (var value of file.values()) {\n          var joined = this.state.errorAlerts.concat(value.name);\n          this.setState({\n            errorAlerts: joined,\n            error: true\n          });\n        }\n\n        console.log(this.state.errorAlerts);\n      }\n\n      this.setState({\n        fileList: []\n      });\n    }).catch(error => message.error(error));\n  }\n\n  render() {\n    const fileList = this.state.fileList;\n    const errorAlerts = this.state.errorAlerts;\n    const {\n      Dragger\n    } = Upload;\n    var errors = [];\n\n    for (let i = 0; i < errorAlerts.length; i++) {\n      var extension = \"\";\n      var j = errorAlerts[i].lastIndexOf('.');\n\n      if (j > 0) {\n        extension = errorAlerts[i].substring(j + 1);\n      }\n\n      if (extension != 'zip' || extension == 'pdf') {\n        errors.push( /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          children: [\"The file \", errorAlerts[i], \" already exists!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 19\n        }, this));\n      } else {\n        errors.push( /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          children: [\"The file \", errorAlerts[i], \" has an invalid format!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 19\n        }, this));\n      }\n    }\n\n    console.log(errors);\n    const props = {\n      name: 'file',\n      multiple: true,\n      action: 'http://localhost:5000/upload',\n      onRemove: file => {\n        this.setState(state => {\n          const index = state.fileList.indexOf(file);\n          const newFileList = state.fileList.slice();\n          newFileList.splice(index, 1);\n          return {\n            fileList: newFileList\n          };\n        });\n      },\n      beforeUpload: file => {\n        this.setState(state => ({\n          fileList: [...state.fileList, file]\n        }));\n        return false;\n      },\n      accept: \".pdf,.zip\",\n      fileList\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleUpload,\n        class: \"btn btn-info btn-lg\",\n        style: {\n          backgroundColor: \"#17a2b8\",\n          width: \"100%\"\n        },\n        children: \"Upload files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Dragger, { ...props,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ant-upload-drag-icon\",\n          children: /*#__PURE__*/_jsxDEV(InboxOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ant-upload-text\",\n          children: \"Click or drag the isometrics to this area to upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ant-upload-hint\",\n          children: \"You can drop single or multiple isometrics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 15\n      }, this), \",\", /*#__PURE__*/_jsxDEV(Collapse, {\n        in: this.state.success,\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          children: \"The files have been uploaded!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: this.state.error,\n        children: errors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default DragAndDrop;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/dragAndDrop/dragAndDrop.js"],"names":["React","useEffect","Upload","message","Button","InboxOutlined","Alert","Collapse","DragAndDrop","Component","state","fileList","uploading","clear","success","error","errorAlerts","handleUpload","setState","forEach","file","formData","FormData","append","uploadFile","fetch","method","body","then","response","status","value","values","joined","concat","name","console","log","catch","render","Dragger","errors","i","length","extension","j","lastIndexOf","substring","push","props","multiple","action","onRemove","index","indexOf","newFileList","slice","splice","beforeUpload","accept","backgroundColor","width"],"mappings":"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","sourcesContent":["//Drag and drop para subir isometricas\r\n\r\nimport React, { useEffect } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Upload, message , Button} from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse'\r\n\r\n\r\nclass DragAndDrop extends React.Component{\r\n\r\n  state = {\r\n    fileList: [],\r\n    uploading: false,\r\n    clear: false,\r\n    success: false,\r\n    error: false,\r\n    errorAlerts: [],\r\n  };\r\n\r\n  uploadFile(file) {\r\n    fetch('http://localhost:5000/upload', {\r\n      // content-type header should not be specified!\r\n      method: 'POST',\r\n      body: file,\r\n    })\r\n      .then(response => {\r\n        // Do something with the successful response\r\n        if (response.status === 200){\r\n          for (var value of file.values()) {\r\n            this.setState({\r\n              success : true,\r\n            })\r\n          }\r\n        }else{\r\n          for (var value of file.values()) {\r\n            var joined = this.state.errorAlerts.concat(value.name);\r\n            this.setState({\r\n              errorAlerts : joined,\r\n              error: true\r\n            })\r\n          }\r\n          console.log(this.state.errorAlerts)\r\n        }\r\n        this.setState({\r\n          fileList: []\r\n        });\r\n      })\r\n      .catch(error => message.error(error)\r\n    );\r\n  }\r\n\r\n\r\n  handleUpload = () =>{\r\n    this.setState({\r\n      success: false,\r\n      error: false,\r\n      errorAlerts: []\r\n    })\r\n    this.state.fileList.forEach(file => {\r\n      \r\n      const formData  = new FormData();\r\n      formData.append('file', file);\r\n      this.uploadFile(formData);\r\n\r\n    });    \r\n  }\r\n\r\nrender (){\r\n  \r\n  const fileList = this.state.fileList;\r\n  const errorAlerts = this.state.errorAlerts;\r\n  const { Dragger } = Upload;\r\n\r\n  var errors = []\r\n  for(let i = 0; i < errorAlerts.length; i++){\r\n    var extension = \"\";\r\n    var j = errorAlerts[i].lastIndexOf('.');\r\n    if (j > 0) {\r\n      extension = errorAlerts[i].substring(j+1);\r\n    }\r\n    if (extension != 'zip' || extension == 'pdf' ){\r\n      errors.push(<Alert severity=\"error\"\r\n      >\r\n        The file {errorAlerts[i]} already exists!\r\n\r\n      </Alert>)\r\n    }else{\r\n      errors.push(<Alert severity=\"error\"\r\n      >\r\n        The file {errorAlerts[i]} has an invalid format!\r\n\r\n      </Alert>)\r\n    }\r\n  }\r\n\r\n  console.log(errors)\r\n\r\n  const props = {\r\n    name: 'file',\r\n    multiple: true,\r\n    action: 'http://localhost:5000/upload',\r\n    onRemove: file => {\r\n      this.setState(state => {\r\n        const index = state.fileList.indexOf(file);\r\n        const newFileList = state.fileList.slice();\r\n        newFileList.splice(index, 1);\r\n        return {\r\n          fileList: newFileList,\r\n        };\r\n      });\r\n    },\r\n    beforeUpload: file => {\r\n      this.setState(state => ({\r\n        fileList: [...state.fileList, file],\r\n      }));\r\n\r\n      return false;\r\n      },\r\n    accept: \".pdf,.zip\",\r\n      fileList\r\n    };\r\n\r\n      return(\r\n          <div>\r\n            <button onClick={this.handleUpload} class=\"btn btn-info btn-lg\" style={{backgroundColor: \"#17a2b8\", width:\"100%\"}}>Upload files</button>\r\n              <Dragger {...props}>\r\n                \r\n                  <p className=\"ant-upload-drag-icon\">\r\n                    <InboxOutlined />\r\n                  </p>\r\n                  <p className=\"ant-upload-text\">Click or drag the isometrics to this area to upload</p>\r\n                  <p className=\"ant-upload-hint\">\r\n                    You can drop single or multiple isometrics\r\n                  </p>\r\n              </Dragger>,\r\n              <Collapse in={this.state.success}>\r\n              <Alert\r\n              >\r\n                The files have been uploaded!\r\n\r\n              </Alert>\r\n            </Collapse>\r\n            <Collapse in={this.state.error}>\r\n              {errors}\r\n            </Collapse>\r\n          </div>\r\n      );\r\n      }\r\n}\r\n\r\nexport default DragAndDrop;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}