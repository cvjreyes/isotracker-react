{"ast":null,"code":"import numbro from 'numbro';\nimport { textRenderer } from \"../textRenderer/index.mjs\";\nimport { isNumeric } from \"../../helpers/number.mjs\";\nexport var RENDERER_TYPE = 'numeric';\n/**\n * Numeric cell renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\n\nexport function numericRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var newValue = value;\n\n  if (isNumeric(newValue)) {\n    var numericFormat = cellProperties.numericFormat;\n    var cellCulture = numericFormat && numericFormat.culture || '-';\n    var cellFormatPattern = numericFormat && numericFormat.pattern;\n    var className = cellProperties.className || '';\n    var classArr = className.length ? className.split(' ') : [];\n\n    if (typeof cellCulture !== 'undefined' && !numbro.languages()[cellCulture]) {\n      var shortTag = cellCulture.replace('-', '');\n      var langData = numbro.allLanguages ? numbro.allLanguages[cellCulture] : numbro[shortTag];\n\n      if (langData) {\n        numbro.registerLanguage(langData);\n      }\n    }\n\n    numbro.setLanguage(cellCulture);\n    newValue = numbro(newValue).format(cellFormatPattern || '0');\n\n    if (classArr.indexOf('htLeft') < 0 && classArr.indexOf('htCenter') < 0 && classArr.indexOf('htRight') < 0 && classArr.indexOf('htJustify') < 0) {\n      classArr.push('htRight');\n    }\n\n    if (classArr.indexOf('htNumeric') < 0) {\n      classArr.push('htNumeric');\n    }\n\n    cellProperties.className = classArr.join(' ');\n  }\n\n  textRenderer(instance, TD, row, col, prop, newValue, cellProperties);\n}\nnumericRenderer.RENDERER_TYPE = RENDERER_TYPE;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/renderers/numericRenderer/numericRenderer.mjs"],"names":["numbro","textRenderer","isNumeric","RENDERER_TYPE","numericRenderer","instance","TD","row","col","prop","value","cellProperties","newValue","numericFormat","cellCulture","culture","cellFormatPattern","pattern","className","classArr","length","split","languages","shortTag","replace","langData","allLanguages","registerLanguage","setLanguage","format","indexOf","push","join"],"mappings":"AAKA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAO,IAAIC,aAAa,GAAG,SAApB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAT,CAAyBC,QAAzB,EAAmCC,EAAnC,EAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDC,IAAjD,EAAuDC,KAAvD,EAA8DC,cAA9D,EAA8E;AACnF,MAAIC,QAAQ,GAAGF,KAAf;;AAEA,MAAIR,SAAS,CAACU,QAAD,CAAb,EAAyB;AACvB,QAAIC,aAAa,GAAGF,cAAc,CAACE,aAAnC;AACA,QAAIC,WAAW,GAAGD,aAAa,IAAIA,aAAa,CAACE,OAA/B,IAA0C,GAA5D;AACA,QAAIC,iBAAiB,GAAGH,aAAa,IAAIA,aAAa,CAACI,OAAvD;AACA,QAAIC,SAAS,GAAGP,cAAc,CAACO,SAAf,IAA4B,EAA5C;AACA,QAAIC,QAAQ,GAAGD,SAAS,CAACE,MAAV,GAAmBF,SAAS,CAACG,KAAV,CAAgB,GAAhB,CAAnB,GAA0C,EAAzD;;AAEA,QAAI,OAAOP,WAAP,KAAuB,WAAvB,IAAsC,CAACd,MAAM,CAACsB,SAAP,GAAmBR,WAAnB,CAA3C,EAA4E;AAC1E,UAAIS,QAAQ,GAAGT,WAAW,CAACU,OAAZ,CAAoB,GAApB,EAAyB,EAAzB,CAAf;AACA,UAAIC,QAAQ,GAAGzB,MAAM,CAAC0B,YAAP,GAAsB1B,MAAM,CAAC0B,YAAP,CAAoBZ,WAApB,CAAtB,GAAyDd,MAAM,CAACuB,QAAD,CAA9E;;AAEA,UAAIE,QAAJ,EAAc;AACZzB,QAAAA,MAAM,CAAC2B,gBAAP,CAAwBF,QAAxB;AACD;AACF;;AAEDzB,IAAAA,MAAM,CAAC4B,WAAP,CAAmBd,WAAnB;AACAF,IAAAA,QAAQ,GAAGZ,MAAM,CAACY,QAAD,CAAN,CAAiBiB,MAAjB,CAAwBb,iBAAiB,IAAI,GAA7C,CAAX;;AAEA,QAAIG,QAAQ,CAACW,OAAT,CAAiB,QAAjB,IAA6B,CAA7B,IAAkCX,QAAQ,CAACW,OAAT,CAAiB,UAAjB,IAA+B,CAAjE,IAAsEX,QAAQ,CAACW,OAAT,CAAiB,SAAjB,IAA8B,CAApG,IAAyGX,QAAQ,CAACW,OAAT,CAAiB,WAAjB,IAAgC,CAA7I,EAAgJ;AAC9IX,MAAAA,QAAQ,CAACY,IAAT,CAAc,SAAd;AACD;;AAED,QAAIZ,QAAQ,CAACW,OAAT,CAAiB,WAAjB,IAAgC,CAApC,EAAuC;AACrCX,MAAAA,QAAQ,CAACY,IAAT,CAAc,WAAd;AACD;;AAEDpB,IAAAA,cAAc,CAACO,SAAf,GAA2BC,QAAQ,CAACa,IAAT,CAAc,GAAd,CAA3B;AACD;;AAED/B,EAAAA,YAAY,CAACI,QAAD,EAAWC,EAAX,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BG,QAA/B,EAAyCD,cAAzC,CAAZ;AACD;AACDP,eAAe,CAACD,aAAhB,GAAgCA,aAAhC","sourcesContent":["import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport numbro from 'numbro';\nimport { textRenderer } from \"../textRenderer/index.mjs\";\nimport { isNumeric } from \"../../helpers/number.mjs\";\nexport var RENDERER_TYPE = 'numeric';\n/**\n * Numeric cell renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\n\nexport function numericRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var newValue = value;\n\n  if (isNumeric(newValue)) {\n    var numericFormat = cellProperties.numericFormat;\n    var cellCulture = numericFormat && numericFormat.culture || '-';\n    var cellFormatPattern = numericFormat && numericFormat.pattern;\n    var className = cellProperties.className || '';\n    var classArr = className.length ? className.split(' ') : [];\n\n    if (typeof cellCulture !== 'undefined' && !numbro.languages()[cellCulture]) {\n      var shortTag = cellCulture.replace('-', '');\n      var langData = numbro.allLanguages ? numbro.allLanguages[cellCulture] : numbro[shortTag];\n\n      if (langData) {\n        numbro.registerLanguage(langData);\n      }\n    }\n\n    numbro.setLanguage(cellCulture);\n    newValue = numbro(newValue).format(cellFormatPattern || '0');\n\n    if (classArr.indexOf('htLeft') < 0 && classArr.indexOf('htCenter') < 0 && classArr.indexOf('htRight') < 0 && classArr.indexOf('htJustify') < 0) {\n      classArr.push('htRight');\n    }\n\n    if (classArr.indexOf('htNumeric') < 0) {\n      classArr.push('htNumeric');\n    }\n\n    cellProperties.className = classArr.join(' ');\n  }\n\n  textRenderer(instance, TD, row, col, prop, newValue, cellProperties);\n}\nnumericRenderer.RENDERER_TYPE = RENDERER_TYPE;"]},"metadata":{},"sourceType":"module"}