{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { CellCoords } from \"./3rdparty/walkontable/src/index.mjs\";\nimport { KEY_CODES, isMetaKey, isCtrlMetaKey } from \"./helpers/unicode.mjs\";\nimport { stopImmediatePropagation, isImmediatePropagationStopped } from \"./helpers/dom/event.mjs\";\nimport { getEditorInstance } from \"./editors/registry.mjs\";\nimport EventManager from \"./eventManager.mjs\";\nimport { EDITOR_STATE } from \"./editors/baseEditor/index.mjs\";\nimport { getParentWindow } from \"./helpers/dom/element.mjs\";\n\nvar EditorManager = /*#__PURE__*/function () {\n  /**\n   * @param {Core} instance The Handsontable instance.\n   * @param {TableMeta} tableMeta The table meta instance.\n   * @param {Selection} selection The selection instance.\n   */\n  function EditorManager(instance, tableMeta, selection) {\n    var _this = this;\n\n    _classCallCheck(this, EditorManager);\n    /**\n     * Instance of {@link Handsontable}.\n     *\n     * @private\n     * @type {Handsontable}\n     */\n\n\n    this.instance = instance;\n    /**\n     * Reference to an instance's private GridSettings object.\n     *\n     * @private\n     * @type {GridSettings}\n     */\n\n    this.tableMeta = tableMeta;\n    /**\n     * Instance of {@link Selection}.\n     *\n     * @private\n     * @type {Selection}\n     */\n\n    this.selection = selection;\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n\n    this.eventManager = new EventManager(instance);\n    /**\n     * Determines if EditorManager is destroyed.\n     *\n     * @private\n     * @type {boolean}\n     */\n\n    this.destroyed = false;\n    /**\n     * Determines if EditorManager is locked.\n     *\n     * @private\n     * @type {boolean}\n     */\n\n    this.lock = false;\n    /**\n     * A reference to an instance of the activeEditor.\n     *\n     * @private\n     * @type {*}\n     */\n\n    this.activeEditor = void 0;\n    /**\n     * Keeps a reference to the cell's properties object.\n     *\n     * @type {object}\n     */\n\n    this.cellProperties = void 0;\n    /**\n     * Keeps last keyCode pressed from the keydown event.\n     *\n     * @type {number}\n     */\n\n    this.lastKeyCode = void 0;\n    this.instance.addHook('afterDocumentKeyDown', function (event) {\n      return _this.onAfterDocumentKeyDown(event);\n    });\n    var frame = this.instance.rootWindow;\n\n    while (frame) {\n      this.eventManager.addEventListener(frame.document.documentElement, 'keydown', function (event) {\n        if (!_this.destroyed) {\n          _this.instance.runHooks('afterDocumentKeyDown', event);\n        }\n      });\n      frame = getParentWindow(frame);\n    } // Open editor when text composition is started (IME editor)\n\n\n    this.eventManager.addEventListener(this.instance.rootDocument.documentElement, 'compositionstart', function (event) {\n      if (!_this.destroyed && _this.activeEditor && !_this.activeEditor.isOpened() && _this.instance.isListening()) {\n        _this.openEditor('', event);\n      }\n    });\n    this.instance.view.wt.update('onCellDblClick', function (event, coords, elem) {\n      return _this.onCellDblClick(event, coords, elem);\n    });\n  }\n  /**\n   * Lock the editor from being prepared and closed. Locking the editor prevents its closing and\n   * reinitialized after selecting the new cell. This feature is necessary for a mobile editor.\n   */\n\n\n  _createClass(EditorManager, [{\n    key: \"lockEditor\",\n    value: function lockEditor() {\n      this.lock = true;\n    }\n    /**\n     * Unlock the editor from being prepared and closed. This method restores the original behavior of\n     * the editors where for every new selection its instances are closed.\n     */\n\n  }, {\n    key: \"unlockEditor\",\n    value: function unlockEditor() {\n      this.lock = false;\n    }\n    /**\n     * Destroy current editor, if exists.\n     *\n     * @param {boolean} revertOriginal If `false` and the cell using allowInvalid option,\n     *                                 then an editor won't be closed until validation is passed.\n     */\n\n  }, {\n    key: \"destroyEditor\",\n    value: function destroyEditor(revertOriginal) {\n      if (!this.lock) {\n        this.closeEditor(revertOriginal);\n      }\n    }\n    /**\n     * Get active editor.\n     *\n     * @returns {*}\n     */\n\n  }, {\n    key: \"getActiveEditor\",\n    value: function getActiveEditor() {\n      return this.activeEditor;\n    }\n    /**\n     * Prepare text input to be displayed at given grid cell.\n     */\n\n  }, {\n    key: \"prepareEditor\",\n    value: function prepareEditor() {\n      var _this2 = this;\n\n      if (this.lock) {\n        return;\n      }\n\n      if (this.activeEditor && this.activeEditor.isWaiting()) {\n        this.closeEditor(false, false, function (dataSaved) {\n          if (dataSaved) {\n            _this2.prepareEditor();\n          }\n        });\n        return;\n      }\n\n      var _this$instance$select = this.instance.selection.selectedRange.current().highlight,\n          row = _this$instance$select.row,\n          col = _this$instance$select.col;\n      var modifiedCellCoords = this.instance.runHooks('modifyGetCellCoords', row, col);\n      var visualRowToCheck = row;\n      var visualColumnToCheck = col;\n\n      if (Array.isArray(modifiedCellCoords)) {\n        var _modifiedCellCoords = _slicedToArray(modifiedCellCoords, 2);\n\n        visualRowToCheck = _modifiedCellCoords[0];\n        visualColumnToCheck = _modifiedCellCoords[1];\n      } // Getting values using the modified coordinates.\n\n\n      this.cellProperties = this.instance.getCellMeta(visualRowToCheck, visualColumnToCheck);\n      var activeElement = this.instance.rootDocument.activeElement;\n\n      if (activeElement) {\n        // Bluring the activeElement removes unwanted border around the focusable element\n        // (and resets activeElement prop). Without blurring the activeElement points to the\n        // previously focusable element after clicking onto the cell (#6877).\n        activeElement.blur();\n      }\n\n      if (this.cellProperties.readOnly) {\n        this.clearActiveEditor();\n        return;\n      }\n\n      var editorClass = this.instance.getCellEditor(this.cellProperties); // Getting element using coordinates from the selection.\n\n      var td = this.instance.getCell(row, col, true);\n\n      if (editorClass && td) {\n        var prop = this.instance.colToProp(visualColumnToCheck);\n        var originalValue = this.instance.getSourceDataAtCell(this.instance.toPhysicalRow(visualRowToCheck), visualColumnToCheck);\n        this.activeEditor = getEditorInstance(editorClass, this.instance); // Using not modified coordinates, as we need to get the table element using selection coordinates.\n        // There is an extra translation in the editor for saving value.\n\n        this.activeEditor.prepare(row, col, prop, td, originalValue, this.cellProperties);\n      } else {\n        this.clearActiveEditor();\n      }\n    }\n    /**\n     * Check is editor is opened/showed.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isEditorOpened\",\n    value: function isEditorOpened() {\n      return this.activeEditor && this.activeEditor.isOpened();\n    }\n    /**\n     * Open editor with initial value.\n     *\n     * @param {null|string} newInitialValue New value from which editor will start if handled property it's not the `null`.\n     * @param {Event} event The event object.\n     */\n\n  }, {\n    key: \"openEditor\",\n    value: function openEditor(newInitialValue, event) {\n      if (!this.activeEditor) {\n        return;\n      }\n\n      this.activeEditor.beginEditing(newInitialValue, event);\n    }\n    /**\n     * Close editor, finish editing cell.\n     *\n     * @param {boolean} restoreOriginalValue If `true`, then closes editor without saving value from the editor into a cell.\n     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.\n     * @param {Function} callback The callback function, fired after editor closing.\n     */\n\n  }, {\n    key: \"closeEditor\",\n    value: function closeEditor(restoreOriginalValue, isCtrlPressed, callback) {\n      if (this.activeEditor) {\n        this.activeEditor.finishEditing(restoreOriginalValue, isCtrlPressed, callback);\n      } else if (callback) {\n        callback(false);\n      }\n    }\n    /**\n     * Close editor and save changes.\n     *\n     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.\n     */\n\n  }, {\n    key: \"closeEditorAndSaveChanges\",\n    value: function closeEditorAndSaveChanges(isCtrlPressed) {\n      this.closeEditor(false, isCtrlPressed);\n    }\n    /**\n     * Close editor and restore original value.\n     *\n     * @param {boolean} isCtrlPressed Indication of whether the CTRL button is pressed.\n     */\n\n  }, {\n    key: \"closeEditorAndRestoreOriginalValue\",\n    value: function closeEditorAndRestoreOriginalValue(isCtrlPressed) {\n      this.closeEditor(true, isCtrlPressed);\n    }\n    /**\n     * Clears reference to an instance of the active editor.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"clearActiveEditor\",\n    value: function clearActiveEditor() {\n      this.activeEditor = void 0;\n    }\n    /**\n     * Controls selection's behaviour after clicking `Enter`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will move up after hit enter.\n     */\n\n  }, {\n    key: \"moveSelectionAfterEnter\",\n    value: function moveSelectionAfterEnter(isShiftPressed) {\n      var enterMoves = typeof this.tableMeta.enterMoves === 'function' ? this.tableMeta.enterMoves(event) : this.tableMeta.enterMoves;\n\n      if (isShiftPressed) {\n        // move selection up\n        this.selection.transformStart(-enterMoves.row, -enterMoves.col);\n      } else {\n        // move selection down (add a new row if needed)\n        this.selection.transformStart(enterMoves.row, enterMoves.col, true);\n      }\n    }\n    /**\n     * Controls selection behaviour after clicking `arrow up`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand up.\n     */\n\n  }, {\n    key: \"moveSelectionUp\",\n    value: function moveSelectionUp(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(-1, 0);\n      } else {\n        this.selection.transformStart(-1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow down`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand down.\n     */\n\n  }, {\n    key: \"moveSelectionDown\",\n    value: function moveSelectionDown(isShiftPressed) {\n      if (isShiftPressed) {\n        // expanding selection down with shift\n        this.selection.transformEnd(1, 0);\n      } else {\n        this.selection.transformStart(1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow right`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand right.\n     */\n\n  }, {\n    key: \"moveSelectionRight\",\n    value: function moveSelectionRight(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, 1);\n      } else {\n        this.selection.transformStart(0, 1);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow left`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand left.\n     */\n\n  }, {\n    key: \"moveSelectionLeft\",\n    value: function moveSelectionLeft(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, -1);\n      } else {\n        this.selection.transformStart(0, -1);\n      }\n    }\n    /**\n     * OnAfterDocumentKeyDown callback.\n     *\n     * @private\n     * @param {KeyboardEvent} event The keyboard event object.\n     */\n\n  }, {\n    key: \"onAfterDocumentKeyDown\",\n    value: function onAfterDocumentKeyDown(event) {\n      if (!this.instance.isListening()) {\n        return;\n      }\n\n      this.instance.runHooks('beforeKeyDown', event); // keyCode 229 aka 'uninitialized' doesn't take into account with editors. This key code is produced when unfinished\n      // character is entering (using IME editor). It is fired mainly on linux (ubuntu) with installed ibus-pinyin package.\n\n      if (this.destroyed || event.keyCode === 229) {\n        return;\n      }\n\n      if (isImmediatePropagationStopped(event)) {\n        return;\n      }\n\n      this.lastKeyCode = event.keyCode;\n\n      if (!this.selection.isSelected()) {\n        return;\n      } // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)\n\n\n      var isCtrlPressed = (event.ctrlKey || event.metaKey) && !event.altKey;\n\n      if (this.activeEditor && !this.activeEditor.isWaiting()) {\n        if (!isMetaKey(event.keyCode) && !isCtrlMetaKey(event.keyCode) && !isCtrlPressed && !this.isEditorOpened()) {\n          this.openEditor('', event);\n          return;\n        }\n      }\n\n      var isShiftPressed = event.shiftKey;\n      var rangeModifier = isShiftPressed ? this.selection.setRangeEnd : this.selection.setRangeStart;\n      var tabMoves;\n\n      switch (event.keyCode) {\n        case KEY_CODES.A:\n          if (!this.isEditorOpened() && isCtrlPressed) {\n            this.instance.selectAll();\n            event.preventDefault();\n            event.stopPropagation();\n          }\n\n          break;\n\n        case KEY_CODES.ARROW_UP:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionUp(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.ARROW_DOWN:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionDown(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.ARROW_RIGHT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionRight(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.ARROW_LEFT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionLeft(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.TAB:\n          tabMoves = typeof this.tableMeta.tabMoves === 'function' ? this.tableMeta.tabMoves(event) : this.tableMeta.tabMoves;\n\n          if (isShiftPressed) {\n            // move selection left\n            this.selection.transformStart(-tabMoves.row, -tabMoves.col);\n          } else {\n            // move selection right (add a new column if needed)\n            this.selection.transformStart(tabMoves.row, tabMoves.col, true);\n          }\n\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.BACKSPACE:\n        case KEY_CODES.DELETE:\n          this.instance.emptySelectedCells();\n          this.prepareEditor();\n          event.preventDefault();\n          break;\n\n        case KEY_CODES.F2:\n          /* F2 */\n          if (this.activeEditor) {\n            this.activeEditor.enableFullEditMode();\n          }\n\n          this.openEditor(null, event);\n          event.preventDefault(); // prevent Opera from opening 'Go to Page dialog'\n\n          break;\n\n        case KEY_CODES.ENTER:\n          /* return/enter */\n          if (this.isEditorOpened()) {\n            if (this.activeEditor && this.activeEditor.state !== EDITOR_STATE.WAITING) {\n              this.closeEditorAndSaveChanges(isCtrlPressed);\n            }\n\n            this.moveSelectionAfterEnter(isShiftPressed);\n          } else if (this.instance.getSettings().enterBeginsEditing) {\n            if (this.cellProperties.readOnly) {\n              this.moveSelectionAfterEnter();\n            } else if (this.activeEditor) {\n              this.activeEditor.enableFullEditMode();\n              this.openEditor(null, event);\n            }\n          } else {\n            this.moveSelectionAfterEnter(isShiftPressed);\n          }\n\n          event.preventDefault(); // don't add newline to field\n\n          stopImmediatePropagation(event); // required by HandsontableEditor\n\n          break;\n\n        case KEY_CODES.ESCAPE:\n          if (this.isEditorOpened()) {\n            this.closeEditorAndRestoreOriginalValue(isCtrlPressed);\n            this.activeEditor.focus();\n          }\n\n          event.preventDefault();\n          break;\n\n        case KEY_CODES.HOME:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(this.instance.rowIndexMapper.getFirstNotHiddenIndex(0, 1), this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, this.instance.columnIndexMapper.getFirstNotHiddenIndex(0, 1)));\n          }\n\n          event.preventDefault(); // don't scroll the window\n\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.END:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(this.instance.rowIndexMapper.getFirstNotHiddenIndex(this.instance.countRows() - 1, -1), this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, this.instance.columnIndexMapper.getFirstNotHiddenIndex(this.instance.countCols() - 1, -1)));\n          }\n\n          event.preventDefault(); // don't scroll the window\n\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.PAGE_UP:\n          this.selection.transformStart(-this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page up the window\n\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.PAGE_DOWN:\n          this.selection.transformStart(this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page down the window\n\n          event.stopPropagation();\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\n     * OnCellDblClick callback.\n     *\n     * @private\n     * @param {MouseEvent} event The mouse event object.\n     * @param {object} coords The cell coordinates.\n     * @param {HTMLTableCellElement|HTMLTableHeaderCellElement} elem The element which triggers the action.\n     */\n\n  }, {\n    key: \"onCellDblClick\",\n    value: function onCellDblClick(event, coords, elem) {\n      // may be TD or TH\n      if (elem.nodeName === 'TD') {\n        if (this.activeEditor) {\n          this.activeEditor.enableFullEditMode();\n        }\n\n        this.openEditor(null, event);\n      }\n    }\n    /**\n     * Destroy the instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n      this.eventManager.destroy();\n    }\n  }]);\n\n  return EditorManager;\n}();\n\nvar instances = new WeakMap();\n/**\n * @param {Core} hotInstance The Handsontable instance.\n * @param {TableMeta} tableMeta The table meta class instance.\n * @param {Selection} selection The selection instance.\n * @returns {EditorManager}\n */\n\nEditorManager.getInstance = function (hotInstance, tableMeta, selection) {\n  var editorManager = instances.get(hotInstance);\n\n  if (!editorManager) {\n    editorManager = new EditorManager(hotInstance, tableMeta, selection);\n    instances.set(hotInstance, editorManager);\n  }\n\n  return editorManager;\n};\n\nexport default EditorManager;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/editorManager.mjs"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","CellCoords","KEY_CODES","isMetaKey","isCtrlMetaKey","stopImmediatePropagation","isImmediatePropagationStopped","getEditorInstance","EventManager","EDITOR_STATE","getParentWindow","EditorManager","tableMeta","selection","_this","eventManager","destroyed","lock","activeEditor","cellProperties","lastKeyCode","addHook","event","onAfterDocumentKeyDown","frame","rootWindow","addEventListener","document","documentElement","runHooks","rootDocument","isOpened","isListening","openEditor","view","wt","update","coords","elem","onCellDblClick","lockEditor","unlockEditor","destroyEditor","revertOriginal","closeEditor","getActiveEditor","prepareEditor","_this2","isWaiting","dataSaved","_this$instance$select","selectedRange","current","highlight","row","col","modifiedCellCoords","visualRowToCheck","visualColumnToCheck","_modifiedCellCoords","getCellMeta","activeElement","blur","readOnly","clearActiveEditor","editorClass","getCellEditor","td","getCell","prop","colToProp","originalValue","getSourceDataAtCell","toPhysicalRow","prepare","isEditorOpened","newInitialValue","beginEditing","restoreOriginalValue","isCtrlPressed","callback","finishEditing","closeEditorAndSaveChanges","closeEditorAndRestoreOriginalValue","moveSelectionAfterEnter","isShiftPressed","enterMoves","transformStart","moveSelectionUp","transformEnd","moveSelectionDown","moveSelectionRight","moveSelectionLeft","keyCode","isSelected","ctrlKey","metaKey","altKey","shiftKey","rangeModifier","setRangeEnd","setRangeStart","tabMoves","A","selectAll","preventDefault","stopPropagation","ARROW_UP","ARROW_DOWN","ARROW_RIGHT","ARROW_LEFT","TAB","BACKSPACE","DELETE","emptySelectedCells","F2","enableFullEditMode","ENTER","state","WAITING","getSettings","enterBeginsEditing","ESCAPE","focus","HOME","rowIndexMapper","getFirstNotHiddenIndex","columnIndexMapper","END","countRows","countCols","PAGE_UP","countVisibleRows","PAGE_DOWN","nodeName","destroy","instances","WeakMap","getInstance","hotInstance","editorManager","get","set"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { CellCoords } from \"./3rdparty/walkontable/src/index.mjs\";\nimport { KEY_CODES, isMetaKey, isCtrlMetaKey } from \"./helpers/unicode.mjs\";\nimport { stopImmediatePropagation, isImmediatePropagationStopped } from \"./helpers/dom/event.mjs\";\nimport { getEditorInstance } from \"./editors/registry.mjs\";\nimport EventManager from \"./eventManager.mjs\";\nimport { EDITOR_STATE } from \"./editors/baseEditor/index.mjs\";\nimport { getParentWindow } from \"./helpers/dom/element.mjs\";\n\nvar EditorManager = /*#__PURE__*/function () {\n  /**\n   * @param {Core} instance The Handsontable instance.\n   * @param {TableMeta} tableMeta The table meta instance.\n   * @param {Selection} selection The selection instance.\n   */\n  function EditorManager(instance, tableMeta, selection) {\n    var _this = this;\n\n    _classCallCheck(this, EditorManager);\n\n    /**\n     * Instance of {@link Handsontable}.\n     *\n     * @private\n     * @type {Handsontable}\n     */\n    this.instance = instance;\n    /**\n     * Reference to an instance's private GridSettings object.\n     *\n     * @private\n     * @type {GridSettings}\n     */\n\n    this.tableMeta = tableMeta;\n    /**\n     * Instance of {@link Selection}.\n     *\n     * @private\n     * @type {Selection}\n     */\n\n    this.selection = selection;\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n\n    this.eventManager = new EventManager(instance);\n    /**\n     * Determines if EditorManager is destroyed.\n     *\n     * @private\n     * @type {boolean}\n     */\n\n    this.destroyed = false;\n    /**\n     * Determines if EditorManager is locked.\n     *\n     * @private\n     * @type {boolean}\n     */\n\n    this.lock = false;\n    /**\n     * A reference to an instance of the activeEditor.\n     *\n     * @private\n     * @type {*}\n     */\n\n    this.activeEditor = void 0;\n    /**\n     * Keeps a reference to the cell's properties object.\n     *\n     * @type {object}\n     */\n\n    this.cellProperties = void 0;\n    /**\n     * Keeps last keyCode pressed from the keydown event.\n     *\n     * @type {number}\n     */\n\n    this.lastKeyCode = void 0;\n    this.instance.addHook('afterDocumentKeyDown', function (event) {\n      return _this.onAfterDocumentKeyDown(event);\n    });\n    var frame = this.instance.rootWindow;\n\n    while (frame) {\n      this.eventManager.addEventListener(frame.document.documentElement, 'keydown', function (event) {\n        if (!_this.destroyed) {\n          _this.instance.runHooks('afterDocumentKeyDown', event);\n        }\n      });\n      frame = getParentWindow(frame);\n    } // Open editor when text composition is started (IME editor)\n\n\n    this.eventManager.addEventListener(this.instance.rootDocument.documentElement, 'compositionstart', function (event) {\n      if (!_this.destroyed && _this.activeEditor && !_this.activeEditor.isOpened() && _this.instance.isListening()) {\n        _this.openEditor('', event);\n      }\n    });\n    this.instance.view.wt.update('onCellDblClick', function (event, coords, elem) {\n      return _this.onCellDblClick(event, coords, elem);\n    });\n  }\n  /**\n   * Lock the editor from being prepared and closed. Locking the editor prevents its closing and\n   * reinitialized after selecting the new cell. This feature is necessary for a mobile editor.\n   */\n\n\n  _createClass(EditorManager, [{\n    key: \"lockEditor\",\n    value: function lockEditor() {\n      this.lock = true;\n    }\n    /**\n     * Unlock the editor from being prepared and closed. This method restores the original behavior of\n     * the editors where for every new selection its instances are closed.\n     */\n\n  }, {\n    key: \"unlockEditor\",\n    value: function unlockEditor() {\n      this.lock = false;\n    }\n    /**\n     * Destroy current editor, if exists.\n     *\n     * @param {boolean} revertOriginal If `false` and the cell using allowInvalid option,\n     *                                 then an editor won't be closed until validation is passed.\n     */\n\n  }, {\n    key: \"destroyEditor\",\n    value: function destroyEditor(revertOriginal) {\n      if (!this.lock) {\n        this.closeEditor(revertOriginal);\n      }\n    }\n    /**\n     * Get active editor.\n     *\n     * @returns {*}\n     */\n\n  }, {\n    key: \"getActiveEditor\",\n    value: function getActiveEditor() {\n      return this.activeEditor;\n    }\n    /**\n     * Prepare text input to be displayed at given grid cell.\n     */\n\n  }, {\n    key: \"prepareEditor\",\n    value: function prepareEditor() {\n      var _this2 = this;\n\n      if (this.lock) {\n        return;\n      }\n\n      if (this.activeEditor && this.activeEditor.isWaiting()) {\n        this.closeEditor(false, false, function (dataSaved) {\n          if (dataSaved) {\n            _this2.prepareEditor();\n          }\n        });\n        return;\n      }\n\n      var _this$instance$select = this.instance.selection.selectedRange.current().highlight,\n          row = _this$instance$select.row,\n          col = _this$instance$select.col;\n      var modifiedCellCoords = this.instance.runHooks('modifyGetCellCoords', row, col);\n      var visualRowToCheck = row;\n      var visualColumnToCheck = col;\n\n      if (Array.isArray(modifiedCellCoords)) {\n        var _modifiedCellCoords = _slicedToArray(modifiedCellCoords, 2);\n\n        visualRowToCheck = _modifiedCellCoords[0];\n        visualColumnToCheck = _modifiedCellCoords[1];\n      } // Getting values using the modified coordinates.\n\n\n      this.cellProperties = this.instance.getCellMeta(visualRowToCheck, visualColumnToCheck);\n      var activeElement = this.instance.rootDocument.activeElement;\n\n      if (activeElement) {\n        // Bluring the activeElement removes unwanted border around the focusable element\n        // (and resets activeElement prop). Without blurring the activeElement points to the\n        // previously focusable element after clicking onto the cell (#6877).\n        activeElement.blur();\n      }\n\n      if (this.cellProperties.readOnly) {\n        this.clearActiveEditor();\n        return;\n      }\n\n      var editorClass = this.instance.getCellEditor(this.cellProperties); // Getting element using coordinates from the selection.\n\n      var td = this.instance.getCell(row, col, true);\n\n      if (editorClass && td) {\n        var prop = this.instance.colToProp(visualColumnToCheck);\n        var originalValue = this.instance.getSourceDataAtCell(this.instance.toPhysicalRow(visualRowToCheck), visualColumnToCheck);\n        this.activeEditor = getEditorInstance(editorClass, this.instance); // Using not modified coordinates, as we need to get the table element using selection coordinates.\n        // There is an extra translation in the editor for saving value.\n\n        this.activeEditor.prepare(row, col, prop, td, originalValue, this.cellProperties);\n      } else {\n        this.clearActiveEditor();\n      }\n    }\n    /**\n     * Check is editor is opened/showed.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isEditorOpened\",\n    value: function isEditorOpened() {\n      return this.activeEditor && this.activeEditor.isOpened();\n    }\n    /**\n     * Open editor with initial value.\n     *\n     * @param {null|string} newInitialValue New value from which editor will start if handled property it's not the `null`.\n     * @param {Event} event The event object.\n     */\n\n  }, {\n    key: \"openEditor\",\n    value: function openEditor(newInitialValue, event) {\n      if (!this.activeEditor) {\n        return;\n      }\n\n      this.activeEditor.beginEditing(newInitialValue, event);\n    }\n    /**\n     * Close editor, finish editing cell.\n     *\n     * @param {boolean} restoreOriginalValue If `true`, then closes editor without saving value from the editor into a cell.\n     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.\n     * @param {Function} callback The callback function, fired after editor closing.\n     */\n\n  }, {\n    key: \"closeEditor\",\n    value: function closeEditor(restoreOriginalValue, isCtrlPressed, callback) {\n      if (this.activeEditor) {\n        this.activeEditor.finishEditing(restoreOriginalValue, isCtrlPressed, callback);\n      } else if (callback) {\n        callback(false);\n      }\n    }\n    /**\n     * Close editor and save changes.\n     *\n     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.\n     */\n\n  }, {\n    key: \"closeEditorAndSaveChanges\",\n    value: function closeEditorAndSaveChanges(isCtrlPressed) {\n      this.closeEditor(false, isCtrlPressed);\n    }\n    /**\n     * Close editor and restore original value.\n     *\n     * @param {boolean} isCtrlPressed Indication of whether the CTRL button is pressed.\n     */\n\n  }, {\n    key: \"closeEditorAndRestoreOriginalValue\",\n    value: function closeEditorAndRestoreOriginalValue(isCtrlPressed) {\n      this.closeEditor(true, isCtrlPressed);\n    }\n    /**\n     * Clears reference to an instance of the active editor.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"clearActiveEditor\",\n    value: function clearActiveEditor() {\n      this.activeEditor = void 0;\n    }\n    /**\n     * Controls selection's behaviour after clicking `Enter`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will move up after hit enter.\n     */\n\n  }, {\n    key: \"moveSelectionAfterEnter\",\n    value: function moveSelectionAfterEnter(isShiftPressed) {\n      var enterMoves = typeof this.tableMeta.enterMoves === 'function' ? this.tableMeta.enterMoves(event) : this.tableMeta.enterMoves;\n\n      if (isShiftPressed) {\n        // move selection up\n        this.selection.transformStart(-enterMoves.row, -enterMoves.col);\n      } else {\n        // move selection down (add a new row if needed)\n        this.selection.transformStart(enterMoves.row, enterMoves.col, true);\n      }\n    }\n    /**\n     * Controls selection behaviour after clicking `arrow up`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand up.\n     */\n\n  }, {\n    key: \"moveSelectionUp\",\n    value: function moveSelectionUp(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(-1, 0);\n      } else {\n        this.selection.transformStart(-1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow down`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand down.\n     */\n\n  }, {\n    key: \"moveSelectionDown\",\n    value: function moveSelectionDown(isShiftPressed) {\n      if (isShiftPressed) {\n        // expanding selection down with shift\n        this.selection.transformEnd(1, 0);\n      } else {\n        this.selection.transformStart(1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow right`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand right.\n     */\n\n  }, {\n    key: \"moveSelectionRight\",\n    value: function moveSelectionRight(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, 1);\n      } else {\n        this.selection.transformStart(0, 1);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow left`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand left.\n     */\n\n  }, {\n    key: \"moveSelectionLeft\",\n    value: function moveSelectionLeft(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, -1);\n      } else {\n        this.selection.transformStart(0, -1);\n      }\n    }\n    /**\n     * OnAfterDocumentKeyDown callback.\n     *\n     * @private\n     * @param {KeyboardEvent} event The keyboard event object.\n     */\n\n  }, {\n    key: \"onAfterDocumentKeyDown\",\n    value: function onAfterDocumentKeyDown(event) {\n      if (!this.instance.isListening()) {\n        return;\n      }\n\n      this.instance.runHooks('beforeKeyDown', event); // keyCode 229 aka 'uninitialized' doesn't take into account with editors. This key code is produced when unfinished\n      // character is entering (using IME editor). It is fired mainly on linux (ubuntu) with installed ibus-pinyin package.\n\n      if (this.destroyed || event.keyCode === 229) {\n        return;\n      }\n\n      if (isImmediatePropagationStopped(event)) {\n        return;\n      }\n\n      this.lastKeyCode = event.keyCode;\n\n      if (!this.selection.isSelected()) {\n        return;\n      } // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)\n\n\n      var isCtrlPressed = (event.ctrlKey || event.metaKey) && !event.altKey;\n\n      if (this.activeEditor && !this.activeEditor.isWaiting()) {\n        if (!isMetaKey(event.keyCode) && !isCtrlMetaKey(event.keyCode) && !isCtrlPressed && !this.isEditorOpened()) {\n          this.openEditor('', event);\n          return;\n        }\n      }\n\n      var isShiftPressed = event.shiftKey;\n      var rangeModifier = isShiftPressed ? this.selection.setRangeEnd : this.selection.setRangeStart;\n      var tabMoves;\n\n      switch (event.keyCode) {\n        case KEY_CODES.A:\n          if (!this.isEditorOpened() && isCtrlPressed) {\n            this.instance.selectAll();\n            event.preventDefault();\n            event.stopPropagation();\n          }\n\n          break;\n\n        case KEY_CODES.ARROW_UP:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionUp(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.ARROW_DOWN:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionDown(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.ARROW_RIGHT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionRight(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.ARROW_LEFT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionLeft(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.TAB:\n          tabMoves = typeof this.tableMeta.tabMoves === 'function' ? this.tableMeta.tabMoves(event) : this.tableMeta.tabMoves;\n\n          if (isShiftPressed) {\n            // move selection left\n            this.selection.transformStart(-tabMoves.row, -tabMoves.col);\n          } else {\n            // move selection right (add a new column if needed)\n            this.selection.transformStart(tabMoves.row, tabMoves.col, true);\n          }\n\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.BACKSPACE:\n        case KEY_CODES.DELETE:\n          this.instance.emptySelectedCells();\n          this.prepareEditor();\n          event.preventDefault();\n          break;\n\n        case KEY_CODES.F2:\n          /* F2 */\n          if (this.activeEditor) {\n            this.activeEditor.enableFullEditMode();\n          }\n\n          this.openEditor(null, event);\n          event.preventDefault(); // prevent Opera from opening 'Go to Page dialog'\n\n          break;\n\n        case KEY_CODES.ENTER:\n          /* return/enter */\n          if (this.isEditorOpened()) {\n            if (this.activeEditor && this.activeEditor.state !== EDITOR_STATE.WAITING) {\n              this.closeEditorAndSaveChanges(isCtrlPressed);\n            }\n\n            this.moveSelectionAfterEnter(isShiftPressed);\n          } else if (this.instance.getSettings().enterBeginsEditing) {\n            if (this.cellProperties.readOnly) {\n              this.moveSelectionAfterEnter();\n            } else if (this.activeEditor) {\n              this.activeEditor.enableFullEditMode();\n              this.openEditor(null, event);\n            }\n          } else {\n            this.moveSelectionAfterEnter(isShiftPressed);\n          }\n\n          event.preventDefault(); // don't add newline to field\n\n          stopImmediatePropagation(event); // required by HandsontableEditor\n\n          break;\n\n        case KEY_CODES.ESCAPE:\n          if (this.isEditorOpened()) {\n            this.closeEditorAndRestoreOriginalValue(isCtrlPressed);\n            this.activeEditor.focus();\n          }\n\n          event.preventDefault();\n          break;\n\n        case KEY_CODES.HOME:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(this.instance.rowIndexMapper.getFirstNotHiddenIndex(0, 1), this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, this.instance.columnIndexMapper.getFirstNotHiddenIndex(0, 1)));\n          }\n\n          event.preventDefault(); // don't scroll the window\n\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.END:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(this.instance.rowIndexMapper.getFirstNotHiddenIndex(this.instance.countRows() - 1, -1), this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, this.instance.columnIndexMapper.getFirstNotHiddenIndex(this.instance.countCols() - 1, -1)));\n          }\n\n          event.preventDefault(); // don't scroll the window\n\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.PAGE_UP:\n          this.selection.transformStart(-this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page up the window\n\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.PAGE_DOWN:\n          this.selection.transformStart(this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page down the window\n\n          event.stopPropagation();\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\n     * OnCellDblClick callback.\n     *\n     * @private\n     * @param {MouseEvent} event The mouse event object.\n     * @param {object} coords The cell coordinates.\n     * @param {HTMLTableCellElement|HTMLTableHeaderCellElement} elem The element which triggers the action.\n     */\n\n  }, {\n    key: \"onCellDblClick\",\n    value: function onCellDblClick(event, coords, elem) {\n      // may be TD or TH\n      if (elem.nodeName === 'TD') {\n        if (this.activeEditor) {\n          this.activeEditor.enableFullEditMode();\n        }\n\n        this.openEditor(null, event);\n      }\n    }\n    /**\n     * Destroy the instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n      this.eventManager.destroy();\n    }\n  }]);\n\n  return EditorManager;\n}();\n\nvar instances = new WeakMap();\n/**\n * @param {Core} hotInstance The Handsontable instance.\n * @param {TableMeta} tableMeta The table meta class instance.\n * @param {Selection} selection The selection instance.\n * @returns {EditorManager}\n */\n\nEditorManager.getInstance = function (hotInstance, tableMeta, selection) {\n  var editorManager = instances.get(hotInstance);\n\n  if (!editorManager) {\n    editorManager = new EditorManager(hotInstance, tableMeta, selection);\n    instances.set(hotInstance, editorManager);\n  }\n\n  return editorManager;\n};\n\nexport default EditorManager;"]},"metadata":{},"sourceType":"module"}