{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\uploadProcInst\\\\uploadProcInst.js\";\nimport { CenterFocusStrong, TransferWithinAStationSharp } from '@material-ui/icons';\nimport React, { Component } from 'react';\nimport Modal from 'react-awesome-modal';\nimport './uploadProcInst.css';\nimport Alert from '@material-ui/lab/Alert';\nimport Collapse from '@material-ui/core/Collapse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class UploadProcInst extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onFileChange = event => {\n      this.setState({\n        file: event.target.files[0]\n      });\n    };\n\n    this.state = {\n      visible: false,\n      file: null,\n      role: this.props.role,\n      user: this.props.currentUser,\n      error: false\n    };\n    this.id = props.id;\n  }\n\n  async accept() {\n    if (this.state.file) {\n      if (this.id[0] + '.pdf' === this.state.file.name) {\n        const file = new FormData();\n        file.append('file', this.state.file);\n        const body = {\n          file: this.state.file.name,\n          action: \"accept\",\n          user: this.state.user,\n          role: this.state.role\n        };\n        const options = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(body)\n        };\n\n        if (this.state.role === \"Process\") {\n          await fetch('http://localhost:5000/uploadProc', {\n            // content-type header should not be specified!\n            method: 'POST',\n            body: file\n          }).then(response => {\n            // Do something with the successful response\n            this.setState({\n              file: null,\n              error: false\n            });\n            fetch('http://localhost:5000/process', options).then(response => {\n              this.closeModal();\n              this.props.update();\n            });\n          }).catch(error => console.log(error));\n        } else if (this.state.role === \"Instrument\") {\n          await fetch('http://localhost:5000/uploadInst', {\n            // content-type header should not be specified!\n            method: 'POST',\n            body: file\n          }).then(response => {\n            // Do something with the successful response\n            this.setState({\n              file: null,\n              error: false\n            });\n            fetch('http://localhost:5000/instrument', options).then(response => {\n              this.closeModal();\n              this.props.update();\n            });\n          }).catch(error => console.log(error));\n        }\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    }\n  }\n\n  async deny() {\n    if (this.state.file) {\n      if (this.id[0] + '.pdf' === this.state.file.name) {\n        const file = new FormData();\n        file.append('file', this.state.file);\n        const body = {\n          file: this.state.file.name,\n          action: \"deny\",\n          user: this.state.user,\n          role: this.state.role\n        };\n        const options = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(body)\n        };\n\n        if (this.state.role === \"Process\") {\n          await fetch('http://localhost:5000/uploadProc', {\n            // content-type header should not be specified!\n            method: 'POST',\n            body: file\n          }).then(response => {\n            // Do something with the successful response\n            this.setState({\n              file: null,\n              error: false\n            });\n            fetch('http://localhost:5000/process', options).then(response => {\n              this.closeModal();\n              this.props.update();\n            });\n          }).catch(error => console.log(error));\n        } else if (this.state.role === \"Instrument\") {\n          await fetch('http://localhost:5000/uploadInst', {\n            // content-type header should not be specified!\n            method: 'POST',\n            body: file\n          }).then(response => {\n            // Do something with the successful response\n            this.setState({\n              file: null,\n              error: false\n            });\n            fetch('http://localhost:5000/instrument', options).then(response => {\n              this.closeModal();\n              this.props.update();\n            });\n          }).catch(error => console.log(error));\n        }\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    }\n  }\n\n  openModal() {\n    this.setState({\n      visible: true\n    });\n  }\n\n  closeModal() {\n    this.setState({\n      visible: false\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        value: \"UPLOAD\",\n        className: \"btn btn-warning\",\n        style: {\n          fontSize: \"12px\",\n          padding: \"2px 5px 2px 5px\",\n          backgroundColor: \"#B0E0E6\",\n          borderColor: \"#B0E0E6\",\n          width: \"100px\",\n          float: \"left\",\n          marginRight: \"5px\"\n        },\n        onClick: () => this.openModal()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Modal, {\n          visible: this.state.visible,\n          width: \"650\",\n          height: \"430\",\n          effect: \"fadeInUp\",\n          onClickAway: () => this.closeModal(),\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.closeModal(),\n            style: {\n              marginTop: \"5px\",\n              fontSize: \"16px\",\n              position: \"absolute\",\n              right: \"10px\",\n              backgroundColor: \"transparent\",\n              border: \"None\"\n            },\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popUpP__container\",\n            children: [/*#__PURE__*/_jsxDEV(\"center\", {\n              className: \"popUpP__title\",\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: this.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 63\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"form-group\",\n                children: /*#__PURE__*/_jsxDEV(\"center\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"file\",\n                    onChange: this.onFileChange,\n                    className: \"inputFile__container\",\n                    id: \"exampleFormControlFile1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 204,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n                    in: this.state.error,\n                    children: /*#__PURE__*/_jsxDEV(Alert, {\n                      severity: \"error\",\n                      style: {\n                        left: \"180px\",\n                        position: \"absolute\"\n                      },\n                      children: \"The file doesn't match the isometric!\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 206,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 205,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n            className: \"popUpP__warning__title\",\n            children: \"***WARNING!*** This action may replace the current appended file. Take appropiate cautions.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n            className: \"popUpP__warning__subtitle\",\n            children: \"If you are not sure of this action, click cancel and contact your supervisor.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popUpP__buttons__container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"btn btn-sm btn-success\",\n              onClick: () => this.accept(),\n              style: {\n                marginRight: \"5px\",\n                fontSize: \"16px\"\n              },\n              children: \"Accept\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"btn btn-sm btn-danger\",\n              onClick: () => this.deny(),\n              style: {\n                marginRight: \"5px\",\n                fontSize: \"16px\"\n              },\n              children: \"Deny\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/uploadProcInst/uploadProcInst.js"],"names":["CenterFocusStrong","TransferWithinAStationSharp","React","Component","Modal","Alert","Collapse","UploadProcInst","constructor","props","onFileChange","event","setState","file","target","files","state","visible","role","user","currentUser","error","id","accept","name","FormData","append","body","action","options","method","headers","JSON","stringify","fetch","then","response","closeModal","update","catch","console","log","deny","openModal","render","fontSize","padding","backgroundColor","borderColor","width","float","marginRight","marginTop","position","right","border","left"],"mappings":"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","sourcesContent":["import { CenterFocusStrong, TransferWithinAStationSharp } from '@material-ui/icons';\r\nimport React, { Component } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\nimport './uploadProcInst.css'\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse'\r\n\r\nexport default class UploadProcInst extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible : false,\r\n            file : null,\r\n            role: this.props.role,\r\n            user: this.props.currentUser,\r\n            error: false\r\n        }\r\n        this.id = props.id;\r\n\r\n    }\r\n   \r\n    onFileChange = event => {\r\n\r\n        this.setState({ file: event.target.files[0]});\r\n    };\r\n\r\n    async accept(){\r\n        if(this.state.file){\r\n            if(this.id[0] + '.pdf' === this.state.file.name){\r\n                const file  = new FormData(); \r\n                file.append('file', this.state.file); \r\n                \r\n                const body = {\r\n                    file: this.state.file.name,\r\n                    action: \"accept\",\r\n                    user: this.state.user,\r\n                    role: this.state.role\r\n                }\r\n    \r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n\r\n                if(this.state.role === \"Process\"){\r\n                    await fetch('http://localhost:5000/uploadProc', {\r\n                    // content-type header should not be specified!\r\n                    method: 'POST',\r\n                    body: file,\r\n                    })\r\n                    .then(response => {\r\n                        // Do something with the successful response\r\n                        this.setState({\r\n                            file: null,\r\n                            error: false\r\n                        })\r\n                        fetch('http://localhost:5000/process', options)\r\n                            .then(response => {\r\n        \r\n                                this.closeModal()\r\n                                this.props.update()\r\n                            })            \r\n                            \r\n                    })\r\n                    .catch(error => console.log(error)\r\n                    );\r\n                }else if(this.state.role === \"Instrument\"){\r\n                    await fetch('http://localhost:5000/uploadInst', {\r\n                        // content-type header should not be specified!\r\n                        method: 'POST',\r\n                        body: file,\r\n                        })\r\n                        .then(response => {\r\n                            // Do something with the successful response\r\n                            this.setState({\r\n                                file: null,\r\n                                error: false\r\n                            })\r\n                            fetch('http://localhost:5000/instrument', options)\r\n                                .then(response => {\r\n            \r\n                                    this.closeModal()\r\n                                    this.props.update()\r\n                                })            \r\n                                \r\n                        })\r\n                        .catch(error => console.log(error)\r\n                        );\r\n                }\r\n        \r\n                \r\n            }else{\r\n                this.setState({error: true})\r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    async deny(){\r\n        if(this.state.file){\r\n            if(this.id[0] + '.pdf' === this.state.file.name){\r\n                const file  = new FormData(); \r\n                file.append('file', this.state.file); \r\n                \r\n                const body = {\r\n                    file: this.state.file.name,\r\n                    action: \"deny\",\r\n                    user: this.state.user,\r\n                    role: this.state.role\r\n                }\r\n    \r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n\r\n                if(this.state.role === \"Process\"){\r\n                    await fetch('http://localhost:5000/uploadProc', {\r\n                    // content-type header should not be specified!\r\n                    method: 'POST',\r\n                    body: file,\r\n                    })\r\n                    .then(response => {\r\n                        // Do something with the successful response\r\n                        this.setState({\r\n                            file: null,\r\n                            error: false\r\n                        })\r\n                        fetch('http://localhost:5000/process', options)\r\n                            .then(response => {\r\n        \r\n                                this.closeModal()\r\n                                this.props.update()\r\n                            })            \r\n                            \r\n                    })\r\n                    .catch(error => console.log(error)\r\n                    );\r\n                }else if(this.state.role === \"Instrument\"){\r\n                    await fetch('http://localhost:5000/uploadInst', {\r\n                        // content-type header should not be specified!\r\n                        method: 'POST',\r\n                        body: file,\r\n                        })\r\n                        .then(response => {\r\n                            // Do something with the successful response\r\n                            this.setState({\r\n                                file: null,\r\n                                error: false\r\n                            })\r\n                            fetch('http://localhost:5000/instrument', options)\r\n                                .then(response => {\r\n            \r\n                                    this.closeModal()\r\n                                    this.props.update()\r\n                                })            \r\n                                \r\n                        })\r\n                        .catch(error => console.log(error)\r\n                        );\r\n                }\r\n        \r\n                \r\n            }else{\r\n                this.setState({error: true})\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    openModal() {      \r\n        this.setState({\r\n            visible : true,\r\n        });\r\n    }\r\n\r\n    closeModal() {\r\n        this.setState({\r\n            visible : false,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                <input type=\"button\"  value=\"UPLOAD\" className=\"btn btn-warning\"  style={{fontSize:\"12px\", padding:\"2px 5px 2px 5px\", backgroundColor:\"#B0E0E6\", borderColor:\"#B0E0E6\", width:\"100px\", float:\"left\", marginRight:\"5px\"}} onClick={() => this.openModal()} />\r\n                <div>\r\n                    <Modal visible={this.state.visible} width=\"650\" height=\"430\" effect=\"fadeInUp\" onClickAway={() => this.closeModal()}>\r\n                    <button onClick={() => this.closeModal()} style={{marginTop:\"5px\", fontSize:\"16px\", position:\"absolute\", right:\"10px\", backgroundColor:\"transparent\", border:\"None\"}}>X</button>\r\n\r\n                        <div className=\"popUpP__container\" >\r\n\r\n                            <center className=\"popUpP__title\"><h1>{this.id}</h1></center>\r\n                            <form>\r\n                                <div class=\"form-group\">\r\n                                    <center>\r\n                                        <input type=\"file\" onChange={this.onFileChange} className=\"inputFile__container\" id=\"exampleFormControlFile1\"></input>\r\n                                        <Collapse in={this.state.error}>\r\n                                            <Alert severity=\"error\" style={{left: \"180px\",position: \"absolute\"}}\r\n                                            >\r\n                                            The file doesn't match the isometric!\r\n\r\n                                            </Alert>\r\n                                        </Collapse>\r\n                                    </center>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                        <center className=\"popUpP__warning__title\">***WARNING!*** This action may replace the current appended file. Take appropiate cautions.</center>\r\n                        <center className=\"popUpP__warning__subtitle\">If you are not sure of this action, click cancel and contact your supervisor.</center>\r\n                        <div className=\"popUpP__buttons__container\">\r\n                            <button class=\"btn btn-sm btn-success\" onClick={() => this.accept()} style={{marginRight:\"5px\", fontSize:\"16px\"}}>Accept</button>\r\n                            <button class=\"btn btn-sm btn-danger\" onClick={() => this.deny()} style={{marginRight:\"5px\", fontSize:\"16px\"}}>Deny</button>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}