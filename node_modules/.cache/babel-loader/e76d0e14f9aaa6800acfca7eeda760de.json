{"ast":null,"code":"import { hasOwnProperty, isObject } from \"../../helpers/object.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\n/**\r\n * Create separated id for borders for each cell.\r\n *\r\n * @param {number} row Visual row index.\r\n * @param {number} col Visual column index.\r\n * @returns {string}\r\n */\n\nexport function createId(row, col) {\n  return \"border_row\".concat(row, \"col\").concat(col);\n}\n/**\r\n * Create default single border for each position (top/right/bottom/left).\r\n *\r\n * @returns {object} `{{width: number, color: string}}`.\r\n */\n\nexport function createDefaultCustomBorder() {\n  return {\n    width: 1,\n    color: '#000'\n  };\n}\n/**\r\n * Create default object for empty border.\r\n *\r\n * @returns {object} `{{hide: boolean}}`.\r\n */\n\nexport function createSingleEmptyBorder() {\n  return {\n    hide: true\n  };\n}\n/**\r\n * Create default Handsontable border object.\r\n *\r\n * @returns {object} `{{width: number, color: string, cornerVisible: boolean}}`.\r\n */\n\nexport function createDefaultHtBorder() {\n  return {\n    width: 1,\n    color: '#000',\n    cornerVisible: false\n  };\n}\n/**\r\n * Prepare empty border for each cell with all custom borders hidden.\r\n *\r\n * @param {number} row Visual row index.\r\n * @param {number} col Visual column index.\r\n * @returns {object} Returns border configuration containing visual indexes. Example of an object defining it:\r\n * `{{id: *, border: *, row: *, col: *, top: {hide: boolean}, right: {hide: boolean}, bottom: {hide: boolean}, left: {hide: boolean}}}`.\r\n */\n\nexport function createEmptyBorders(row, col) {\n  return {\n    id: createId(row, col),\n    border: createDefaultHtBorder(),\n    row: row,\n    col: col,\n    top: createSingleEmptyBorder(),\n    right: createSingleEmptyBorder(),\n    bottom: createSingleEmptyBorder(),\n    left: createSingleEmptyBorder()\n  };\n}\n/**\r\n * @param {object} defaultBorder The default border object.\r\n * @param {object} customBorder The border object with custom settings.\r\n * @returns {object}\r\n */\n\nexport function extendDefaultBorder(defaultBorder, customBorder) {\n  if (hasOwnProperty(customBorder, 'border')) {\n    defaultBorder.border = customBorder.border;\n  }\n\n  if (hasOwnProperty(customBorder, 'top')) {\n    if (customBorder.top) {\n      if (!isObject(customBorder.top)) {\n        customBorder.top = createDefaultCustomBorder();\n      }\n\n      defaultBorder.top = customBorder.top;\n    } else {\n      customBorder.top = createSingleEmptyBorder();\n      defaultBorder.top = customBorder.top;\n    }\n  }\n\n  if (hasOwnProperty(customBorder, 'right')) {\n    if (customBorder.right) {\n      if (!isObject(customBorder.right)) {\n        customBorder.right = createDefaultCustomBorder();\n      }\n\n      defaultBorder.right = customBorder.right;\n    } else {\n      customBorder.right = createSingleEmptyBorder();\n      defaultBorder.right = customBorder.right;\n    }\n  }\n\n  if (hasOwnProperty(customBorder, 'bottom')) {\n    if (customBorder.bottom) {\n      if (!isObject(customBorder.bottom)) {\n        customBorder.bottom = createDefaultCustomBorder();\n      }\n\n      defaultBorder.bottom = customBorder.bottom;\n    } else {\n      customBorder.bottom = createSingleEmptyBorder();\n      defaultBorder.bottom = customBorder.bottom;\n    }\n  }\n\n  if (hasOwnProperty(customBorder, 'left')) {\n    if (customBorder.left) {\n      if (!isObject(customBorder.left)) {\n        customBorder.left = createDefaultCustomBorder();\n      }\n\n      defaultBorder.left = customBorder.left;\n    } else {\n      customBorder.left = createSingleEmptyBorder();\n      defaultBorder.left = customBorder.left;\n    }\n  }\n\n  return defaultBorder;\n}\n/**\r\n * Check if selection has border.\r\n *\r\n * @param {Core} hot The Handsontable instance.\r\n * @param {string} [direction] If set ('left' or 'top') then only the specified border side will be checked.\r\n * @returns {boolean}\r\n */\n\nexport function checkSelectionBorders(hot, direction) {\n  var atLeastOneHasBorder = false;\n  arrayEach(hot.getSelectedRange(), function (range) {\n    range.forAll(function (r, c) {\n      if (r < 0 || c < 0) {\n        return;\n      }\n\n      var metaBorders = hot.getCellMeta(r, c).borders;\n\n      if (metaBorders) {\n        if (direction) {\n          if (!hasOwnProperty(metaBorders[direction], 'hide') || metaBorders[direction].hide === false) {\n            atLeastOneHasBorder = true;\n            return false; // breaks forAll\n          }\n        } else {\n          atLeastOneHasBorder = true;\n          return false; // breaks forAll\n        }\n      }\n    });\n  });\n  return atLeastOneHasBorder;\n}\n/**\r\n * Mark label in contextMenu as selected.\r\n *\r\n * @param {string} label The label text.\r\n * @returns {string}\r\n */\n\nexport function markSelected(label) {\n  return \"<span class=\\\"selected\\\">\".concat(String.fromCharCode(10003), \"</span>\").concat(label); // workaround for https://github.com/handsontable/handsontable/issues/1946\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/customBorders/utils.mjs"],"names":["hasOwnProperty","isObject","arrayEach","createId","row","col","concat","createDefaultCustomBorder","width","color","createSingleEmptyBorder","hide","createDefaultHtBorder","cornerVisible","createEmptyBorders","id","border","top","right","bottom","left","extendDefaultBorder","defaultBorder","customBorder","checkSelectionBorders","hot","direction","atLeastOneHasBorder","getSelectedRange","range","forAll","r","c","metaBorders","getCellMeta","borders","markSelected","label","String","fromCharCode"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.concat.js\";\r\nimport { hasOwnProperty, isObject } from \"../../helpers/object.mjs\";\r\nimport { arrayEach } from \"../../helpers/array.mjs\";\r\n/**\r\n * Create separated id for borders for each cell.\r\n *\r\n * @param {number} row Visual row index.\r\n * @param {number} col Visual column index.\r\n * @returns {string}\r\n */\r\n\r\nexport function createId(row, col) {\r\n  return \"border_row\".concat(row, \"col\").concat(col);\r\n}\r\n/**\r\n * Create default single border for each position (top/right/bottom/left).\r\n *\r\n * @returns {object} `{{width: number, color: string}}`.\r\n */\r\n\r\nexport function createDefaultCustomBorder() {\r\n  return {\r\n    width: 1,\r\n    color: '#000'\r\n  };\r\n}\r\n/**\r\n * Create default object for empty border.\r\n *\r\n * @returns {object} `{{hide: boolean}}`.\r\n */\r\n\r\nexport function createSingleEmptyBorder() {\r\n  return {\r\n    hide: true\r\n  };\r\n}\r\n/**\r\n * Create default Handsontable border object.\r\n *\r\n * @returns {object} `{{width: number, color: string, cornerVisible: boolean}}`.\r\n */\r\n\r\nexport function createDefaultHtBorder() {\r\n  return {\r\n    width: 1,\r\n    color: '#000',\r\n    cornerVisible: false\r\n  };\r\n}\r\n/**\r\n * Prepare empty border for each cell with all custom borders hidden.\r\n *\r\n * @param {number} row Visual row index.\r\n * @param {number} col Visual column index.\r\n * @returns {object} Returns border configuration containing visual indexes. Example of an object defining it:\r\n * `{{id: *, border: *, row: *, col: *, top: {hide: boolean}, right: {hide: boolean}, bottom: {hide: boolean}, left: {hide: boolean}}}`.\r\n */\r\n\r\nexport function createEmptyBorders(row, col) {\r\n  return {\r\n    id: createId(row, col),\r\n    border: createDefaultHtBorder(),\r\n    row: row,\r\n    col: col,\r\n    top: createSingleEmptyBorder(),\r\n    right: createSingleEmptyBorder(),\r\n    bottom: createSingleEmptyBorder(),\r\n    left: createSingleEmptyBorder()\r\n  };\r\n}\r\n/**\r\n * @param {object} defaultBorder The default border object.\r\n * @param {object} customBorder The border object with custom settings.\r\n * @returns {object}\r\n */\r\n\r\nexport function extendDefaultBorder(defaultBorder, customBorder) {\r\n  if (hasOwnProperty(customBorder, 'border')) {\r\n    defaultBorder.border = customBorder.border;\r\n  }\r\n\r\n  if (hasOwnProperty(customBorder, 'top')) {\r\n    if (customBorder.top) {\r\n      if (!isObject(customBorder.top)) {\r\n        customBorder.top = createDefaultCustomBorder();\r\n      }\r\n\r\n      defaultBorder.top = customBorder.top;\r\n    } else {\r\n      customBorder.top = createSingleEmptyBorder();\r\n      defaultBorder.top = customBorder.top;\r\n    }\r\n  }\r\n\r\n  if (hasOwnProperty(customBorder, 'right')) {\r\n    if (customBorder.right) {\r\n      if (!isObject(customBorder.right)) {\r\n        customBorder.right = createDefaultCustomBorder();\r\n      }\r\n\r\n      defaultBorder.right = customBorder.right;\r\n    } else {\r\n      customBorder.right = createSingleEmptyBorder();\r\n      defaultBorder.right = customBorder.right;\r\n    }\r\n  }\r\n\r\n  if (hasOwnProperty(customBorder, 'bottom')) {\r\n    if (customBorder.bottom) {\r\n      if (!isObject(customBorder.bottom)) {\r\n        customBorder.bottom = createDefaultCustomBorder();\r\n      }\r\n\r\n      defaultBorder.bottom = customBorder.bottom;\r\n    } else {\r\n      customBorder.bottom = createSingleEmptyBorder();\r\n      defaultBorder.bottom = customBorder.bottom;\r\n    }\r\n  }\r\n\r\n  if (hasOwnProperty(customBorder, 'left')) {\r\n    if (customBorder.left) {\r\n      if (!isObject(customBorder.left)) {\r\n        customBorder.left = createDefaultCustomBorder();\r\n      }\r\n\r\n      defaultBorder.left = customBorder.left;\r\n    } else {\r\n      customBorder.left = createSingleEmptyBorder();\r\n      defaultBorder.left = customBorder.left;\r\n    }\r\n  }\r\n\r\n  return defaultBorder;\r\n}\r\n/**\r\n * Check if selection has border.\r\n *\r\n * @param {Core} hot The Handsontable instance.\r\n * @param {string} [direction] If set ('left' or 'top') then only the specified border side will be checked.\r\n * @returns {boolean}\r\n */\r\n\r\nexport function checkSelectionBorders(hot, direction) {\r\n  var atLeastOneHasBorder = false;\r\n  arrayEach(hot.getSelectedRange(), function (range) {\r\n    range.forAll(function (r, c) {\r\n      if (r < 0 || c < 0) {\r\n        return;\r\n      }\r\n\r\n      var metaBorders = hot.getCellMeta(r, c).borders;\r\n\r\n      if (metaBorders) {\r\n        if (direction) {\r\n          if (!hasOwnProperty(metaBorders[direction], 'hide') || metaBorders[direction].hide === false) {\r\n            atLeastOneHasBorder = true;\r\n            return false; // breaks forAll\r\n          }\r\n        } else {\r\n          atLeastOneHasBorder = true;\r\n          return false; // breaks forAll\r\n        }\r\n      }\r\n    });\r\n  });\r\n  return atLeastOneHasBorder;\r\n}\r\n/**\r\n * Mark label in contextMenu as selected.\r\n *\r\n * @param {string} label The label text.\r\n * @returns {string}\r\n */\r\n\r\nexport function markSelected(label) {\r\n  return \"<span class=\\\"selected\\\">\".concat(String.fromCharCode(10003), \"</span>\").concat(label); // workaround for https://github.com/handsontable/handsontable/issues/1946\r\n}"]},"metadata":{},"sourceType":"module"}