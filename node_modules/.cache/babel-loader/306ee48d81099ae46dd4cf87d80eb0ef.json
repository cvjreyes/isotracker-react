{"ast":null,"code":"import { isNumeric } from \"../../helpers/number.mjs\";\nexport var VALIDATOR_TYPE = 'numeric';\n/**\n * The Numeric cell validator.\n *\n * @private\n * @param {*} value Value of edited cell.\n * @param {Function} callback Callback called with validation result.\n */\n\nexport function numericValidator(value, callback) {\n  var valueToValidate = value;\n\n  if (valueToValidate === null || valueToValidate === void 0) {\n    valueToValidate = '';\n  }\n\n  if (this.allowEmpty && valueToValidate === '') {\n    callback(true);\n  } else if (valueToValidate === '') {\n    callback(false);\n  } else {\n    callback(isNumeric(value));\n  }\n}\nnumericValidator.VALIDATOR_TYPE = VALIDATOR_TYPE;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/validators/numericValidator/numericValidator.mjs"],"names":["isNumeric","VALIDATOR_TYPE","numericValidator","value","callback","valueToValidate","allowEmpty"],"mappings":"AAAA,SAASA,SAAT,QAA0B,0BAA1B;AACA,OAAO,IAAIC,cAAc,GAAG,SAArB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,QAAjC,EAA2C;AAChD,MAAIC,eAAe,GAAGF,KAAtB;;AAEA,MAAIE,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAAzD,EAA4D;AAC1DA,IAAAA,eAAe,GAAG,EAAlB;AACD;;AAED,MAAI,KAAKC,UAAL,IAAmBD,eAAe,KAAK,EAA3C,EAA+C;AAC7CD,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAFD,MAEO,IAAIC,eAAe,KAAK,EAAxB,EAA4B;AACjCD,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,GAFM,MAEA;AACLA,IAAAA,QAAQ,CAACJ,SAAS,CAACG,KAAD,CAAV,CAAR;AACD;AACF;AACDD,gBAAgB,CAACD,cAAjB,GAAkCA,cAAlC","sourcesContent":["import { isNumeric } from \"../../helpers/number.mjs\";\nexport var VALIDATOR_TYPE = 'numeric';\n/**\n * The Numeric cell validator.\n *\n * @private\n * @param {*} value Value of edited cell.\n * @param {Function} callback Callback called with validation result.\n */\n\nexport function numericValidator(value, callback) {\n  var valueToValidate = value;\n\n  if (valueToValidate === null || valueToValidate === void 0) {\n    valueToValidate = '';\n  }\n\n  if (this.allowEmpty && valueToValidate === '') {\n    callback(true);\n  } else if (valueToValidate === '') {\n    callback(false);\n  } else {\n    callback(isNumeric(value));\n  }\n}\nnumericValidator.VALIDATOR_TYPE = VALIDATOR_TYPE;"]},"metadata":{},"sourceType":"module"}