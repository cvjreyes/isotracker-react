{"ast":null,"code":"import { isObjectEqual } from \"../../helpers/object.mjs\";\n/**\r\n * Creates hooks for autofill.\r\n *\r\n * @param {object} pluginInstance The formulas plugin instance.\r\n * @returns {object}\r\n */\n\nexport var createAutofillHooks = function createAutofillHooks(pluginInstance) {\n  // Blocks the autofill operation if at least one of the underlying's cell\n  // contents cannot be set, e.g. if there's a matrix underneath.\n  var beforeAutofill = function beforeAutofill(_, __, target) {\n    var width = target.getWidth();\n    var height = target.getHeight();\n    var row = target.from.row;\n    var col = target.from.col;\n\n    if (!pluginInstance.engine.isItPossibleToSetCellContents({\n      sheet: pluginInstance.sheetId,\n      row: row,\n      col: col\n    }, width, height)) {\n      return false;\n    }\n  };\n\n  var afterAutofill = function afterAutofill(fillData, source, target, direction, hasFillDataChanged) {\n    // Skip fill handle process when the fill data was changed by user.\n    if (hasFillDataChanged) {\n      return;\n    }\n\n    var sourceSize = {\n      width: source.getWidth(),\n      height: source.getHeight()\n    };\n    var targetSize = {\n      width: target.getWidth(),\n      height: target.getHeight()\n    };\n    var operations = [];\n\n    switch (direction) {\n      case 'right':\n        {\n          var pasteRow = source.from.row;\n\n          for (var pasteCol = target.from.col; pasteCol <= target.to.col; pasteCol += sourceSize.width) {\n            var remaining = target.to.col - pasteCol + 1;\n            var width = Math.min(sourceSize.width, remaining);\n            operations.push({\n              copy: {\n                row: source.from.row,\n                col: source.from.col,\n                width: width,\n                height: sourceSize.height\n              },\n              paste: {\n                row: pasteRow,\n                col: pasteCol\n              }\n            });\n          }\n\n          break;\n        }\n\n      case 'down':\n        {\n          var _pasteCol = source.from.col;\n\n          for (var _pasteRow = target.from.row; _pasteRow <= target.to.row; _pasteRow += sourceSize.height) {\n            var _remaining = target.to.row - _pasteRow + 1;\n\n            var height = Math.min(sourceSize.height, _remaining);\n            operations.push({\n              copy: {\n                row: source.from.row,\n                col: source.from.col,\n                width: sourceSize.width,\n                height: height\n              },\n              paste: {\n                row: _pasteRow,\n                col: _pasteCol\n              }\n            });\n          }\n\n          break;\n        }\n\n      case 'left':\n        {\n          var _pasteRow2 = source.from.row;\n\n          for (var _pasteCol2 = target.from.col; _pasteCol2 <= target.to.col; _pasteCol2++) {\n            var offset = targetSize.width % sourceSize.width;\n            var copyCol = (sourceSize.width - offset + (_pasteCol2 - target.from.col)) % sourceSize.width + source.from.col;\n            operations.push({\n              copy: {\n                row: source.from.row,\n                col: copyCol,\n                width: 1,\n                height: sourceSize.height\n              },\n              paste: {\n                row: _pasteRow2,\n                col: _pasteCol2\n              }\n            });\n          }\n\n          break;\n        }\n\n      case 'up':\n        {\n          var _pasteCol3 = source.from.col;\n\n          for (var _pasteRow3 = target.from.row; _pasteRow3 <= target.to.row; _pasteRow3++) {\n            var _offset = targetSize.height % sourceSize.height;\n\n            var copyRow = (sourceSize.height - _offset + (_pasteRow3 - target.from.row)) % sourceSize.height + source.from.row;\n            operations.push({\n              copy: {\n                row: copyRow,\n                col: source.from.col,\n                width: sourceSize.width,\n                height: 1\n              },\n              paste: {\n                row: _pasteRow3,\n                col: _pasteCol3\n              }\n            });\n          }\n\n          break;\n        }\n\n      default:\n        {\n          throw new Error('Unexpected direction parameter');\n        }\n    }\n\n    var sheet = pluginInstance.sheetId;\n    operations.reduce(function (previousCopy, operation) {\n      if (!isObjectEqual(previousCopy, operation.copy)) {\n        pluginInstance.engine.copy({\n          sheet: sheet,\n          row: operation.copy.row,\n          col: operation.copy.col\n        }, operation.copy.width, operation.copy.height);\n      }\n\n      pluginInstance.engine.paste({\n        sheet: sheet,\n        row: operation.paste.row,\n        col: operation.paste.col\n      });\n      return operation.copy;\n    }, {});\n  };\n\n  return {\n    beforeAutofill: beforeAutofill,\n    afterAutofill: afterAutofill\n  };\n};","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/formulas/autofill.mjs"],"names":["isObjectEqual","createAutofillHooks","pluginInstance","beforeAutofill","_","__","target","width","getWidth","height","getHeight","row","from","col","engine","isItPossibleToSetCellContents","sheet","sheetId","afterAutofill","fillData","source","direction","hasFillDataChanged","sourceSize","targetSize","operations","pasteRow","pasteCol","to","remaining","Math","min","push","copy","paste","_pasteCol","_pasteRow","_remaining","_pasteRow2","_pasteCol2","offset","copyCol","_pasteCol3","_pasteRow3","_offset","copyRow","Error","reduce","previousCopy","operation"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.reduce.js\";\r\nimport { isObjectEqual } from \"../../helpers/object.mjs\";\r\n/**\r\n * Creates hooks for autofill.\r\n *\r\n * @param {object} pluginInstance The formulas plugin instance.\r\n * @returns {object}\r\n */\r\n\r\nexport var createAutofillHooks = function createAutofillHooks(pluginInstance) {\r\n  // Blocks the autofill operation if at least one of the underlying's cell\r\n  // contents cannot be set, e.g. if there's a matrix underneath.\r\n  var beforeAutofill = function beforeAutofill(_, __, target) {\r\n    var width = target.getWidth();\r\n    var height = target.getHeight();\r\n    var row = target.from.row;\r\n    var col = target.from.col;\r\n\r\n    if (!pluginInstance.engine.isItPossibleToSetCellContents({\r\n      sheet: pluginInstance.sheetId,\r\n      row: row,\r\n      col: col\r\n    }, width, height)) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  var afterAutofill = function afterAutofill(fillData, source, target, direction, hasFillDataChanged) {\r\n    // Skip fill handle process when the fill data was changed by user.\r\n    if (hasFillDataChanged) {\r\n      return;\r\n    }\r\n\r\n    var sourceSize = {\r\n      width: source.getWidth(),\r\n      height: source.getHeight()\r\n    };\r\n    var targetSize = {\r\n      width: target.getWidth(),\r\n      height: target.getHeight()\r\n    };\r\n    var operations = [];\r\n\r\n    switch (direction) {\r\n      case 'right':\r\n        {\r\n          var pasteRow = source.from.row;\r\n\r\n          for (var pasteCol = target.from.col; pasteCol <= target.to.col; pasteCol += sourceSize.width) {\r\n            var remaining = target.to.col - pasteCol + 1;\r\n            var width = Math.min(sourceSize.width, remaining);\r\n            operations.push({\r\n              copy: {\r\n                row: source.from.row,\r\n                col: source.from.col,\r\n                width: width,\r\n                height: sourceSize.height\r\n              },\r\n              paste: {\r\n                row: pasteRow,\r\n                col: pasteCol\r\n              }\r\n            });\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n      case 'down':\r\n        {\r\n          var _pasteCol = source.from.col;\r\n\r\n          for (var _pasteRow = target.from.row; _pasteRow <= target.to.row; _pasteRow += sourceSize.height) {\r\n            var _remaining = target.to.row - _pasteRow + 1;\r\n\r\n            var height = Math.min(sourceSize.height, _remaining);\r\n            operations.push({\r\n              copy: {\r\n                row: source.from.row,\r\n                col: source.from.col,\r\n                width: sourceSize.width,\r\n                height: height\r\n              },\r\n              paste: {\r\n                row: _pasteRow,\r\n                col: _pasteCol\r\n              }\r\n            });\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n      case 'left':\r\n        {\r\n          var _pasteRow2 = source.from.row;\r\n\r\n          for (var _pasteCol2 = target.from.col; _pasteCol2 <= target.to.col; _pasteCol2++) {\r\n            var offset = targetSize.width % sourceSize.width;\r\n            var copyCol = (sourceSize.width - offset + (_pasteCol2 - target.from.col)) % sourceSize.width + source.from.col;\r\n            operations.push({\r\n              copy: {\r\n                row: source.from.row,\r\n                col: copyCol,\r\n                width: 1,\r\n                height: sourceSize.height\r\n              },\r\n              paste: {\r\n                row: _pasteRow2,\r\n                col: _pasteCol2\r\n              }\r\n            });\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n      case 'up':\r\n        {\r\n          var _pasteCol3 = source.from.col;\r\n\r\n          for (var _pasteRow3 = target.from.row; _pasteRow3 <= target.to.row; _pasteRow3++) {\r\n            var _offset = targetSize.height % sourceSize.height;\r\n\r\n            var copyRow = (sourceSize.height - _offset + (_pasteRow3 - target.from.row)) % sourceSize.height + source.from.row;\r\n            operations.push({\r\n              copy: {\r\n                row: copyRow,\r\n                col: source.from.col,\r\n                width: sourceSize.width,\r\n                height: 1\r\n              },\r\n              paste: {\r\n                row: _pasteRow3,\r\n                col: _pasteCol3\r\n              }\r\n            });\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n      default:\r\n        {\r\n          throw new Error('Unexpected direction parameter');\r\n        }\r\n    }\r\n\r\n    var sheet = pluginInstance.sheetId;\r\n    operations.reduce(function (previousCopy, operation) {\r\n      if (!isObjectEqual(previousCopy, operation.copy)) {\r\n        pluginInstance.engine.copy({\r\n          sheet: sheet,\r\n          row: operation.copy.row,\r\n          col: operation.copy.col\r\n        }, operation.copy.width, operation.copy.height);\r\n      }\r\n\r\n      pluginInstance.engine.paste({\r\n        sheet: sheet,\r\n        row: operation.paste.row,\r\n        col: operation.paste.col\r\n      });\r\n      return operation.copy;\r\n    }, {});\r\n  };\r\n\r\n  return {\r\n    beforeAutofill: beforeAutofill,\r\n    afterAutofill: afterAutofill\r\n  };\r\n};"]},"metadata":{},"sourceType":"module"}