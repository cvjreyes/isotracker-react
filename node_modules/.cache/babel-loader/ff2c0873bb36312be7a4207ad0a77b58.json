{"ast":null,"code":";\n\n(function (root, factory) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  (function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var X32WordArray = C_lib.WordArray;\n    /**\r\n     * x64 namespace.\r\n     */\n\n    var C_x64 = C.x64 = {};\n    /**\r\n     * A 64-bit word.\r\n     */\n\n    var X64Word = C_x64.Word = Base.extend({\n      /**\r\n       * Initializes a newly created 64-bit word.\r\n       *\r\n       * @param {number} high The high 32 bits.\r\n       * @param {number} low The low 32 bits.\r\n       *\r\n       * @example\r\n       *\r\n       *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\r\n       */\n      init: function (high, low) {\n        this.high = high;\n        this.low = low;\n      }\n      /**\r\n       * Bitwise NOTs this word.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after negating.\r\n       *\r\n       * @example\r\n       *\r\n       *     var negated = x64Word.not();\r\n       */\n      // not: function () {\n      // var high = ~this.high;\n      // var low = ~this.low;\n      // return X64Word.create(high, low);\n      // },\n\n      /**\r\n       * Bitwise ANDs this word with the passed word.\r\n       *\r\n       * @param {X64Word} word The x64-Word to AND with this word.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after ANDing.\r\n       *\r\n       * @example\r\n       *\r\n       *     var anded = x64Word.and(anotherX64Word);\r\n       */\n      // and: function (word) {\n      // var high = this.high & word.high;\n      // var low = this.low & word.low;\n      // return X64Word.create(high, low);\n      // },\n\n      /**\r\n       * Bitwise ORs this word with the passed word.\r\n       *\r\n       * @param {X64Word} word The x64-Word to OR with this word.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after ORing.\r\n       *\r\n       * @example\r\n       *\r\n       *     var ored = x64Word.or(anotherX64Word);\r\n       */\n      // or: function (word) {\n      // var high = this.high | word.high;\n      // var low = this.low | word.low;\n      // return X64Word.create(high, low);\n      // },\n\n      /**\r\n       * Bitwise XORs this word with the passed word.\r\n       *\r\n       * @param {X64Word} word The x64-Word to XOR with this word.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after XORing.\r\n       *\r\n       * @example\r\n       *\r\n       *     var xored = x64Word.xor(anotherX64Word);\r\n       */\n      // xor: function (word) {\n      // var high = this.high ^ word.high;\n      // var low = this.low ^ word.low;\n      // return X64Word.create(high, low);\n      // },\n\n      /**\r\n       * Shifts this word n bits to the left.\r\n       *\r\n       * @param {number} n The number of bits to shift.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after shifting.\r\n       *\r\n       * @example\r\n       *\r\n       *     var shifted = x64Word.shiftL(25);\r\n       */\n      // shiftL: function (n) {\n      // if (n < 32) {\n      // var high = (this.high << n) | (this.low >>> (32 - n));\n      // var low = this.low << n;\n      // } else {\n      // var high = this.low << (n - 32);\n      // var low = 0;\n      // }\n      // return X64Word.create(high, low);\n      // },\n\n      /**\r\n       * Shifts this word n bits to the right.\r\n       *\r\n       * @param {number} n The number of bits to shift.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after shifting.\r\n       *\r\n       * @example\r\n       *\r\n       *     var shifted = x64Word.shiftR(7);\r\n       */\n      // shiftR: function (n) {\n      // if (n < 32) {\n      // var low = (this.low >>> n) | (this.high << (32 - n));\n      // var high = this.high >>> n;\n      // } else {\n      // var low = this.high >>> (n - 32);\n      // var high = 0;\n      // }\n      // return X64Word.create(high, low);\n      // },\n\n      /**\r\n       * Rotates this word n bits to the left.\r\n       *\r\n       * @param {number} n The number of bits to rotate.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after rotating.\r\n       *\r\n       * @example\r\n       *\r\n       *     var rotated = x64Word.rotL(25);\r\n       */\n      // rotL: function (n) {\n      // return this.shiftL(n).or(this.shiftR(64 - n));\n      // },\n\n      /**\r\n       * Rotates this word n bits to the right.\r\n       *\r\n       * @param {number} n The number of bits to rotate.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after rotating.\r\n       *\r\n       * @example\r\n       *\r\n       *     var rotated = x64Word.rotR(7);\r\n       */\n      // rotR: function (n) {\n      // return this.shiftR(n).or(this.shiftL(64 - n));\n      // },\n\n      /**\r\n       * Adds this word with the passed word.\r\n       *\r\n       * @param {X64Word} word The x64-Word to add with this word.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after adding.\r\n       *\r\n       * @example\r\n       *\r\n       *     var added = x64Word.add(anotherX64Word);\r\n       */\n      // add: function (word) {\n      // var low = (this.low + word.low) | 0;\n      // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n      // var high = (this.high + word.high + carry) | 0;\n      // return X64Word.create(high, low);\n      // }\n\n    });\n    /**\r\n     * An array of 64-bit words.\r\n     *\r\n     * @property {Array} words The array of CryptoJS.x64.Word objects.\r\n     * @property {number} sigBytes The number of significant bytes in this word array.\r\n     */\n\n    var X64WordArray = C_x64.WordArray = Base.extend({\n      /**\r\n       * Initializes a newly created word array.\r\n       *\r\n       * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\r\n       * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n       *\r\n       * @example\r\n       *\r\n       *     var wordArray = CryptoJS.x64.WordArray.create();\r\n       *\r\n       *     var wordArray = CryptoJS.x64.WordArray.create([\r\n       *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\r\n       *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\r\n       *     ]);\r\n       *\r\n       *     var wordArray = CryptoJS.x64.WordArray.create([\r\n       *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\r\n       *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\r\n       *     ], 10);\r\n       */\n      init: function (words, sigBytes) {\n        words = this.words = words || [];\n\n        if (sigBytes != undefined) {\n          this.sigBytes = sigBytes;\n        } else {\n          this.sigBytes = words.length * 8;\n        }\n      },\n\n      /**\r\n       * Converts this 64-bit word array to a 32-bit word array.\r\n       *\r\n       * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\r\n       *\r\n       * @example\r\n       *\r\n       *     var x32WordArray = x64WordArray.toX32();\r\n       */\n      toX32: function () {\n        // Shortcuts\n        var x64Words = this.words;\n        var x64WordsLength = x64Words.length; // Convert\n\n        var x32Words = [];\n\n        for (var i = 0; i < x64WordsLength; i++) {\n          var x64Word = x64Words[i];\n          x32Words.push(x64Word.high);\n          x32Words.push(x64Word.low);\n        }\n\n        return X32WordArray.create(x32Words, this.sigBytes);\n      },\n\n      /**\r\n       * Creates a copy of this word array.\r\n       *\r\n       * @return {X64WordArray} The clone.\r\n       *\r\n       * @example\r\n       *\r\n       *     var clone = x64WordArray.clone();\r\n       */\n      clone: function () {\n        var clone = Base.clone.call(this); // Clone \"words\" array\n\n        var words = clone.words = this.words.slice(0); // Clone each X64Word object\n\n        var wordsLength = words.length;\n\n        for (var i = 0; i < wordsLength; i++) {\n          words[i] = words[i].clone();\n        }\n\n        return clone;\n      }\n    });\n  })();\n\n  return CryptoJS;\n});","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/crypto-js/x64-core.js"],"names":["root","factory","exports","module","require","define","amd","CryptoJS","undefined","C","C_lib","lib","Base","X32WordArray","WordArray","C_x64","x64","X64Word","Word","extend","init","high","low","X64WordArray","words","sigBytes","length","toX32","x64Words","x64WordsLength","x32Words","i","x64Word","push","create","clone","call","slice","wordsLength"],"mappings":"AAAA;;AAAE,WAAUA,IAAV,EAAgBC,OAAhB,EAAyB;AAC1B,MAAI,OAAOC,OAAP,KAAmB,QAAvB,EAAiC;AAChC;AACAC,IAAAA,MAAM,CAACD,OAAP,GAAiBA,OAAO,GAAGD,OAAO,CAACG,OAAO,CAAC,QAAD,CAAR,CAAlC;AACA,GAHD,MAIK,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AACpD;AACAD,IAAAA,MAAM,CAAC,CAAC,QAAD,CAAD,EAAaJ,OAAb,CAAN;AACA,GAHI,MAIA;AACJ;AACAA,IAAAA,OAAO,CAACD,IAAI,CAACO,QAAN,CAAP;AACA;AACD,CAbC,EAaA,IAbA,EAaM,UAAUA,QAAV,EAAoB;AAE1B,aAAUC,SAAV,EAAqB;AAClB;AACA,QAAIC,CAAC,GAAGF,QAAR;AACA,QAAIG,KAAK,GAAGD,CAAC,CAACE,GAAd;AACA,QAAIC,IAAI,GAAGF,KAAK,CAACE,IAAjB;AACA,QAAIC,YAAY,GAAGH,KAAK,CAACI,SAAzB;AAEA;AACL;AACA;;AACK,QAAIC,KAAK,GAAGN,CAAC,CAACO,GAAF,GAAQ,EAApB;AAEA;AACL;AACA;;AACK,QAAIC,OAAO,GAAGF,KAAK,CAACG,IAAN,GAAaN,IAAI,CAACO,MAAL,CAAY;AACnC;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACSC,MAAAA,IAAI,EAAE,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AACvB,aAAKD,IAAL,GAAYA,IAAZ;AACA,aAAKC,GAAL,GAAWA,GAAX;AACH;AAED;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS;AACI;AACA;AAEA;AACJ;;AAEA;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS;AACI;AACA;AAEA;AACJ;;AAEA;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS;AACI;AACA;AAEA;AACJ;;AAEA;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS;AACI;AACA;AAEA;AACJ;;AAEA;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS;AACI;AACI;AACA;AACJ;AACI;AACA;AACJ;AAEA;AACJ;;AAEA;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS;AACI;AACI;AACA;AACJ;AACI;AACA;AACJ;AAEA;AACJ;;AAEA;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS;AACI;AACJ;;AAEA;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS;AACI;AACJ;;AAEA;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS;AACI;AACA;AACA;AAEA;AACJ;;AAnLmC,KAAZ,CAA3B;AAsLA;AACL;AACA;AACA;AACA;AACA;;AACK,QAAIC,YAAY,GAAGR,KAAK,CAACD,SAAN,GAAkBF,IAAI,CAACO,MAAL,CAAY;AAC7C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACSC,MAAAA,IAAI,EAAE,UAAUI,KAAV,EAAiBC,QAAjB,EAA2B;AAC7BD,QAAAA,KAAK,GAAG,KAAKA,KAAL,GAAaA,KAAK,IAAI,EAA9B;;AAEA,YAAIC,QAAQ,IAAIjB,SAAhB,EAA2B;AACvB,eAAKiB,QAAL,GAAgBA,QAAhB;AACH,SAFD,MAEO;AACH,eAAKA,QAAL,GAAgBD,KAAK,CAACE,MAAN,GAAe,CAA/B;AACH;AACJ,OA7B4C;;AA+B7C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACSC,MAAAA,KAAK,EAAE,YAAY;AACf;AACA,YAAIC,QAAQ,GAAG,KAAKJ,KAApB;AACA,YAAIK,cAAc,GAAGD,QAAQ,CAACF,MAA9B,CAHe,CAKf;;AACA,YAAII,QAAQ,GAAG,EAAf;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAApB,EAAoCE,CAAC,EAArC,EAAyC;AACrC,cAAIC,OAAO,GAAGJ,QAAQ,CAACG,CAAD,CAAtB;AACAD,UAAAA,QAAQ,CAACG,IAAT,CAAcD,OAAO,CAACX,IAAtB;AACAS,UAAAA,QAAQ,CAACG,IAAT,CAAcD,OAAO,CAACV,GAAtB;AACH;;AAED,eAAOT,YAAY,CAACqB,MAAb,CAAoBJ,QAApB,EAA8B,KAAKL,QAAnC,CAAP;AACH,OAtD4C;;AAwD7C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACSU,MAAAA,KAAK,EAAE,YAAY;AACf,YAAIA,KAAK,GAAGvB,IAAI,CAACuB,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAZ,CADe,CAGf;;AACA,YAAIZ,KAAK,GAAGW,KAAK,CAACX,KAAN,GAAc,KAAKA,KAAL,CAAWa,KAAX,CAAiB,CAAjB,CAA1B,CAJe,CAMf;;AACA,YAAIC,WAAW,GAAGd,KAAK,CAACE,MAAxB;;AACA,aAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,WAApB,EAAiCP,CAAC,EAAlC,EAAsC;AAClCP,UAAAA,KAAK,CAACO,CAAD,CAAL,GAAWP,KAAK,CAACO,CAAD,CAAL,CAASI,KAAT,EAAX;AACH;;AAED,eAAOA,KAAP;AACH;AA9E4C,KAAZ,CAArC;AAgFH,GA3RA,GAAD;;AA8RA,SAAO5B,QAAP;AAEA,CA/SC,CAAD","sourcesContent":[";(function (root, factory) {\r\n\tif (typeof exports === \"object\") {\r\n\t\t// CommonJS\r\n\t\tmodule.exports = exports = factory(require(\"./core\"));\r\n\t}\r\n\telse if (typeof define === \"function\" && define.amd) {\r\n\t\t// AMD\r\n\t\tdefine([\"./core\"], factory);\r\n\t}\r\n\telse {\r\n\t\t// Global (browser)\r\n\t\tfactory(root.CryptoJS);\r\n\t}\r\n}(this, function (CryptoJS) {\r\n\r\n\t(function (undefined) {\r\n\t    // Shortcuts\r\n\t    var C = CryptoJS;\r\n\t    var C_lib = C.lib;\r\n\t    var Base = C_lib.Base;\r\n\t    var X32WordArray = C_lib.WordArray;\r\n\r\n\t    /**\r\n\t     * x64 namespace.\r\n\t     */\r\n\t    var C_x64 = C.x64 = {};\r\n\r\n\t    /**\r\n\t     * A 64-bit word.\r\n\t     */\r\n\t    var X64Word = C_x64.Word = Base.extend({\r\n\t        /**\r\n\t         * Initializes a newly created 64-bit word.\r\n\t         *\r\n\t         * @param {number} high The high 32 bits.\r\n\t         * @param {number} low The low 32 bits.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\r\n\t         */\r\n\t        init: function (high, low) {\r\n\t            this.high = high;\r\n\t            this.low = low;\r\n\t        }\r\n\r\n\t        /**\r\n\t         * Bitwise NOTs this word.\r\n\t         *\r\n\t         * @return {X64Word} A new x64-Word object after negating.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var negated = x64Word.not();\r\n\t         */\r\n\t        // not: function () {\r\n\t            // var high = ~this.high;\r\n\t            // var low = ~this.low;\r\n\r\n\t            // return X64Word.create(high, low);\r\n\t        // },\r\n\r\n\t        /**\r\n\t         * Bitwise ANDs this word with the passed word.\r\n\t         *\r\n\t         * @param {X64Word} word The x64-Word to AND with this word.\r\n\t         *\r\n\t         * @return {X64Word} A new x64-Word object after ANDing.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var anded = x64Word.and(anotherX64Word);\r\n\t         */\r\n\t        // and: function (word) {\r\n\t            // var high = this.high & word.high;\r\n\t            // var low = this.low & word.low;\r\n\r\n\t            // return X64Word.create(high, low);\r\n\t        // },\r\n\r\n\t        /**\r\n\t         * Bitwise ORs this word with the passed word.\r\n\t         *\r\n\t         * @param {X64Word} word The x64-Word to OR with this word.\r\n\t         *\r\n\t         * @return {X64Word} A new x64-Word object after ORing.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var ored = x64Word.or(anotherX64Word);\r\n\t         */\r\n\t        // or: function (word) {\r\n\t            // var high = this.high | word.high;\r\n\t            // var low = this.low | word.low;\r\n\r\n\t            // return X64Word.create(high, low);\r\n\t        // },\r\n\r\n\t        /**\r\n\t         * Bitwise XORs this word with the passed word.\r\n\t         *\r\n\t         * @param {X64Word} word The x64-Word to XOR with this word.\r\n\t         *\r\n\t         * @return {X64Word} A new x64-Word object after XORing.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var xored = x64Word.xor(anotherX64Word);\r\n\t         */\r\n\t        // xor: function (word) {\r\n\t            // var high = this.high ^ word.high;\r\n\t            // var low = this.low ^ word.low;\r\n\r\n\t            // return X64Word.create(high, low);\r\n\t        // },\r\n\r\n\t        /**\r\n\t         * Shifts this word n bits to the left.\r\n\t         *\r\n\t         * @param {number} n The number of bits to shift.\r\n\t         *\r\n\t         * @return {X64Word} A new x64-Word object after shifting.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var shifted = x64Word.shiftL(25);\r\n\t         */\r\n\t        // shiftL: function (n) {\r\n\t            // if (n < 32) {\r\n\t                // var high = (this.high << n) | (this.low >>> (32 - n));\r\n\t                // var low = this.low << n;\r\n\t            // } else {\r\n\t                // var high = this.low << (n - 32);\r\n\t                // var low = 0;\r\n\t            // }\r\n\r\n\t            // return X64Word.create(high, low);\r\n\t        // },\r\n\r\n\t        /**\r\n\t         * Shifts this word n bits to the right.\r\n\t         *\r\n\t         * @param {number} n The number of bits to shift.\r\n\t         *\r\n\t         * @return {X64Word} A new x64-Word object after shifting.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var shifted = x64Word.shiftR(7);\r\n\t         */\r\n\t        // shiftR: function (n) {\r\n\t            // if (n < 32) {\r\n\t                // var low = (this.low >>> n) | (this.high << (32 - n));\r\n\t                // var high = this.high >>> n;\r\n\t            // } else {\r\n\t                // var low = this.high >>> (n - 32);\r\n\t                // var high = 0;\r\n\t            // }\r\n\r\n\t            // return X64Word.create(high, low);\r\n\t        // },\r\n\r\n\t        /**\r\n\t         * Rotates this word n bits to the left.\r\n\t         *\r\n\t         * @param {number} n The number of bits to rotate.\r\n\t         *\r\n\t         * @return {X64Word} A new x64-Word object after rotating.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var rotated = x64Word.rotL(25);\r\n\t         */\r\n\t        // rotL: function (n) {\r\n\t            // return this.shiftL(n).or(this.shiftR(64 - n));\r\n\t        // },\r\n\r\n\t        /**\r\n\t         * Rotates this word n bits to the right.\r\n\t         *\r\n\t         * @param {number} n The number of bits to rotate.\r\n\t         *\r\n\t         * @return {X64Word} A new x64-Word object after rotating.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var rotated = x64Word.rotR(7);\r\n\t         */\r\n\t        // rotR: function (n) {\r\n\t            // return this.shiftR(n).or(this.shiftL(64 - n));\r\n\t        // },\r\n\r\n\t        /**\r\n\t         * Adds this word with the passed word.\r\n\t         *\r\n\t         * @param {X64Word} word The x64-Word to add with this word.\r\n\t         *\r\n\t         * @return {X64Word} A new x64-Word object after adding.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var added = x64Word.add(anotherX64Word);\r\n\t         */\r\n\t        // add: function (word) {\r\n\t            // var low = (this.low + word.low) | 0;\r\n\t            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\r\n\t            // var high = (this.high + word.high + carry) | 0;\r\n\r\n\t            // return X64Word.create(high, low);\r\n\t        // }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * An array of 64-bit words.\r\n\t     *\r\n\t     * @property {Array} words The array of CryptoJS.x64.Word objects.\r\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\r\n\t     */\r\n\t    var X64WordArray = C_x64.WordArray = Base.extend({\r\n\t        /**\r\n\t         * Initializes a newly created word array.\r\n\t         *\r\n\t         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\r\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var wordArray = CryptoJS.x64.WordArray.create();\r\n\t         *\r\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\r\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\r\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\r\n\t         *     ]);\r\n\t         *\r\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\r\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\r\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\r\n\t         *     ], 10);\r\n\t         */\r\n\t        init: function (words, sigBytes) {\r\n\t            words = this.words = words || [];\r\n\r\n\t            if (sigBytes != undefined) {\r\n\t                this.sigBytes = sigBytes;\r\n\t            } else {\r\n\t                this.sigBytes = words.length * 8;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Converts this 64-bit word array to a 32-bit word array.\r\n\t         *\r\n\t         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var x32WordArray = x64WordArray.toX32();\r\n\t         */\r\n\t        toX32: function () {\r\n\t            // Shortcuts\r\n\t            var x64Words = this.words;\r\n\t            var x64WordsLength = x64Words.length;\r\n\r\n\t            // Convert\r\n\t            var x32Words = [];\r\n\t            for (var i = 0; i < x64WordsLength; i++) {\r\n\t                var x64Word = x64Words[i];\r\n\t                x32Words.push(x64Word.high);\r\n\t                x32Words.push(x64Word.low);\r\n\t            }\r\n\r\n\t            return X32WordArray.create(x32Words, this.sigBytes);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Creates a copy of this word array.\r\n\t         *\r\n\t         * @return {X64WordArray} The clone.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var clone = x64WordArray.clone();\r\n\t         */\r\n\t        clone: function () {\r\n\t            var clone = Base.clone.call(this);\r\n\r\n\t            // Clone \"words\" array\r\n\t            var words = clone.words = this.words.slice(0);\r\n\r\n\t            // Clone each X64Word object\r\n\t            var wordsLength = words.length;\r\n\t            for (var i = 0; i < wordsLength; i++) {\r\n\t                words[i] = words[i].clone();\r\n\t            }\r\n\r\n\t            return clone;\r\n\t        }\r\n\t    });\r\n\t}());\r\n\r\n\r\n\treturn CryptoJS;\r\n\r\n}));"]},"metadata":{},"sourceType":"script"}