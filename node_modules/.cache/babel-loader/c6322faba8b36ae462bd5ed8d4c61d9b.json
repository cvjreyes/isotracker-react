{"ast":null,"code":"var openParentheses = \"(\".charCodeAt(0);\nvar closeParentheses = \")\".charCodeAt(0);\nvar singleQuote = \"'\".charCodeAt(0);\nvar doubleQuote = '\"'.charCodeAt(0);\nvar backslash = \"\\\\\".charCodeAt(0);\nvar slash = \"/\".charCodeAt(0);\nvar comma = \",\".charCodeAt(0);\nvar colon = \":\".charCodeAt(0);\nvar star = \"*\".charCodeAt(0);\n\nmodule.exports = function (input) {\n  var tokens = [];\n  var value = input;\n  var next, quote, prev, token, escape, escapePos, whitespacePos;\n  var pos = 0;\n  var code = value.charCodeAt(pos);\n  var max = value.length;\n  var stack = [{\n    nodes: tokens\n  }];\n  var balanced = 0;\n  var parent;\n  var name = \"\";\n  var before = \"\";\n  var after = \"\";\n\n  while (pos < max) {\n    // Whitespaces\n    if (code <= 32) {\n      next = pos;\n\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n\n      token = value.slice(pos, next);\n      prev = tokens[tokens.length - 1];\n\n      if (code === closeParentheses && balanced) {\n        after = token;\n      } else if (prev && prev.type === \"div\") {\n        prev.after = token;\n      } else if (code === comma || code === colon || code === slash && value.charCodeAt(next + 1) !== star) {\n        before = token;\n      } else {\n        tokens.push({\n          type: \"space\",\n          sourceIndex: pos,\n          value: token\n        });\n      }\n\n      pos = next; // Quotes\n    } else if (code === singleQuote || code === doubleQuote) {\n      next = pos;\n      quote = code === singleQuote ? \"'\" : '\"';\n      token = {\n        type: \"string\",\n        sourceIndex: pos,\n        quote: quote\n      };\n\n      do {\n        escape = false;\n        next = value.indexOf(quote, next + 1);\n\n        if (~next) {\n          escapePos = next;\n\n          while (value.charCodeAt(escapePos - 1) === backslash) {\n            escapePos -= 1;\n            escape = !escape;\n          }\n        } else {\n          value += quote;\n          next = value.length - 1;\n          token.unclosed = true;\n        }\n      } while (escape);\n\n      token.value = value.slice(pos + 1, next);\n      tokens.push(token);\n      pos = next + 1;\n      code = value.charCodeAt(pos); // Comments\n    } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n      token = {\n        type: \"comment\",\n        sourceIndex: pos\n      };\n      next = value.indexOf(\"*/\", pos);\n\n      if (next === -1) {\n        token.unclosed = true;\n        next = value.length;\n      }\n\n      token.value = value.slice(pos + 2, next);\n      tokens.push(token);\n      pos = next + 2;\n      code = value.charCodeAt(pos); // Dividers\n    } else if (code === slash || code === comma || code === colon) {\n      token = value[pos];\n      tokens.push({\n        type: \"div\",\n        sourceIndex: pos - before.length,\n        value: token,\n        before: before,\n        after: \"\"\n      });\n      before = \"\";\n      pos += 1;\n      code = value.charCodeAt(pos); // Open parentheses\n    } else if (openParentheses === code) {\n      // Whitespaces after open parentheses\n      next = pos;\n\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n\n      token = {\n        type: \"function\",\n        sourceIndex: pos - name.length,\n        value: name,\n        before: value.slice(pos + 1, next)\n      };\n      pos = next;\n\n      if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n        next -= 1;\n\n        do {\n          escape = false;\n          next = value.indexOf(\")\", next + 1);\n\n          if (~next) {\n            escapePos = next;\n\n            while (value.charCodeAt(escapePos - 1) === backslash) {\n              escapePos -= 1;\n              escape = !escape;\n            }\n          } else {\n            value += \")\";\n            next = value.length - 1;\n            token.unclosed = true;\n          }\n        } while (escape); // Whitespaces before closed\n\n\n        whitespacePos = next;\n\n        do {\n          whitespacePos -= 1;\n          code = value.charCodeAt(whitespacePos);\n        } while (code <= 32);\n\n        if (pos !== whitespacePos + 1) {\n          token.nodes = [{\n            type: \"word\",\n            sourceIndex: pos,\n            value: value.slice(pos, whitespacePos + 1)\n          }];\n        } else {\n          token.nodes = [];\n        }\n\n        if (token.unclosed && whitespacePos + 1 !== next) {\n          token.after = \"\";\n          token.nodes.push({\n            type: \"space\",\n            sourceIndex: whitespacePos + 1,\n            value: value.slice(whitespacePos + 1, next)\n          });\n        } else {\n          token.after = value.slice(whitespacePos + 1, next);\n        }\n\n        pos = next + 1;\n        code = value.charCodeAt(pos);\n        tokens.push(token);\n      } else {\n        balanced += 1;\n        token.after = \"\";\n        tokens.push(token);\n        stack.push(token);\n        tokens = token.nodes = [];\n        parent = token;\n      }\n\n      name = \"\"; // Close parentheses\n    } else if (closeParentheses === code && balanced) {\n      pos += 1;\n      code = value.charCodeAt(pos);\n      parent.after = after;\n      after = \"\";\n      balanced -= 1;\n      stack.pop();\n      parent = stack[balanced];\n      tokens = parent.nodes; // Words\n    } else {\n      next = pos;\n\n      do {\n        if (code === backslash) {\n          next += 1;\n        }\n\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (next < max && !(code <= 32 || code === singleQuote || code === doubleQuote || code === comma || code === colon || code === slash || code === openParentheses || code === closeParentheses && balanced));\n\n      token = value.slice(pos, next);\n\n      if (openParentheses === code) {\n        name = token;\n      } else {\n        tokens.push({\n          type: \"word\",\n          sourceIndex: pos,\n          value: token\n        });\n      }\n\n      pos = next;\n    }\n  }\n\n  for (pos = stack.length - 1; pos; pos -= 1) {\n    stack[pos].unclosed = true;\n  }\n\n  return stack[0].nodes;\n};","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/reduce-css-calc/node_modules/postcss-value-parser/lib/parse.js"],"names":["openParentheses","charCodeAt","closeParentheses","singleQuote","doubleQuote","backslash","slash","comma","colon","star","module","exports","input","tokens","value","next","quote","prev","token","escape","escapePos","whitespacePos","pos","code","max","length","stack","nodes","balanced","parent","name","before","after","slice","type","push","sourceIndex","indexOf","unclosed","pop"],"mappings":"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","sourcesContent":["var openParentheses = \"(\".charCodeAt(0);\r\nvar closeParentheses = \")\".charCodeAt(0);\r\nvar singleQuote = \"'\".charCodeAt(0);\r\nvar doubleQuote = '\"'.charCodeAt(0);\r\nvar backslash = \"\\\\\".charCodeAt(0);\r\nvar slash = \"/\".charCodeAt(0);\r\nvar comma = \",\".charCodeAt(0);\r\nvar colon = \":\".charCodeAt(0);\r\nvar star = \"*\".charCodeAt(0);\r\n\r\nmodule.exports = function(input) {\r\n  var tokens = [];\r\n  var value = input;\r\n\r\n  var next, quote, prev, token, escape, escapePos, whitespacePos;\r\n  var pos = 0;\r\n  var code = value.charCodeAt(pos);\r\n  var max = value.length;\r\n  var stack = [{ nodes: tokens }];\r\n  var balanced = 0;\r\n  var parent;\r\n\r\n  var name = \"\";\r\n  var before = \"\";\r\n  var after = \"\";\r\n\r\n  while (pos < max) {\r\n    // Whitespaces\r\n    if (code <= 32) {\r\n      next = pos;\r\n      do {\r\n        next += 1;\r\n        code = value.charCodeAt(next);\r\n      } while (code <= 32);\r\n      token = value.slice(pos, next);\r\n\r\n      prev = tokens[tokens.length - 1];\r\n      if (code === closeParentheses && balanced) {\r\n        after = token;\r\n      } else if (prev && prev.type === \"div\") {\r\n        prev.after = token;\r\n      } else if (\r\n        code === comma ||\r\n        code === colon ||\r\n        (code === slash && value.charCodeAt(next + 1) !== star)\r\n      ) {\r\n        before = token;\r\n      } else {\r\n        tokens.push({\r\n          type: \"space\",\r\n          sourceIndex: pos,\r\n          value: token\r\n        });\r\n      }\r\n\r\n      pos = next;\r\n\r\n      // Quotes\r\n    } else if (code === singleQuote || code === doubleQuote) {\r\n      next = pos;\r\n      quote = code === singleQuote ? \"'\" : '\"';\r\n      token = {\r\n        type: \"string\",\r\n        sourceIndex: pos,\r\n        quote: quote\r\n      };\r\n      do {\r\n        escape = false;\r\n        next = value.indexOf(quote, next + 1);\r\n        if (~next) {\r\n          escapePos = next;\r\n          while (value.charCodeAt(escapePos - 1) === backslash) {\r\n            escapePos -= 1;\r\n            escape = !escape;\r\n          }\r\n        } else {\r\n          value += quote;\r\n          next = value.length - 1;\r\n          token.unclosed = true;\r\n        }\r\n      } while (escape);\r\n      token.value = value.slice(pos + 1, next);\r\n\r\n      tokens.push(token);\r\n      pos = next + 1;\r\n      code = value.charCodeAt(pos);\r\n\r\n      // Comments\r\n    } else if (code === slash && value.charCodeAt(pos + 1) === star) {\r\n      token = {\r\n        type: \"comment\",\r\n        sourceIndex: pos\r\n      };\r\n\r\n      next = value.indexOf(\"*/\", pos);\r\n      if (next === -1) {\r\n        token.unclosed = true;\r\n        next = value.length;\r\n      }\r\n\r\n      token.value = value.slice(pos + 2, next);\r\n      tokens.push(token);\r\n\r\n      pos = next + 2;\r\n      code = value.charCodeAt(pos);\r\n\r\n      // Dividers\r\n    } else if (code === slash || code === comma || code === colon) {\r\n      token = value[pos];\r\n\r\n      tokens.push({\r\n        type: \"div\",\r\n        sourceIndex: pos - before.length,\r\n        value: token,\r\n        before: before,\r\n        after: \"\"\r\n      });\r\n      before = \"\";\r\n\r\n      pos += 1;\r\n      code = value.charCodeAt(pos);\r\n\r\n      // Open parentheses\r\n    } else if (openParentheses === code) {\r\n      // Whitespaces after open parentheses\r\n      next = pos;\r\n      do {\r\n        next += 1;\r\n        code = value.charCodeAt(next);\r\n      } while (code <= 32);\r\n      token = {\r\n        type: \"function\",\r\n        sourceIndex: pos - name.length,\r\n        value: name,\r\n        before: value.slice(pos + 1, next)\r\n      };\r\n      pos = next;\r\n\r\n      if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\r\n        next -= 1;\r\n        do {\r\n          escape = false;\r\n          next = value.indexOf(\")\", next + 1);\r\n          if (~next) {\r\n            escapePos = next;\r\n            while (value.charCodeAt(escapePos - 1) === backslash) {\r\n              escapePos -= 1;\r\n              escape = !escape;\r\n            }\r\n          } else {\r\n            value += \")\";\r\n            next = value.length - 1;\r\n            token.unclosed = true;\r\n          }\r\n        } while (escape);\r\n        // Whitespaces before closed\r\n        whitespacePos = next;\r\n        do {\r\n          whitespacePos -= 1;\r\n          code = value.charCodeAt(whitespacePos);\r\n        } while (code <= 32);\r\n        if (pos !== whitespacePos + 1) {\r\n          token.nodes = [\r\n            {\r\n              type: \"word\",\r\n              sourceIndex: pos,\r\n              value: value.slice(pos, whitespacePos + 1)\r\n            }\r\n          ];\r\n        } else {\r\n          token.nodes = [];\r\n        }\r\n        if (token.unclosed && whitespacePos + 1 !== next) {\r\n          token.after = \"\";\r\n          token.nodes.push({\r\n            type: \"space\",\r\n            sourceIndex: whitespacePos + 1,\r\n            value: value.slice(whitespacePos + 1, next)\r\n          });\r\n        } else {\r\n          token.after = value.slice(whitespacePos + 1, next);\r\n        }\r\n        pos = next + 1;\r\n        code = value.charCodeAt(pos);\r\n        tokens.push(token);\r\n      } else {\r\n        balanced += 1;\r\n        token.after = \"\";\r\n        tokens.push(token);\r\n        stack.push(token);\r\n        tokens = token.nodes = [];\r\n        parent = token;\r\n      }\r\n      name = \"\";\r\n\r\n      // Close parentheses\r\n    } else if (closeParentheses === code && balanced) {\r\n      pos += 1;\r\n      code = value.charCodeAt(pos);\r\n\r\n      parent.after = after;\r\n      after = \"\";\r\n      balanced -= 1;\r\n      stack.pop();\r\n      parent = stack[balanced];\r\n      tokens = parent.nodes;\r\n\r\n      // Words\r\n    } else {\r\n      next = pos;\r\n      do {\r\n        if (code === backslash) {\r\n          next += 1;\r\n        }\r\n        next += 1;\r\n        code = value.charCodeAt(next);\r\n      } while (\r\n        next < max &&\r\n        !(\r\n          code <= 32 ||\r\n          code === singleQuote ||\r\n          code === doubleQuote ||\r\n          code === comma ||\r\n          code === colon ||\r\n          code === slash ||\r\n          code === openParentheses ||\r\n          (code === closeParentheses && balanced)\r\n        )\r\n      );\r\n      token = value.slice(pos, next);\r\n\r\n      if (openParentheses === code) {\r\n        name = token;\r\n      } else {\r\n        tokens.push({\r\n          type: \"word\",\r\n          sourceIndex: pos,\r\n          value: token\r\n        });\r\n      }\r\n\r\n      pos = next;\r\n    }\r\n  }\r\n\r\n  for (pos = stack.length - 1; pos; pos -= 1) {\r\n    stack[pos].unclosed = true;\r\n  }\r\n\r\n  return stack[0].nodes;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}