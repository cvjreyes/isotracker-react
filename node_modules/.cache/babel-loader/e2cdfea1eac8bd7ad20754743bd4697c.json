{"ast":null,"code":"import { arrayReduce } from \"./array.mjs\";\n/**\r\n * Checks if given variable is function.\r\n *\r\n * @param {*} func Variable to check.\r\n * @returns {boolean}\r\n */\n\nexport function isFunction(func) {\n  return typeof func === 'function';\n}\n/**\r\n * Creates throttle function that enforces a maximum number of times a function (`func`) can be called over time (`wait`).\r\n *\r\n * @param {Function} func Function to invoke.\r\n * @param {number} wait Delay in miliseconds.\r\n * @returns {Function}\r\n */\n\nexport function throttle(func) {\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  var lastCalled = 0;\n  var result = {\n    lastCallThrottled: true\n  };\n  var lastTimer = null;\n  /**\r\n   * @param {...*} args The list of arguments passed during the function invocation.\r\n   * @returns {object}\r\n   */\n\n  function _throttle() {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var stamp = Date.now();\n    var needCall = false;\n    result.lastCallThrottled = true;\n\n    if (!lastCalled) {\n      lastCalled = stamp;\n      needCall = true;\n    }\n\n    var remaining = wait - (stamp - lastCalled);\n\n    if (needCall) {\n      result.lastCallThrottled = false;\n      func.apply(this, args);\n    } else {\n      if (lastTimer) {\n        clearTimeout(lastTimer);\n      }\n\n      lastTimer = setTimeout(function () {\n        result.lastCallThrottled = false;\n        func.apply(_this, args);\n        lastCalled = 0;\n        lastTimer = void 0;\n      }, remaining);\n    }\n\n    return result;\n  }\n\n  return _throttle;\n}\n/**\r\n * Creates throttle function that enforces a maximum number of times a function (`func`) can be called over\r\n * time (`wait`) after specified hits.\r\n *\r\n * @param {Function} func Function to invoke.\r\n * @param {number} wait Delay in miliseconds.\r\n * @param {number} hits Number of hits after throttling will be applied.\r\n * @returns {Function}\r\n */\n\nexport function throttleAfterHits(func) {\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  var hits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n  var funcThrottle = throttle(func, wait);\n  var remainHits = hits;\n  /**\r\n   *\r\n   */\n\n  function _clearHits() {\n    remainHits = hits;\n  }\n  /**\r\n   * @param {*} args The list of arguments passed during the function invocation.\r\n   * @returns {*}\r\n   */\n\n\n  function _throttleAfterHits() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (remainHits) {\n      remainHits -= 1;\n      return func.apply(this, args);\n    }\n\n    return funcThrottle.apply(this, args);\n  }\n\n  _throttleAfterHits.clearHits = _clearHits;\n  return _throttleAfterHits;\n}\n/**\r\n * Creates debounce function that enforces a function (`func`) not be called again until a certain amount of time (`wait`)\r\n * has passed without it being called.\r\n *\r\n * @param {Function} func Function to invoke.\r\n * @param {number} wait Delay in milliseconds.\r\n * @returns {Function}\r\n */\n\nexport function debounce(func) {\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  var lastTimer = null;\n  var result;\n  /**\r\n   * @param {*} args The list of arguments passed during the function invocation.\r\n   * @returns {*}\r\n   */\n\n  function _debounce() {\n    var _this2 = this;\n\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    if (lastTimer) {\n      clearTimeout(lastTimer);\n    }\n\n    lastTimer = setTimeout(function () {\n      result = func.apply(_this2, args);\n    }, wait);\n    return result;\n  }\n\n  return _debounce;\n}\n/**\r\n * Creates the function that returns the result of calling the given functions. Result of the first function is passed to\r\n * the second as an argument and so on. Only first function in the chain can handle multiple arguments.\r\n *\r\n * @param {Function} functions Functions to compose.\r\n * @returns {Function}\r\n */\n\nexport function pipe() {\n  for (var _len4 = arguments.length, functions = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    functions[_key4] = arguments[_key4];\n  }\n\n  var firstFunc = functions[0],\n      restFunc = functions.slice(1);\n  return function _pipe() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    return arrayReduce(restFunc, function (acc, fn) {\n      return fn(acc);\n    }, firstFunc.apply(this, args));\n  };\n}\n/**\r\n * Creates the function that returns the function with cached arguments.\r\n *\r\n * @param {Function} func Function to partialization.\r\n * @param {Array} params Function arguments to cache.\r\n * @returns {Function}\r\n */\n\nexport function partial(func) {\n  for (var _len6 = arguments.length, params = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    params[_key6 - 1] = arguments[_key6];\n  }\n\n  return function _partial() {\n    for (var _len7 = arguments.length, restParams = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      restParams[_key7] = arguments[_key7];\n    }\n\n    return func.apply(this, params.concat(restParams));\n  };\n}\n/**\r\n * Creates the functions that returns the function with cached arguments. If count if passed arguments will be matched\r\n * to the arguments defined in `func` then function will be invoked.\r\n * Arguments are added to the stack in direction from the left to the right.\r\n *\r\n * @example\r\n * ```\r\n * var replace = curry(function(find, replace, string) {\r\n *   return string.replace(find, replace);\r\n * });\r\n *\r\n * // returns function with bounded first argument\r\n * var replace = replace('foo')\r\n *\r\n * // returns replaced string - all arguments was passed so function was invoked\r\n * replace('bar', 'Some test with foo...');\r\n *\r\n * ```\r\n *\r\n * @param {Function} func Function to currying.\r\n * @returns {Function}\r\n */\n\nexport function curry(func) {\n  var argsLength = func.length;\n  /**\r\n   * @param {*} argsSoFar The list of arguments passed during the function invocation.\r\n   * @returns {Function}\r\n   */\n\n  function given(argsSoFar) {\n    return function _curry() {\n      for (var _len8 = arguments.length, params = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        params[_key8] = arguments[_key8];\n      }\n\n      var passedArgsSoFar = argsSoFar.concat(params);\n      var result;\n\n      if (passedArgsSoFar.length >= argsLength) {\n        result = func.apply(this, passedArgsSoFar);\n      } else {\n        result = given(passedArgsSoFar);\n      }\n\n      return result;\n    };\n  }\n\n  return given([]);\n}\n/**\r\n * Creates the functions that returns the function with cached arguments. If count if passed arguments will be matched\r\n * to the arguments defined in `func` then function will be invoked.\r\n * Arguments are added to the stack in direction from the right to the left.\r\n *\r\n * @example\r\n * ```\r\n * var replace = curry(function(find, replace, string) {\r\n *   return string.replace(find, replace);\r\n * });\r\n *\r\n * // returns function with bounded first argument\r\n * var replace = replace('Some test with foo...')\r\n *\r\n * // returns replaced string - all arguments was passed so function was invoked\r\n * replace('bar', 'foo');\r\n *\r\n * ```\r\n *\r\n * @param {Function} func Function to currying.\r\n * @returns {Function}\r\n */\n\nexport function curryRight(func) {\n  var argsLength = func.length;\n  /**\r\n   * @param {*} argsSoFar The list of arguments passed during the function invocation.\r\n   * @returns {Function}\r\n   */\n\n  function given(argsSoFar) {\n    return function _curry() {\n      for (var _len9 = arguments.length, params = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        params[_key9] = arguments[_key9];\n      }\n\n      var passedArgsSoFar = argsSoFar.concat(params.reverse());\n      var result;\n\n      if (passedArgsSoFar.length >= argsLength) {\n        result = func.apply(this, passedArgsSoFar);\n      } else {\n        result = given(passedArgsSoFar);\n      }\n\n      return result;\n    };\n  }\n\n  return given([]);\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/helpers/function.mjs"],"names":["arrayReduce","isFunction","func","throttle","wait","arguments","length","undefined","lastCalled","result","lastCallThrottled","lastTimer","_throttle","_this","_len","args","Array","_key","stamp","Date","now","needCall","remaining","apply","clearTimeout","setTimeout","throttleAfterHits","hits","funcThrottle","remainHits","_clearHits","_throttleAfterHits","_len2","_key2","clearHits","debounce","_debounce","_this2","_len3","_key3","pipe","_len4","functions","_key4","firstFunc","restFunc","slice","_pipe","_len5","_key5","acc","fn","partial","_len6","params","_key6","_partial","_len7","restParams","_key7","concat","curry","argsLength","given","argsSoFar","_curry","_len8","_key8","passedArgsSoFar","curryRight","_len9","_key9","reverse"],"mappings":"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","sourcesContent":["import \"core-js/modules/web.timers.js\";\r\nimport \"core-js/modules/es.array.slice.js\";\r\nimport \"core-js/modules/es.array.concat.js\";\r\nimport \"core-js/modules/es.array.reverse.js\";\r\nimport { arrayReduce } from \"./array.mjs\";\r\n/**\r\n * Checks if given variable is function.\r\n *\r\n * @param {*} func Variable to check.\r\n * @returns {boolean}\r\n */\r\n\r\nexport function isFunction(func) {\r\n  return typeof func === 'function';\r\n}\r\n/**\r\n * Creates throttle function that enforces a maximum number of times a function (`func`) can be called over time (`wait`).\r\n *\r\n * @param {Function} func Function to invoke.\r\n * @param {number} wait Delay in miliseconds.\r\n * @returns {Function}\r\n */\r\n\r\nexport function throttle(func) {\r\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\r\n  var lastCalled = 0;\r\n  var result = {\r\n    lastCallThrottled: true\r\n  };\r\n  var lastTimer = null;\r\n  /**\r\n   * @param {...*} args The list of arguments passed during the function invocation.\r\n   * @returns {object}\r\n   */\r\n\r\n  function _throttle() {\r\n    var _this = this;\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    var stamp = Date.now();\r\n    var needCall = false;\r\n    result.lastCallThrottled = true;\r\n\r\n    if (!lastCalled) {\r\n      lastCalled = stamp;\r\n      needCall = true;\r\n    }\r\n\r\n    var remaining = wait - (stamp - lastCalled);\r\n\r\n    if (needCall) {\r\n      result.lastCallThrottled = false;\r\n      func.apply(this, args);\r\n    } else {\r\n      if (lastTimer) {\r\n        clearTimeout(lastTimer);\r\n      }\r\n\r\n      lastTimer = setTimeout(function () {\r\n        result.lastCallThrottled = false;\r\n        func.apply(_this, args);\r\n        lastCalled = 0;\r\n        lastTimer = void 0;\r\n      }, remaining);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  return _throttle;\r\n}\r\n/**\r\n * Creates throttle function that enforces a maximum number of times a function (`func`) can be called over\r\n * time (`wait`) after specified hits.\r\n *\r\n * @param {Function} func Function to invoke.\r\n * @param {number} wait Delay in miliseconds.\r\n * @param {number} hits Number of hits after throttling will be applied.\r\n * @returns {Function}\r\n */\r\n\r\nexport function throttleAfterHits(func) {\r\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\r\n  var hits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\r\n  var funcThrottle = throttle(func, wait);\r\n  var remainHits = hits;\r\n  /**\r\n   *\r\n   */\r\n\r\n  function _clearHits() {\r\n    remainHits = hits;\r\n  }\r\n  /**\r\n   * @param {*} args The list of arguments passed during the function invocation.\r\n   * @returns {*}\r\n   */\r\n\r\n\r\n  function _throttleAfterHits() {\r\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n      args[_key2] = arguments[_key2];\r\n    }\r\n\r\n    if (remainHits) {\r\n      remainHits -= 1;\r\n      return func.apply(this, args);\r\n    }\r\n\r\n    return funcThrottle.apply(this, args);\r\n  }\r\n\r\n  _throttleAfterHits.clearHits = _clearHits;\r\n  return _throttleAfterHits;\r\n}\r\n/**\r\n * Creates debounce function that enforces a function (`func`) not be called again until a certain amount of time (`wait`)\r\n * has passed without it being called.\r\n *\r\n * @param {Function} func Function to invoke.\r\n * @param {number} wait Delay in milliseconds.\r\n * @returns {Function}\r\n */\r\n\r\nexport function debounce(func) {\r\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\r\n  var lastTimer = null;\r\n  var result;\r\n  /**\r\n   * @param {*} args The list of arguments passed during the function invocation.\r\n   * @returns {*}\r\n   */\r\n\r\n  function _debounce() {\r\n    var _this2 = this;\r\n\r\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\r\n      args[_key3] = arguments[_key3];\r\n    }\r\n\r\n    if (lastTimer) {\r\n      clearTimeout(lastTimer);\r\n    }\r\n\r\n    lastTimer = setTimeout(function () {\r\n      result = func.apply(_this2, args);\r\n    }, wait);\r\n    return result;\r\n  }\r\n\r\n  return _debounce;\r\n}\r\n/**\r\n * Creates the function that returns the result of calling the given functions. Result of the first function is passed to\r\n * the second as an argument and so on. Only first function in the chain can handle multiple arguments.\r\n *\r\n * @param {Function} functions Functions to compose.\r\n * @returns {Function}\r\n */\r\n\r\nexport function pipe() {\r\n  for (var _len4 = arguments.length, functions = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\r\n    functions[_key4] = arguments[_key4];\r\n  }\r\n\r\n  var firstFunc = functions[0],\r\n      restFunc = functions.slice(1);\r\n  return function _pipe() {\r\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\r\n      args[_key5] = arguments[_key5];\r\n    }\r\n\r\n    return arrayReduce(restFunc, function (acc, fn) {\r\n      return fn(acc);\r\n    }, firstFunc.apply(this, args));\r\n  };\r\n}\r\n/**\r\n * Creates the function that returns the function with cached arguments.\r\n *\r\n * @param {Function} func Function to partialization.\r\n * @param {Array} params Function arguments to cache.\r\n * @returns {Function}\r\n */\r\n\r\nexport function partial(func) {\r\n  for (var _len6 = arguments.length, params = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\r\n    params[_key6 - 1] = arguments[_key6];\r\n  }\r\n\r\n  return function _partial() {\r\n    for (var _len7 = arguments.length, restParams = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\r\n      restParams[_key7] = arguments[_key7];\r\n    }\r\n\r\n    return func.apply(this, params.concat(restParams));\r\n  };\r\n}\r\n/**\r\n * Creates the functions that returns the function with cached arguments. If count if passed arguments will be matched\r\n * to the arguments defined in `func` then function will be invoked.\r\n * Arguments are added to the stack in direction from the left to the right.\r\n *\r\n * @example\r\n * ```\r\n * var replace = curry(function(find, replace, string) {\r\n *   return string.replace(find, replace);\r\n * });\r\n *\r\n * // returns function with bounded first argument\r\n * var replace = replace('foo')\r\n *\r\n * // returns replaced string - all arguments was passed so function was invoked\r\n * replace('bar', 'Some test with foo...');\r\n *\r\n * ```\r\n *\r\n * @param {Function} func Function to currying.\r\n * @returns {Function}\r\n */\r\n\r\nexport function curry(func) {\r\n  var argsLength = func.length;\r\n  /**\r\n   * @param {*} argsSoFar The list of arguments passed during the function invocation.\r\n   * @returns {Function}\r\n   */\r\n\r\n  function given(argsSoFar) {\r\n    return function _curry() {\r\n      for (var _len8 = arguments.length, params = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\r\n        params[_key8] = arguments[_key8];\r\n      }\r\n\r\n      var passedArgsSoFar = argsSoFar.concat(params);\r\n      var result;\r\n\r\n      if (passedArgsSoFar.length >= argsLength) {\r\n        result = func.apply(this, passedArgsSoFar);\r\n      } else {\r\n        result = given(passedArgsSoFar);\r\n      }\r\n\r\n      return result;\r\n    };\r\n  }\r\n\r\n  return given([]);\r\n}\r\n/**\r\n * Creates the functions that returns the function with cached arguments. If count if passed arguments will be matched\r\n * to the arguments defined in `func` then function will be invoked.\r\n * Arguments are added to the stack in direction from the right to the left.\r\n *\r\n * @example\r\n * ```\r\n * var replace = curry(function(find, replace, string) {\r\n *   return string.replace(find, replace);\r\n * });\r\n *\r\n * // returns function with bounded first argument\r\n * var replace = replace('Some test with foo...')\r\n *\r\n * // returns replaced string - all arguments was passed so function was invoked\r\n * replace('bar', 'foo');\r\n *\r\n * ```\r\n *\r\n * @param {Function} func Function to currying.\r\n * @returns {Function}\r\n */\r\n\r\nexport function curryRight(func) {\r\n  var argsLength = func.length;\r\n  /**\r\n   * @param {*} argsSoFar The list of arguments passed during the function invocation.\r\n   * @returns {Function}\r\n   */\r\n\r\n  function given(argsSoFar) {\r\n    return function _curry() {\r\n      for (var _len9 = arguments.length, params = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\r\n        params[_key9] = arguments[_key9];\r\n      }\r\n\r\n      var passedArgsSoFar = argsSoFar.concat(params.reverse());\r\n      var result;\r\n\r\n      if (passedArgsSoFar.length >= argsLength) {\r\n        result = func.apply(this, passedArgsSoFar);\r\n      } else {\r\n        result = given(passedArgsSoFar);\r\n      }\r\n\r\n      return result;\r\n    };\r\n  }\r\n\r\n  return given([]);\r\n}"]},"metadata":{},"sourceType":"module"}