{"ast":null,"code":"import { arrayReduce } from \"../helpers/array.mjs\";\n/**\r\n * Tags a multiline string and return new one without line break characters and following spaces.\r\n *\r\n * @param {Array} strings Parts of the entire string without expressions.\r\n * @param {...string} expressions Expressions converted to strings, which are added to the entire string.\r\n * @returns {string}\r\n */\n\nexport function toSingleLine(strings) {\n  for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    expressions[_key - 1] = arguments[_key];\n  }\n\n  var result = arrayReduce(strings, function (previousValue, currentValue, index) {\n    var valueWithoutWhiteSpaces = currentValue.replace(/\\r?\\n\\s*/g, '');\n    var expressionForIndex = expressions[index] ? expressions[index] : '';\n    return previousValue + valueWithoutWhiteSpaces + expressionForIndex;\n  }, '');\n  return result.trim();\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/helpers/templateLiteralTag.mjs"],"names":["arrayReduce","toSingleLine","strings","_len","arguments","length","expressions","Array","_key","result","previousValue","currentValue","index","valueWithoutWhiteSpaces","replace","expressionForIndex","trim"],"mappings":"AAGA,SAASA,WAAT,QAA4B,sBAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;AACpC,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,WAAW,GAAG,IAAIC,KAAJ,CAAUJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAA3C,EAA+EK,IAAI,GAAG,CAA3F,EAA8FA,IAAI,GAAGL,IAArG,EAA2GK,IAAI,EAA/G,EAAmH;AACjHF,IAAAA,WAAW,CAACE,IAAI,GAAG,CAAR,CAAX,GAAwBJ,SAAS,CAACI,IAAD,CAAjC;AACD;;AAED,MAAIC,MAAM,GAAGT,WAAW,CAACE,OAAD,EAAU,UAAUQ,aAAV,EAAyBC,YAAzB,EAAuCC,KAAvC,EAA8C;AAC9E,QAAIC,uBAAuB,GAAGF,YAAY,CAACG,OAAb,CAAqB,WAArB,EAAkC,EAAlC,CAA9B;AACA,QAAIC,kBAAkB,GAAGT,WAAW,CAACM,KAAD,CAAX,GAAqBN,WAAW,CAACM,KAAD,CAAhC,GAA0C,EAAnE;AACA,WAAOF,aAAa,GAAGG,uBAAhB,GAA0CE,kBAAjD;AACD,GAJuB,EAIrB,EAJqB,CAAxB;AAKA,SAAON,MAAM,CAACO,IAAP,EAAP;AACD","sourcesContent":["import \"core-js/modules/es.regexp.exec.js\";\r\nimport \"core-js/modules/es.string.replace.js\";\r\nimport \"core-js/modules/es.string.trim.js\";\r\nimport { arrayReduce } from \"../helpers/array.mjs\";\r\n/**\r\n * Tags a multiline string and return new one without line break characters and following spaces.\r\n *\r\n * @param {Array} strings Parts of the entire string without expressions.\r\n * @param {...string} expressions Expressions converted to strings, which are added to the entire string.\r\n * @returns {string}\r\n */\r\n\r\nexport function toSingleLine(strings) {\r\n  for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n    expressions[_key - 1] = arguments[_key];\r\n  }\r\n\r\n  var result = arrayReduce(strings, function (previousValue, currentValue, index) {\r\n    var valueWithoutWhiteSpaces = currentValue.replace(/\\r?\\n\\s*/g, '');\r\n    var expressionForIndex = expressions[index] ? expressions[index] : '';\r\n    return previousValue + valueWithoutWhiteSpaces + expressionForIndex;\r\n  }, '');\r\n  return result.trim();\r\n}"]},"metadata":{},"sourceType":"module"}