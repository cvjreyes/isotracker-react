{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { arrayEach, arrayMap, arrayFilter } from \"../../helpers/array.mjs\";\nimport { mixin, objectEach } from \"../../helpers/object.mjs\";\nimport { curry } from \"../../helpers/function.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\nimport ConditionCollection from \"./conditionCollection.mjs\";\nimport DataFilter from \"./dataFilter.mjs\";\nimport { createArrayAssertion } from \"./utils.mjs\";\n/**\r\n * Class which is designed for observing changes in condition collection. When condition is changed by user at specified\r\n * column it's necessary to update all conditions defined after this edited one.\r\n *\r\n * Object fires `update` hook for every column conditions change.\r\n *\r\n * @class ConditionUpdateObserver\r\n * @plugin Filters\r\n */\n\nvar ConditionUpdateObserver = /*#__PURE__*/function () {\n  function ConditionUpdateObserver(hot, conditionCollection) {\n    var _this = this;\n\n    var columnDataFactory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {\n      return [];\n    };\n\n    _classCallCheck(this, ConditionUpdateObserver);\n    /**\r\n     * Handsontable instance.\r\n     *\r\n     * @type {Core}\r\n     */\n\n\n    this.hot = hot;\n    /**\r\n     * Reference to the instance of {@link ConditionCollection}.\r\n     *\r\n     * @type {ConditionCollection}\r\n     */\n\n    this.conditionCollection = conditionCollection;\n    /**\r\n     * Function which provide source data factory for specified column.\r\n     *\r\n     * @type {Function}\r\n     */\n\n    this.columnDataFactory = columnDataFactory;\n    /**\r\n     * Collected changes when grouping is enabled.\r\n     *\r\n     * @type {Array}\r\n     * @default []\r\n     */\n\n    this.changes = [];\n    /**\r\n     * Flag which determines if grouping events is enabled.\r\n     *\r\n     * @type {boolean}\r\n     */\n\n    this.grouping = false;\n    /**\r\n     * The latest known position of edited conditions at specified column index.\r\n     *\r\n     * @type {number}\r\n     * @default -1\r\n     */\n\n    this.latestEditedColumnPosition = -1;\n    /**\r\n     * The latest known order of conditions stack.\r\n     *\r\n     * @type {Array}\r\n     */\n\n    this.latestOrderStack = [];\n    this.conditionCollection.addLocalHook('beforeRemove', function (column) {\n      return _this._onConditionBeforeModify(column);\n    });\n    this.conditionCollection.addLocalHook('afterRemove', function (column) {\n      return _this.updateStatesAtColumn(column);\n    });\n    this.conditionCollection.addLocalHook('afterAdd', function (column) {\n      return _this.updateStatesAtColumn(column);\n    });\n    this.conditionCollection.addLocalHook('beforeClean', function () {\n      return _this._onConditionBeforeClean();\n    });\n    this.conditionCollection.addLocalHook('afterClean', function () {\n      return _this._onConditionAfterClean();\n    });\n  }\n  /**\r\n   * Enable grouping changes. Grouping is helpful in situations when a lot of conditions is added in one moment. Instead of\r\n   * trigger `update` hook for every condition by adding/removing you can group this changes and call `flush` method to trigger\r\n   * it once.\r\n   */\n\n\n  _createClass(ConditionUpdateObserver, [{\n    key: \"groupChanges\",\n    value: function groupChanges() {\n      this.grouping = true;\n    }\n    /**\r\n     * Flush all collected changes. This trigger `update` hook for every previously collected change from condition collection.\r\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var _this2 = this;\n\n      this.grouping = false;\n      arrayEach(this.changes, function (column) {\n        _this2.updateStatesAtColumn(column);\n      });\n      this.changes.length = 0;\n    }\n    /**\r\n     * On before modify condition (add or remove from collection),.\r\n     *\r\n     * @param {number} column Column index.\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_onConditionBeforeModify\",\n    value: function _onConditionBeforeModify(column) {\n      this.latestEditedColumnPosition = this.conditionCollection.getColumnStackPosition(column);\n    }\n    /**\r\n     * Update all related states which should be changed after invoking changes applied to current column.\r\n     *\r\n     * @param {number} column The column index.\r\n     * @param {object} conditionArgsChange Object describing condition changes which can be handled by filters on `update` hook.\r\n     * It contains keys `conditionKey` and `conditionValue` which refers to change specified key of condition to specified value\r\n     * based on referred keys.\r\n     */\n\n  }, {\n    key: \"updateStatesAtColumn\",\n    value: function updateStatesAtColumn(column, conditionArgsChange) {\n      var _this3 = this;\n\n      if (this.grouping) {\n        if (this.changes.indexOf(column) === -1) {\n          this.changes.push(column);\n        }\n\n        return;\n      }\n\n      var allConditions = this.conditionCollection.exportAllConditions();\n      var editedColumnPosition = this.conditionCollection.getColumnStackPosition(column);\n\n      if (editedColumnPosition === -1) {\n        editedColumnPosition = this.latestEditedColumnPosition;\n      } // Collection of all conditions defined before currently edited `column` (without edited one)\n\n\n      var conditionsBefore = allConditions.slice(0, editedColumnPosition); // Collection of all conditions defined after currently edited `column` (with edited one)\n\n      var conditionsAfter = allConditions.slice(editedColumnPosition); // Make sure that conditionAfter doesn't contain edited column conditions\n\n      if (conditionsAfter.length && conditionsAfter[0].column === column) {\n        conditionsAfter.shift();\n      }\n\n      var visibleDataFactory = curry(function (curriedConditionsBefore, curriedColumn) {\n        var conditionsStack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var splitConditionCollection = new ConditionCollection(_this3.hot, false);\n        var curriedConditionsBeforeArray = [].concat(curriedConditionsBefore, conditionsStack); // Create new condition collection to determine what rows should be visible in \"filter by value\" box\n        // in the next conditions in the chain\n\n        splitConditionCollection.importAllConditions(curriedConditionsBeforeArray);\n\n        var allRows = _this3.columnDataFactory(curriedColumn);\n\n        var visibleRows;\n\n        if (splitConditionCollection.isEmpty()) {\n          visibleRows = allRows;\n        } else {\n          visibleRows = new DataFilter(splitConditionCollection, function (columnData) {\n            return _this3.columnDataFactory(columnData);\n          }).filter();\n        }\n\n        visibleRows = arrayMap(visibleRows, function (rowData) {\n          return rowData.meta.visualRow;\n        });\n        var visibleRowsAssertion = createArrayAssertion(visibleRows);\n        splitConditionCollection.destroy();\n        return arrayFilter(allRows, function (rowData) {\n          return visibleRowsAssertion(rowData.meta.visualRow);\n        });\n      })(conditionsBefore);\n      var editedConditions = [].concat(this.conditionCollection.getConditions(column));\n      this.runLocalHooks('update', {\n        editedConditionStack: {\n          column: column,\n          conditions: editedConditions\n        },\n        dependentConditionStacks: conditionsAfter,\n        filteredRowsFactory: visibleDataFactory,\n        conditionArgsChange: conditionArgsChange\n      });\n    }\n    /**\r\n     * On before conditions clean listener.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_onConditionBeforeClean\",\n    value: function _onConditionBeforeClean() {\n      this.latestOrderStack = this.conditionCollection.getFilteredColumns();\n    }\n    /**\r\n     * On after conditions clean listener.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_onConditionAfterClean\",\n    value: function _onConditionAfterClean() {\n      var _this4 = this;\n\n      arrayEach(this.latestOrderStack, function (column) {\n        _this4.updateStatesAtColumn(column);\n      });\n    }\n    /**\r\n     * Destroy instance.\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this5 = this;\n\n      this.clearLocalHooks();\n      objectEach(this, function (value, property) {\n        _this5[property] = null;\n      });\n    }\n  }]);\n\n  return ConditionUpdateObserver;\n}();\n\nmixin(ConditionUpdateObserver, localHooks);\nexport default ConditionUpdateObserver;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/filters/conditionUpdateObserver.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","arrayEach","arrayMap","arrayFilter","mixin","objectEach","curry","localHooks","ConditionCollection","DataFilter","createArrayAssertion","ConditionUpdateObserver","hot","conditionCollection","_this","columnDataFactory","arguments","undefined","changes","grouping","latestEditedColumnPosition","latestOrderStack","addLocalHook","column","_onConditionBeforeModify","updateStatesAtColumn","_onConditionBeforeClean","_onConditionAfterClean","value","groupChanges","flush","_this2","getColumnStackPosition","conditionArgsChange","_this3","indexOf","push","allConditions","exportAllConditions","editedColumnPosition","conditionsBefore","slice","conditionsAfter","shift","visibleDataFactory","curriedConditionsBefore","curriedColumn","conditionsStack","splitConditionCollection","curriedConditionsBeforeArray","concat","importAllConditions","allRows","visibleRows","isEmpty","columnData","filter","rowData","meta","visualRow","visibleRowsAssertion","destroy","editedConditions","getConditions","runLocalHooks","editedConditionStack","conditions","dependentConditionStacks","filteredRowsFactory","getFilteredColumns","_this4","_this5","clearLocalHooks","property"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.index-of.js\";\r\nimport \"core-js/modules/es.array.slice.js\";\r\nimport \"core-js/modules/es.array.concat.js\";\r\nimport \"core-js/modules/es.array.filter.js\";\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nimport { arrayEach, arrayMap, arrayFilter } from \"../../helpers/array.mjs\";\r\nimport { mixin, objectEach } from \"../../helpers/object.mjs\";\r\nimport { curry } from \"../../helpers/function.mjs\";\r\nimport localHooks from \"../../mixins/localHooks.mjs\";\r\nimport ConditionCollection from \"./conditionCollection.mjs\";\r\nimport DataFilter from \"./dataFilter.mjs\";\r\nimport { createArrayAssertion } from \"./utils.mjs\";\r\n/**\r\n * Class which is designed for observing changes in condition collection. When condition is changed by user at specified\r\n * column it's necessary to update all conditions defined after this edited one.\r\n *\r\n * Object fires `update` hook for every column conditions change.\r\n *\r\n * @class ConditionUpdateObserver\r\n * @plugin Filters\r\n */\r\n\r\nvar ConditionUpdateObserver = /*#__PURE__*/function () {\r\n  function ConditionUpdateObserver(hot, conditionCollection) {\r\n    var _this = this;\r\n\r\n    var columnDataFactory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {\r\n      return [];\r\n    };\r\n\r\n    _classCallCheck(this, ConditionUpdateObserver);\r\n\r\n    /**\r\n     * Handsontable instance.\r\n     *\r\n     * @type {Core}\r\n     */\r\n    this.hot = hot;\r\n    /**\r\n     * Reference to the instance of {@link ConditionCollection}.\r\n     *\r\n     * @type {ConditionCollection}\r\n     */\r\n\r\n    this.conditionCollection = conditionCollection;\r\n    /**\r\n     * Function which provide source data factory for specified column.\r\n     *\r\n     * @type {Function}\r\n     */\r\n\r\n    this.columnDataFactory = columnDataFactory;\r\n    /**\r\n     * Collected changes when grouping is enabled.\r\n     *\r\n     * @type {Array}\r\n     * @default []\r\n     */\r\n\r\n    this.changes = [];\r\n    /**\r\n     * Flag which determines if grouping events is enabled.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n\r\n    this.grouping = false;\r\n    /**\r\n     * The latest known position of edited conditions at specified column index.\r\n     *\r\n     * @type {number}\r\n     * @default -1\r\n     */\r\n\r\n    this.latestEditedColumnPosition = -1;\r\n    /**\r\n     * The latest known order of conditions stack.\r\n     *\r\n     * @type {Array}\r\n     */\r\n\r\n    this.latestOrderStack = [];\r\n    this.conditionCollection.addLocalHook('beforeRemove', function (column) {\r\n      return _this._onConditionBeforeModify(column);\r\n    });\r\n    this.conditionCollection.addLocalHook('afterRemove', function (column) {\r\n      return _this.updateStatesAtColumn(column);\r\n    });\r\n    this.conditionCollection.addLocalHook('afterAdd', function (column) {\r\n      return _this.updateStatesAtColumn(column);\r\n    });\r\n    this.conditionCollection.addLocalHook('beforeClean', function () {\r\n      return _this._onConditionBeforeClean();\r\n    });\r\n    this.conditionCollection.addLocalHook('afterClean', function () {\r\n      return _this._onConditionAfterClean();\r\n    });\r\n  }\r\n  /**\r\n   * Enable grouping changes. Grouping is helpful in situations when a lot of conditions is added in one moment. Instead of\r\n   * trigger `update` hook for every condition by adding/removing you can group this changes and call `flush` method to trigger\r\n   * it once.\r\n   */\r\n\r\n\r\n  _createClass(ConditionUpdateObserver, [{\r\n    key: \"groupChanges\",\r\n    value: function groupChanges() {\r\n      this.grouping = true;\r\n    }\r\n    /**\r\n     * Flush all collected changes. This trigger `update` hook for every previously collected change from condition collection.\r\n     */\r\n\r\n  }, {\r\n    key: \"flush\",\r\n    value: function flush() {\r\n      var _this2 = this;\r\n\r\n      this.grouping = false;\r\n      arrayEach(this.changes, function (column) {\r\n        _this2.updateStatesAtColumn(column);\r\n      });\r\n      this.changes.length = 0;\r\n    }\r\n    /**\r\n     * On before modify condition (add or remove from collection),.\r\n     *\r\n     * @param {number} column Column index.\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"_onConditionBeforeModify\",\r\n    value: function _onConditionBeforeModify(column) {\r\n      this.latestEditedColumnPosition = this.conditionCollection.getColumnStackPosition(column);\r\n    }\r\n    /**\r\n     * Update all related states which should be changed after invoking changes applied to current column.\r\n     *\r\n     * @param {number} column The column index.\r\n     * @param {object} conditionArgsChange Object describing condition changes which can be handled by filters on `update` hook.\r\n     * It contains keys `conditionKey` and `conditionValue` which refers to change specified key of condition to specified value\r\n     * based on referred keys.\r\n     */\r\n\r\n  }, {\r\n    key: \"updateStatesAtColumn\",\r\n    value: function updateStatesAtColumn(column, conditionArgsChange) {\r\n      var _this3 = this;\r\n\r\n      if (this.grouping) {\r\n        if (this.changes.indexOf(column) === -1) {\r\n          this.changes.push(column);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      var allConditions = this.conditionCollection.exportAllConditions();\r\n      var editedColumnPosition = this.conditionCollection.getColumnStackPosition(column);\r\n\r\n      if (editedColumnPosition === -1) {\r\n        editedColumnPosition = this.latestEditedColumnPosition;\r\n      } // Collection of all conditions defined before currently edited `column` (without edited one)\r\n\r\n\r\n      var conditionsBefore = allConditions.slice(0, editedColumnPosition); // Collection of all conditions defined after currently edited `column` (with edited one)\r\n\r\n      var conditionsAfter = allConditions.slice(editedColumnPosition); // Make sure that conditionAfter doesn't contain edited column conditions\r\n\r\n      if (conditionsAfter.length && conditionsAfter[0].column === column) {\r\n        conditionsAfter.shift();\r\n      }\r\n\r\n      var visibleDataFactory = curry(function (curriedConditionsBefore, curriedColumn) {\r\n        var conditionsStack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\r\n        var splitConditionCollection = new ConditionCollection(_this3.hot, false);\r\n        var curriedConditionsBeforeArray = [].concat(curriedConditionsBefore, conditionsStack); // Create new condition collection to determine what rows should be visible in \"filter by value\" box\r\n        // in the next conditions in the chain\r\n\r\n        splitConditionCollection.importAllConditions(curriedConditionsBeforeArray);\r\n\r\n        var allRows = _this3.columnDataFactory(curriedColumn);\r\n\r\n        var visibleRows;\r\n\r\n        if (splitConditionCollection.isEmpty()) {\r\n          visibleRows = allRows;\r\n        } else {\r\n          visibleRows = new DataFilter(splitConditionCollection, function (columnData) {\r\n            return _this3.columnDataFactory(columnData);\r\n          }).filter();\r\n        }\r\n\r\n        visibleRows = arrayMap(visibleRows, function (rowData) {\r\n          return rowData.meta.visualRow;\r\n        });\r\n        var visibleRowsAssertion = createArrayAssertion(visibleRows);\r\n        splitConditionCollection.destroy();\r\n        return arrayFilter(allRows, function (rowData) {\r\n          return visibleRowsAssertion(rowData.meta.visualRow);\r\n        });\r\n      })(conditionsBefore);\r\n      var editedConditions = [].concat(this.conditionCollection.getConditions(column));\r\n      this.runLocalHooks('update', {\r\n        editedConditionStack: {\r\n          column: column,\r\n          conditions: editedConditions\r\n        },\r\n        dependentConditionStacks: conditionsAfter,\r\n        filteredRowsFactory: visibleDataFactory,\r\n        conditionArgsChange: conditionArgsChange\r\n      });\r\n    }\r\n    /**\r\n     * On before conditions clean listener.\r\n     *\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"_onConditionBeforeClean\",\r\n    value: function _onConditionBeforeClean() {\r\n      this.latestOrderStack = this.conditionCollection.getFilteredColumns();\r\n    }\r\n    /**\r\n     * On after conditions clean listener.\r\n     *\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"_onConditionAfterClean\",\r\n    value: function _onConditionAfterClean() {\r\n      var _this4 = this;\r\n\r\n      arrayEach(this.latestOrderStack, function (column) {\r\n        _this4.updateStatesAtColumn(column);\r\n      });\r\n    }\r\n    /**\r\n     * Destroy instance.\r\n     */\r\n\r\n  }, {\r\n    key: \"destroy\",\r\n    value: function destroy() {\r\n      var _this5 = this;\r\n\r\n      this.clearLocalHooks();\r\n      objectEach(this, function (value, property) {\r\n        _this5[property] = null;\r\n      });\r\n    }\r\n  }]);\r\n\r\n  return ConditionUpdateObserver;\r\n}();\r\n\r\nmixin(ConditionUpdateObserver, localHooks);\r\nexport default ConditionUpdateObserver;"]},"metadata":{},"sourceType":"module"}