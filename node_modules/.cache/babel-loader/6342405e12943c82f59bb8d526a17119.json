{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { isObject, objectEach } from \"../../helpers/object.mjs\";\nimport { LinkedPhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nvar inheritedColumnProperties = ['sortEmptyCells', 'indicator', 'headerAction', 'compareFunctionFactory'];\nvar SORT_EMPTY_CELLS_DEFAULT = false;\nvar SHOW_SORT_INDICATOR_DEFAULT = true;\nvar HEADER_ACTION_DEFAULT = true;\n/**\n * Store and manages states of sorted columns.\n *\n * @class ColumnStatesManager\n * @plugin ColumnSorting\n */\n\nexport var ColumnStatesManager = /*#__PURE__*/function () {\n  function ColumnStatesManager(hot, mapName) {\n    _classCallCheck(this, ColumnStatesManager);\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n\n\n    this.hot = hot;\n    /**\n     * Index map storing sorting states for every column. ColumnStatesManager write and read to/from this element.\n     *\n     * @type {LinkedPhysicalIndexToValueMap}\n     */\n\n    this.sortingStates = new IndexToValueMap();\n    /**\n     * Determines whether we should sort empty cells.\n     *\n     * @type {boolean}\n     */\n\n    this.sortEmptyCells = SORT_EMPTY_CELLS_DEFAULT;\n    /**\n     * Determines whether indicator should be visible (for sorted columns).\n     *\n     * @type {boolean}\n     */\n\n    this.indicator = SHOW_SORT_INDICATOR_DEFAULT;\n    /**\n     * Determines whether click on the header perform sorting.\n     *\n     * @type {boolean}\n     */\n\n    this.headerAction = HEADER_ACTION_DEFAULT;\n    /**\n     * Determines compare function factory. Method get as parameters `sortOder` and `columnMeta` and return compare function.\n     */\n\n    this.compareFunctionFactory = void 0;\n    /**\n     * Name of map storing sorting states. Required for unique name (PR #7440 introduced it). It's needed as\n     * both ColumnSorting and MultiColumnSorting plugins create state manager and as a consequence register maps.\n     * Objects are destroyed in strange order as the updateSettings doesn't work well.\n     */\n\n    this.mapName = mapName;\n    this.hot.columnIndexMapper.registerMap(mapName, this.sortingStates);\n  }\n  /**\n   * Update column properties which affect the sorting result.\n   *\n   * **Note**: All column properties can be overwritten by [columns](https://handsontable.com/docs/Options.html#columns) option.\n   *\n   * @param {object} allSortSettings Column sorting plugin's configuration object.\n   */\n\n\n  _createClass(ColumnStatesManager, [{\n    key: \"updateAllColumnsProperties\",\n    value: function updateAllColumnsProperties(allSortSettings) {\n      var _this = this;\n\n      if (!isObject(allSortSettings)) {\n        return;\n      }\n\n      objectEach(allSortSettings, function (newValue, propertyName) {\n        if (inheritedColumnProperties.includes(propertyName)) {\n          _this[propertyName] = newValue;\n        }\n      });\n    }\n    /**\n     * Get all column properties which affect the sorting result.\n     *\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getAllColumnsProperties\",\n    value: function getAllColumnsProperties() {\n      var columnProperties = {\n        sortEmptyCells: this.sortEmptyCells,\n        indicator: this.indicator,\n        headerAction: this.headerAction\n      };\n\n      if (typeof this.compareFunctionFactory === 'function') {\n        columnProperties.compareFunctionFactory = this.compareFunctionFactory;\n      }\n\n      return columnProperties;\n    }\n    /**\n     * Get sort order of column.\n     *\n     * @param {number} searchedColumn Visual column index.\n     * @returns {string|undefined} Sort order (`asc` for ascending, `desc` for descending and undefined for not sorted).\n     */\n\n  }, {\n    key: \"getSortOrderOfColumn\",\n    value: function getSortOrderOfColumn(searchedColumn) {\n      var _this$sortingStates$g;\n\n      return (_this$sortingStates$g = this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(searchedColumn))) === null || _this$sortingStates$g === void 0 ? void 0 : _this$sortingStates$g.sortOrder;\n    }\n    /**\n     * Get order of particular column in the states queue.\n     *\n     * @param {number} column Visual column index.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getIndexOfColumnInSortQueue\",\n    value: function getIndexOfColumnInSortQueue(column) {\n      column = this.hot.toPhysicalColumn(column);\n      return this.sortingStates.getEntries().findIndex(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            physicalColumn = _ref2[0];\n\n        return physicalColumn === column;\n      });\n    }\n    /**\n     * Get number of sorted columns.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getNumberOfSortedColumns\",\n    value: function getNumberOfSortedColumns() {\n      return this.sortingStates.getLength();\n    }\n    /**\n     * Get if list of sorted columns is empty.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isListOfSortedColumnsEmpty\",\n    value: function isListOfSortedColumnsEmpty() {\n      return this.getNumberOfSortedColumns() === 0;\n    }\n    /**\n     * Get if particular column is sorted.\n     *\n     * @param {number} column Visual column index.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isColumnSorted\",\n    value: function isColumnSorted(column) {\n      return isObject(this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(column)));\n    }\n    /**\n     * Queue of sort states containing sorted columns and their orders (Array of objects containing `column` and `sortOrder` properties).\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @returns {Array<object>}\n     */\n\n  }, {\n    key: \"getSortStates\",\n    value: function getSortStates() {\n      var _this2 = this;\n\n      if (this.sortingStates === null) {\n        return [];\n      }\n\n      var sortingStatesQueue = this.sortingStates.getEntries();\n      return sortingStatesQueue.map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            physicalColumn = _ref4[0],\n            value = _ref4[1];\n\n        return _objectSpread({\n          column: _this2.hot.toVisualColumn(physicalColumn)\n        }, value);\n      });\n    }\n    /**\n     * Get sort state for particular column. Object contains `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @param {number} column Visual column index.\n     * @returns {object|undefined}\n     */\n\n  }, {\n    key: \"getColumnSortState\",\n    value: function getColumnSortState(column) {\n      var sortOrder = this.getSortOrderOfColumn(column);\n\n      if (isDefined(sortOrder)) {\n        return {\n          column: column,\n          sortOrder: sortOrder\n        };\n      }\n    }\n    /**\n     * Set all column states.\n     *\n     * @param {Array} sortStates Sort states.\n     */\n\n  }, {\n    key: \"setSortStates\",\n    value: function setSortStates(sortStates) {\n      this.sortingStates.clear();\n\n      for (var i = 0; i < sortStates.length; i += 1) {\n        this.sortingStates.setValueAtIndex(this.hot.toPhysicalColumn(sortStates[i].column), {\n          sortOrder: sortStates[i].sortOrder\n        });\n      }\n    }\n    /**\n     * Destroy the state manager.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.hot.columnIndexMapper.unregisterMap(this.mapName);\n      this.sortingStates = null;\n    }\n  }]);\n\n  return ColumnStatesManager;\n}();","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/columnSorting/columnStatesManager.mjs"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","Array","from","test","len","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","err","isArray","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","isObject","objectEach","LinkedPhysicalIndexToValueMap","IndexToValueMap","isDefined","inheritedColumnProperties","SORT_EMPTY_CELLS_DEFAULT","SHOW_SORT_INDICATOR_DEFAULT","HEADER_ACTION_DEFAULT","ColumnStatesManager","hot","mapName","sortingStates","sortEmptyCells","indicator","headerAction","compareFunctionFactory","columnIndexMapper","registerMap","updateAllColumnsProperties","allSortSettings","_this","newValue","propertyName","includes","getAllColumnsProperties","columnProperties","getSortOrderOfColumn","searchedColumn","_this$sortingStates$g","getValueAtIndex","toPhysicalColumn","sortOrder","getIndexOfColumnInSortQueue","column","getEntries","findIndex","_ref","_ref2","physicalColumn","getNumberOfSortedColumns","getLength","isListOfSortedColumnsEmpty","isColumnSorted","getSortStates","_this2","sortingStatesQueue","map","_ref3","_ref4","toVisualColumn","getColumnSortState","setSortStates","sortStates","clear","setValueAtIndex","destroy","unregisterMap"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { isObject, objectEach } from \"../../helpers/object.mjs\";\nimport { LinkedPhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nvar inheritedColumnProperties = ['sortEmptyCells', 'indicator', 'headerAction', 'compareFunctionFactory'];\nvar SORT_EMPTY_CELLS_DEFAULT = false;\nvar SHOW_SORT_INDICATOR_DEFAULT = true;\nvar HEADER_ACTION_DEFAULT = true;\n/**\n * Store and manages states of sorted columns.\n *\n * @class ColumnStatesManager\n * @plugin ColumnSorting\n */\n\nexport var ColumnStatesManager = /*#__PURE__*/function () {\n  function ColumnStatesManager(hot, mapName) {\n    _classCallCheck(this, ColumnStatesManager);\n\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    this.hot = hot;\n    /**\n     * Index map storing sorting states for every column. ColumnStatesManager write and read to/from this element.\n     *\n     * @type {LinkedPhysicalIndexToValueMap}\n     */\n\n    this.sortingStates = new IndexToValueMap();\n    /**\n     * Determines whether we should sort empty cells.\n     *\n     * @type {boolean}\n     */\n\n    this.sortEmptyCells = SORT_EMPTY_CELLS_DEFAULT;\n    /**\n     * Determines whether indicator should be visible (for sorted columns).\n     *\n     * @type {boolean}\n     */\n\n    this.indicator = SHOW_SORT_INDICATOR_DEFAULT;\n    /**\n     * Determines whether click on the header perform sorting.\n     *\n     * @type {boolean}\n     */\n\n    this.headerAction = HEADER_ACTION_DEFAULT;\n    /**\n     * Determines compare function factory. Method get as parameters `sortOder` and `columnMeta` and return compare function.\n     */\n\n    this.compareFunctionFactory = void 0;\n    /**\n     * Name of map storing sorting states. Required for unique name (PR #7440 introduced it). It's needed as\n     * both ColumnSorting and MultiColumnSorting plugins create state manager and as a consequence register maps.\n     * Objects are destroyed in strange order as the updateSettings doesn't work well.\n     */\n\n    this.mapName = mapName;\n    this.hot.columnIndexMapper.registerMap(mapName, this.sortingStates);\n  }\n  /**\n   * Update column properties which affect the sorting result.\n   *\n   * **Note**: All column properties can be overwritten by [columns](https://handsontable.com/docs/Options.html#columns) option.\n   *\n   * @param {object} allSortSettings Column sorting plugin's configuration object.\n   */\n\n\n  _createClass(ColumnStatesManager, [{\n    key: \"updateAllColumnsProperties\",\n    value: function updateAllColumnsProperties(allSortSettings) {\n      var _this = this;\n\n      if (!isObject(allSortSettings)) {\n        return;\n      }\n\n      objectEach(allSortSettings, function (newValue, propertyName) {\n        if (inheritedColumnProperties.includes(propertyName)) {\n          _this[propertyName] = newValue;\n        }\n      });\n    }\n    /**\n     * Get all column properties which affect the sorting result.\n     *\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getAllColumnsProperties\",\n    value: function getAllColumnsProperties() {\n      var columnProperties = {\n        sortEmptyCells: this.sortEmptyCells,\n        indicator: this.indicator,\n        headerAction: this.headerAction\n      };\n\n      if (typeof this.compareFunctionFactory === 'function') {\n        columnProperties.compareFunctionFactory = this.compareFunctionFactory;\n      }\n\n      return columnProperties;\n    }\n    /**\n     * Get sort order of column.\n     *\n     * @param {number} searchedColumn Visual column index.\n     * @returns {string|undefined} Sort order (`asc` for ascending, `desc` for descending and undefined for not sorted).\n     */\n\n  }, {\n    key: \"getSortOrderOfColumn\",\n    value: function getSortOrderOfColumn(searchedColumn) {\n      var _this$sortingStates$g;\n\n      return (_this$sortingStates$g = this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(searchedColumn))) === null || _this$sortingStates$g === void 0 ? void 0 : _this$sortingStates$g.sortOrder;\n    }\n    /**\n     * Get order of particular column in the states queue.\n     *\n     * @param {number} column Visual column index.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getIndexOfColumnInSortQueue\",\n    value: function getIndexOfColumnInSortQueue(column) {\n      column = this.hot.toPhysicalColumn(column);\n      return this.sortingStates.getEntries().findIndex(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            physicalColumn = _ref2[0];\n\n        return physicalColumn === column;\n      });\n    }\n    /**\n     * Get number of sorted columns.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getNumberOfSortedColumns\",\n    value: function getNumberOfSortedColumns() {\n      return this.sortingStates.getLength();\n    }\n    /**\n     * Get if list of sorted columns is empty.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isListOfSortedColumnsEmpty\",\n    value: function isListOfSortedColumnsEmpty() {\n      return this.getNumberOfSortedColumns() === 0;\n    }\n    /**\n     * Get if particular column is sorted.\n     *\n     * @param {number} column Visual column index.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isColumnSorted\",\n    value: function isColumnSorted(column) {\n      return isObject(this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(column)));\n    }\n    /**\n     * Queue of sort states containing sorted columns and their orders (Array of objects containing `column` and `sortOrder` properties).\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @returns {Array<object>}\n     */\n\n  }, {\n    key: \"getSortStates\",\n    value: function getSortStates() {\n      var _this2 = this;\n\n      if (this.sortingStates === null) {\n        return [];\n      }\n\n      var sortingStatesQueue = this.sortingStates.getEntries();\n      return sortingStatesQueue.map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            physicalColumn = _ref4[0],\n            value = _ref4[1];\n\n        return _objectSpread({\n          column: _this2.hot.toVisualColumn(physicalColumn)\n        }, value);\n      });\n    }\n    /**\n     * Get sort state for particular column. Object contains `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @param {number} column Visual column index.\n     * @returns {object|undefined}\n     */\n\n  }, {\n    key: \"getColumnSortState\",\n    value: function getColumnSortState(column) {\n      var sortOrder = this.getSortOrderOfColumn(column);\n\n      if (isDefined(sortOrder)) {\n        return {\n          column: column,\n          sortOrder: sortOrder\n        };\n      }\n    }\n    /**\n     * Set all column states.\n     *\n     * @param {Array} sortStates Sort states.\n     */\n\n  }, {\n    key: \"setSortStates\",\n    value: function setSortStates(sortStates) {\n      this.sortingStates.clear();\n\n      for (var i = 0; i < sortStates.length; i += 1) {\n        this.sortingStates.setValueAtIndex(this.hot.toPhysicalColumn(sortStates[i].column), {\n          sortOrder: sortStates[i].sortOrder\n        });\n      }\n    }\n    /**\n     * Destroy the state manager.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.hot.columnIndexMapper.unregisterMap(this.mapName);\n      this.sortingStates = null;\n    }\n  }]);\n\n  return ColumnStatesManager;\n}();"]},"metadata":{},"sourceType":"module"}