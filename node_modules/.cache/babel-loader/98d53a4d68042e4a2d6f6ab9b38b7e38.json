{"ast":null,"code":"var _templateObject;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nimport { arrayEach } from \"./helpers/array.mjs\";\nimport { objectEach } from \"./helpers/object.mjs\";\nimport { substitute } from \"./helpers/string.mjs\";\nimport { warn } from \"./helpers/console.mjs\";\nimport { toSingleLine } from \"./helpers/templateLiteralTag.mjs\";\n/**\r\n * @description\r\n * Handsontable events are the common interface that function in 2 ways: as __callbacks__ and as __hooks__.\r\n *\r\n * @example\r\n *\r\n * ```js\r\n * // Using events as callbacks:\r\n * ...\r\n * const hot1 = new Handsontable(document.getElementById('example1'), {\r\n *   afterChange: function(changes, source) {\r\n *     $.ajax({\r\n *       url: \"save.php',\r\n *       data: change\r\n *     });\r\n *   }\r\n * });\r\n * ...\r\n * ```\r\n *\r\n * ```js\r\n * // Using events as plugin hooks:\r\n * ...\r\n * const hot1 = new Handsontable(document.getElementById('example1'), {\r\n *   myPlugin: true\r\n * });\r\n *\r\n * const hot2 = new Handsontable(document.getElementById('example2'), {\r\n *   myPlugin: false\r\n * });\r\n *\r\n * // global hook\r\n * Handsontable.hooks.add('afterChange', function() {\r\n *   // Fired twice - for hot1 and hot2\r\n *   if (this.getSettings().myPlugin) {\r\n *     // function body - will only run for hot1\r\n *   }\r\n * });\r\n *\r\n * // local hook (has same effect as a callback)\r\n * hot2.addHook('afterChange', function() {\r\n *   // function body - will only run in #example2\r\n * });\r\n * ```\r\n * ...\r\n */\n// @TODO: Move plugin description hooks to plugin?\n\nvar REGISTERED_HOOKS = [\n/**\r\n * Fired after resetting a cell's meta. This happens when the {@link Core#updateSettings} method is called.\r\n *\r\n * @event Hooks#afterCellMetaReset\r\n */\n'afterCellMetaReset',\n/**\r\n * Fired after one or more cells has been changed. The changes are triggered in any situation when the\r\n * value is entered using an editor or changed using API (e.q setDataAtCell).\r\n *\r\n * __Note:__ For performance reasons, the `changes` array is null for `\"loadData\"` source.\r\n *\r\n * @event Hooks#afterChange\r\n * @param {Array} changes 2D array containing information about each of the edited cells `[[row, prop, oldVal, newVal], ...]`.\r\n * @param {string} [source] String that identifies source of hook call ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n * @example\r\n * ```js\r\n * new Handsontable(element, {\r\n *   afterChange: (changes) => {\r\n *     changes.forEach(([row, prop, oldValue, newValue]) => {\r\n *       // Some logic...\r\n *     });\r\n *   }\r\n * })\r\n * ```\r\n */\n'afterChange',\n/**\r\n * Fired each time user opens {@link ContextMenu} and after setting up the Context Menu's default options. These options are a collection\r\n * which user can select by setting an array of keys or an array of objects in {@link Options#contextMenu} option.\r\n *\r\n * @event Hooks#afterContextMenuDefaultOptions\r\n * @param {Array} predefinedItems An array of objects containing information about the pre-defined Context Menu items.\r\n */\n'afterContextMenuDefaultOptions',\n/**\r\n * Fired each time user opens {@link ContextMenu} plugin before setting up the Context Menu's items but after filtering these options by\r\n * user (`contextMenu` option). This hook can by helpful to determine if user use specified menu item or to set up\r\n * one of the menu item to by always visible.\r\n *\r\n * @event Hooks#beforeContextMenuSetItems\r\n * @param {object[]} menuItems An array of objects containing information about to generated Context Menu items.\r\n */\n'beforeContextMenuSetItems',\n/**\r\n * Fired by {@link DropdownMenu} plugin after setting up the Dropdown Menu's default options. These options are a\r\n * collection which user can select by setting an array of keys or an array of objects in {@link Options#dropdownMenu}\r\n * option.\r\n *\r\n * @event Hooks#afterDropdownMenuDefaultOptions\r\n * @param {object[]} predefinedItems An array of objects containing information about the pre-defined Context Menu items.\r\n */\n'afterDropdownMenuDefaultOptions',\n/**\r\n * Fired by {@link DropdownMenu} plugin before setting up the Dropdown Menu's items but after filtering these options\r\n * by user (`dropdownMenu` option). This hook can by helpful to determine if user use specified menu item or to set\r\n * up one of the menu item to by always visible.\r\n *\r\n * @event Hooks#beforeDropdownMenuSetItems\r\n * @param {object[]} menuItems An array of objects containing information about to generated Dropdown Menu items.\r\n */\n'beforeDropdownMenuSetItems',\n/**\r\n * Fired by {@link ContextMenu} plugin after hiding the Context Menu. This hook is fired when {@link Options#contextMenu}\r\n * option is enabled.\r\n *\r\n * @event Hooks#afterContextMenuHide\r\n * @param {object} context The Context Menu plugin instance.\r\n */\n'afterContextMenuHide',\n/**\r\n * Fired by {@link ContextMenu} plugin before opening the Context Menu. This hook is fired when {@link Options#contextMenu}\r\n * option is enabled.\r\n *\r\n * @event Hooks#beforeContextMenuShow\r\n * @param {object} context The Context Menu instance.\r\n */\n'beforeContextMenuShow',\n/**\r\n * Fired by {@link ContextMenu} plugin after opening the Context Menu. This hook is fired when {@link Options#contextMenu}\r\n * option is enabled.\r\n *\r\n * @event Hooks#afterContextMenuShow\r\n * @param {object} context The Context Menu plugin instance.\r\n */\n'afterContextMenuShow',\n/**\r\n * Fired by {@link CopyPaste} plugin after reaching the copy limit while copying data. This hook is fired when\r\n * {@link Options#copyPaste} option is enabled.\r\n *\r\n * @event Hooks#afterCopyLimit\r\n * @param {number} selectedRows Count of selected copyable rows.\r\n * @param {number} selectedColumns Count of selected copyable columns.\r\n * @param {number} copyRowsLimit Current copy rows limit.\r\n * @param {number} copyColumnsLimit Current copy columns limit.\r\n */\n'afterCopyLimit',\n/**\r\n * Fired before created a new column.\r\n *\r\n * @event Hooks#beforeCreateCol\r\n * @param {number} index Represents the visual index of first newly created column in the data source array.\r\n * @param {number} amount Number of newly created columns in the data source array.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link http://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).\r\n * @returns {*} If `false` then creating columns is cancelled.\r\n * @example\r\n * ```js\r\n * // Return `false` to cancel column inserting.\r\n * new Handsontable(element, {\r\n *   beforeCreateCol: function(data, coords) {\r\n *     return false;\r\n *   }\r\n * });\r\n * ```\r\n */\n'beforeCreateCol',\n/**\r\n * Fired after created a new column.\r\n *\r\n * @event Hooks#afterCreateCol\r\n * @param {number} index Represents the visual index of first newly created column in the data source.\r\n * @param {number} amount Number of newly created columns in the data source.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\n'afterCreateCol',\n/**\r\n * Fired before created a new row.\r\n *\r\n * @event Hooks#beforeCreateRow\r\n * @param {number} index Represents the visual index of first newly created row in the data source array.\r\n * @param {number} amount Number of newly created rows in the data source array.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\n'beforeCreateRow',\n/**\r\n * Fired after created a new row.\r\n *\r\n * @event Hooks#afterCreateRow\r\n * @param {number} index Represents the visual index of first newly created row in the data source array.\r\n * @param {number} amount Number of newly created rows in the data source array.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\n'afterCreateRow',\n/**\r\n * Fired after the current cell is deselected.\r\n *\r\n * @event Hooks#afterDeselect\r\n */\n'afterDeselect',\n/**\r\n * Fired after destroying the Handsontable instance.\r\n *\r\n * @event Hooks#afterDestroy\r\n */\n'afterDestroy',\n/**\r\n * General hook which captures `keydown` events attached to the document body. These events are delegated to the\r\n * hooks system and consumed by Core and internal modules (e.g plugins, editors).\r\n *\r\n * @event Hooks#afterDocumentKeyDown\r\n * @param {Event} event A native `keydown` event object.\r\n */\n'afterDocumentKeyDown',\n/**\r\n * Fired inside the Walkontable's selection `draw` method. Can be used to add additional class names to cells, depending on the current selection.\r\n *\r\n * @event Hooks#afterDrawSelection\r\n * @param {number} currentRow Row index of the currently processed cell.\r\n * @param {number} currentColumn Column index of the currently cell.\r\n * @param {number[]} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.\r\n * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.\r\n * @since 0.38.1\r\n * @returns {string|undefined} Can return a `String`, which will act as an additional `className` to be added to the currently processed cell.\r\n */\n'afterDrawSelection',\n/**\r\n * Fired inside the Walkontable's `refreshSelections` method. Can be used to remove additional class names from all cells in the table.\r\n *\r\n * @event Hooks#beforeRemoveCellClassNames\r\n * @since 0.38.1\r\n * @returns {string[]|undefined} Can return an `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.\r\n */\n'beforeRemoveCellClassNames',\n/**\r\n * Fired after getting the cell settings.\r\n *\r\n * @event Hooks#afterGetCellMeta\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {object} cellProperties Object containing the cell properties.\r\n */\n'afterGetCellMeta',\n/**\r\n * Fired after retrieving information about a column header and appending it to the table header.\r\n *\r\n * @event Hooks#afterGetColHeader\r\n * @param {number} column Visual column index.\r\n * @param {HTMLTableCellElement} TH Header's TH element.\r\n */\n'afterGetColHeader',\n/**\r\n * Fired after retrieving information about a row header and appending it to the table header.\r\n *\r\n * @event Hooks#afterGetRowHeader\r\n * @param {number} row Visual row index.\r\n * @param {HTMLTableCellElement} TH Header's TH element.\r\n */\n'afterGetRowHeader',\n/**\r\n * Fired after the Handsontable instance is initiated.\r\n *\r\n * @event Hooks#afterInit\r\n */\n'afterInit',\n/**\r\n * Fired after new data is loaded (by `loadData` or `updateSettings` method) into the data source array.\r\n *\r\n * @event Hooks#afterLoadData\r\n * @param {Array} sourceData Array of arrays or array of objects containing data.\r\n * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.\r\n * @param {string} source Source of the call.\r\n */\n'afterLoadData',\n/**\r\n * Fired after a scroll event, which is identified as a momentum scroll (e.g. On an iPad).\r\n *\r\n * @event Hooks#afterMomentumScroll\r\n */\n'afterMomentumScroll',\n/**\r\n * Fired after a `mousedown` event is triggered on the cell corner (the drag handle).\r\n *\r\n * @event Hooks#afterOnCellCornerMouseDown\r\n * @param {Event} event `mousedown` event object.\r\n */\n'afterOnCellCornerMouseDown',\n/**\r\n * Fired after a `dblclick` event is triggered on the cell corner (the drag handle).\r\n *\r\n * @event Hooks#afterOnCellCornerDblClick\r\n * @param {Event} event `dblclick` event object.\r\n */\n'afterOnCellCornerDblClick',\n/**\r\n * Fired after clicking on a cell or row/column header. In case the row/column header was clicked, the coordinate\r\n * indexes are negative.\r\n *\r\n * For example clicking on the row header of cell (0, 0) results with `afterOnCellMouseDown` called\r\n * with coordinates `{row: 0, col: -1}`.\r\n *\r\n * @event Hooks#afterOnCellMouseDown\r\n * @param {Event} event `mousedown` event object.\r\n * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.\r\n * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.\r\n */\n'afterOnCellMouseDown',\n/**\r\n * Fired after clicking on a cell or row/column header. In case the row/column header was clicked, the coordinate\r\n * indexes are negative.\r\n *\r\n * For example clicking on the row header of cell (0, 0) results with `afterOnCellMouseUp` called\r\n * with coordinates `{row: 0, col: -1}`.\r\n *\r\n * @event Hooks#afterOnCellMouseUp\r\n * @param {Event} event `mouseup` event object.\r\n * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.\r\n * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.\r\n */\n'afterOnCellMouseUp',\n/**\r\n * Fired after clicking right mouse button on a cell or row/column header.\r\n *\r\n * For example clicking on the row header of cell (0, 0) results with `afterOnCellContextMenu` called\r\n * with coordinates `{row: 0, col: -1}`.\r\n *\r\n * @event Hooks#afterOnCellContextMenu\r\n * @since 4.1.0\r\n * @param {Event} event `contextmenu` event object.\r\n * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.\r\n * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.\r\n */\n'afterOnCellContextMenu',\n/**\r\n * Fired after hovering a cell or row/column header with the mouse cursor. In case the row/column header was\r\n * hovered, the index is negative.\r\n *\r\n * For example, hovering over the row header of cell (0, 0) results with `afterOnCellMouseOver` called\r\n * with coords `{row: 0, col: -1}`.\r\n *\r\n * @event Hooks#afterOnCellMouseOver\r\n * @param {Event} event `mouseover` event object.\r\n * @param {CellCoords} coords Hovered cell's visual coordinate object.\r\n * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.\r\n */\n'afterOnCellMouseOver',\n/**\r\n * Fired after leaving a cell or row/column header with the mouse cursor.\r\n *\r\n * @event Hooks#afterOnCellMouseOut\r\n * @param {Event} event `mouseout` event object.\r\n * @param {CellCoords} coords Leaved cell's visual coordinate object.\r\n * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.\r\n */\n'afterOnCellMouseOut',\n/**\r\n * Fired after one or more columns are removed.\r\n *\r\n * @event Hooks#afterRemoveCol\r\n * @param {number} index Visual index of starter column.\r\n * @param {number} amount An amount of removed columns.\r\n * @param {number[]} physicalColumns An array of physical columns removed from the data source.\r\n * @param {string} [source] String that identifies source of hook call ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\n'afterRemoveCol',\n/**\r\n * Fired after one or more rows are removed.\r\n *\r\n * @event Hooks#afterRemoveRow\r\n * @param {number} index Visual index of starter row.\r\n * @param {number} amount An amount of removed rows.\r\n * @param {number[]} physicalRows An array of physical rows removed from the data source.\r\n * @param {string} [source] String that identifies source of hook call ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\n'afterRemoveRow',\n/**\r\n * Fired after the Handsontable table is rendered.\r\n *\r\n * @event Hooks#afterRender\r\n * @param {boolean} isForced Is `true` if rendering was triggered by a change of settings or data; or `false` if\r\n *                           rendering was triggered by scrolling or moving selection.\r\n */\n'afterRender',\n/**\r\n * Fired before starting rendering the cell.\r\n *\r\n * @event Hooks#beforeRenderer\r\n * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.\r\n * @param {*} value Value of the rendered cell.\r\n * @param {object} cellProperties Object containing the cell's properties.\r\n */\n'beforeRenderer',\n/**\r\n * Fired after finishing rendering the cell (after the renderer finishes).\r\n *\r\n * @event Hooks#afterRenderer\r\n * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.\r\n * @param {*} value Value of the rendered cell.\r\n * @param {object} cellProperties Object containing the cell's properties.\r\n */\n'afterRenderer',\n/**\r\n * Fired after the horizontal scroll event.\r\n *\r\n * @event Hooks#afterScrollHorizontally\r\n */\n'afterScrollHorizontally',\n/**\r\n * Fired after the vertical scroll event.\r\n *\r\n * @event Hooks#afterScrollVertically\r\n */\n'afterScrollVertically',\n/**\r\n * Fired after one or more cells are selected (e.g. During mouse move).\r\n *\r\n * @event Hooks#afterSelection\r\n * @param {number} row Selection start visual row index.\r\n * @param {number} column Selection start visual column index.\r\n * @param {number} row2 Selection end visual row index.\r\n * @param {number} column2 Selection end visual column index.\r\n * @param {object} preventScrolling Object with `value` property where its value change will be observed.\r\n * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.\r\n * @example\r\n * ```js\r\n * new Handsontable(element, {\r\n *   afterSelection: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {\r\n *     // setting if prevent scrolling after selection\r\n *     preventScrolling.value = true;\r\n *   }\r\n * })\r\n * ```\r\n */\n'afterSelection',\n/**\r\n * Fired after one or more cells are selected.\r\n *\r\n * The `prop` and `prop2` arguments represent the source object property name instead of the column number.\r\n *\r\n * @event Hooks#afterSelectionByProp\r\n * @param {number} row Selection start visual row index.\r\n * @param {string} prop Selection start data source object property name.\r\n * @param {number} row2 Selection end visual row index.\r\n * @param {string} prop2 Selection end data source object property name.\r\n * @param {object} preventScrolling Object with `value` property where its value change will be observed.\r\n * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.\r\n * @example\r\n * ```js\r\n * new Handsontable(element, {\r\n *   afterSelectionByProp: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {\r\n *     // setting if prevent scrolling after selection\r\n *     preventScrolling.value = true;\r\n *   }\r\n * })\r\n * ```\r\n */\n'afterSelectionByProp',\n/**\r\n * Fired after one or more cells are selected (e.g. On mouse up).\r\n *\r\n * @event Hooks#afterSelectionEnd\r\n * @param {number} row Selection start visual row index.\r\n * @param {number} column Selection start visual column index.\r\n * @param {number} row2 Selection end visual row index.\r\n * @param {number} column2 Selection end visual column index.\r\n * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.\r\n */\n'afterSelectionEnd',\n/**\r\n * Fired after one or more cells are selected (e.g. On mouse up).\r\n *\r\n * The `prop` and `prop2` arguments represent the source object property name instead of the column number.\r\n *\r\n * @event Hooks#afterSelectionEndByProp\r\n * @param {number} row Selection start visual row index.\r\n * @param {string} prop Selection start data source object property index.\r\n * @param {number} row2 Selection end visual row index.\r\n * @param {string} prop2 Selection end data source object property index.\r\n * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.\r\n */\n'afterSelectionEndByProp',\n/**\r\n * Fired after cell meta is changed.\r\n *\r\n * @event Hooks#afterSetCellMeta\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {string} key The updated meta key.\r\n * @param {*} value The updated meta value.\r\n */\n'afterSetCellMeta',\n/**\r\n * Fired after cell meta is removed.\r\n *\r\n * @event Hooks#afterRemoveCellMeta\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {string} key The removed meta key.\r\n * @param {*} value Value which was under removed key of cell meta.\r\n */\n'afterRemoveCellMeta',\n/**\r\n * Fired after cell data was changed.\r\n *\r\n * @event Hooks#afterSetDataAtCell\r\n * @param {Array} changes An array of changes in format `[[row, column, oldValue, value], ...]`.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\n'afterSetDataAtCell',\n/**\r\n * Fired after cell data was changed.\r\n * Called only when `setDataAtRowProp` was executed.\r\n *\r\n * @event Hooks#afterSetDataAtRowProp\r\n * @param {Array} changes An array of changes in format `[[row, prop, oldValue, value], ...]`.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\n'afterSetDataAtRowProp',\n/**\r\n * Fired after cell source data was changed.\r\n *\r\n * @event Hooks#afterSetSourceDataAtCell\r\n * @since 8.0.0\r\n * @param {Array} changes An array of changes in format `[[row, column, oldValue, value], ...]`.\r\n * @param {string} [source] String that identifies source of hook call.\r\n */\n'afterSetSourceDataAtCell',\n/**\r\n * Fired after calling the `updateSettings` method.\r\n *\r\n * @event Hooks#afterUpdateSettings\r\n * @param {object} newSettings New settings object.\r\n */\n'afterUpdateSettings',\n/**\r\n * @description\r\n * A plugin hook executed after validator function, only if validator function is defined.\r\n * Validation result is the first parameter. This can be used to determinate if validation passed successfully or not.\r\n *\r\n * __Returning false from the callback will mark the cell as invalid__.\r\n *\r\n * @event Hooks#afterValidate\r\n * @param {boolean} isValid `true` if valid, `false` if not.\r\n * @param {*} value The value in question.\r\n * @param {number} row Visual row index.\r\n * @param {string|number} prop Property name / visual column index.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n * @returns {void | boolean} If `false` the cell will be marked as invalid, `true` otherwise.\r\n */\n'afterValidate',\n/**\r\n * Fired before successful change of language (when proper language code was set).\r\n *\r\n * @event Hooks#beforeLanguageChange\r\n * @since 0.35.0\r\n * @param {string} languageCode New language code.\r\n */\n'beforeLanguageChange',\n/**\r\n * Fired after successful change of language (when proper language code was set).\r\n *\r\n * @event Hooks#afterLanguageChange\r\n * @since 0.35.0\r\n * @param {string} languageCode New language code.\r\n */\n'afterLanguageChange',\n/**\r\n * Fired by {@link Autofill} plugin before populating the data in the autofill feature. This hook is fired when\r\n * {@link Options#fillHandle} option is enabled.\r\n *\r\n * @event Hooks#beforeAutofill\r\n * @param {Array[]} selectionData Data the autofill operation will start from.\r\n * @param {CellRange} sourceRange The range values will be filled from.\r\n * @param {CellRange} targetRange The range new values will be filled into.\r\n * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.\r\n *\r\n * @returns {boolean|Array[]} If false, the operation is cancelled. If array of arrays, the returned data\r\n *                              will be passed into `populateFromArray` instead of the default autofill\r\n *                              algorithm's result.\r\n */\n'beforeAutofill',\n/**\r\n * Fired by {@link Autofill} plugin after populating the data in the autofill feature. This hook is fired when\r\n * {@link Options#fillHandle} option is enabled.\r\n *\r\n * @event Hooks#afterAutofill\r\n * @since 8.0.0\r\n * @param {Array[]} fillData The data that was used to fill the `targetRange`. If `beforeAutofill` was used\r\n *                            and returned `[[]]`, this will be the same object that was returned from `beforeAutofill`.\r\n * @param {CellRange} sourceRange The range values will be filled from.\r\n * @param {CellRange} targetRange The range new values will be filled into.\r\n * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.\r\n */\n'afterAutofill',\n/**\r\n * Fired before aligning the cell contents.\r\n *\r\n * @event Hooks#beforeCellAlignment\r\n * @param {object} stateBefore An object with class names defining the cell alignment.\r\n * @param {CellRange[]} range An array of CellRange coordinates where the alignment will be applied.\r\n * @param {string} type Type of the alignment - either `horizontal` or `vertical`.\r\n * @param {string} alignmentClass String defining the alignment class added to the cell.\r\n * Possible values:\r\n * * `htLeft`\r\n * * `htCenter`\r\n * * `htRight`\r\n * * `htJustify`\r\n * * `htTop`\r\n * * `htMiddle`\r\n * * `htBottom`.\r\n */\n'beforeCellAlignment',\n/**\r\n * Fired before one or more cells is changed. Its main purpose is to alter changes silently after input and before\r\n * table rendering.\r\n *\r\n * @event Hooks#beforeChange\r\n * @param {Array[]} changes 2D array containing information about each of the edited cells.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n * @returns {void | boolean} If `false` all changes were cancelled, `true` otherwise.\r\n * @example\r\n * ```js\r\n * // To disregard a single change, set changes[i] to null or remove it from array using changes.splice(i, 1).\r\n * new Handsontable(element, {\r\n *   beforeChange: (changes, source) => {\r\n *     // [[row, prop, oldVal, newVal], ...]\r\n *     changes[0] = null;\r\n *   }\r\n * });\r\n * // To alter a single change, overwrite the desired value to changes[i][3].\r\n * new Handsontable(element, {\r\n *   beforeChange: (changes, source) => {\r\n *     // [[row, prop, oldVal, newVal], ...]\r\n *     changes[0][3] = 10;\r\n *   }\r\n * });\r\n * // To cancel all edit, return false from the callback or set array length to 0 (changes.length = 0).\r\n * new Handsontable(element, {\r\n *   beforeChange: (changes, source) => {\r\n *     // [[row, prop, oldVal, newVal], ...]\r\n *     return false;\r\n *   }\r\n * });\r\n * ```\r\n */\n'beforeChange',\n/**\r\n * Fired right before rendering the changes.\r\n *\r\n * @event Hooks#beforeChangeRender\r\n * @param {Array[]} changes Array in form of `[row, prop, oldValue, newValue]`.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\n'beforeChangeRender',\n/**\r\n * Fired before drawing the borders.\r\n *\r\n * @event Hooks#beforeDrawBorders\r\n * @param {Array} corners Array specifying the current selection borders.\r\n * @param {string} borderClassName Specifies the border class name.\r\n */\n'beforeDrawBorders',\n/**\r\n * Fired before getting cell settings.\r\n *\r\n * @event Hooks#beforeGetCellMeta\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {object} cellProperties Object containing the cell's properties.\r\n */\n'beforeGetCellMeta',\n/**\r\n * Fired before cell meta is removed.\r\n *\r\n * @event Hooks#beforeRemoveCellMeta\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {string} key The removed meta key.\r\n * @param {*} value Value which is under removed key of cell meta.\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\n'beforeRemoveCellMeta',\n/**\r\n * Fired before the Handsontable instance is initiated.\r\n *\r\n * @event Hooks#beforeInit\r\n */\n'beforeInit',\n/**\r\n * Fired before the Walkontable instance is initiated.\r\n *\r\n * @event Hooks#beforeInitWalkontable\r\n * @param {object} walkontableConfig Walkontable configuration object.\r\n */\n'beforeInitWalkontable',\n/**\r\n * Fired before new data is loaded (by `loadData` or `updateSettings` method) into the data source array.\r\n *\r\n * @event Hooks#beforeLoadData\r\n * @since 8.0.0\r\n * @param {Array} sourceData Array of arrays or array of objects containing data.\r\n * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.\r\n * @param {string} source Source of the call.\r\n * @returns {Array} The returned array will be used as new dataset.\r\n */\n'beforeLoadData',\n/**\r\n * Fired before keydown event is handled. It can be used to overwrite default key bindings.\r\n *\r\n * __Note__: To prevent default behavior you need to call `event.stopImmediatePropagation()` in your `beforeKeyDown`\r\n * handler.\r\n *\r\n * @event Hooks#beforeKeyDown\r\n * @param {Event} event Original DOM event.\r\n */\n'beforeKeyDown',\n/**\r\n * Fired after the user clicked a cell, but before all the calculations related with it.\r\n *\r\n * @event Hooks#beforeOnCellMouseDown\r\n * @param {Event} event The `mousedown` event object.\r\n * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.\r\n * @param {HTMLTableCellElement} TD TD element.\r\n * @param {object} controller An object with keys `row`, `column` and `cells` which contains boolean values. This\r\n *                            object allows or disallows changing the selection for the particular axies.\r\n */\n'beforeOnCellMouseDown',\n/**\r\n * Fired after the user clicked a cell.\r\n *\r\n * @event Hooks#beforeOnCellMouseUp\r\n * @param {Event} event The `mouseup` event object.\r\n * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.\r\n * @param {HTMLTableCellElement} TD TD element.\r\n */\n'beforeOnCellMouseUp',\n/**\r\n * Fired after the user clicked a cell, but before all the calculations related with it.\r\n *\r\n * @event Hooks#beforeOnCellContextMenu\r\n * @since 4.1.0\r\n * @param {Event} event The `contextmenu` event object.\r\n * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.\r\n * @param {HTMLTableCellElement} TD TD element.\r\n */\n'beforeOnCellContextMenu',\n/**\r\n * Fired after the user moved cursor over a cell, but before all the calculations related with it.\r\n *\r\n * @event Hooks#beforeOnCellMouseOver\r\n * @param {Event} event The `mouseover` event object.\r\n * @param {CellCoords} coords CellCoords object containing the visual coordinates of the clicked cell.\r\n * @param {HTMLTableCellElement} TD TD element.\r\n * @param {object} controller An object with keys `row`, `column` and `cells` which contains boolean values. This\r\n *                            object allows or disallows changing the selection for the particular axies.\r\n */\n'beforeOnCellMouseOver',\n/**\r\n * Fired after the user moved cursor out from a cell, but before all the calculations related with it.\r\n *\r\n * @event Hooks#beforeOnCellMouseOut\r\n * @param {Event} event The `mouseout` event object.\r\n * @param {CellCoords} coords CellCoords object containing the visual coordinates of the leaved cell.\r\n * @param {HTMLTableCellElement} TD TD element.\r\n */\n'beforeOnCellMouseOut',\n/**\r\n * Fired before one or more columns are about to be removed.\r\n *\r\n * @event Hooks#beforeRemoveCol\r\n * @param {number} index Visual index of starter column.\r\n * @param {number} amount Amount of columns to be removed.\r\n * @param {number[]} physicalColumns An array of physical columns removed from the data source.\r\n * @param {string} [source] String that identifies source of hook call ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\n'beforeRemoveCol',\n/**\r\n * Fired when one or more rows are about to be removed.\r\n *\r\n * @event Hooks#beforeRemoveRow\r\n * @param {number} index Visual index of starter row.\r\n * @param {number} amount Amount of rows to be removed.\r\n * @param {number[]} physicalRows An array of physical rows removed from the data source.\r\n * @param {string} [source] String that identifies source of hook call ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\n'beforeRemoveRow',\n/**\r\n * Fired before the Handsontable table is rendered.\r\n *\r\n * @event Hooks#beforeRender\r\n * @param {boolean} isForced If `true` rendering was triggered by a change of settings or data; or `false` if\r\n *                           rendering was triggered by scrolling or moving selection.\r\n * @param {object} skipRender Object with `skipRender` property, if it is set to `true ` the next rendering cycle will be skipped.\r\n */\n'beforeRender',\n/**\r\n * Fired before cell meta is changed.\r\n *\r\n * @event Hooks#beforeSetCellMeta\r\n * @since 8.0.0\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {string} key The updated meta key.\r\n * @param {*} value The updated meta value.\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\n'beforeSetCellMeta',\n/**\r\n * Fired before setting range is started but not finished yet.\r\n *\r\n * @event Hooks#beforeSetRangeStartOnly\r\n * @param {CellCoords} coords CellCoords instance.\r\n */\n'beforeSetRangeStartOnly',\n/**\r\n * Fired before setting range is started.\r\n *\r\n * @event Hooks#beforeSetRangeStart\r\n * @param {CellCoords} coords CellCoords instance.\r\n */\n'beforeSetRangeStart',\n/**\r\n * Fired before setting range is ended.\r\n *\r\n * @event Hooks#beforeSetRangeEnd\r\n * @param {CellCoords} coords CellCoords instance.\r\n */\n'beforeSetRangeEnd',\n/**\r\n * Fired before the logic of handling a touch scroll, when user started scrolling on a touch-enabled device.\r\n *\r\n * @event Hooks#beforeTouchScroll\r\n */\n'beforeTouchScroll',\n/**\r\n * Fired before cell validation, only if validator function is defined. This can be used to manipulate the value\r\n * of changed cell before it is applied to the validator function.\r\n *\r\n * __Note:__ this will not affect values of changes. This will change value *ONLY* for validation.\r\n *\r\n * @event Hooks#beforeValidate\r\n * @param {*} value Value of the cell.\r\n * @param {number} row Visual row index.\r\n * @param {string|number} prop Property name / column index.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\n'beforeValidate',\n/**\r\n * Fired before cell value is rendered into the DOM (through renderer function). This can be used to manipulate the\r\n * value which is passed to the renderer without modifying the renderer itself.\r\n *\r\n * @event Hooks#beforeValueRender\r\n * @param {*} value Cell value to render.\r\n * @param {object} cellProperties An object containing the cell properties.\r\n */\n'beforeValueRender',\n/**\r\n * Fired after Handsontable instance is constructed (using `new` operator).\r\n *\r\n * @event Hooks#construct\r\n */\n'construct',\n/**\r\n * Fired after Handsontable instance is initiated but before table is rendered.\r\n *\r\n * @event Hooks#init\r\n */\n'init',\n/**\r\n * Fired when a column header index is about to be modified by a callback function.\r\n *\r\n * @event Hooks#modifyColHeader\r\n * @param {number} column Visual column header index.\r\n */\n'modifyColHeader',\n/**\r\n * Fired when a column width is about to be modified by a callback function.\r\n *\r\n * @event Hooks#modifyColWidth\r\n * @param {number} width Current column width.\r\n * @param {number} column Visual column index.\r\n */\n'modifyColWidth',\n/**\r\n * Fired when a row header index is about to be modified by a callback function.\r\n *\r\n * @event Hooks#modifyRowHeader\r\n * @param {number} row Visual row header index.\r\n */\n'modifyRowHeader',\n/**\r\n * Fired when a row height is about to be modified by a callback function.\r\n *\r\n * @event Hooks#modifyRowHeight\r\n * @param {number} height Row height.\r\n * @param {number} row Visual row index.\r\n */\n'modifyRowHeight',\n/**\r\n * Fired when a data was retrieved or modified.\r\n *\r\n * @event Hooks#modifyData\r\n * @param {number} row Physical row height.\r\n * @param {number} column Physical column index.\r\n * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value` property.\r\n * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).\r\n */\n'modifyData',\n/**\r\n * Fired when a data was retrieved or modified from the source data set.\r\n *\r\n * @event Hooks#modifySourceData\r\n * @since 8.0.0\r\n * @param {number} row Physical row index.\r\n * @param {number} column Physical column index.\r\n * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value` property.\r\n * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).\r\n */\n'modifySourceData',\n/**\r\n * Fired when a data was retrieved or modified.\r\n *\r\n * @event Hooks#modifyRowData\r\n * @param {number} row Physical row index.\r\n */\n'modifyRowData',\n/**\r\n * Used to modify the cell coordinates when using the `getCell` method, opening editor, getting value from the editor\r\n * and saving values from the closed editor.\r\n *\r\n * @event Hooks#modifyGetCellCoords\r\n * @since 0.36.0\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {boolean} topmost If set to `true`, it returns the TD element from the topmost overlay. For example,\r\n *                          if the wanted cell is in the range of fixed rows, it will return a TD element\r\n *                          from the `top` overlay.\r\n */\n'modifyGetCellCoords',\n/**\r\n * Allows modify the visual row index that is used to retrieve the row header element (TH) before it's\r\n * highlighted (proper CSS class names are added). Modifying the visual row index allows building a custom\r\n * implementation of the nested headers feature or other features that require highlighting other DOM\r\n * elements than that the rendering engine, by default, would have highlighted.\r\n *\r\n * @event Hooks#beforeHighlightingRowHeader\r\n * @since 8.4.0\r\n * @param {number} row Visual row index.\r\n * @param {number} headerLevel Column header level (0 = most distant to the table).\r\n * @param {object} highlightMeta An object that contains additional information about processed selection.\r\n * @returns {number|undefined}\r\n */\n'beforeHighlightingRowHeader',\n/**\r\n * Allows modify the visual column index that is used to retrieve the column header element (TH) before it's\r\n * highlighted (proper CSS class names are added). Modifying the visual column index allows building a custom\r\n * implementation of the nested headers feature or other features that require highlighting other DOM\r\n * elements than that the rendering engine, by default, would have highlighted.\r\n *\r\n * @event Hooks#beforeHighlightingColumnHeader\r\n * @since 8.4.0\r\n * @param {number} column Visual column index.\r\n * @param {number} headerLevel Row header level (0 = most distant to the table).\r\n * @param {object} highlightMeta An object that contains additional information about processed selection.\r\n * @returns {number|undefined}\r\n */\n'beforeHighlightingColumnHeader',\n/**\r\n * Fired by {@link PersistentState} plugin, after loading value, saved under given key, from browser local storage. This hook is fired when\r\n * {@link Options#persistentState} option is enabled.\r\n *\r\n * @event Hooks#persistentStateLoad\r\n * @param {string} key Key.\r\n * @param {object} valuePlaceholder Object containing the loaded value under `valuePlaceholder.value` (if no value have been saved, `value` key will be undefined).\r\n */\n'persistentStateLoad',\n/**\r\n * Fired by {@link PersistentState} plugin after resetting data from local storage. If no key is given, all values associated with table will be cleared.\r\n * This hook is fired when {@link Options#persistentState} option is enabled.\r\n *\r\n * @event Hooks#persistentStateReset\r\n * @param {string} [key] Key.\r\n */\n'persistentStateReset',\n/**\r\n * Fired by {@link PersistentState} plugin, after saving value under given key in browser local storage. This hook is fired when\r\n * {@link Options#persistentState} option is enabled.\r\n *\r\n * @event Hooks#persistentStateSave\r\n * @param {string} key Key.\r\n * @param {Mixed} value Value to save.\r\n */\n'persistentStateSave',\n/**\r\n * Fired by {@link ColumnSorting} and {@link MultiColumnSorting} plugins before sorting the column. If you return `false` value inside callback for hook, then sorting\r\n * will be not applied by the Handsontable (useful for server-side sorting).\r\n *\r\n * This hook is fired when {@link Options#columnSorting} or {@link Options#multiColumnSorting} option is enabled.\r\n *\r\n * @event Hooks#beforeColumnSort\r\n * @param {Array} currentSortConfig Current sort configuration (for all sorted columns).\r\n * @param {Array} destinationSortConfigs Destination sort configuration (for all sorted columns).\r\n * @returns {boolean | void} If `false` the column will not be sorted, `true` otherwise.\r\n */\n'beforeColumnSort',\n/**\r\n * Fired by {@link ColumnSorting} and {@link MultiColumnSorting} plugins after sorting the column. This hook is fired when {@link Options#columnSorting}\r\n * or {@link Options#multiColumnSorting} option is enabled.\r\n *\r\n * @event Hooks#afterColumnSort\r\n * @param {Array} currentSortConfig Current sort configuration (for all sorted columns).\r\n * @param {Array} destinationSortConfigs Destination sort configuration (for all sorted columns).\r\n */\n'afterColumnSort',\n/**\r\n * Fired by {@link Autofill} plugin after setting range of autofill. This hook is fired when {@link Options#fillHandle}\r\n * option is enabled.\r\n *\r\n * @event Hooks#modifyAutofillRange\r\n * @param {Array} startArea Array of visual coordinates of the starting point for the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).\r\n * @param {Array} entireArea Array of visual coordinates of the entire area of the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).\r\n */\n'modifyAutofillRange',\n/**\r\n * Fired to allow modifying the copyable range with a callback function.\r\n *\r\n * @event Hooks#modifyCopyableRange\r\n * @param {Array[]} copyableRanges Array of objects defining copyable cells.\r\n */\n'modifyCopyableRange',\n/**\r\n * Fired by {@link CopyPaste} plugin before copying the values into clipboard and before clearing values of\r\n * the selected cells. This hook is fired when {@link Options#copyPaste} option is enabled.\r\n *\r\n * @event Hooks#beforeCut\r\n * @param {Array[]} data An array of arrays which contains data to cut.\r\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\r\n *                       which will be cut out.\r\n * @returns {*} If returns `false` then operation of the cutting out is canceled.\r\n * @example\r\n * ```js\r\n * // To disregard a single row, remove it from the array using data.splice(i, 1).\r\n * new Handsontable(element, {\r\n *   beforeCut: function(data, coords) {\r\n *     // data -> [[1, 2, 3], [4, 5, 6]]\r\n *     data.splice(0, 1);\r\n *     // data -> [[4, 5, 6]]\r\n *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]\r\n *   }\r\n * });\r\n * // To cancel a cutting action, just return `false`.\r\n * new Handsontable(element, {\r\n *   beforeCut: function(data, coords) {\r\n *     return false;\r\n *   }\r\n * });\r\n * ```\r\n */\n'beforeCut',\n/**\r\n * Fired by {@link CopyPaste} plugin after data was cut out from the table. This hook is fired when\r\n * {@link Options#copyPaste} option is enabled.\r\n *\r\n * @event Hooks#afterCut\r\n * @param {Array[]} data An array of arrays which contains the cutted out data.\r\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\r\n *                       which was cut out.\r\n */\n'afterCut',\n/**\r\n * Fired before values are copied into clipboard.\r\n *\r\n * @event Hooks#beforeCopy\r\n * @param {Array[]} data An array of arrays which contains data to copied.\r\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\r\n *                         which will copied.\r\n * @returns {*} If returns `false` then copying is canceled.\r\n *\r\n * @example\r\n * ```js\r\n * // To disregard a single row, remove it from array using data.splice(i, 1).\r\n * ...\r\n * new Handsontable(document.getElementById('example'), {\r\n *   beforeCopy: (data, coords) => {\r\n *     // data -> [[1, 2, 3], [4, 5, 6]]\r\n *     data.splice(0, 1);\r\n *     // data -> [[4, 5, 6]]\r\n *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]\r\n *   }\r\n * });\r\n * ...\r\n *\r\n * // To cancel copying, return false from the callback.\r\n * ...\r\n * new Handsontable(document.getElementById('example'), {\r\n *   beforeCopy: (data, coords) => {\r\n *     return false;\r\n *   }\r\n * });\r\n * ...\r\n * ```\r\n */\n'beforeCopy',\n/**\r\n * Fired by {@link CopyPaste} plugin after data are pasted into table. This hook is fired when {@link Options#copyPaste}\r\n * option is enabled.\r\n *\r\n * @event Hooks#afterCopy\r\n * @param {Array[]} data An array of arrays which contains the copied data.\r\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\r\n *                         which was copied.\r\n */\n'afterCopy',\n/**\r\n * Fired by {@link CopyPaste} plugin before values are pasted into table. This hook is fired when\r\n * {@link Options#copyPaste} option is enabled.\r\n *\r\n * @event Hooks#beforePaste\r\n * @param {Array[]} data An array of arrays which contains data to paste.\r\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\r\n *                       that correspond to the previously selected area.\r\n * @returns {*} If returns `false` then pasting is canceled.\r\n * @example\r\n * ```js\r\n * // To disregard a single row, remove it from array using data.splice(i, 1).\r\n * new Handsontable(example, {\r\n *   beforePaste: (data, coords) => {\r\n *     // data -> [[1, 2, 3], [4, 5, 6]]\r\n *     data.splice(0, 1);\r\n *     // data -> [[4, 5, 6]]\r\n *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]\r\n *   }\r\n * });\r\n * // To cancel pasting, return false from the callback.\r\n * new Handsontable(example, {\r\n *   beforePaste: (data, coords) => {\r\n *     return false;\r\n *   }\r\n * });\r\n * ```\r\n */\n'beforePaste',\n/**\r\n * Fired by {@link CopyPaste} plugin after values are pasted into table. This hook is fired when\r\n * {@link Options#copyPaste} option is enabled.\r\n *\r\n * @event Hooks#afterPaste\r\n * @param {Array[]} data An array of arrays which contains the pasted data.\r\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\r\n *                       that correspond to the previously selected area.\r\n */\n'afterPaste',\n/**\r\n * Fired by {@link ManualColumnMove} plugin before change order of the visual indexes. This hook is fired when\r\n * {@link Options#manualColumnMove} option is enabled.\r\n *\r\n * @event Hooks#beforeColumnMove\r\n * @param {Array} movedColumns Array of visual column indexes to be moved.\r\n * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action. To check visualization of final index please take a look at [documentation](/docs/demo-moving.html).\r\n * @param {number|undefined} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements. To check visualization of drop index please take a look at [documentation](/docs/demo-moving.html). It's `undefined` when `dragColumns` function wasn't called.\r\n * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.\r\n * @returns {void | boolean} If `false` the column will not be moved, `true` otherwise.\r\n */\n'beforeColumnMove',\n/**\r\n * Fired by {@link ManualColumnMove} plugin after changing order of the visual indexes. This hook is fired when\r\n * {@link Options#manualColumnMove} option is enabled.\r\n *\r\n * @event Hooks#afterColumnMove\r\n * @param {Array} movedColumns Array of visual column indexes to be moved.\r\n * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action. To check visualization of final index please take a look at [documentation](/docs/demo-moving.html).\r\n * @param {number|undefined} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements. To check visualization of drop index please take a look at [documentation](/docs/demo-moving.html). It's `undefined` when `dragColumns` function wasn't called.\r\n * @param {boolean} movePossible Indicates if it was possible to move columns to the desired position.\r\n * @param {boolean} orderChanged Indicates if order of columns was changed by move.\r\n */\n'afterColumnMove',\n/**\r\n * Fired by {@link ManualRowMove} plugin before changing the order of the visual indexes. This hook is fired when\r\n * {@link Options#manualRowMove} option is enabled.\r\n *\r\n * @event Hooks#beforeRowMove\r\n * @param {Array} movedRows Array of visual row indexes to be moved.\r\n * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action. To check visualization of final index please take a look at [documentation](/docs/demo-moving.html).\r\n * @param {number|undefined} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements. To check visualization of drop index please take a look at [documentation](/docs/demo-moving.html). It's `undefined` when `dragRows` function wasn't called.\r\n * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\n'beforeRowMove',\n/**\r\n * Fired by {@link ManualRowMove} plugin after changing the order of the visual indexes. This hook is fired when\r\n * {@link Options#manualRowMove} option is enabled.\r\n *\r\n * @event Hooks#afterRowMove\r\n * @param {Array} movedRows Array of visual row indexes to be moved.\r\n * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action. To check visualization of final index please take a look at [documentation](/docs/demo-moving.html).\r\n * @param {number|undefined} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements. To check visualization of drop index please take a look at [documentation](/docs/demo-moving.html). It's `undefined` when `dragRows` function wasn't called.\r\n * @param {boolean} movePossible Indicates if it was possible to move rows to the desired position.\r\n * @param {boolean} orderChanged Indicates if order of rows was changed by move.\r\n */\n'afterRowMove',\n/**\r\n * Fired by {@link ManualColumnResize} plugin before rendering the table with modified column sizes. This hook is\r\n * fired when {@link Options#manualColumnResize} option is enabled.\r\n *\r\n * @event Hooks#beforeColumnResize\r\n * @param {number} newSize Calculated new column width.\r\n * @param {number} column Visual index of the resized column.\r\n * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.\r\n * @returns {number} Returns a new column size or `undefined`, if column size should be calculated automatically.\r\n */\n'beforeColumnResize',\n/**\r\n * Fired by {@link ManualColumnResize} plugin after rendering the table with modified column sizes. This hook is\r\n * fired when {@link Options#manualColumnResize} option is enabled.\r\n *\r\n * @event Hooks#afterColumnResize\r\n * @param {number} newSize Calculated new column width.\r\n * @param {number} column Visual index of the resized column.\r\n * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.\r\n */\n'afterColumnResize',\n/**\r\n * Fired by {@link ManualRowResize} plugin before rendering the table with modified row sizes. This hook is\r\n * fired when {@link Options#manualRowResize} option is enabled.\r\n *\r\n * @event Hooks#beforeRowResize\r\n * @param {number} newSize Calculated new row height.\r\n * @param {number} row Visual index of the resized row.\r\n * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.\r\n * @returns {number} Returns the new row size or `undefined` if row size should be calculated automatically.\r\n */\n'beforeRowResize',\n/**\r\n * Fired by {@link ManualRowResize} plugin after rendering the table with modified row sizes. This hook is\r\n * fired when {@link Options#manualRowResize} option is enabled.\r\n *\r\n * @event Hooks#afterRowResize\r\n * @param {number} newSize Calculated new row height.\r\n * @param {number} row Visual index of the resized row.\r\n * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.\r\n */\n'afterRowResize',\n/**\r\n * Fired after getting the column header renderers.\r\n *\r\n * @event Hooks#afterGetColumnHeaderRenderers\r\n * @param {Function[]} renderers An array of the column header renderers.\r\n */\n'afterGetColumnHeaderRenderers',\n/**\r\n * Fired after getting the row header renderers.\r\n *\r\n * @event Hooks#afterGetRowHeaderRenderers\r\n * @param {Function[]} renderers An array of the row header renderers.\r\n */\n'afterGetRowHeaderRenderers',\n/**\r\n * Fired before applying stretched column width to column.\r\n *\r\n * @event Hooks#beforeStretchingColumnWidth\r\n * @param {number} stretchedWidth Calculated width.\r\n * @param {number} column Visual column index.\r\n * @returns {number} Returns new width which will be applied to the column element.\r\n */\n'beforeStretchingColumnWidth',\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\r\n * Fired by {@link Filters} plugin before applying [filtering]{@link https://handsontable.com/docs/demo-filtering.html}. This hook is fired when\r\n * {@link Options#filters} option is enabled.\r\n *\r\n * @event Hooks#beforeFilter\r\n * @param {object[]} conditionsStack An array of objects with added formulas.\r\n * ```js\r\n * // Example format of the conditionsStack argument:\r\n * [\r\n *   {\r\n *     column: 2,\r\n *     conditions: [\r\n *       {name: 'begins_with', args: [['S']]}\r\n *     ],\r\n *     operation: 'conjunction'\r\n *   },\r\n *   {\r\n *     column: 4,\r\n *     conditions: [\r\n *       {name: 'not_empty', args: []}\r\n *     ],\r\n *     operation: 'conjunction'\r\n *   },\r\n * ]\r\n * ```\r\n * @returns {boolean} If hook returns `false` value then filtering won't be applied on the UI side (server-side filtering).\r\n */\n'beforeFilter',\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\r\n * Fired by {@link Filters} plugin after applying [filtering]{@link https://handsontable.com/docs/demo-filtering.html}. This hook is fired when\r\n * {@link Options#filters} option is enabled.\r\n *\r\n * @event Hooks#afterFilter\r\n * @param {object[]} conditionsStack An array of objects with added conditions.\r\n * ```js\r\n * // Example format of the conditionsStack argument:\r\n * [\r\n *   {\r\n *     column: 2,\r\n *     conditions: [\r\n *       {name: 'begins_with', args: [['S']]}\r\n *     ],\r\n *     operation: 'conjunction'\r\n *   },\r\n *   {\r\n *     column: 4,\r\n *     conditions: [\r\n *       {name: 'not_empty', args: []}\r\n *     ],\r\n *     operation: 'conjunction'\r\n *   },\r\n * ]\r\n * ```\r\n */\n'afterFilter',\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\n/**\r\n * Called when a value is updated in the engine.\r\n *\r\n * @since 9.0.0\r\n * @event Hooks#afterFormulasValuesUpdate\r\n * @param {Array} changes The values and location of applied changes.\r\n */\n'afterFormulasValuesUpdate',\n/**\r\n * Called when a named expression is added to the Formulas' engine instance.\r\n *\r\n * @since 9.0.0\r\n * @event Hooks#afterNamedExpressionAdded\r\n * @param {string} namedExpressionName The name of the added expression.\r\n * @param {Array} changes The values and location of applied changes.\r\n */\n'afterNamedExpressionAdded',\n/**\r\n * Called when a named expression is removed from the Formulas' engine instance.\r\n *\r\n * @since 9.0.0\r\n * @event Hooks#afterNamedExpressionRemoved\r\n * @param {string} namedExpressionName The name of the removed expression.\r\n * @param {Array} changes The values and location of applied changes.\r\n */\n'afterNamedExpressionRemoved',\n/**\r\n * Called when a new sheet is added to the Formulas' engine instance.\r\n *\r\n * @since 9.0.0\r\n * @event Hooks#afterSheetAdded\r\n * @param {string} addedSheetDisplayName The name of the added sheet.\r\n */\n'afterSheetAdded',\n/**\r\n * Called when a sheet in the Formulas' engine instance is renamed.\r\n *\r\n * @since 9.0.0\r\n * @event Hooks#afterSheetRenamed\r\n * @param {string} oldDisplayName The old name of the sheet.\r\n * @param {string} newDisplayName The new name of the sheet.\r\n */\n'afterSheetRenamed',\n/**\r\n * Called when a sheet is removed from the Formulas' engine instance.\r\n *\r\n * @since 9.0.0\r\n * @event Hooks#afterSheetRemoved\r\n * @param {string} removedSheetDisplayName The removed sheet name.\r\n * @param {Array} changes The values and location of applied changes.\r\n */\n'afterSheetRemoved',\n/**\r\n * Fired while retrieving the column header height.\r\n *\r\n * @event Hooks#modifyColumnHeaderHeight\r\n */\n'modifyColumnHeaderHeight',\n/**\r\n * Fired by {@link UndoRedo} plugin before the undo action. Contains information about the action that is being undone.\r\n * This hook is fired when {@link Options#undo} option is enabled.\r\n *\r\n * @event Hooks#beforeUndo\r\n * @param {object} action The action object. Contains information about the action being undone. The `actionType`\r\n *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\n'beforeUndo',\n/**\r\n * Fired by {@link UndoRedo} plugin before changing undo stack.\r\n *\r\n * @event Hooks#beforeUndoStackChange\r\n * @since 8.4.0\r\n * @param {Array} doneActions Stack of actions which may be undone.\r\n * @param {string} [source] String that identifies source of action ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n * @returns {*|boolean} If false is returned the action of changing undo stack is canceled.\r\n */\n'beforeUndoStackChange',\n/**\r\n * Fired by {@link UndoRedo} plugin after the undo action. Contains information about the action that is being undone.\r\n * This hook is fired when {@link Options#undo} option is enabled.\r\n *\r\n * @event Hooks#afterUndo\r\n * @param {object} action The action object. Contains information about the action being undone. The `actionType`\r\n *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).\r\n */\n'afterUndo',\n/**\r\n * Fired by {@link UndoRedo} plugin after changing undo stack.\r\n *\r\n * @event Hooks#afterUndoStackChange\r\n * @since 8.4.0\r\n * @param {Array} doneActionsBefore Stack of actions which could be undone before performing new action.\r\n * @param {Array} doneActionsAfter Stack of actions which can be undone after performing new action.\r\n */\n'afterUndoStackChange',\n/**\r\n * Fired by {@link UndoRedo} plugin before the redo action. Contains information about the action that is being redone.\r\n * This hook is fired when {@link Options#undo} option is enabled.\r\n *\r\n * @event Hooks#beforeRedo\r\n * @param {object} action The action object. Contains information about the action being redone. The `actionType`\r\n *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\n'beforeRedo',\n/**\r\n * Fired by {@link UndoRedo} plugin before changing redo stack.\r\n *\r\n * @event Hooks#beforeRedoStackChange\r\n * @since 8.4.0\r\n * @param {Array} undoneActions Stack of actions which may be redone.\r\n */\n'beforeRedoStackChange',\n/**\r\n * Fired by {@link UndoRedo} plugin after the redo action. Contains information about the action that is being redone.\r\n * This hook is fired when {@link Options#undo} option is enabled.\r\n *\r\n * @event Hooks#afterRedo\r\n * @param {object} action The action object. Contains information about the action being redone. The `actionType`\r\n *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).\r\n */\n'afterRedo',\n/**\r\n * Fired by {@link UndoRedo} plugin after changing redo stack.\r\n *\r\n * @event Hooks#afterRedoStackChange\r\n * @since 8.4.0\r\n * @param {Array} undoneActionsBefore Stack of actions which could be redone before performing new action.\r\n * @param {Array} undoneActionsAfter Stack of actions which can be redone after performing new action.\r\n */\n'afterRedoStackChange',\n/**\r\n * Fired while retrieving the row header width.\r\n *\r\n * @event Hooks#modifyRowHeaderWidth\r\n * @param {number} rowHeaderWidth Row header width.\r\n */\n'modifyRowHeaderWidth',\n/**\r\n * Fired from the `populateFromArray` method during the `autofill` process. Fired for each \"autofilled\" cell individually.\r\n *\r\n * @deprecated\r\n * @event Hooks#beforeAutofillInsidePopulate\r\n * @param {object} index Object containing `row` and `col` properties, defining the number of rows/columns from the initial cell of the autofill.\r\n * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.\r\n * @param {Array[]} input Contains an array of rows with data being used in the autofill.\r\n * @param {Array} deltas The deltas array passed to the `populateFromArray` method.\r\n */\n'beforeAutofillInsidePopulate',\n/**\r\n * Fired when the start of the selection is being modified (e.g. Moving the selection with the arrow keys).\r\n *\r\n * @event Hooks#modifyTransformStart\r\n * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.\r\n */\n'modifyTransformStart',\n/**\r\n * Fired when the end of the selection is being modified (e.g. Moving the selection with the arrow keys).\r\n *\r\n * @event Hooks#modifyTransformEnd\r\n * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.\r\n */\n'modifyTransformEnd',\n/**\r\n * Fired after the start of the selection is being modified (e.g. Moving the selection with the arrow keys).\r\n *\r\n * @event Hooks#afterModifyTransformStart\r\n * @param {CellCoords} coords Coords of the freshly selected cell.\r\n * @param {number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.\r\n * @param {number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.\r\n */\n'afterModifyTransformStart',\n/**\r\n * Fired after the end of the selection is being modified (e.g. Moving the selection with the arrow keys).\r\n *\r\n * @event Hooks#afterModifyTransformEnd\r\n * @param {CellCoords} coords Visual coords of the freshly selected cell.\r\n * @param {number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.\r\n * @param {number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.\r\n */\n'afterModifyTransformEnd',\n/**\r\n * Fired inside the `viewportRowCalculatorOverride` method. Allows modifying the row calculator parameters.\r\n *\r\n * @event Hooks#afterViewportRowCalculatorOverride\r\n * @param {object} calc The row calculator.\r\n */\n'afterViewportRowCalculatorOverride',\n/**\r\n * Fired inside the `viewportColumnCalculatorOverride` method. Allows modifying the row calculator parameters.\r\n *\r\n * @event Hooks#afterViewportColumnCalculatorOverride\r\n * @param {object} calc The row calculator.\r\n */\n'afterViewportColumnCalculatorOverride',\n/**\r\n * Fired after initializing all the plugins.\r\n * This hook should be added before Handsontable is initialized.\r\n *\r\n * @event Hooks#afterPluginsInitialized\r\n *\r\n * @example\r\n * ```js\r\n * Handsontable.hooks.add('afterPluginsInitialized', myCallback);\r\n * ```\r\n */\n'afterPluginsInitialized',\n/**\r\n * Fired by {@link HiddenRows} plugin before marking the rows as hidden. Fired only if the {@link Options#hiddenRows} option is enabled.\r\n * Returning `false` in the callback will prevent the hiding action from completing.\r\n *\r\n * @event Hooks#beforeHideRows\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.\r\n * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.\r\n */\n'beforeHideRows',\n/**\r\n * Fired by {@link HiddenRows} plugin after marking the rows as hidden. Fired only if the {@link Options#hiddenRows} option is enabled.\r\n *\r\n * @event Hooks#afterHideRows\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.\r\n * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.\r\n * @param {boolean} stateChanged `true`, if the action affected any non-hidden rows, `false` otherwise.\r\n */\n'afterHideRows',\n/**\r\n * Fired by {@link HiddenRows} plugin before marking the rows as not hidden. Fired only if the {@link Options#hiddenRows} option is enabled.\r\n * Returning `false` in the callback will prevent the row revealing action from completing.\r\n *\r\n * @event Hooks#beforeUnhideRows\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.\r\n * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the revealing action will not be completed.\r\n */\n'beforeUnhideRows',\n/**\r\n * Fired by {@link HiddenRows} plugin after marking the rows as not hidden. Fired only if the {@link Options#hiddenRows} option is enabled.\r\n *\r\n * @event Hooks#afterUnhideRows\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.\r\n * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.\r\n * @param {boolean} stateChanged `true`, if the action affected any hidden rows, `false` otherwise.\r\n */\n'afterUnhideRows',\n/**\r\n * Fired by {@link HiddenColumns} plugin before marking the columns as hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.\r\n * Returning `false` in the callback will prevent the hiding action from completing.\r\n *\r\n * @event Hooks#beforeHideColumns\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.\r\n * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.\r\n */\n'beforeHideColumns',\n/**\r\n * Fired by {@link HiddenColumns} plugin after marking the columns as hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.\r\n *\r\n * @event Hooks#afterHideColumns\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.\r\n * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.\r\n * @param {boolean} stateChanged `true`, if the action affected any non-hidden columns, `false` otherwise.\r\n */\n'afterHideColumns',\n/**\r\n * Fired by {@link HiddenColumns} plugin before marking the columns as not hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.\r\n * Returning `false` in the callback will prevent the column revealing action from completing.\r\n *\r\n * @event Hooks#beforeUnhideColumns\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.\r\n * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.\r\n */\n'beforeUnhideColumns',\n/**\r\n * Fired by {@link HiddenColumns} plugin after marking the columns as not hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.\r\n *\r\n * @event Hooks#afterUnhideColumns\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.\r\n * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.\r\n * @param {boolean} stateChanged `true`, if the action affected any hidden columns, `false` otherwise.\r\n */\n'afterUnhideColumns',\n/**\r\n * Fired by {@link TrimRows} plugin before trimming rows. This hook is fired when {@link Options#trimRows} option is enabled.\r\n *\r\n * @event Hooks#beforeTrimRow\r\n * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.\r\n * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.\r\n * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the trimming action will not be completed.\r\n */\n'beforeTrimRow',\n/**\r\n * Fired by {@link TrimRows} plugin after trimming rows. This hook is fired when {@link Options#trimRows} option is enabled.\r\n *\r\n * @event Hooks#afterTrimRow\r\n * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.\r\n * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.\r\n * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.\r\n * @param {boolean} stateChanged `true`, if the action affected any non-trimmed rows, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the trimming action will not be completed.\r\n */\n'afterTrimRow',\n/**\r\n * Fired by {@link TrimRows} plugin before untrimming rows. This hook is fired when {@link Options#trimRows} option is enabled.\r\n *\r\n * @event Hooks#beforeUntrimRow\r\n * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.\r\n * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.\r\n * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the untrimming action will not be completed.\r\n */\n'beforeUntrimRow',\n/**\r\n * Fired by {@link TrimRows} plugin after untrimming rows. This hook is fired when {@link Options#trimRows} option is enabled.\r\n *\r\n * @event Hooks#afterUntrimRow\r\n * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.\r\n * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.\r\n * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.\r\n * @param {boolean} stateChanged `true`, if the action affected any trimmed rows, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the untrimming action will not be completed.\r\n */\n'afterUntrimRow',\n/**\r\n * Fired by {@link DropdownMenu} plugin before opening the dropdown menu. This hook is fired when {@link Options#dropdownMenu}\r\n * option is enabled.\r\n *\r\n * @event Hooks#beforeDropdownMenuShow\r\n * @param {DropdownMenu} dropdownMenu The DropdownMenu instance.\r\n */\n'beforeDropdownMenuShow',\n/**\r\n * Fired by {@link DropdownMenu} plugin after opening the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}\r\n * option is enabled.\r\n *\r\n * @event Hooks#afterDropdownMenuShow\r\n * @param {DropdownMenu} dropdownMenu The DropdownMenu instance.\r\n */\n'afterDropdownMenuShow',\n/**\r\n * Fired by {@link DropdownMenu} plugin after hiding the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}\r\n * option is enabled.\r\n *\r\n * @event Hooks#afterDropdownMenuHide\r\n * @param {DropdownMenu} instance The DropdownMenu instance.\r\n */\n'afterDropdownMenuHide',\n/**\r\n * Fired by {@link NestedRows} plugin before adding a children to the NestedRows structure. This hook is fired when\r\n * {@link Options#nestedRows} option is enabled.\r\n *\r\n * @event Hooks#beforeAddChild\r\n * @param {object} parent The parent object.\r\n * @param {object|undefined} element The element added as a child. If `undefined`, a blank child was added.\r\n * @param {number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.\r\n */\n'beforeAddChild',\n/**\r\n * Fired by {@link NestedRows} plugin after adding a children to the NestedRows structure. This hook is fired when\r\n * {@link Options#nestedRows} option is enabled.\r\n *\r\n * @event Hooks#afterAddChild\r\n * @param {object} parent The parent object.\r\n * @param {object|undefined} element The element added as a child. If `undefined`, a blank child was added.\r\n * @param {number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.\r\n */\n'afterAddChild',\n/**\r\n * Fired by {@link NestedRows} plugin before detaching a child from its parent. This hook is fired when\r\n * {@link Options#nestedRows} option is enabled.\r\n *\r\n * @event Hooks#beforeDetachChild\r\n * @param {object} parent An object representing the parent from which the element is to be detached.\r\n * @param {object} element The detached element.\r\n */\n'beforeDetachChild',\n/**\r\n * Fired by {@link NestedRows} plugin after detaching a child from its parent. This hook is fired when\r\n * {@link Options#nestedRows} option is enabled.\r\n *\r\n * @event Hooks#afterDetachChild\r\n * @param {object} parent An object representing the parent from which the element was detached.\r\n * @param {object} element The detached element.\r\n */\n'afterDetachChild',\n/**\r\n * Fired after the editor is opened and rendered.\r\n *\r\n * @event Hooks#afterBeginEditing\r\n * @param {number} row Visual row index of the edited cell.\r\n * @param {number} column Visual column index of the edited cell.\r\n */\n'afterBeginEditing',\n/**\r\n * Fired by {@link MergeCells} plugin before cell merging. This hook is fired when {@link Options#mergeCells}\r\n * option is enabled.\r\n *\r\n * @event Hooks#beforeMergeCells\r\n * @param {CellRange} cellRange Selection cell range.\r\n * @param {boolean} [auto=false] `true` if called automatically by the plugin.\r\n */\n'beforeMergeCells',\n/**\r\n * Fired by {@link MergeCells} plugin after cell merging. This hook is fired when {@link Options#mergeCells}\r\n * option is enabled.\r\n *\r\n * @event Hooks#afterMergeCells\r\n * @param {CellRange} cellRange Selection cell range.\r\n * @param {object} mergeParent The parent collection of the provided cell range.\r\n * @param {boolean} [auto=false] `true` if called automatically by the plugin.\r\n */\n'afterMergeCells',\n/**\r\n * Fired by {@link MergeCells} plugin before unmerging the cells. This hook is fired when {@link Options#mergeCells}\r\n * option is enabled.\r\n *\r\n * @event Hooks#beforeUnmergeCells\r\n * @param {CellRange} cellRange Selection cell range.\r\n * @param {boolean} [auto=false] `true` if called automatically by the plugin.\r\n */\n'beforeUnmergeCells',\n/**\r\n * Fired by {@link MergeCells} plugin after unmerging the cells. This hook is fired when {@link Options#mergeCells}\r\n * option is enabled.\r\n *\r\n * @event Hooks#afterUnmergeCells\r\n * @param {CellRange} cellRange Selection cell range.\r\n * @param {boolean} [auto=false] `true` if called automatically by the plugin.\r\n */\n'afterUnmergeCells',\n/**\r\n * Fired after the table was switched into listening mode. This allows Handsontable to capture keyboard events and\r\n * respond in the right way.\r\n *\r\n * @event Hooks#afterListen\r\n */\n'afterListen',\n/**\r\n * Fired after the table was switched off from the listening mode. This makes the Handsontable inert for any\r\n * keyboard events.\r\n *\r\n * @event Hooks#afterUnlisten\r\n */\n'afterUnlisten',\n/**\r\n * Fired after the window was resized.\r\n *\r\n * @event Hooks#afterRefreshDimensions\r\n * @param {object} previousDimensions Previous dimensions of the container.\r\n * @param {object} currentDimensions Current dimensions of the container.\r\n * @param {boolean} stateChanged `true`, if the container was re-render, `false` otherwise.\r\n */\n'afterRefreshDimensions',\n/**\r\n * Cancellable hook, called after resizing a window, but before redrawing a table.\r\n *\r\n * @event Hooks#beforeRefreshDimensions\r\n * @param {object} previousDimensions Previous dimensions of the container.\r\n * @param {object} currentDimensions Current dimensions of the container.\r\n * @param {boolean} actionPossible `true`, if current and previous dimensions are different, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the refresh action will not be completed.\r\n */\n'beforeRefreshDimensions',\n/**\r\n * Fired by {@link CollapsibleColumns} plugin before columns collapse. This hook is fired when {@link Options#collapsibleColumns} option is enabled.\r\n *\r\n * @event Hooks#beforeColumnCollapse\r\n * @since 8.0.0\r\n * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {boolean} collapsePossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the collapsing action will not be completed.\r\n */\n'beforeColumnCollapse',\n/**\r\n * Fired by {@link CollapsibleColumns} plugin before columns collapse. This hook is fired when {@link Options#collapsibleColumns} option is enabled.\r\n *\r\n * @event Hooks#afterColumnCollapse\r\n * @since 8.0.0\r\n * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {boolean} collapsePossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.\r\n * @param {boolean} successfullyCollapsed `true`, if the action affected any non-collapsible column, `false` otherwise.\r\n */\n'afterColumnCollapse',\n/**\r\n * Fired by {@link CollapsibleColumns} plugin before columns expand. This hook is fired when {@link Options#collapsibleColumns} option is enabled.\r\n *\r\n * @event Hooks#beforeColumnExpand\r\n * @since 8.0.0\r\n * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {boolean} expandPossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the expanding action will not be completed.\r\n */\n'beforeColumnExpand',\n/**\r\n * Fired by {@link CollapsibleColumns} plugin before columns expand. This hook is fired when {@link Options#collapsibleColumns} option is enabled.\r\n *\r\n * @event Hooks#afterColumnExpand\r\n * @since 8.0.0\r\n * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {boolean} expandPossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.\r\n * @param {boolean} successfullyExpanded `true`, if the action affected any non-collapsible column, `false` otherwise.\r\n */\n'afterColumnExpand',\n/**\r\n * Fired by {@link AutoColumnSize} plugin within {@link SampleGenerator} utility.\r\n *\r\n * @event Hooks#modifyAutoColumnSizeSeed\r\n * @since 8.4.0\r\n * @param {string|undefined} seed Seed ID, unique name to categorize samples.\r\n * @param {object} cellProperties Object containing the cell properties.\r\n * @param {*} cellValue Value of the cell.\r\n */\n'modifyAutoColumnSizeSeed'];\n/**\r\n * Template warning message for removed hooks.\r\n *\r\n * @type {string}\r\n */\n\nvar REMOVED_MESSAGE = toSingleLine(_templateObject || (_templateObject = _taggedTemplateLiteral([\"The plugin hook \\\"[hookName]\\\" was removed in Handsontable [removedInVersion]. \\n  Please consult release notes https://github.com/handsontable/handsontable/releases/tag/[removedInVersion] to \\n  learn about the migration path.\"], [\"The plugin hook \\\"[hookName]\\\" was removed in Handsontable [removedInVersion].\\\\x20\\n  Please consult release notes https://github.com/handsontable/handsontable/releases/tag/[removedInVersion] to\\\\x20\\n  learn about the migration path.\"])));\n/**\r\n * The list of the hooks which are removed from the API. The warning message is printed out in\r\n * the developer console when the hook is used.\r\n *\r\n * The Map key is represented by hook name and its value points to the Handsontable version\r\n * in which it was removed.\r\n *\r\n * @type {Map<string, string>}\r\n */\n\nvar REMOVED_HOOKS = new Map([['modifyRow', '8.0.0'], ['modifyCol', '8.0.0'], ['unmodifyRow', '8.0.0'], ['unmodifyCol', '8.0.0'], ['skipLengthCache', '8.0.0'], ['hiddenColumn', '8.0.0'], ['hiddenRow', '8.0.0']]);\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\r\n * The list of the hooks which are deprecated. The warning message is printed out in\r\n * the developer console when the hook is used.\r\n *\r\n * The Map key is represented by hook name and its value keeps message which whould be\r\n * printed out when the hook is used.\r\n *\r\n * Usage:\r\n * ```js\r\n * ...\r\n * New Map([\r\n *   ['beforeColumnExpand', 'The plugin hook \"beforeColumnExpand\" is deprecated. Use \"beforeColumnExpand2\" instead.'],\r\n * ])\r\n * ...\r\n * ```\r\n *\r\n *\r\n * @type {Map<string, string>}\r\n */\n\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\nvar DEPRECATED_HOOKS = new Map([['beforeAutofillInsidePopulate', 'The plugin hook \"beforeAutofillInsidePopulate\" is deprecated and will be removed in the next major release.']]);\n\nvar Hooks = /*#__PURE__*/function () {\n  /**\r\n   *\r\n   */\n  function Hooks() {\n    _classCallCheck(this, Hooks);\n\n    this.globalBucket = this.createEmptyBucket();\n  }\n  /**\r\n   * Returns a new object with empty handlers related to every registered hook name.\r\n   *\r\n   * @returns {object} The empty bucket object.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * Handsontable.hooks.createEmptyBucket();\r\n   * // Results:\r\n   * {\r\n   * ...\r\n   * afterCreateCol: [],\r\n   * afterCreateRow: [],\r\n   * beforeInit: [],\r\n   * ...\r\n   * }\r\n   * ```\r\n   */\n\n\n  _createClass(Hooks, [{\n    key: \"createEmptyBucket\",\n    value: function createEmptyBucket() {\n      var bucket = Object.create(null); // eslint-disable-next-line no-return-assign\n\n      arrayEach(REGISTERED_HOOKS, function (hook) {\n        return bucket[hook] = [];\n      });\n      return bucket;\n    }\n    /**\r\n     * Get hook bucket based on the context of the object or if argument is `undefined`, get the global hook bucket.\r\n     *\r\n     * @param {object} [context=null] A Handsontable instance.\r\n     * @returns {object} Returns a global or Handsontable instance bucket.\r\n     */\n\n  }, {\n    key: \"getBucket\",\n    value: function getBucket() {\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (context) {\n        if (!context.pluginHookBucket) {\n          context.pluginHookBucket = this.createEmptyBucket();\n        }\n\n        return context.pluginHookBucket;\n      }\n\n      return this.globalBucket;\n    }\n    /**\r\n     * Adds a listener (globally or locally) to a specified hook name.\r\n     * If the `context` parameter is provided, the hook will be added only to the instance it references.\r\n     * Otherwise, the callback will be used everytime the hook fires on any Handsontable instance.\r\n     * You can provide an array of callback functions as the `callback` argument, this way they will all be fired\r\n     * once the hook is triggered.\r\n     *\r\n     * @see Core#addHook\r\n     * @param {string} key Hook name.\r\n     * @param {Function|Array} callback Callback function or an array of functions.\r\n     * @param {object} [context=null] The context for the hook callback to be added - a Handsontable instance or leave empty.\r\n     * @returns {Hooks} Instance of Hooks.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * // single callback, added locally\r\n     * Handsontable.hooks.add('beforeInit', myCallback, hotInstance);\r\n     *\r\n     * // single callback, added globally\r\n     * Handsontable.hooks.add('beforeInit', myCallback);\r\n     *\r\n     * // multiple callbacks, added locally\r\n     * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback], hotInstance);\r\n     *\r\n     * // multiple callbacks, added globally\r\n     * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback]);\r\n     * ```\r\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(key, callback) {\n      var _this = this;\n\n      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if (Array.isArray(callback)) {\n        arrayEach(callback, function (c) {\n          return _this.add(key, c, context);\n        });\n      } else {\n        if (REMOVED_HOOKS.has(key)) {\n          warn(substitute(REMOVED_MESSAGE, {\n            hookName: key,\n            removedInVersion: REMOVED_HOOKS.get(key)\n          }));\n        }\n\n        if (DEPRECATED_HOOKS.has(key)) {\n          warn(DEPRECATED_HOOKS.get(key));\n        }\n\n        var bucket = this.getBucket(context);\n\n        if (typeof bucket[key] === 'undefined') {\n          this.register(key);\n          bucket[key] = [];\n        }\n\n        callback.skip = false;\n\n        if (bucket[key].indexOf(callback) === -1) {\n          // only add a hook if it has not already been added (adding the same hook twice is now silently ignored)\n          var foundInitialHook = false;\n\n          if (callback.initialHook) {\n            arrayEach(bucket[key], function (cb, i) {\n              if (cb.initialHook) {\n                bucket[key][i] = callback;\n                foundInitialHook = true;\n                return false;\n              }\n            });\n          }\n\n          if (!foundInitialHook) {\n            bucket[key].push(callback);\n          }\n        }\n      }\n\n      return this;\n    }\n    /**\r\n     * Adds a listener to a specified hook. After the hook runs this listener will be automatically removed from the bucket.\r\n     *\r\n     * @see Core#addHookOnce\r\n     * @param {string} key Hook/Event name.\r\n     * @param {Function|Array} callback Callback function.\r\n     * @param {object} [context=null] A Handsontable instance.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.once('beforeInit', myCallback, hotInstance);\r\n     * ```\r\n     */\n\n  }, {\n    key: \"once\",\n    value: function once(key, callback) {\n      var _this2 = this;\n\n      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if (Array.isArray(callback)) {\n        arrayEach(callback, function (c) {\n          return _this2.once(key, c, context);\n        });\n      } else {\n        callback.runOnce = true;\n        this.add(key, callback, context);\n      }\n    }\n    /**\r\n     * Removes a listener from a hook with a given name. If the `context` argument is provided, it removes a listener from a local hook assigned to the given Handsontable instance.\r\n     *\r\n     * @see Core#removeHook\r\n     * @param {string} key Hook/Event name.\r\n     * @param {Function} callback Callback function (needs the be the function that was previously added to the hook).\r\n     * @param {object} [context=null] Handsontable instance.\r\n     * @returns {boolean} Returns `true` if hook was removed, `false` otherwise.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.remove('beforeInit', myCallback);\r\n     * ```\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(key, callback) {\n      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var bucket = this.getBucket(context);\n\n      if (typeof bucket[key] !== 'undefined') {\n        if (bucket[key].indexOf(callback) >= 0) {\n          callback.skip = true;\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * Checks whether there are any registered listeners for the provided hook name.\r\n     * If the `context` parameter is provided, it only checks for listeners assigned to the given Handsontable instance.\r\n     *\r\n     * @param {string} key Hook name.\r\n     * @param {object} [context=null] A Handsontable instance.\r\n     * @returns {boolean} `true` for success, `false` otherwise.\r\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var bucket = this.getBucket(context);\n      return !!(bucket[key] !== void 0 && bucket[key].length);\n    }\n    /**\r\n     * Runs all local and global callbacks assigned to the hook identified by the `key` parameter.\r\n     * It returns either a return value from the last called callback or the first parameter (`p1`) passed to the `run` function.\r\n     *\r\n     * @see Core#runHooks\r\n     * @param {object} context Handsontable instance.\r\n     * @param {string} key Hook/Event name.\r\n     * @param {*} [p1] Parameter to be passed as an argument to the callback function.\r\n     * @param {*} [p2] Parameter to be passed as an argument to the callback function.\r\n     * @param {*} [p3] Parameter to be passed as an argument to the callback function.\r\n     * @param {*} [p4] Parameter to be passed as an argument to the callback function.\r\n     * @param {*} [p5] Parameter to be passed as an argument to the callback function.\r\n     * @param {*} [p6] Parameter to be passed as an argument to the callback function.\r\n     * @returns {*} Either a return value from the last called callback or `p1`.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.run(hot, 'beforeInit');\r\n     * ```\r\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(context, key, p1, p2, p3, p4, p5, p6) {\n      {\n        var globalHandlers = this.globalBucket[key];\n        var length = globalHandlers ? globalHandlers.length : 0;\n        var index = 0;\n\n        if (length) {\n          // Do not optimise this loop with arrayEach or arrow function! If you do You'll decrease perf because of GC.\n          while (index < length) {\n            if (!globalHandlers[index] || globalHandlers[index].skip) {\n              index += 1;\n              /* eslint-disable no-continue */\n\n              continue;\n            } // performance considerations - http://jsperf.com/call-vs-apply-for-a-plugin-architecture\n\n\n            var res = globalHandlers[index].call(context, p1, p2, p3, p4, p5, p6);\n\n            if (res !== void 0) {\n              // eslint-disable-next-line no-param-reassign\n              p1 = res;\n            }\n\n            if (globalHandlers[index] && globalHandlers[index].runOnce) {\n              this.remove(key, globalHandlers[index]);\n            }\n\n            index += 1;\n          }\n        }\n      }\n      {\n        var localHandlers = this.getBucket(context)[key];\n\n        var _length = localHandlers ? localHandlers.length : 0;\n\n        var _index = 0;\n\n        if (_length) {\n          // Do not optimise this loop with arrayEach or arrow function! If you do You'll decrease perf because of GC.\n          while (_index < _length) {\n            if (!localHandlers[_index] || localHandlers[_index].skip) {\n              _index += 1;\n              /* eslint-disable no-continue */\n\n              continue;\n            } // performance considerations - http://jsperf.com/call-vs-apply-for-a-plugin-architecture\n\n\n            var _res = localHandlers[_index].call(context, p1, p2, p3, p4, p5, p6);\n\n            if (_res !== void 0) {\n              // eslint-disable-next-line no-param-reassign\n              p1 = _res;\n            }\n\n            if (localHandlers[_index] && localHandlers[_index].runOnce) {\n              this.remove(key, localHandlers[_index], context);\n            }\n\n            _index += 1;\n          }\n        }\n      }\n      return p1;\n    }\n    /**\r\n     * Destroy all listeners connected to the context. If no context is provided, the global listeners will be destroyed.\r\n     *\r\n     * @param {object} [context=null] A Handsontable instance.\r\n     * @example\r\n     * ```js\r\n     * // destroy the global listeners\r\n     * Handsontable.hooks.destroy();\r\n     *\r\n     * // destroy the local listeners\r\n     * Handsontable.hooks.destroy(hotInstance);\r\n     * ```\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null; // eslint-disable-next-line no-return-assign\n\n      objectEach(this.getBucket(context), function (value, key, bucket) {\n        return bucket[key].length = 0;\n      });\n    }\n    /**\r\n     * Registers a hook name (adds it to the list of the known hook names). Used by plugins.\r\n     * It is not necessary to call register, but if you use it, your plugin hook will be used returned by\r\n     * the `getRegistered` method. (which itself is used in the demo https://handsontable.com/docs/tutorial-using-callbacks.html).\r\n     *\r\n     * @param {string} key The hook name.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.register('myHook');\r\n     * ```\r\n     */\n\n  }, {\n    key: \"register\",\n    value: function register(key) {\n      if (!this.isRegistered(key)) {\n        REGISTERED_HOOKS.push(key);\n      }\n    }\n    /**\r\n     * Deregisters a hook name (removes it from the list of known hook names).\r\n     *\r\n     * @param {string} key The hook name.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.deregister('myHook');\r\n     * ```\r\n     */\n\n  }, {\n    key: \"deregister\",\n    value: function deregister(key) {\n      if (this.isRegistered(key)) {\n        REGISTERED_HOOKS.splice(REGISTERED_HOOKS.indexOf(key), 1);\n      }\n    }\n    /**\r\n     * Returns a boolean value depending on if a hook by such name has been removed or deprecated.\r\n     *\r\n     * @param {string} hookName The hook name to check.\r\n     * @returns {boolean} Returns `true` if the provided hook name was marked as deprecated or\r\n     * removed from API, `false` otherwise.\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.isDeprecated('skipLengthCache');\r\n     *\r\n     * // Results:\r\n     * true\r\n     * ```\r\n     */\n\n  }, {\n    key: \"isDeprecated\",\n    value: function isDeprecated(hookName) {\n      return DEPRECATED_HOOKS.has(hookName) || REMOVED_HOOKS.has(hookName);\n    }\n    /**\r\n     * Returns a boolean depending on if a hook by such name has been registered.\r\n     *\r\n     * @param {string} hookName The hook name to check.\r\n     * @returns {boolean} `true` for success, `false` otherwise.\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.isRegistered('beforeInit');\r\n     *\r\n     * // Results:\r\n     * true\r\n     * ```\r\n     */\n\n  }, {\n    key: \"isRegistered\",\n    value: function isRegistered(hookName) {\n      return REGISTERED_HOOKS.indexOf(hookName) >= 0;\n    }\n    /**\r\n     * Returns an array of registered hooks.\r\n     *\r\n     * @returns {Array} An array of registered hooks.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.getRegistered();\r\n     *\r\n     * // Results:\r\n     * [\r\n     * ...\r\n     *   'beforeInit',\r\n     *   'beforeRender',\r\n     *   'beforeSetRangeEnd',\r\n     *   'beforeDrawBorders',\r\n     *   'beforeChange',\r\n     * ...\r\n     * ]\r\n     * ```\r\n     */\n\n  }, {\n    key: \"getRegistered\",\n    value: function getRegistered() {\n      return REGISTERED_HOOKS;\n    }\n  }], [{\n    key: \"getSingleton\",\n    value: function getSingleton() {\n      return getGlobalSingleton();\n    }\n  }]);\n\n  return Hooks;\n}();\n\nvar globalSingleton = new Hooks();\n/**\r\n * @returns {Hooks}\r\n */\n\nfunction getGlobalSingleton() {\n  return globalSingleton;\n}\n\nexport default Hooks;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/pluginHooks.mjs"],"names":["_templateObject","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_taggedTemplateLiteral","strings","raw","slice","freeze","defineProperties","value","arrayEach","objectEach","substitute","warn","toSingleLine","REGISTERED_HOOKS","REMOVED_MESSAGE","REMOVED_HOOKS","Map","DEPRECATED_HOOKS","Hooks","globalBucket","createEmptyBucket","bucket","create","hook","getBucket","context","arguments","undefined","pluginHookBucket","add","callback","_this","Array","isArray","c","has","hookName","removedInVersion","get","register","skip","indexOf","foundInitialHook","initialHook","cb","push","once","_this2","runOnce","remove","run","p1","p2","p3","p4","p5","p6","globalHandlers","index","res","call","localHandlers","_length","_index","_res","destroy","isRegistered","deregister","splice","isDeprecated","getRegistered","getSingleton","getGlobalSingleton","globalSingleton"],"mappings":"AAGA,IAAIA,eAAJ;;AAEA,SAASC,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,MAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,KAAnC,EAA0C;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAE,QAAIE,UAAU,GAAGH,KAAK,CAACC,CAAD,CAAtB;AAA2BE,IAAAA,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;AAAwDD,IAAAA,UAAU,CAACE,YAAX,GAA0B,IAA1B;AAAgC,QAAI,WAAWF,UAAf,EAA2BA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AAA4BC,IAAAA,MAAM,CAACC,cAAP,CAAsBT,MAAtB,EAA8BI,UAAU,CAACM,GAAzC,EAA8CN,UAA9C;AAA4D;AAAE;;AAE7T,SAASO,YAAT,CAAsBd,WAAtB,EAAmCe,UAAnC,EAA+CC,WAA/C,EAA4D;AAAE,MAAID,UAAJ,EAAgBb,iBAAiB,CAACF,WAAW,CAACiB,SAAb,EAAwBF,UAAxB,CAAjB;AAAsD,MAAIC,WAAJ,EAAiBd,iBAAiB,CAACF,WAAD,EAAcgB,WAAd,CAAjB;AAA6C,SAAOhB,WAAP;AAAqB;;AAUvN,SAASkB,sBAAT,CAAgCC,OAAhC,EAAyCC,GAAzC,EAA8C;AAAE,MAAI,CAACA,GAAL,EAAU;AAAEA,IAAAA,GAAG,GAAGD,OAAO,CAACE,KAAR,CAAc,CAAd,CAAN;AAAyB;;AAAC,SAAOV,MAAM,CAACW,MAAP,CAAcX,MAAM,CAACY,gBAAP,CAAwBJ,OAAxB,EAAiC;AAAEC,IAAAA,GAAG,EAAE;AAAEI,MAAAA,KAAK,EAAEb,MAAM,CAACW,MAAP,CAAcF,GAAd;AAAT;AAAP,GAAjC,CAAd,CAAP;AAAiG;;AAEvL,SAASK,SAAT,QAA0B,qBAA1B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,YAAT,QAA6B,kCAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,gBAAgB,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA,oBANuB;AAOvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aA3BuB;AA4BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAnCuB;AAoCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BA5CuB;AA6CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCArDuB;AAsDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BA9DuB;AA+DvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAtEuB;AAuEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBA9EuB;AA+EvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAtFuB;AAuFvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAjGuB;AAkGvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBArHuB;AAsHvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBA/HuB;AAgIvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBA1IuB;AA2IvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBApJuB;AAqJvB;AACA;AACA;AACA;AACA;AACA,eA1JuB;AA2JvB;AACA;AACA;AACA;AACA;AACA,cAhKuB;AAiKvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAxKuB;AAyKvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBApLuB;AAqLvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BA5LuB;AA6LvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBArMuB;AAsMvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBA7MuB;AA8MvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBArNuB;AAsNvB;AACA;AACA;AACA;AACA;AACA,WA3NuB;AA4NvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eApOuB;AAqOvB;AACA;AACA;AACA;AACA;AACA,qBA1OuB;AA2OvB;AACA;AACA;AACA;AACA;AACA;AACA,4BAjPuB;AAkPvB;AACA;AACA;AACA;AACA;AACA;AACA,2BAxPuB;AAyPvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBArQuB;AAsQvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAlRuB;AAmRvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBA/RuB;AAgSvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBA5SuB;AA6SvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBArTuB;AAsTvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBA/TuB;AAgUvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAzUuB;AA0UvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAjVuB;AAkVvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBA7VuB;AA8VvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAzWuB;AA0WvB;AACA;AACA;AACA;AACA;AACA,yBA/WuB;AAgXvB;AACA;AACA;AACA;AACA;AACA,uBArXuB;AAsXvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBA1YuB;AA2YvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAjauB;AAkavB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBA5auB;AA6avB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAzbuB;AA0bvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAncuB;AAocvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBA7cuB;AA8cvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAtduB;AAudvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAheuB;AAievB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAzeuB;AA0evB;AACA;AACA;AACA;AACA;AACA;AACA,qBAhfuB;AAifvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAjgBuB;AAkgBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAzgBuB;AA0gBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAjhBuB;AAkhBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAhiBuB;AAiiBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eA7iBuB;AA8iBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBA/jBuB;AAgkBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAlmBuB;AAmmBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBA3mBuB;AA4mBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAnnBuB;AAonBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBA5nBuB;AA6nBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAvoBuB;AAwoBvB;AACA;AACA;AACA;AACA;AACA,YA7oBuB;AA8oBvB;AACA;AACA;AACA;AACA;AACA;AACA,uBAppBuB;AAqpBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBA/pBuB;AAgqBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAzqBuB;AA0qBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAprBuB;AAqrBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBA7rBuB;AA8rBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAvsBuB;AAwsBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAltBuB;AAmtBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBA3tBuB;AA4tBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAtuBuB;AAuuBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAjvBuB;AAkvBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cA1vBuB;AA2vBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAtwBuB;AAuwBvB;AACA;AACA;AACA;AACA;AACA;AACA,yBA7wBuB;AA8wBvB;AACA;AACA;AACA;AACA;AACA;AACA,qBApxBuB;AAqxBvB;AACA;AACA;AACA;AACA;AACA;AACA,mBA3xBuB;AA4xBvB;AACA;AACA;AACA;AACA;AACA,mBAjyBuB;AAkyBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBA/yBuB;AAgzBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAxzBuB;AAyzBvB;AACA;AACA;AACA;AACA;AACA,WA9zBuB;AA+zBvB;AACA;AACA;AACA;AACA;AACA,MAp0BuB;AAq0BvB;AACA;AACA;AACA;AACA;AACA;AACA,iBA30BuB;AA40BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAn1BuB;AAo1BvB;AACA;AACA;AACA;AACA;AACA;AACA,iBA11BuB;AA21BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAl2BuB;AAm2BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YA52BuB;AA62BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAv3BuB;AAw3BvB;AACA;AACA;AACA;AACA;AACA;AACA,eA93BuB;AA+3BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBA34BuB;AA44BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAz5BuB;AA05BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAv6BuB;AAw6BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAh7BuB;AAi7BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAx7BuB;AAy7BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAj8BuB;AAk8BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBA78BuB;AA88BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAt9BuB;AAu9BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBA/9BuB;AAg+BvB;AACA;AACA;AACA;AACA;AACA;AACA,qBAt+BuB;AAu+BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAngCuB;AAogCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UA7gCuB;AA8gCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YA/iCuB;AAgjCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAzjCuB;AA0jCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAtlCuB;AAulCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAhmCuB;AAimCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBA5mCuB;AA6mCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAxnCuB;AAynCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eApoCuB;AAqoCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAhpCuB;AAipCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBA3pCuB;AA4pCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBArqCuB;AAsqCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAhrCuB;AAirCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBA1rCuB;AA2rCvB;AACA;AACA;AACA;AACA;AACA;AACA,+BAjsCuB;AAksCvB;AACA;AACA;AACA;AACA;AACA;AACA,4BAxsCuB;AAysCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAjtCuB;AAktCvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cA/uCuB;AAgvCvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aA9wCuB;AA+wCvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAxxCuB;AAyxCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAjyCuB;AAkyCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BA1yCuB;AA2yCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAlzCuB;AAmzCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBA3zCuB;AA4zCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAp0CuB;AAq0CvB;AACA;AACA;AACA;AACA;AACA,0BA10CuB;AA20CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAp1CuB;AAq1CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBA91CuB;AA+1CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAv2CuB;AAw2CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAh3CuB;AAi3CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YA13CuB;AA23CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAl4CuB;AAm4CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WA34CuB;AA44CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAp5CuB;AAq5CvB;AACA;AACA;AACA;AACA;AACA;AACA,sBA35CuB;AA45CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAt6CuB;AAu6CvB;AACA;AACA;AACA;AACA;AACA;AACA,sBA76CuB;AA86CvB;AACA;AACA;AACA;AACA;AACA;AACA,oBAp7CuB;AAq7CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BA77CuB;AA87CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAt8CuB;AAu8CvB;AACA;AACA;AACA;AACA;AACA;AACA,oCA78CuB;AA88CvB;AACA;AACA;AACA;AACA;AACA;AACA,uCAp9CuB;AAq9CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAh+CuB;AAi+CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBA3+CuB;AA4+CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAr/CuB;AAs/CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAhgDuB;AAigDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBA1gDuB;AA2gDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBArhDuB;AAshDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBA/hDuB;AAgiDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBA1iDuB;AA2iDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBApjDuB;AAqjDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eA9jDuB;AA+jDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAzkDuB;AA0kDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAnlDuB;AAolDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBA9lDuB;AA+lDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAtmDuB;AAumDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBA9mDuB;AA+mDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAtnDuB;AAunDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAhoDuB;AAioDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eA1oDuB;AA2oDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAnpDuB;AAopDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBA5pDuB;AA6pDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBApqDuB;AAqqDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBA7qDuB;AA8qDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAvrDuB;AAwrDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAhsDuB;AAisDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAzsDuB;AA0sDvB;AACA;AACA;AACA;AACA;AACA;AACA,aAhtDuB;AAitDvB;AACA;AACA;AACA;AACA;AACA;AACA,eAvtDuB;AAwtDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAhuDuB;AAiuDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBA1uDuB;AA2uDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBArvDuB;AAsvDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAhwDuB;AAiwDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBA3wDuB;AA4wDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAtxDuB;AAuxDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAhyDuB,CAAvB;AAiyDA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,eAAe,GAAGF,YAAY,CAAChC,eAAe,KAAKA,eAAe,GAAGqB,sBAAsB,CAAC,CAAC,qOAAD,CAAD,EAA0O,CAAC,6OAAD,CAA1O,CAA7C,CAAhB,CAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIc,aAAa,GAAG,IAAIC,GAAJ,CAAQ,CAAC,CAAC,WAAD,EAAc,OAAd,CAAD,EAAyB,CAAC,WAAD,EAAc,OAAd,CAAzB,EAAiD,CAAC,aAAD,EAAgB,OAAhB,CAAjD,EAA2E,CAAC,aAAD,EAAgB,OAAhB,CAA3E,EAAqG,CAAC,iBAAD,EAAoB,OAApB,CAArG,EAAmI,CAAC,cAAD,EAAiB,OAAjB,CAAnI,EAA8J,CAAC,WAAD,EAAc,OAAd,CAA9J,CAAR,CAApB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAIC,gBAAgB,GAAG,IAAID,GAAJ,CAAQ,CAAC,CAAC,8BAAD,EAAiC,6GAAjC,CAAD,CAAR,CAAvB;;AAEA,IAAIE,KAAK,GAAG,aAAa,YAAY;AACnC;AACF;AACA;AACE,WAASA,KAAT,GAAiB;AACfrC,IAAAA,eAAe,CAAC,IAAD,EAAOqC,KAAP,CAAf;;AAEA,SAAKC,YAAL,GAAoB,KAAKC,iBAAL,EAApB;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEvB,EAAAA,YAAY,CAACqB,KAAD,EAAQ,CAAC;AACnBtB,IAAAA,GAAG,EAAE,mBADc;AAEnBW,IAAAA,KAAK,EAAE,SAASa,iBAAT,GAA6B;AAClC,UAAIC,MAAM,GAAG3B,MAAM,CAAC4B,MAAP,CAAc,IAAd,CAAb,CADkC,CACA;;AAElCd,MAAAA,SAAS,CAACK,gBAAD,EAAmB,UAAUU,IAAV,EAAgB;AAC1C,eAAOF,MAAM,CAACE,IAAD,CAAN,GAAe,EAAtB;AACD,OAFQ,CAAT;AAGA,aAAOF,MAAP;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;;AAfuB,GAAD,EAiBjB;AACDzB,IAAAA,GAAG,EAAE,WADJ;AAEDW,IAAAA,KAAK,EAAE,SAASiB,SAAT,GAAqB;AAC1B,UAAIC,OAAO,GAAGC,SAAS,CAACrC,MAAV,GAAmB,CAAnB,IAAwBqC,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAlF;;AAEA,UAAID,OAAJ,EAAa;AACX,YAAI,CAACA,OAAO,CAACG,gBAAb,EAA+B;AAC7BH,UAAAA,OAAO,CAACG,gBAAR,GAA2B,KAAKR,iBAAL,EAA3B;AACD;;AAED,eAAOK,OAAO,CAACG,gBAAf;AACD;;AAED,aAAO,KAAKT,YAAZ;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA1CK,GAjBiB,EA6DjB;AACDvB,IAAAA,GAAG,EAAE,KADJ;AAEDW,IAAAA,KAAK,EAAE,SAASsB,GAAT,CAAajC,GAAb,EAAkBkC,QAAlB,EAA4B;AACjC,UAAIC,KAAK,GAAG,IAAZ;;AAEA,UAAIN,OAAO,GAAGC,SAAS,CAACrC,MAAV,GAAmB,CAAnB,IAAwBqC,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAlF;;AAEA,UAAIM,KAAK,CAACC,OAAN,CAAcH,QAAd,CAAJ,EAA6B;AAC3BtB,QAAAA,SAAS,CAACsB,QAAD,EAAW,UAAUI,CAAV,EAAa;AAC/B,iBAAOH,KAAK,CAACF,GAAN,CAAUjC,GAAV,EAAesC,CAAf,EAAkBT,OAAlB,CAAP;AACD,SAFQ,CAAT;AAGD,OAJD,MAIO;AACL,YAAIV,aAAa,CAACoB,GAAd,CAAkBvC,GAAlB,CAAJ,EAA4B;AAC1Be,UAAAA,IAAI,CAACD,UAAU,CAACI,eAAD,EAAkB;AAC/BsB,YAAAA,QAAQ,EAAExC,GADqB;AAE/ByC,YAAAA,gBAAgB,EAAEtB,aAAa,CAACuB,GAAd,CAAkB1C,GAAlB;AAFa,WAAlB,CAAX,CAAJ;AAID;;AAED,YAAIqB,gBAAgB,CAACkB,GAAjB,CAAqBvC,GAArB,CAAJ,EAA+B;AAC7Be,UAAAA,IAAI,CAACM,gBAAgB,CAACqB,GAAjB,CAAqB1C,GAArB,CAAD,CAAJ;AACD;;AAED,YAAIyB,MAAM,GAAG,KAAKG,SAAL,CAAeC,OAAf,CAAb;;AAEA,YAAI,OAAOJ,MAAM,CAACzB,GAAD,CAAb,KAAuB,WAA3B,EAAwC;AACtC,eAAK2C,QAAL,CAAc3C,GAAd;AACAyB,UAAAA,MAAM,CAACzB,GAAD,CAAN,GAAc,EAAd;AACD;;AAEDkC,QAAAA,QAAQ,CAACU,IAAT,GAAgB,KAAhB;;AAEA,YAAInB,MAAM,CAACzB,GAAD,CAAN,CAAY6C,OAAZ,CAAoBX,QAApB,MAAkC,CAAC,CAAvC,EAA0C;AACxC;AACA,cAAIY,gBAAgB,GAAG,KAAvB;;AAEA,cAAIZ,QAAQ,CAACa,WAAb,EAA0B;AACxBnC,YAAAA,SAAS,CAACa,MAAM,CAACzB,GAAD,CAAP,EAAc,UAAUgD,EAAV,EAAcxD,CAAd,EAAiB;AACtC,kBAAIwD,EAAE,CAACD,WAAP,EAAoB;AAClBtB,gBAAAA,MAAM,CAACzB,GAAD,CAAN,CAAYR,CAAZ,IAAiB0C,QAAjB;AACAY,gBAAAA,gBAAgB,GAAG,IAAnB;AACA,uBAAO,KAAP;AACD;AACF,aANQ,CAAT;AAOD;;AAED,cAAI,CAACA,gBAAL,EAAuB;AACrBrB,YAAAA,MAAM,CAACzB,GAAD,CAAN,CAAYiD,IAAZ,CAAiBf,QAAjB;AACD;AACF;AACF;;AAED,aAAO,IAAP;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAlEK,GA7DiB,EAiIjB;AACDlC,IAAAA,GAAG,EAAE,MADJ;AAEDW,IAAAA,KAAK,EAAE,SAASuC,IAAT,CAAclD,GAAd,EAAmBkC,QAAnB,EAA6B;AAClC,UAAIiB,MAAM,GAAG,IAAb;;AAEA,UAAItB,OAAO,GAAGC,SAAS,CAACrC,MAAV,GAAmB,CAAnB,IAAwBqC,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAlF;;AAEA,UAAIM,KAAK,CAACC,OAAN,CAAcH,QAAd,CAAJ,EAA6B;AAC3BtB,QAAAA,SAAS,CAACsB,QAAD,EAAW,UAAUI,CAAV,EAAa;AAC/B,iBAAOa,MAAM,CAACD,IAAP,CAAYlD,GAAZ,EAAiBsC,CAAjB,EAAoBT,OAApB,CAAP;AACD,SAFQ,CAAT;AAGD,OAJD,MAIO;AACLK,QAAAA,QAAQ,CAACkB,OAAT,GAAmB,IAAnB;AACA,aAAKnB,GAAL,CAASjC,GAAT,EAAckC,QAAd,EAAwBL,OAAxB;AACD;AACF;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA7BK,GAjIiB,EAgKjB;AACD7B,IAAAA,GAAG,EAAE,QADJ;AAEDW,IAAAA,KAAK,EAAE,SAAS0C,MAAT,CAAgBrD,GAAhB,EAAqBkC,QAArB,EAA+B;AACpC,UAAIL,OAAO,GAAGC,SAAS,CAACrC,MAAV,GAAmB,CAAnB,IAAwBqC,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAlF;AACA,UAAIL,MAAM,GAAG,KAAKG,SAAL,CAAeC,OAAf,CAAb;;AAEA,UAAI,OAAOJ,MAAM,CAACzB,GAAD,CAAb,KAAuB,WAA3B,EAAwC;AACtC,YAAIyB,MAAM,CAACzB,GAAD,CAAN,CAAY6C,OAAZ,CAAoBX,QAApB,KAAiC,CAArC,EAAwC;AACtCA,UAAAA,QAAQ,CAACU,IAAT,GAAgB,IAAhB;AACA,iBAAO,IAAP;AACD;AACF;;AAED,aAAO,KAAP;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAtBK,GAhKiB,EAwLjB;AACD5C,IAAAA,GAAG,EAAE,KADJ;AAEDW,IAAAA,KAAK,EAAE,SAAS4B,GAAT,CAAavC,GAAb,EAAkB;AACvB,UAAI6B,OAAO,GAAGC,SAAS,CAACrC,MAAV,GAAmB,CAAnB,IAAwBqC,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAlF;AACA,UAAIL,MAAM,GAAG,KAAKG,SAAL,CAAeC,OAAf,CAAb;AACA,aAAO,CAAC,EAAEJ,MAAM,CAACzB,GAAD,CAAN,KAAgB,KAAK,CAArB,IAA0ByB,MAAM,CAACzB,GAAD,CAAN,CAAYP,MAAxC,CAAR;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA1BK,GAxLiB,EAoNjB;AACDO,IAAAA,GAAG,EAAE,KADJ;AAEDW,IAAAA,KAAK,EAAE,SAAS2C,GAAT,CAAazB,OAAb,EAAsB7B,GAAtB,EAA2BuD,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuCC,EAAvC,EAA2CC,EAA3C,EAA+CC,EAA/C,EAAmD;AACxD;AACE,YAAIC,cAAc,GAAG,KAAKtC,YAAL,CAAkBvB,GAAlB,CAArB;AACA,YAAIP,MAAM,GAAGoE,cAAc,GAAGA,cAAc,CAACpE,MAAlB,GAA2B,CAAtD;AACA,YAAIqE,KAAK,GAAG,CAAZ;;AAEA,YAAIrE,MAAJ,EAAY;AACV;AACA,iBAAOqE,KAAK,GAAGrE,MAAf,EAAuB;AACrB,gBAAI,CAACoE,cAAc,CAACC,KAAD,CAAf,IAA0BD,cAAc,CAACC,KAAD,CAAd,CAAsBlB,IAApD,EAA0D;AACxDkB,cAAAA,KAAK,IAAI,CAAT;AACA;;AAEA;AACD,aANoB,CAMnB;;;AAGF,gBAAIC,GAAG,GAAGF,cAAc,CAACC,KAAD,CAAd,CAAsBE,IAAtB,CAA2BnC,OAA3B,EAAoC0B,EAApC,EAAwCC,EAAxC,EAA4CC,EAA5C,EAAgDC,EAAhD,EAAoDC,EAApD,EAAwDC,EAAxD,CAAV;;AAEA,gBAAIG,GAAG,KAAK,KAAK,CAAjB,EAAoB;AAClB;AACAR,cAAAA,EAAE,GAAGQ,GAAL;AACD;;AAED,gBAAIF,cAAc,CAACC,KAAD,CAAd,IAAyBD,cAAc,CAACC,KAAD,CAAd,CAAsBV,OAAnD,EAA4D;AAC1D,mBAAKC,MAAL,CAAYrD,GAAZ,EAAiB6D,cAAc,CAACC,KAAD,CAA/B;AACD;;AAEDA,YAAAA,KAAK,IAAI,CAAT;AACD;AACF;AACF;AACD;AACE,YAAIG,aAAa,GAAG,KAAKrC,SAAL,CAAeC,OAAf,EAAwB7B,GAAxB,CAApB;;AAEA,YAAIkE,OAAO,GAAGD,aAAa,GAAGA,aAAa,CAACxE,MAAjB,GAA0B,CAArD;;AAEA,YAAI0E,MAAM,GAAG,CAAb;;AAEA,YAAID,OAAJ,EAAa;AACX;AACA,iBAAOC,MAAM,GAAGD,OAAhB,EAAyB;AACvB,gBAAI,CAACD,aAAa,CAACE,MAAD,CAAd,IAA0BF,aAAa,CAACE,MAAD,CAAb,CAAsBvB,IAApD,EAA0D;AACxDuB,cAAAA,MAAM,IAAI,CAAV;AACA;;AAEA;AACD,aANsB,CAMrB;;;AAGF,gBAAIC,IAAI,GAAGH,aAAa,CAACE,MAAD,CAAb,CAAsBH,IAAtB,CAA2BnC,OAA3B,EAAoC0B,EAApC,EAAwCC,EAAxC,EAA4CC,EAA5C,EAAgDC,EAAhD,EAAoDC,EAApD,EAAwDC,EAAxD,CAAX;;AAEA,gBAAIQ,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnB;AACAb,cAAAA,EAAE,GAAGa,IAAL;AACD;;AAED,gBAAIH,aAAa,CAACE,MAAD,CAAb,IAAyBF,aAAa,CAACE,MAAD,CAAb,CAAsBf,OAAnD,EAA4D;AAC1D,mBAAKC,MAAL,CAAYrD,GAAZ,EAAiBiE,aAAa,CAACE,MAAD,CAA9B,EAAwCtC,OAAxC;AACD;;AAEDsC,YAAAA,MAAM,IAAI,CAAV;AACD;AACF;AACF;AACD,aAAOZ,EAAP;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjFK,GApNiB,EAuSjB;AACDvD,IAAAA,GAAG,EAAE,SADJ;AAEDW,IAAAA,KAAK,EAAE,SAAS0D,OAAT,GAAmB;AACxB,UAAIxC,OAAO,GAAGC,SAAS,CAACrC,MAAV,GAAmB,CAAnB,IAAwBqC,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAlF,CADwB,CAExB;;AACAjB,MAAAA,UAAU,CAAC,KAAKe,SAAL,CAAeC,OAAf,CAAD,EAA0B,UAAUlB,KAAV,EAAiBX,GAAjB,EAAsByB,MAAtB,EAA8B;AAChE,eAAOA,MAAM,CAACzB,GAAD,CAAN,CAAYP,MAAZ,GAAqB,CAA5B;AACD,OAFS,CAAV;AAGD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AApBK,GAvSiB,EA6TjB;AACDO,IAAAA,GAAG,EAAE,UADJ;AAEDW,IAAAA,KAAK,EAAE,SAASgC,QAAT,CAAkB3C,GAAlB,EAAuB;AAC5B,UAAI,CAAC,KAAKsE,YAAL,CAAkBtE,GAAlB,CAAL,EAA6B;AAC3BiB,QAAAA,gBAAgB,CAACgC,IAAjB,CAAsBjD,GAAtB;AACD;AACF;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAhBK,GA7TiB,EA+UjB;AACDA,IAAAA,GAAG,EAAE,YADJ;AAEDW,IAAAA,KAAK,EAAE,SAAS4D,UAAT,CAAoBvE,GAApB,EAAyB;AAC9B,UAAI,KAAKsE,YAAL,CAAkBtE,GAAlB,CAAJ,EAA4B;AAC1BiB,QAAAA,gBAAgB,CAACuD,MAAjB,CAAwBvD,gBAAgB,CAAC4B,OAAjB,CAAyB7C,GAAzB,CAAxB,EAAuD,CAAvD;AACD;AACF;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AApBK,GA/UiB,EAqWjB;AACDA,IAAAA,GAAG,EAAE,cADJ;AAEDW,IAAAA,KAAK,EAAE,SAAS8D,YAAT,CAAsBjC,QAAtB,EAAgC;AACrC,aAAOnB,gBAAgB,CAACkB,GAAjB,CAAqBC,QAArB,KAAkCrB,aAAa,CAACoB,GAAd,CAAkBC,QAAlB,CAAzC;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjBK,GArWiB,EAwXjB;AACDxC,IAAAA,GAAG,EAAE,cADJ;AAEDW,IAAAA,KAAK,EAAE,SAAS2D,YAAT,CAAsB9B,QAAtB,EAAgC;AACrC,aAAOvB,gBAAgB,CAAC4B,OAAjB,CAAyBL,QAAzB,KAAsC,CAA7C;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAzBK,GAxXiB,EAmZjB;AACDxC,IAAAA,GAAG,EAAE,eADJ;AAEDW,IAAAA,KAAK,EAAE,SAAS+D,aAAT,GAAyB;AAC9B,aAAOzD,gBAAP;AACD;AAJA,GAnZiB,CAAR,EAwZR,CAAC;AACHjB,IAAAA,GAAG,EAAE,cADF;AAEHW,IAAAA,KAAK,EAAE,SAASgE,YAAT,GAAwB;AAC7B,aAAOC,kBAAkB,EAAzB;AACD;AAJE,GAAD,CAxZQ,CAAZ;;AA+ZA,SAAOtD,KAAP;AACD,CA7bwB,EAAzB;;AA+bA,IAAIuD,eAAe,GAAG,IAAIvD,KAAJ,EAAtB;AACA;AACA;AACA;;AAEA,SAASsD,kBAAT,GAA8B;AAC5B,SAAOC,eAAP;AACD;;AAED,eAAevD,KAAf","sourcesContent":["import \"core-js/modules/es.array.slice.js\";\r\nimport \"core-js/modules/es.object.freeze.js\";\r\n\r\nvar _templateObject;\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nimport \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.map.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\nimport \"core-js/modules/es.array.index-of.js\";\r\nimport \"core-js/modules/es.array.splice.js\";\r\n\r\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\r\n\r\nimport { arrayEach } from \"./helpers/array.mjs\";\r\nimport { objectEach } from \"./helpers/object.mjs\";\r\nimport { substitute } from \"./helpers/string.mjs\";\r\nimport { warn } from \"./helpers/console.mjs\";\r\nimport { toSingleLine } from \"./helpers/templateLiteralTag.mjs\";\r\n/**\r\n * @description\r\n * Handsontable events are the common interface that function in 2 ways: as __callbacks__ and as __hooks__.\r\n *\r\n * @example\r\n *\r\n * ```js\r\n * // Using events as callbacks:\r\n * ...\r\n * const hot1 = new Handsontable(document.getElementById('example1'), {\r\n *   afterChange: function(changes, source) {\r\n *     $.ajax({\r\n *       url: \"save.php',\r\n *       data: change\r\n *     });\r\n *   }\r\n * });\r\n * ...\r\n * ```\r\n *\r\n * ```js\r\n * // Using events as plugin hooks:\r\n * ...\r\n * const hot1 = new Handsontable(document.getElementById('example1'), {\r\n *   myPlugin: true\r\n * });\r\n *\r\n * const hot2 = new Handsontable(document.getElementById('example2'), {\r\n *   myPlugin: false\r\n * });\r\n *\r\n * // global hook\r\n * Handsontable.hooks.add('afterChange', function() {\r\n *   // Fired twice - for hot1 and hot2\r\n *   if (this.getSettings().myPlugin) {\r\n *     // function body - will only run for hot1\r\n *   }\r\n * });\r\n *\r\n * // local hook (has same effect as a callback)\r\n * hot2.addHook('afterChange', function() {\r\n *   // function body - will only run in #example2\r\n * });\r\n * ```\r\n * ...\r\n */\r\n// @TODO: Move plugin description hooks to plugin?\r\n\r\nvar REGISTERED_HOOKS = [\r\n/**\r\n * Fired after resetting a cell's meta. This happens when the {@link Core#updateSettings} method is called.\r\n *\r\n * @event Hooks#afterCellMetaReset\r\n */\r\n'afterCellMetaReset',\r\n/**\r\n * Fired after one or more cells has been changed. The changes are triggered in any situation when the\r\n * value is entered using an editor or changed using API (e.q setDataAtCell).\r\n *\r\n * __Note:__ For performance reasons, the `changes` array is null for `\"loadData\"` source.\r\n *\r\n * @event Hooks#afterChange\r\n * @param {Array} changes 2D array containing information about each of the edited cells `[[row, prop, oldVal, newVal], ...]`.\r\n * @param {string} [source] String that identifies source of hook call ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n * @example\r\n * ```js\r\n * new Handsontable(element, {\r\n *   afterChange: (changes) => {\r\n *     changes.forEach(([row, prop, oldValue, newValue]) => {\r\n *       // Some logic...\r\n *     });\r\n *   }\r\n * })\r\n * ```\r\n */\r\n'afterChange',\r\n/**\r\n * Fired each time user opens {@link ContextMenu} and after setting up the Context Menu's default options. These options are a collection\r\n * which user can select by setting an array of keys or an array of objects in {@link Options#contextMenu} option.\r\n *\r\n * @event Hooks#afterContextMenuDefaultOptions\r\n * @param {Array} predefinedItems An array of objects containing information about the pre-defined Context Menu items.\r\n */\r\n'afterContextMenuDefaultOptions',\r\n/**\r\n * Fired each time user opens {@link ContextMenu} plugin before setting up the Context Menu's items but after filtering these options by\r\n * user (`contextMenu` option). This hook can by helpful to determine if user use specified menu item or to set up\r\n * one of the menu item to by always visible.\r\n *\r\n * @event Hooks#beforeContextMenuSetItems\r\n * @param {object[]} menuItems An array of objects containing information about to generated Context Menu items.\r\n */\r\n'beforeContextMenuSetItems',\r\n/**\r\n * Fired by {@link DropdownMenu} plugin after setting up the Dropdown Menu's default options. These options are a\r\n * collection which user can select by setting an array of keys or an array of objects in {@link Options#dropdownMenu}\r\n * option.\r\n *\r\n * @event Hooks#afterDropdownMenuDefaultOptions\r\n * @param {object[]} predefinedItems An array of objects containing information about the pre-defined Context Menu items.\r\n */\r\n'afterDropdownMenuDefaultOptions',\r\n/**\r\n * Fired by {@link DropdownMenu} plugin before setting up the Dropdown Menu's items but after filtering these options\r\n * by user (`dropdownMenu` option). This hook can by helpful to determine if user use specified menu item or to set\r\n * up one of the menu item to by always visible.\r\n *\r\n * @event Hooks#beforeDropdownMenuSetItems\r\n * @param {object[]} menuItems An array of objects containing information about to generated Dropdown Menu items.\r\n */\r\n'beforeDropdownMenuSetItems',\r\n/**\r\n * Fired by {@link ContextMenu} plugin after hiding the Context Menu. This hook is fired when {@link Options#contextMenu}\r\n * option is enabled.\r\n *\r\n * @event Hooks#afterContextMenuHide\r\n * @param {object} context The Context Menu plugin instance.\r\n */\r\n'afterContextMenuHide',\r\n/**\r\n * Fired by {@link ContextMenu} plugin before opening the Context Menu. This hook is fired when {@link Options#contextMenu}\r\n * option is enabled.\r\n *\r\n * @event Hooks#beforeContextMenuShow\r\n * @param {object} context The Context Menu instance.\r\n */\r\n'beforeContextMenuShow',\r\n/**\r\n * Fired by {@link ContextMenu} plugin after opening the Context Menu. This hook is fired when {@link Options#contextMenu}\r\n * option is enabled.\r\n *\r\n * @event Hooks#afterContextMenuShow\r\n * @param {object} context The Context Menu plugin instance.\r\n */\r\n'afterContextMenuShow',\r\n/**\r\n * Fired by {@link CopyPaste} plugin after reaching the copy limit while copying data. This hook is fired when\r\n * {@link Options#copyPaste} option is enabled.\r\n *\r\n * @event Hooks#afterCopyLimit\r\n * @param {number} selectedRows Count of selected copyable rows.\r\n * @param {number} selectedColumns Count of selected copyable columns.\r\n * @param {number} copyRowsLimit Current copy rows limit.\r\n * @param {number} copyColumnsLimit Current copy columns limit.\r\n */\r\n'afterCopyLimit',\r\n/**\r\n * Fired before created a new column.\r\n *\r\n * @event Hooks#beforeCreateCol\r\n * @param {number} index Represents the visual index of first newly created column in the data source array.\r\n * @param {number} amount Number of newly created columns in the data source array.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link http://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).\r\n * @returns {*} If `false` then creating columns is cancelled.\r\n * @example\r\n * ```js\r\n * // Return `false` to cancel column inserting.\r\n * new Handsontable(element, {\r\n *   beforeCreateCol: function(data, coords) {\r\n *     return false;\r\n *   }\r\n * });\r\n * ```\r\n */\r\n'beforeCreateCol',\r\n/**\r\n * Fired after created a new column.\r\n *\r\n * @event Hooks#afterCreateCol\r\n * @param {number} index Represents the visual index of first newly created column in the data source.\r\n * @param {number} amount Number of newly created columns in the data source.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\r\n'afterCreateCol',\r\n/**\r\n * Fired before created a new row.\r\n *\r\n * @event Hooks#beforeCreateRow\r\n * @param {number} index Represents the visual index of first newly created row in the data source array.\r\n * @param {number} amount Number of newly created rows in the data source array.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\r\n'beforeCreateRow',\r\n/**\r\n * Fired after created a new row.\r\n *\r\n * @event Hooks#afterCreateRow\r\n * @param {number} index Represents the visual index of first newly created row in the data source array.\r\n * @param {number} amount Number of newly created rows in the data source array.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\r\n'afterCreateRow',\r\n/**\r\n * Fired after the current cell is deselected.\r\n *\r\n * @event Hooks#afterDeselect\r\n */\r\n'afterDeselect',\r\n/**\r\n * Fired after destroying the Handsontable instance.\r\n *\r\n * @event Hooks#afterDestroy\r\n */\r\n'afterDestroy',\r\n/**\r\n * General hook which captures `keydown` events attached to the document body. These events are delegated to the\r\n * hooks system and consumed by Core and internal modules (e.g plugins, editors).\r\n *\r\n * @event Hooks#afterDocumentKeyDown\r\n * @param {Event} event A native `keydown` event object.\r\n */\r\n'afterDocumentKeyDown',\r\n/**\r\n * Fired inside the Walkontable's selection `draw` method. Can be used to add additional class names to cells, depending on the current selection.\r\n *\r\n * @event Hooks#afterDrawSelection\r\n * @param {number} currentRow Row index of the currently processed cell.\r\n * @param {number} currentColumn Column index of the currently cell.\r\n * @param {number[]} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.\r\n * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.\r\n * @since 0.38.1\r\n * @returns {string|undefined} Can return a `String`, which will act as an additional `className` to be added to the currently processed cell.\r\n */\r\n'afterDrawSelection',\r\n/**\r\n * Fired inside the Walkontable's `refreshSelections` method. Can be used to remove additional class names from all cells in the table.\r\n *\r\n * @event Hooks#beforeRemoveCellClassNames\r\n * @since 0.38.1\r\n * @returns {string[]|undefined} Can return an `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.\r\n */\r\n'beforeRemoveCellClassNames',\r\n/**\r\n * Fired after getting the cell settings.\r\n *\r\n * @event Hooks#afterGetCellMeta\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {object} cellProperties Object containing the cell properties.\r\n */\r\n'afterGetCellMeta',\r\n/**\r\n * Fired after retrieving information about a column header and appending it to the table header.\r\n *\r\n * @event Hooks#afterGetColHeader\r\n * @param {number} column Visual column index.\r\n * @param {HTMLTableCellElement} TH Header's TH element.\r\n */\r\n'afterGetColHeader',\r\n/**\r\n * Fired after retrieving information about a row header and appending it to the table header.\r\n *\r\n * @event Hooks#afterGetRowHeader\r\n * @param {number} row Visual row index.\r\n * @param {HTMLTableCellElement} TH Header's TH element.\r\n */\r\n'afterGetRowHeader',\r\n/**\r\n * Fired after the Handsontable instance is initiated.\r\n *\r\n * @event Hooks#afterInit\r\n */\r\n'afterInit',\r\n/**\r\n * Fired after new data is loaded (by `loadData` or `updateSettings` method) into the data source array.\r\n *\r\n * @event Hooks#afterLoadData\r\n * @param {Array} sourceData Array of arrays or array of objects containing data.\r\n * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.\r\n * @param {string} source Source of the call.\r\n */\r\n'afterLoadData',\r\n/**\r\n * Fired after a scroll event, which is identified as a momentum scroll (e.g. On an iPad).\r\n *\r\n * @event Hooks#afterMomentumScroll\r\n */\r\n'afterMomentumScroll',\r\n/**\r\n * Fired after a `mousedown` event is triggered on the cell corner (the drag handle).\r\n *\r\n * @event Hooks#afterOnCellCornerMouseDown\r\n * @param {Event} event `mousedown` event object.\r\n */\r\n'afterOnCellCornerMouseDown',\r\n/**\r\n * Fired after a `dblclick` event is triggered on the cell corner (the drag handle).\r\n *\r\n * @event Hooks#afterOnCellCornerDblClick\r\n * @param {Event} event `dblclick` event object.\r\n */\r\n'afterOnCellCornerDblClick',\r\n/**\r\n * Fired after clicking on a cell or row/column header. In case the row/column header was clicked, the coordinate\r\n * indexes are negative.\r\n *\r\n * For example clicking on the row header of cell (0, 0) results with `afterOnCellMouseDown` called\r\n * with coordinates `{row: 0, col: -1}`.\r\n *\r\n * @event Hooks#afterOnCellMouseDown\r\n * @param {Event} event `mousedown` event object.\r\n * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.\r\n * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.\r\n */\r\n'afterOnCellMouseDown',\r\n/**\r\n * Fired after clicking on a cell or row/column header. In case the row/column header was clicked, the coordinate\r\n * indexes are negative.\r\n *\r\n * For example clicking on the row header of cell (0, 0) results with `afterOnCellMouseUp` called\r\n * with coordinates `{row: 0, col: -1}`.\r\n *\r\n * @event Hooks#afterOnCellMouseUp\r\n * @param {Event} event `mouseup` event object.\r\n * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.\r\n * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.\r\n */\r\n'afterOnCellMouseUp',\r\n/**\r\n * Fired after clicking right mouse button on a cell or row/column header.\r\n *\r\n * For example clicking on the row header of cell (0, 0) results with `afterOnCellContextMenu` called\r\n * with coordinates `{row: 0, col: -1}`.\r\n *\r\n * @event Hooks#afterOnCellContextMenu\r\n * @since 4.1.0\r\n * @param {Event} event `contextmenu` event object.\r\n * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.\r\n * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.\r\n */\r\n'afterOnCellContextMenu',\r\n/**\r\n * Fired after hovering a cell or row/column header with the mouse cursor. In case the row/column header was\r\n * hovered, the index is negative.\r\n *\r\n * For example, hovering over the row header of cell (0, 0) results with `afterOnCellMouseOver` called\r\n * with coords `{row: 0, col: -1}`.\r\n *\r\n * @event Hooks#afterOnCellMouseOver\r\n * @param {Event} event `mouseover` event object.\r\n * @param {CellCoords} coords Hovered cell's visual coordinate object.\r\n * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.\r\n */\r\n'afterOnCellMouseOver',\r\n/**\r\n * Fired after leaving a cell or row/column header with the mouse cursor.\r\n *\r\n * @event Hooks#afterOnCellMouseOut\r\n * @param {Event} event `mouseout` event object.\r\n * @param {CellCoords} coords Leaved cell's visual coordinate object.\r\n * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.\r\n */\r\n'afterOnCellMouseOut',\r\n/**\r\n * Fired after one or more columns are removed.\r\n *\r\n * @event Hooks#afterRemoveCol\r\n * @param {number} index Visual index of starter column.\r\n * @param {number} amount An amount of removed columns.\r\n * @param {number[]} physicalColumns An array of physical columns removed from the data source.\r\n * @param {string} [source] String that identifies source of hook call ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\r\n'afterRemoveCol',\r\n/**\r\n * Fired after one or more rows are removed.\r\n *\r\n * @event Hooks#afterRemoveRow\r\n * @param {number} index Visual index of starter row.\r\n * @param {number} amount An amount of removed rows.\r\n * @param {number[]} physicalRows An array of physical rows removed from the data source.\r\n * @param {string} [source] String that identifies source of hook call ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\r\n'afterRemoveRow',\r\n/**\r\n * Fired after the Handsontable table is rendered.\r\n *\r\n * @event Hooks#afterRender\r\n * @param {boolean} isForced Is `true` if rendering was triggered by a change of settings or data; or `false` if\r\n *                           rendering was triggered by scrolling or moving selection.\r\n */\r\n'afterRender',\r\n/**\r\n * Fired before starting rendering the cell.\r\n *\r\n * @event Hooks#beforeRenderer\r\n * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.\r\n * @param {*} value Value of the rendered cell.\r\n * @param {object} cellProperties Object containing the cell's properties.\r\n */\r\n'beforeRenderer',\r\n/**\r\n * Fired after finishing rendering the cell (after the renderer finishes).\r\n *\r\n * @event Hooks#afterRenderer\r\n * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.\r\n * @param {*} value Value of the rendered cell.\r\n * @param {object} cellProperties Object containing the cell's properties.\r\n */\r\n'afterRenderer',\r\n/**\r\n * Fired after the horizontal scroll event.\r\n *\r\n * @event Hooks#afterScrollHorizontally\r\n */\r\n'afterScrollHorizontally',\r\n/**\r\n * Fired after the vertical scroll event.\r\n *\r\n * @event Hooks#afterScrollVertically\r\n */\r\n'afterScrollVertically',\r\n/**\r\n * Fired after one or more cells are selected (e.g. During mouse move).\r\n *\r\n * @event Hooks#afterSelection\r\n * @param {number} row Selection start visual row index.\r\n * @param {number} column Selection start visual column index.\r\n * @param {number} row2 Selection end visual row index.\r\n * @param {number} column2 Selection end visual column index.\r\n * @param {object} preventScrolling Object with `value` property where its value change will be observed.\r\n * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.\r\n * @example\r\n * ```js\r\n * new Handsontable(element, {\r\n *   afterSelection: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {\r\n *     // setting if prevent scrolling after selection\r\n *     preventScrolling.value = true;\r\n *   }\r\n * })\r\n * ```\r\n */\r\n'afterSelection',\r\n/**\r\n * Fired after one or more cells are selected.\r\n *\r\n * The `prop` and `prop2` arguments represent the source object property name instead of the column number.\r\n *\r\n * @event Hooks#afterSelectionByProp\r\n * @param {number} row Selection start visual row index.\r\n * @param {string} prop Selection start data source object property name.\r\n * @param {number} row2 Selection end visual row index.\r\n * @param {string} prop2 Selection end data source object property name.\r\n * @param {object} preventScrolling Object with `value` property where its value change will be observed.\r\n * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.\r\n * @example\r\n * ```js\r\n * new Handsontable(element, {\r\n *   afterSelectionByProp: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {\r\n *     // setting if prevent scrolling after selection\r\n *     preventScrolling.value = true;\r\n *   }\r\n * })\r\n * ```\r\n */\r\n'afterSelectionByProp',\r\n/**\r\n * Fired after one or more cells are selected (e.g. On mouse up).\r\n *\r\n * @event Hooks#afterSelectionEnd\r\n * @param {number} row Selection start visual row index.\r\n * @param {number} column Selection start visual column index.\r\n * @param {number} row2 Selection end visual row index.\r\n * @param {number} column2 Selection end visual column index.\r\n * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.\r\n */\r\n'afterSelectionEnd',\r\n/**\r\n * Fired after one or more cells are selected (e.g. On mouse up).\r\n *\r\n * The `prop` and `prop2` arguments represent the source object property name instead of the column number.\r\n *\r\n * @event Hooks#afterSelectionEndByProp\r\n * @param {number} row Selection start visual row index.\r\n * @param {string} prop Selection start data source object property index.\r\n * @param {number} row2 Selection end visual row index.\r\n * @param {string} prop2 Selection end data source object property index.\r\n * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.\r\n */\r\n'afterSelectionEndByProp',\r\n/**\r\n * Fired after cell meta is changed.\r\n *\r\n * @event Hooks#afterSetCellMeta\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {string} key The updated meta key.\r\n * @param {*} value The updated meta value.\r\n */\r\n'afterSetCellMeta',\r\n/**\r\n * Fired after cell meta is removed.\r\n *\r\n * @event Hooks#afterRemoveCellMeta\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {string} key The removed meta key.\r\n * @param {*} value Value which was under removed key of cell meta.\r\n */\r\n'afterRemoveCellMeta',\r\n/**\r\n * Fired after cell data was changed.\r\n *\r\n * @event Hooks#afterSetDataAtCell\r\n * @param {Array} changes An array of changes in format `[[row, column, oldValue, value], ...]`.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\r\n'afterSetDataAtCell',\r\n/**\r\n * Fired after cell data was changed.\r\n * Called only when `setDataAtRowProp` was executed.\r\n *\r\n * @event Hooks#afterSetDataAtRowProp\r\n * @param {Array} changes An array of changes in format `[[row, prop, oldValue, value], ...]`.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\r\n'afterSetDataAtRowProp',\r\n/**\r\n * Fired after cell source data was changed.\r\n *\r\n * @event Hooks#afterSetSourceDataAtCell\r\n * @since 8.0.0\r\n * @param {Array} changes An array of changes in format `[[row, column, oldValue, value], ...]`.\r\n * @param {string} [source] String that identifies source of hook call.\r\n */\r\n'afterSetSourceDataAtCell',\r\n/**\r\n * Fired after calling the `updateSettings` method.\r\n *\r\n * @event Hooks#afterUpdateSettings\r\n * @param {object} newSettings New settings object.\r\n */\r\n'afterUpdateSettings',\r\n/**\r\n * @description\r\n * A plugin hook executed after validator function, only if validator function is defined.\r\n * Validation result is the first parameter. This can be used to determinate if validation passed successfully or not.\r\n *\r\n * __Returning false from the callback will mark the cell as invalid__.\r\n *\r\n * @event Hooks#afterValidate\r\n * @param {boolean} isValid `true` if valid, `false` if not.\r\n * @param {*} value The value in question.\r\n * @param {number} row Visual row index.\r\n * @param {string|number} prop Property name / visual column index.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n * @returns {void | boolean} If `false` the cell will be marked as invalid, `true` otherwise.\r\n */\r\n'afterValidate',\r\n/**\r\n * Fired before successful change of language (when proper language code was set).\r\n *\r\n * @event Hooks#beforeLanguageChange\r\n * @since 0.35.0\r\n * @param {string} languageCode New language code.\r\n */\r\n'beforeLanguageChange',\r\n/**\r\n * Fired after successful change of language (when proper language code was set).\r\n *\r\n * @event Hooks#afterLanguageChange\r\n * @since 0.35.0\r\n * @param {string} languageCode New language code.\r\n */\r\n'afterLanguageChange',\r\n/**\r\n * Fired by {@link Autofill} plugin before populating the data in the autofill feature. This hook is fired when\r\n * {@link Options#fillHandle} option is enabled.\r\n *\r\n * @event Hooks#beforeAutofill\r\n * @param {Array[]} selectionData Data the autofill operation will start from.\r\n * @param {CellRange} sourceRange The range values will be filled from.\r\n * @param {CellRange} targetRange The range new values will be filled into.\r\n * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.\r\n *\r\n * @returns {boolean|Array[]} If false, the operation is cancelled. If array of arrays, the returned data\r\n *                              will be passed into `populateFromArray` instead of the default autofill\r\n *                              algorithm's result.\r\n */\r\n'beforeAutofill',\r\n/**\r\n * Fired by {@link Autofill} plugin after populating the data in the autofill feature. This hook is fired when\r\n * {@link Options#fillHandle} option is enabled.\r\n *\r\n * @event Hooks#afterAutofill\r\n * @since 8.0.0\r\n * @param {Array[]} fillData The data that was used to fill the `targetRange`. If `beforeAutofill` was used\r\n *                            and returned `[[]]`, this will be the same object that was returned from `beforeAutofill`.\r\n * @param {CellRange} sourceRange The range values will be filled from.\r\n * @param {CellRange} targetRange The range new values will be filled into.\r\n * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.\r\n */\r\n'afterAutofill',\r\n/**\r\n * Fired before aligning the cell contents.\r\n *\r\n * @event Hooks#beforeCellAlignment\r\n * @param {object} stateBefore An object with class names defining the cell alignment.\r\n * @param {CellRange[]} range An array of CellRange coordinates where the alignment will be applied.\r\n * @param {string} type Type of the alignment - either `horizontal` or `vertical`.\r\n * @param {string} alignmentClass String defining the alignment class added to the cell.\r\n * Possible values:\r\n * * `htLeft`\r\n * * `htCenter`\r\n * * `htRight`\r\n * * `htJustify`\r\n * * `htTop`\r\n * * `htMiddle`\r\n * * `htBottom`.\r\n */\r\n'beforeCellAlignment',\r\n/**\r\n * Fired before one or more cells is changed. Its main purpose is to alter changes silently after input and before\r\n * table rendering.\r\n *\r\n * @event Hooks#beforeChange\r\n * @param {Array[]} changes 2D array containing information about each of the edited cells.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n * @returns {void | boolean} If `false` all changes were cancelled, `true` otherwise.\r\n * @example\r\n * ```js\r\n * // To disregard a single change, set changes[i] to null or remove it from array using changes.splice(i, 1).\r\n * new Handsontable(element, {\r\n *   beforeChange: (changes, source) => {\r\n *     // [[row, prop, oldVal, newVal], ...]\r\n *     changes[0] = null;\r\n *   }\r\n * });\r\n * // To alter a single change, overwrite the desired value to changes[i][3].\r\n * new Handsontable(element, {\r\n *   beforeChange: (changes, source) => {\r\n *     // [[row, prop, oldVal, newVal], ...]\r\n *     changes[0][3] = 10;\r\n *   }\r\n * });\r\n * // To cancel all edit, return false from the callback or set array length to 0 (changes.length = 0).\r\n * new Handsontable(element, {\r\n *   beforeChange: (changes, source) => {\r\n *     // [[row, prop, oldVal, newVal], ...]\r\n *     return false;\r\n *   }\r\n * });\r\n * ```\r\n */\r\n'beforeChange',\r\n/**\r\n * Fired right before rendering the changes.\r\n *\r\n * @event Hooks#beforeChangeRender\r\n * @param {Array[]} changes Array in form of `[row, prop, oldValue, newValue]`.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\r\n'beforeChangeRender',\r\n/**\r\n * Fired before drawing the borders.\r\n *\r\n * @event Hooks#beforeDrawBorders\r\n * @param {Array} corners Array specifying the current selection borders.\r\n * @param {string} borderClassName Specifies the border class name.\r\n */\r\n'beforeDrawBorders',\r\n/**\r\n * Fired before getting cell settings.\r\n *\r\n * @event Hooks#beforeGetCellMeta\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {object} cellProperties Object containing the cell's properties.\r\n */\r\n'beforeGetCellMeta',\r\n/**\r\n * Fired before cell meta is removed.\r\n *\r\n * @event Hooks#beforeRemoveCellMeta\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {string} key The removed meta key.\r\n * @param {*} value Value which is under removed key of cell meta.\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\r\n'beforeRemoveCellMeta',\r\n/**\r\n * Fired before the Handsontable instance is initiated.\r\n *\r\n * @event Hooks#beforeInit\r\n */\r\n'beforeInit',\r\n/**\r\n * Fired before the Walkontable instance is initiated.\r\n *\r\n * @event Hooks#beforeInitWalkontable\r\n * @param {object} walkontableConfig Walkontable configuration object.\r\n */\r\n'beforeInitWalkontable',\r\n/**\r\n * Fired before new data is loaded (by `loadData` or `updateSettings` method) into the data source array.\r\n *\r\n * @event Hooks#beforeLoadData\r\n * @since 8.0.0\r\n * @param {Array} sourceData Array of arrays or array of objects containing data.\r\n * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.\r\n * @param {string} source Source of the call.\r\n * @returns {Array} The returned array will be used as new dataset.\r\n */\r\n'beforeLoadData',\r\n/**\r\n * Fired before keydown event is handled. It can be used to overwrite default key bindings.\r\n *\r\n * __Note__: To prevent default behavior you need to call `event.stopImmediatePropagation()` in your `beforeKeyDown`\r\n * handler.\r\n *\r\n * @event Hooks#beforeKeyDown\r\n * @param {Event} event Original DOM event.\r\n */\r\n'beforeKeyDown',\r\n/**\r\n * Fired after the user clicked a cell, but before all the calculations related with it.\r\n *\r\n * @event Hooks#beforeOnCellMouseDown\r\n * @param {Event} event The `mousedown` event object.\r\n * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.\r\n * @param {HTMLTableCellElement} TD TD element.\r\n * @param {object} controller An object with keys `row`, `column` and `cells` which contains boolean values. This\r\n *                            object allows or disallows changing the selection for the particular axies.\r\n */\r\n'beforeOnCellMouseDown',\r\n/**\r\n * Fired after the user clicked a cell.\r\n *\r\n * @event Hooks#beforeOnCellMouseUp\r\n * @param {Event} event The `mouseup` event object.\r\n * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.\r\n * @param {HTMLTableCellElement} TD TD element.\r\n */\r\n'beforeOnCellMouseUp',\r\n/**\r\n * Fired after the user clicked a cell, but before all the calculations related with it.\r\n *\r\n * @event Hooks#beforeOnCellContextMenu\r\n * @since 4.1.0\r\n * @param {Event} event The `contextmenu` event object.\r\n * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.\r\n * @param {HTMLTableCellElement} TD TD element.\r\n */\r\n'beforeOnCellContextMenu',\r\n/**\r\n * Fired after the user moved cursor over a cell, but before all the calculations related with it.\r\n *\r\n * @event Hooks#beforeOnCellMouseOver\r\n * @param {Event} event The `mouseover` event object.\r\n * @param {CellCoords} coords CellCoords object containing the visual coordinates of the clicked cell.\r\n * @param {HTMLTableCellElement} TD TD element.\r\n * @param {object} controller An object with keys `row`, `column` and `cells` which contains boolean values. This\r\n *                            object allows or disallows changing the selection for the particular axies.\r\n */\r\n'beforeOnCellMouseOver',\r\n/**\r\n * Fired after the user moved cursor out from a cell, but before all the calculations related with it.\r\n *\r\n * @event Hooks#beforeOnCellMouseOut\r\n * @param {Event} event The `mouseout` event object.\r\n * @param {CellCoords} coords CellCoords object containing the visual coordinates of the leaved cell.\r\n * @param {HTMLTableCellElement} TD TD element.\r\n */\r\n'beforeOnCellMouseOut',\r\n/**\r\n * Fired before one or more columns are about to be removed.\r\n *\r\n * @event Hooks#beforeRemoveCol\r\n * @param {number} index Visual index of starter column.\r\n * @param {number} amount Amount of columns to be removed.\r\n * @param {number[]} physicalColumns An array of physical columns removed from the data source.\r\n * @param {string} [source] String that identifies source of hook call ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\r\n'beforeRemoveCol',\r\n/**\r\n * Fired when one or more rows are about to be removed.\r\n *\r\n * @event Hooks#beforeRemoveRow\r\n * @param {number} index Visual index of starter row.\r\n * @param {number} amount Amount of rows to be removed.\r\n * @param {number[]} physicalRows An array of physical rows removed from the data source.\r\n * @param {string} [source] String that identifies source of hook call ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\r\n'beforeRemoveRow',\r\n/**\r\n * Fired before the Handsontable table is rendered.\r\n *\r\n * @event Hooks#beforeRender\r\n * @param {boolean} isForced If `true` rendering was triggered by a change of settings or data; or `false` if\r\n *                           rendering was triggered by scrolling or moving selection.\r\n * @param {object} skipRender Object with `skipRender` property, if it is set to `true ` the next rendering cycle will be skipped.\r\n */\r\n'beforeRender',\r\n/**\r\n * Fired before cell meta is changed.\r\n *\r\n * @event Hooks#beforeSetCellMeta\r\n * @since 8.0.0\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {string} key The updated meta key.\r\n * @param {*} value The updated meta value.\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\r\n'beforeSetCellMeta',\r\n/**\r\n * Fired before setting range is started but not finished yet.\r\n *\r\n * @event Hooks#beforeSetRangeStartOnly\r\n * @param {CellCoords} coords CellCoords instance.\r\n */\r\n'beforeSetRangeStartOnly',\r\n/**\r\n * Fired before setting range is started.\r\n *\r\n * @event Hooks#beforeSetRangeStart\r\n * @param {CellCoords} coords CellCoords instance.\r\n */\r\n'beforeSetRangeStart',\r\n/**\r\n * Fired before setting range is ended.\r\n *\r\n * @event Hooks#beforeSetRangeEnd\r\n * @param {CellCoords} coords CellCoords instance.\r\n */\r\n'beforeSetRangeEnd',\r\n/**\r\n * Fired before the logic of handling a touch scroll, when user started scrolling on a touch-enabled device.\r\n *\r\n * @event Hooks#beforeTouchScroll\r\n */\r\n'beforeTouchScroll',\r\n/**\r\n * Fired before cell validation, only if validator function is defined. This can be used to manipulate the value\r\n * of changed cell before it is applied to the validator function.\r\n *\r\n * __Note:__ this will not affect values of changes. This will change value *ONLY* for validation.\r\n *\r\n * @event Hooks#beforeValidate\r\n * @param {*} value Value of the cell.\r\n * @param {number} row Visual row index.\r\n * @param {string|number} prop Property name / column index.\r\n * @param {string} [source] String that identifies source of hook call\r\n *                          ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n */\r\n'beforeValidate',\r\n/**\r\n * Fired before cell value is rendered into the DOM (through renderer function). This can be used to manipulate the\r\n * value which is passed to the renderer without modifying the renderer itself.\r\n *\r\n * @event Hooks#beforeValueRender\r\n * @param {*} value Cell value to render.\r\n * @param {object} cellProperties An object containing the cell properties.\r\n */\r\n'beforeValueRender',\r\n/**\r\n * Fired after Handsontable instance is constructed (using `new` operator).\r\n *\r\n * @event Hooks#construct\r\n */\r\n'construct',\r\n/**\r\n * Fired after Handsontable instance is initiated but before table is rendered.\r\n *\r\n * @event Hooks#init\r\n */\r\n'init',\r\n/**\r\n * Fired when a column header index is about to be modified by a callback function.\r\n *\r\n * @event Hooks#modifyColHeader\r\n * @param {number} column Visual column header index.\r\n */\r\n'modifyColHeader',\r\n/**\r\n * Fired when a column width is about to be modified by a callback function.\r\n *\r\n * @event Hooks#modifyColWidth\r\n * @param {number} width Current column width.\r\n * @param {number} column Visual column index.\r\n */\r\n'modifyColWidth',\r\n/**\r\n * Fired when a row header index is about to be modified by a callback function.\r\n *\r\n * @event Hooks#modifyRowHeader\r\n * @param {number} row Visual row header index.\r\n */\r\n'modifyRowHeader',\r\n/**\r\n * Fired when a row height is about to be modified by a callback function.\r\n *\r\n * @event Hooks#modifyRowHeight\r\n * @param {number} height Row height.\r\n * @param {number} row Visual row index.\r\n */\r\n'modifyRowHeight',\r\n/**\r\n * Fired when a data was retrieved or modified.\r\n *\r\n * @event Hooks#modifyData\r\n * @param {number} row Physical row height.\r\n * @param {number} column Physical column index.\r\n * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value` property.\r\n * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).\r\n */\r\n'modifyData',\r\n/**\r\n * Fired when a data was retrieved or modified from the source data set.\r\n *\r\n * @event Hooks#modifySourceData\r\n * @since 8.0.0\r\n * @param {number} row Physical row index.\r\n * @param {number} column Physical column index.\r\n * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value` property.\r\n * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).\r\n */\r\n'modifySourceData',\r\n/**\r\n * Fired when a data was retrieved or modified.\r\n *\r\n * @event Hooks#modifyRowData\r\n * @param {number} row Physical row index.\r\n */\r\n'modifyRowData',\r\n/**\r\n * Used to modify the cell coordinates when using the `getCell` method, opening editor, getting value from the editor\r\n * and saving values from the closed editor.\r\n *\r\n * @event Hooks#modifyGetCellCoords\r\n * @since 0.36.0\r\n * @param {number} row Visual row index.\r\n * @param {number} column Visual column index.\r\n * @param {boolean} topmost If set to `true`, it returns the TD element from the topmost overlay. For example,\r\n *                          if the wanted cell is in the range of fixed rows, it will return a TD element\r\n *                          from the `top` overlay.\r\n */\r\n'modifyGetCellCoords',\r\n/**\r\n * Allows modify the visual row index that is used to retrieve the row header element (TH) before it's\r\n * highlighted (proper CSS class names are added). Modifying the visual row index allows building a custom\r\n * implementation of the nested headers feature or other features that require highlighting other DOM\r\n * elements than that the rendering engine, by default, would have highlighted.\r\n *\r\n * @event Hooks#beforeHighlightingRowHeader\r\n * @since 8.4.0\r\n * @param {number} row Visual row index.\r\n * @param {number} headerLevel Column header level (0 = most distant to the table).\r\n * @param {object} highlightMeta An object that contains additional information about processed selection.\r\n * @returns {number|undefined}\r\n */\r\n'beforeHighlightingRowHeader',\r\n/**\r\n * Allows modify the visual column index that is used to retrieve the column header element (TH) before it's\r\n * highlighted (proper CSS class names are added). Modifying the visual column index allows building a custom\r\n * implementation of the nested headers feature or other features that require highlighting other DOM\r\n * elements than that the rendering engine, by default, would have highlighted.\r\n *\r\n * @event Hooks#beforeHighlightingColumnHeader\r\n * @since 8.4.0\r\n * @param {number} column Visual column index.\r\n * @param {number} headerLevel Row header level (0 = most distant to the table).\r\n * @param {object} highlightMeta An object that contains additional information about processed selection.\r\n * @returns {number|undefined}\r\n */\r\n'beforeHighlightingColumnHeader',\r\n/**\r\n * Fired by {@link PersistentState} plugin, after loading value, saved under given key, from browser local storage. This hook is fired when\r\n * {@link Options#persistentState} option is enabled.\r\n *\r\n * @event Hooks#persistentStateLoad\r\n * @param {string} key Key.\r\n * @param {object} valuePlaceholder Object containing the loaded value under `valuePlaceholder.value` (if no value have been saved, `value` key will be undefined).\r\n */\r\n'persistentStateLoad',\r\n/**\r\n * Fired by {@link PersistentState} plugin after resetting data from local storage. If no key is given, all values associated with table will be cleared.\r\n * This hook is fired when {@link Options#persistentState} option is enabled.\r\n *\r\n * @event Hooks#persistentStateReset\r\n * @param {string} [key] Key.\r\n */\r\n'persistentStateReset',\r\n/**\r\n * Fired by {@link PersistentState} plugin, after saving value under given key in browser local storage. This hook is fired when\r\n * {@link Options#persistentState} option is enabled.\r\n *\r\n * @event Hooks#persistentStateSave\r\n * @param {string} key Key.\r\n * @param {Mixed} value Value to save.\r\n */\r\n'persistentStateSave',\r\n/**\r\n * Fired by {@link ColumnSorting} and {@link MultiColumnSorting} plugins before sorting the column. If you return `false` value inside callback for hook, then sorting\r\n * will be not applied by the Handsontable (useful for server-side sorting).\r\n *\r\n * This hook is fired when {@link Options#columnSorting} or {@link Options#multiColumnSorting} option is enabled.\r\n *\r\n * @event Hooks#beforeColumnSort\r\n * @param {Array} currentSortConfig Current sort configuration (for all sorted columns).\r\n * @param {Array} destinationSortConfigs Destination sort configuration (for all sorted columns).\r\n * @returns {boolean | void} If `false` the column will not be sorted, `true` otherwise.\r\n */\r\n'beforeColumnSort',\r\n/**\r\n * Fired by {@link ColumnSorting} and {@link MultiColumnSorting} plugins after sorting the column. This hook is fired when {@link Options#columnSorting}\r\n * or {@link Options#multiColumnSorting} option is enabled.\r\n *\r\n * @event Hooks#afterColumnSort\r\n * @param {Array} currentSortConfig Current sort configuration (for all sorted columns).\r\n * @param {Array} destinationSortConfigs Destination sort configuration (for all sorted columns).\r\n */\r\n'afterColumnSort',\r\n/**\r\n * Fired by {@link Autofill} plugin after setting range of autofill. This hook is fired when {@link Options#fillHandle}\r\n * option is enabled.\r\n *\r\n * @event Hooks#modifyAutofillRange\r\n * @param {Array} startArea Array of visual coordinates of the starting point for the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).\r\n * @param {Array} entireArea Array of visual coordinates of the entire area of the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).\r\n */\r\n'modifyAutofillRange',\r\n/**\r\n * Fired to allow modifying the copyable range with a callback function.\r\n *\r\n * @event Hooks#modifyCopyableRange\r\n * @param {Array[]} copyableRanges Array of objects defining copyable cells.\r\n */\r\n'modifyCopyableRange',\r\n/**\r\n * Fired by {@link CopyPaste} plugin before copying the values into clipboard and before clearing values of\r\n * the selected cells. This hook is fired when {@link Options#copyPaste} option is enabled.\r\n *\r\n * @event Hooks#beforeCut\r\n * @param {Array[]} data An array of arrays which contains data to cut.\r\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\r\n *                       which will be cut out.\r\n * @returns {*} If returns `false` then operation of the cutting out is canceled.\r\n * @example\r\n * ```js\r\n * // To disregard a single row, remove it from the array using data.splice(i, 1).\r\n * new Handsontable(element, {\r\n *   beforeCut: function(data, coords) {\r\n *     // data -> [[1, 2, 3], [4, 5, 6]]\r\n *     data.splice(0, 1);\r\n *     // data -> [[4, 5, 6]]\r\n *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]\r\n *   }\r\n * });\r\n * // To cancel a cutting action, just return `false`.\r\n * new Handsontable(element, {\r\n *   beforeCut: function(data, coords) {\r\n *     return false;\r\n *   }\r\n * });\r\n * ```\r\n */\r\n'beforeCut',\r\n/**\r\n * Fired by {@link CopyPaste} plugin after data was cut out from the table. This hook is fired when\r\n * {@link Options#copyPaste} option is enabled.\r\n *\r\n * @event Hooks#afterCut\r\n * @param {Array[]} data An array of arrays which contains the cutted out data.\r\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\r\n *                       which was cut out.\r\n */\r\n'afterCut',\r\n/**\r\n * Fired before values are copied into clipboard.\r\n *\r\n * @event Hooks#beforeCopy\r\n * @param {Array[]} data An array of arrays which contains data to copied.\r\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\r\n *                         which will copied.\r\n * @returns {*} If returns `false` then copying is canceled.\r\n *\r\n * @example\r\n * ```js\r\n * // To disregard a single row, remove it from array using data.splice(i, 1).\r\n * ...\r\n * new Handsontable(document.getElementById('example'), {\r\n *   beforeCopy: (data, coords) => {\r\n *     // data -> [[1, 2, 3], [4, 5, 6]]\r\n *     data.splice(0, 1);\r\n *     // data -> [[4, 5, 6]]\r\n *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]\r\n *   }\r\n * });\r\n * ...\r\n *\r\n * // To cancel copying, return false from the callback.\r\n * ...\r\n * new Handsontable(document.getElementById('example'), {\r\n *   beforeCopy: (data, coords) => {\r\n *     return false;\r\n *   }\r\n * });\r\n * ...\r\n * ```\r\n */\r\n'beforeCopy',\r\n/**\r\n * Fired by {@link CopyPaste} plugin after data are pasted into table. This hook is fired when {@link Options#copyPaste}\r\n * option is enabled.\r\n *\r\n * @event Hooks#afterCopy\r\n * @param {Array[]} data An array of arrays which contains the copied data.\r\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\r\n *                         which was copied.\r\n */\r\n'afterCopy',\r\n/**\r\n * Fired by {@link CopyPaste} plugin before values are pasted into table. This hook is fired when\r\n * {@link Options#copyPaste} option is enabled.\r\n *\r\n * @event Hooks#beforePaste\r\n * @param {Array[]} data An array of arrays which contains data to paste.\r\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\r\n *                       that correspond to the previously selected area.\r\n * @returns {*} If returns `false` then pasting is canceled.\r\n * @example\r\n * ```js\r\n * // To disregard a single row, remove it from array using data.splice(i, 1).\r\n * new Handsontable(example, {\r\n *   beforePaste: (data, coords) => {\r\n *     // data -> [[1, 2, 3], [4, 5, 6]]\r\n *     data.splice(0, 1);\r\n *     // data -> [[4, 5, 6]]\r\n *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]\r\n *   }\r\n * });\r\n * // To cancel pasting, return false from the callback.\r\n * new Handsontable(example, {\r\n *   beforePaste: (data, coords) => {\r\n *     return false;\r\n *   }\r\n * });\r\n * ```\r\n */\r\n'beforePaste',\r\n/**\r\n * Fired by {@link CopyPaste} plugin after values are pasted into table. This hook is fired when\r\n * {@link Options#copyPaste} option is enabled.\r\n *\r\n * @event Hooks#afterPaste\r\n * @param {Array[]} data An array of arrays which contains the pasted data.\r\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\r\n *                       that correspond to the previously selected area.\r\n */\r\n'afterPaste',\r\n/**\r\n * Fired by {@link ManualColumnMove} plugin before change order of the visual indexes. This hook is fired when\r\n * {@link Options#manualColumnMove} option is enabled.\r\n *\r\n * @event Hooks#beforeColumnMove\r\n * @param {Array} movedColumns Array of visual column indexes to be moved.\r\n * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action. To check visualization of final index please take a look at [documentation](/docs/demo-moving.html).\r\n * @param {number|undefined} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements. To check visualization of drop index please take a look at [documentation](/docs/demo-moving.html). It's `undefined` when `dragColumns` function wasn't called.\r\n * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.\r\n * @returns {void | boolean} If `false` the column will not be moved, `true` otherwise.\r\n */\r\n'beforeColumnMove',\r\n/**\r\n * Fired by {@link ManualColumnMove} plugin after changing order of the visual indexes. This hook is fired when\r\n * {@link Options#manualColumnMove} option is enabled.\r\n *\r\n * @event Hooks#afterColumnMove\r\n * @param {Array} movedColumns Array of visual column indexes to be moved.\r\n * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action. To check visualization of final index please take a look at [documentation](/docs/demo-moving.html).\r\n * @param {number|undefined} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements. To check visualization of drop index please take a look at [documentation](/docs/demo-moving.html). It's `undefined` when `dragColumns` function wasn't called.\r\n * @param {boolean} movePossible Indicates if it was possible to move columns to the desired position.\r\n * @param {boolean} orderChanged Indicates if order of columns was changed by move.\r\n */\r\n'afterColumnMove',\r\n/**\r\n * Fired by {@link ManualRowMove} plugin before changing the order of the visual indexes. This hook is fired when\r\n * {@link Options#manualRowMove} option is enabled.\r\n *\r\n * @event Hooks#beforeRowMove\r\n * @param {Array} movedRows Array of visual row indexes to be moved.\r\n * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action. To check visualization of final index please take a look at [documentation](/docs/demo-moving.html).\r\n * @param {number|undefined} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements. To check visualization of drop index please take a look at [documentation](/docs/demo-moving.html). It's `undefined` when `dragRows` function wasn't called.\r\n * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\r\n'beforeRowMove',\r\n/**\r\n * Fired by {@link ManualRowMove} plugin after changing the order of the visual indexes. This hook is fired when\r\n * {@link Options#manualRowMove} option is enabled.\r\n *\r\n * @event Hooks#afterRowMove\r\n * @param {Array} movedRows Array of visual row indexes to be moved.\r\n * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action. To check visualization of final index please take a look at [documentation](/docs/demo-moving.html).\r\n * @param {number|undefined} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements. To check visualization of drop index please take a look at [documentation](/docs/demo-moving.html). It's `undefined` when `dragRows` function wasn't called.\r\n * @param {boolean} movePossible Indicates if it was possible to move rows to the desired position.\r\n * @param {boolean} orderChanged Indicates if order of rows was changed by move.\r\n */\r\n'afterRowMove',\r\n/**\r\n * Fired by {@link ManualColumnResize} plugin before rendering the table with modified column sizes. This hook is\r\n * fired when {@link Options#manualColumnResize} option is enabled.\r\n *\r\n * @event Hooks#beforeColumnResize\r\n * @param {number} newSize Calculated new column width.\r\n * @param {number} column Visual index of the resized column.\r\n * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.\r\n * @returns {number} Returns a new column size or `undefined`, if column size should be calculated automatically.\r\n */\r\n'beforeColumnResize',\r\n/**\r\n * Fired by {@link ManualColumnResize} plugin after rendering the table with modified column sizes. This hook is\r\n * fired when {@link Options#manualColumnResize} option is enabled.\r\n *\r\n * @event Hooks#afterColumnResize\r\n * @param {number} newSize Calculated new column width.\r\n * @param {number} column Visual index of the resized column.\r\n * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.\r\n */\r\n'afterColumnResize',\r\n/**\r\n * Fired by {@link ManualRowResize} plugin before rendering the table with modified row sizes. This hook is\r\n * fired when {@link Options#manualRowResize} option is enabled.\r\n *\r\n * @event Hooks#beforeRowResize\r\n * @param {number} newSize Calculated new row height.\r\n * @param {number} row Visual index of the resized row.\r\n * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.\r\n * @returns {number} Returns the new row size or `undefined` if row size should be calculated automatically.\r\n */\r\n'beforeRowResize',\r\n/**\r\n * Fired by {@link ManualRowResize} plugin after rendering the table with modified row sizes. This hook is\r\n * fired when {@link Options#manualRowResize} option is enabled.\r\n *\r\n * @event Hooks#afterRowResize\r\n * @param {number} newSize Calculated new row height.\r\n * @param {number} row Visual index of the resized row.\r\n * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.\r\n */\r\n'afterRowResize',\r\n/**\r\n * Fired after getting the column header renderers.\r\n *\r\n * @event Hooks#afterGetColumnHeaderRenderers\r\n * @param {Function[]} renderers An array of the column header renderers.\r\n */\r\n'afterGetColumnHeaderRenderers',\r\n/**\r\n * Fired after getting the row header renderers.\r\n *\r\n * @event Hooks#afterGetRowHeaderRenderers\r\n * @param {Function[]} renderers An array of the row header renderers.\r\n */\r\n'afterGetRowHeaderRenderers',\r\n/**\r\n * Fired before applying stretched column width to column.\r\n *\r\n * @event Hooks#beforeStretchingColumnWidth\r\n * @param {number} stretchedWidth Calculated width.\r\n * @param {number} column Visual column index.\r\n * @returns {number} Returns new width which will be applied to the column element.\r\n */\r\n'beforeStretchingColumnWidth',\r\n/* eslint-disable jsdoc/require-description-complete-sentence */\r\n\r\n/**\r\n * Fired by {@link Filters} plugin before applying [filtering]{@link https://handsontable.com/docs/demo-filtering.html}. This hook is fired when\r\n * {@link Options#filters} option is enabled.\r\n *\r\n * @event Hooks#beforeFilter\r\n * @param {object[]} conditionsStack An array of objects with added formulas.\r\n * ```js\r\n * // Example format of the conditionsStack argument:\r\n * [\r\n *   {\r\n *     column: 2,\r\n *     conditions: [\r\n *       {name: 'begins_with', args: [['S']]}\r\n *     ],\r\n *     operation: 'conjunction'\r\n *   },\r\n *   {\r\n *     column: 4,\r\n *     conditions: [\r\n *       {name: 'not_empty', args: []}\r\n *     ],\r\n *     operation: 'conjunction'\r\n *   },\r\n * ]\r\n * ```\r\n * @returns {boolean} If hook returns `false` value then filtering won't be applied on the UI side (server-side filtering).\r\n */\r\n'beforeFilter',\r\n/* eslint-enable jsdoc/require-description-complete-sentence */\r\n\r\n/* eslint-disable jsdoc/require-description-complete-sentence */\r\n\r\n/**\r\n * Fired by {@link Filters} plugin after applying [filtering]{@link https://handsontable.com/docs/demo-filtering.html}. This hook is fired when\r\n * {@link Options#filters} option is enabled.\r\n *\r\n * @event Hooks#afterFilter\r\n * @param {object[]} conditionsStack An array of objects with added conditions.\r\n * ```js\r\n * // Example format of the conditionsStack argument:\r\n * [\r\n *   {\r\n *     column: 2,\r\n *     conditions: [\r\n *       {name: 'begins_with', args: [['S']]}\r\n *     ],\r\n *     operation: 'conjunction'\r\n *   },\r\n *   {\r\n *     column: 4,\r\n *     conditions: [\r\n *       {name: 'not_empty', args: []}\r\n *     ],\r\n *     operation: 'conjunction'\r\n *   },\r\n * ]\r\n * ```\r\n */\r\n'afterFilter',\r\n/* eslint-enable jsdoc/require-description-complete-sentence */\r\n\r\n/**\r\n * Called when a value is updated in the engine.\r\n *\r\n * @since 9.0.0\r\n * @event Hooks#afterFormulasValuesUpdate\r\n * @param {Array} changes The values and location of applied changes.\r\n */\r\n'afterFormulasValuesUpdate',\r\n/**\r\n * Called when a named expression is added to the Formulas' engine instance.\r\n *\r\n * @since 9.0.0\r\n * @event Hooks#afterNamedExpressionAdded\r\n * @param {string} namedExpressionName The name of the added expression.\r\n * @param {Array} changes The values and location of applied changes.\r\n */\r\n'afterNamedExpressionAdded',\r\n/**\r\n * Called when a named expression is removed from the Formulas' engine instance.\r\n *\r\n * @since 9.0.0\r\n * @event Hooks#afterNamedExpressionRemoved\r\n * @param {string} namedExpressionName The name of the removed expression.\r\n * @param {Array} changes The values and location of applied changes.\r\n */\r\n'afterNamedExpressionRemoved',\r\n/**\r\n * Called when a new sheet is added to the Formulas' engine instance.\r\n *\r\n * @since 9.0.0\r\n * @event Hooks#afterSheetAdded\r\n * @param {string} addedSheetDisplayName The name of the added sheet.\r\n */\r\n'afterSheetAdded',\r\n/**\r\n * Called when a sheet in the Formulas' engine instance is renamed.\r\n *\r\n * @since 9.0.0\r\n * @event Hooks#afterSheetRenamed\r\n * @param {string} oldDisplayName The old name of the sheet.\r\n * @param {string} newDisplayName The new name of the sheet.\r\n */\r\n'afterSheetRenamed',\r\n/**\r\n * Called when a sheet is removed from the Formulas' engine instance.\r\n *\r\n * @since 9.0.0\r\n * @event Hooks#afterSheetRemoved\r\n * @param {string} removedSheetDisplayName The removed sheet name.\r\n * @param {Array} changes The values and location of applied changes.\r\n */\r\n'afterSheetRemoved',\r\n/**\r\n * Fired while retrieving the column header height.\r\n *\r\n * @event Hooks#modifyColumnHeaderHeight\r\n */\r\n'modifyColumnHeaderHeight',\r\n/**\r\n * Fired by {@link UndoRedo} plugin before the undo action. Contains information about the action that is being undone.\r\n * This hook is fired when {@link Options#undo} option is enabled.\r\n *\r\n * @event Hooks#beforeUndo\r\n * @param {object} action The action object. Contains information about the action being undone. The `actionType`\r\n *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\r\n'beforeUndo',\r\n/**\r\n * Fired by {@link UndoRedo} plugin before changing undo stack.\r\n *\r\n * @event Hooks#beforeUndoStackChange\r\n * @since 8.4.0\r\n * @param {Array} doneActions Stack of actions which may be undone.\r\n * @param {string} [source] String that identifies source of action ([list of all available sources]{@link https://handsontable.com/docs/tutorial-using-callbacks.html#page-source-definition}).\r\n * @returns {*|boolean} If false is returned the action of changing undo stack is canceled.\r\n */\r\n'beforeUndoStackChange',\r\n/**\r\n * Fired by {@link UndoRedo} plugin after the undo action. Contains information about the action that is being undone.\r\n * This hook is fired when {@link Options#undo} option is enabled.\r\n *\r\n * @event Hooks#afterUndo\r\n * @param {object} action The action object. Contains information about the action being undone. The `actionType`\r\n *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).\r\n */\r\n'afterUndo',\r\n/**\r\n * Fired by {@link UndoRedo} plugin after changing undo stack.\r\n *\r\n * @event Hooks#afterUndoStackChange\r\n * @since 8.4.0\r\n * @param {Array} doneActionsBefore Stack of actions which could be undone before performing new action.\r\n * @param {Array} doneActionsAfter Stack of actions which can be undone after performing new action.\r\n */\r\n'afterUndoStackChange',\r\n/**\r\n * Fired by {@link UndoRedo} plugin before the redo action. Contains information about the action that is being redone.\r\n * This hook is fired when {@link Options#undo} option is enabled.\r\n *\r\n * @event Hooks#beforeRedo\r\n * @param {object} action The action object. Contains information about the action being redone. The `actionType`\r\n *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).\r\n * @returns {*|boolean} If false is returned the action is canceled.\r\n */\r\n'beforeRedo',\r\n/**\r\n * Fired by {@link UndoRedo} plugin before changing redo stack.\r\n *\r\n * @event Hooks#beforeRedoStackChange\r\n * @since 8.4.0\r\n * @param {Array} undoneActions Stack of actions which may be redone.\r\n */\r\n'beforeRedoStackChange',\r\n/**\r\n * Fired by {@link UndoRedo} plugin after the redo action. Contains information about the action that is being redone.\r\n * This hook is fired when {@link Options#undo} option is enabled.\r\n *\r\n * @event Hooks#afterRedo\r\n * @param {object} action The action object. Contains information about the action being redone. The `actionType`\r\n *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).\r\n */\r\n'afterRedo',\r\n/**\r\n * Fired by {@link UndoRedo} plugin after changing redo stack.\r\n *\r\n * @event Hooks#afterRedoStackChange\r\n * @since 8.4.0\r\n * @param {Array} undoneActionsBefore Stack of actions which could be redone before performing new action.\r\n * @param {Array} undoneActionsAfter Stack of actions which can be redone after performing new action.\r\n */\r\n'afterRedoStackChange',\r\n/**\r\n * Fired while retrieving the row header width.\r\n *\r\n * @event Hooks#modifyRowHeaderWidth\r\n * @param {number} rowHeaderWidth Row header width.\r\n */\r\n'modifyRowHeaderWidth',\r\n/**\r\n * Fired from the `populateFromArray` method during the `autofill` process. Fired for each \"autofilled\" cell individually.\r\n *\r\n * @deprecated\r\n * @event Hooks#beforeAutofillInsidePopulate\r\n * @param {object} index Object containing `row` and `col` properties, defining the number of rows/columns from the initial cell of the autofill.\r\n * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.\r\n * @param {Array[]} input Contains an array of rows with data being used in the autofill.\r\n * @param {Array} deltas The deltas array passed to the `populateFromArray` method.\r\n */\r\n'beforeAutofillInsidePopulate',\r\n/**\r\n * Fired when the start of the selection is being modified (e.g. Moving the selection with the arrow keys).\r\n *\r\n * @event Hooks#modifyTransformStart\r\n * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.\r\n */\r\n'modifyTransformStart',\r\n/**\r\n * Fired when the end of the selection is being modified (e.g. Moving the selection with the arrow keys).\r\n *\r\n * @event Hooks#modifyTransformEnd\r\n * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.\r\n */\r\n'modifyTransformEnd',\r\n/**\r\n * Fired after the start of the selection is being modified (e.g. Moving the selection with the arrow keys).\r\n *\r\n * @event Hooks#afterModifyTransformStart\r\n * @param {CellCoords} coords Coords of the freshly selected cell.\r\n * @param {number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.\r\n * @param {number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.\r\n */\r\n'afterModifyTransformStart',\r\n/**\r\n * Fired after the end of the selection is being modified (e.g. Moving the selection with the arrow keys).\r\n *\r\n * @event Hooks#afterModifyTransformEnd\r\n * @param {CellCoords} coords Visual coords of the freshly selected cell.\r\n * @param {number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.\r\n * @param {number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.\r\n */\r\n'afterModifyTransformEnd',\r\n/**\r\n * Fired inside the `viewportRowCalculatorOverride` method. Allows modifying the row calculator parameters.\r\n *\r\n * @event Hooks#afterViewportRowCalculatorOverride\r\n * @param {object} calc The row calculator.\r\n */\r\n'afterViewportRowCalculatorOverride',\r\n/**\r\n * Fired inside the `viewportColumnCalculatorOverride` method. Allows modifying the row calculator parameters.\r\n *\r\n * @event Hooks#afterViewportColumnCalculatorOverride\r\n * @param {object} calc The row calculator.\r\n */\r\n'afterViewportColumnCalculatorOverride',\r\n/**\r\n * Fired after initializing all the plugins.\r\n * This hook should be added before Handsontable is initialized.\r\n *\r\n * @event Hooks#afterPluginsInitialized\r\n *\r\n * @example\r\n * ```js\r\n * Handsontable.hooks.add('afterPluginsInitialized', myCallback);\r\n * ```\r\n */\r\n'afterPluginsInitialized',\r\n/**\r\n * Fired by {@link HiddenRows} plugin before marking the rows as hidden. Fired only if the {@link Options#hiddenRows} option is enabled.\r\n * Returning `false` in the callback will prevent the hiding action from completing.\r\n *\r\n * @event Hooks#beforeHideRows\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.\r\n * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.\r\n */\r\n'beforeHideRows',\r\n/**\r\n * Fired by {@link HiddenRows} plugin after marking the rows as hidden. Fired only if the {@link Options#hiddenRows} option is enabled.\r\n *\r\n * @event Hooks#afterHideRows\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.\r\n * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.\r\n * @param {boolean} stateChanged `true`, if the action affected any non-hidden rows, `false` otherwise.\r\n */\r\n'afterHideRows',\r\n/**\r\n * Fired by {@link HiddenRows} plugin before marking the rows as not hidden. Fired only if the {@link Options#hiddenRows} option is enabled.\r\n * Returning `false` in the callback will prevent the row revealing action from completing.\r\n *\r\n * @event Hooks#beforeUnhideRows\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.\r\n * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the revealing action will not be completed.\r\n */\r\n'beforeUnhideRows',\r\n/**\r\n * Fired by {@link HiddenRows} plugin after marking the rows as not hidden. Fired only if the {@link Options#hiddenRows} option is enabled.\r\n *\r\n * @event Hooks#afterUnhideRows\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.\r\n * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.\r\n * @param {boolean} stateChanged `true`, if the action affected any hidden rows, `false` otherwise.\r\n */\r\n'afterUnhideRows',\r\n/**\r\n * Fired by {@link HiddenColumns} plugin before marking the columns as hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.\r\n * Returning `false` in the callback will prevent the hiding action from completing.\r\n *\r\n * @event Hooks#beforeHideColumns\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.\r\n * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.\r\n */\r\n'beforeHideColumns',\r\n/**\r\n * Fired by {@link HiddenColumns} plugin after marking the columns as hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.\r\n *\r\n * @event Hooks#afterHideColumns\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.\r\n * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.\r\n * @param {boolean} stateChanged `true`, if the action affected any non-hidden columns, `false` otherwise.\r\n */\r\n'afterHideColumns',\r\n/**\r\n * Fired by {@link HiddenColumns} plugin before marking the columns as not hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.\r\n * Returning `false` in the callback will prevent the column revealing action from completing.\r\n *\r\n * @event Hooks#beforeUnhideColumns\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.\r\n * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.\r\n */\r\n'beforeUnhideColumns',\r\n/**\r\n * Fired by {@link HiddenColumns} plugin after marking the columns as not hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.\r\n *\r\n * @event Hooks#afterUnhideColumns\r\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.\r\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.\r\n * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.\r\n * @param {boolean} stateChanged `true`, if the action affected any hidden columns, `false` otherwise.\r\n */\r\n'afterUnhideColumns',\r\n/**\r\n * Fired by {@link TrimRows} plugin before trimming rows. This hook is fired when {@link Options#trimRows} option is enabled.\r\n *\r\n * @event Hooks#beforeTrimRow\r\n * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.\r\n * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.\r\n * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the trimming action will not be completed.\r\n */\r\n'beforeTrimRow',\r\n/**\r\n * Fired by {@link TrimRows} plugin after trimming rows. This hook is fired when {@link Options#trimRows} option is enabled.\r\n *\r\n * @event Hooks#afterTrimRow\r\n * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.\r\n * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.\r\n * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.\r\n * @param {boolean} stateChanged `true`, if the action affected any non-trimmed rows, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the trimming action will not be completed.\r\n */\r\n'afterTrimRow',\r\n/**\r\n * Fired by {@link TrimRows} plugin before untrimming rows. This hook is fired when {@link Options#trimRows} option is enabled.\r\n *\r\n * @event Hooks#beforeUntrimRow\r\n * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.\r\n * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.\r\n * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the untrimming action will not be completed.\r\n */\r\n'beforeUntrimRow',\r\n/**\r\n * Fired by {@link TrimRows} plugin after untrimming rows. This hook is fired when {@link Options#trimRows} option is enabled.\r\n *\r\n * @event Hooks#afterUntrimRow\r\n * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.\r\n * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.\r\n * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.\r\n * @param {boolean} stateChanged `true`, if the action affected any trimmed rows, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the untrimming action will not be completed.\r\n */\r\n'afterUntrimRow',\r\n/**\r\n * Fired by {@link DropdownMenu} plugin before opening the dropdown menu. This hook is fired when {@link Options#dropdownMenu}\r\n * option is enabled.\r\n *\r\n * @event Hooks#beforeDropdownMenuShow\r\n * @param {DropdownMenu} dropdownMenu The DropdownMenu instance.\r\n */\r\n'beforeDropdownMenuShow',\r\n/**\r\n * Fired by {@link DropdownMenu} plugin after opening the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}\r\n * option is enabled.\r\n *\r\n * @event Hooks#afterDropdownMenuShow\r\n * @param {DropdownMenu} dropdownMenu The DropdownMenu instance.\r\n */\r\n'afterDropdownMenuShow',\r\n/**\r\n * Fired by {@link DropdownMenu} plugin after hiding the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}\r\n * option is enabled.\r\n *\r\n * @event Hooks#afterDropdownMenuHide\r\n * @param {DropdownMenu} instance The DropdownMenu instance.\r\n */\r\n'afterDropdownMenuHide',\r\n/**\r\n * Fired by {@link NestedRows} plugin before adding a children to the NestedRows structure. This hook is fired when\r\n * {@link Options#nestedRows} option is enabled.\r\n *\r\n * @event Hooks#beforeAddChild\r\n * @param {object} parent The parent object.\r\n * @param {object|undefined} element The element added as a child. If `undefined`, a blank child was added.\r\n * @param {number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.\r\n */\r\n'beforeAddChild',\r\n/**\r\n * Fired by {@link NestedRows} plugin after adding a children to the NestedRows structure. This hook is fired when\r\n * {@link Options#nestedRows} option is enabled.\r\n *\r\n * @event Hooks#afterAddChild\r\n * @param {object} parent The parent object.\r\n * @param {object|undefined} element The element added as a child. If `undefined`, a blank child was added.\r\n * @param {number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.\r\n */\r\n'afterAddChild',\r\n/**\r\n * Fired by {@link NestedRows} plugin before detaching a child from its parent. This hook is fired when\r\n * {@link Options#nestedRows} option is enabled.\r\n *\r\n * @event Hooks#beforeDetachChild\r\n * @param {object} parent An object representing the parent from which the element is to be detached.\r\n * @param {object} element The detached element.\r\n */\r\n'beforeDetachChild',\r\n/**\r\n * Fired by {@link NestedRows} plugin after detaching a child from its parent. This hook is fired when\r\n * {@link Options#nestedRows} option is enabled.\r\n *\r\n * @event Hooks#afterDetachChild\r\n * @param {object} parent An object representing the parent from which the element was detached.\r\n * @param {object} element The detached element.\r\n */\r\n'afterDetachChild',\r\n/**\r\n * Fired after the editor is opened and rendered.\r\n *\r\n * @event Hooks#afterBeginEditing\r\n * @param {number} row Visual row index of the edited cell.\r\n * @param {number} column Visual column index of the edited cell.\r\n */\r\n'afterBeginEditing',\r\n/**\r\n * Fired by {@link MergeCells} plugin before cell merging. This hook is fired when {@link Options#mergeCells}\r\n * option is enabled.\r\n *\r\n * @event Hooks#beforeMergeCells\r\n * @param {CellRange} cellRange Selection cell range.\r\n * @param {boolean} [auto=false] `true` if called automatically by the plugin.\r\n */\r\n'beforeMergeCells',\r\n/**\r\n * Fired by {@link MergeCells} plugin after cell merging. This hook is fired when {@link Options#mergeCells}\r\n * option is enabled.\r\n *\r\n * @event Hooks#afterMergeCells\r\n * @param {CellRange} cellRange Selection cell range.\r\n * @param {object} mergeParent The parent collection of the provided cell range.\r\n * @param {boolean} [auto=false] `true` if called automatically by the plugin.\r\n */\r\n'afterMergeCells',\r\n/**\r\n * Fired by {@link MergeCells} plugin before unmerging the cells. This hook is fired when {@link Options#mergeCells}\r\n * option is enabled.\r\n *\r\n * @event Hooks#beforeUnmergeCells\r\n * @param {CellRange} cellRange Selection cell range.\r\n * @param {boolean} [auto=false] `true` if called automatically by the plugin.\r\n */\r\n'beforeUnmergeCells',\r\n/**\r\n * Fired by {@link MergeCells} plugin after unmerging the cells. This hook is fired when {@link Options#mergeCells}\r\n * option is enabled.\r\n *\r\n * @event Hooks#afterUnmergeCells\r\n * @param {CellRange} cellRange Selection cell range.\r\n * @param {boolean} [auto=false] `true` if called automatically by the plugin.\r\n */\r\n'afterUnmergeCells',\r\n/**\r\n * Fired after the table was switched into listening mode. This allows Handsontable to capture keyboard events and\r\n * respond in the right way.\r\n *\r\n * @event Hooks#afterListen\r\n */\r\n'afterListen',\r\n/**\r\n * Fired after the table was switched off from the listening mode. This makes the Handsontable inert for any\r\n * keyboard events.\r\n *\r\n * @event Hooks#afterUnlisten\r\n */\r\n'afterUnlisten',\r\n/**\r\n * Fired after the window was resized.\r\n *\r\n * @event Hooks#afterRefreshDimensions\r\n * @param {object} previousDimensions Previous dimensions of the container.\r\n * @param {object} currentDimensions Current dimensions of the container.\r\n * @param {boolean} stateChanged `true`, if the container was re-render, `false` otherwise.\r\n */\r\n'afterRefreshDimensions',\r\n/**\r\n * Cancellable hook, called after resizing a window, but before redrawing a table.\r\n *\r\n * @event Hooks#beforeRefreshDimensions\r\n * @param {object} previousDimensions Previous dimensions of the container.\r\n * @param {object} currentDimensions Current dimensions of the container.\r\n * @param {boolean} actionPossible `true`, if current and previous dimensions are different, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the refresh action will not be completed.\r\n */\r\n'beforeRefreshDimensions',\r\n/**\r\n * Fired by {@link CollapsibleColumns} plugin before columns collapse. This hook is fired when {@link Options#collapsibleColumns} option is enabled.\r\n *\r\n * @event Hooks#beforeColumnCollapse\r\n * @since 8.0.0\r\n * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {boolean} collapsePossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the collapsing action will not be completed.\r\n */\r\n'beforeColumnCollapse',\r\n/**\r\n * Fired by {@link CollapsibleColumns} plugin before columns collapse. This hook is fired when {@link Options#collapsibleColumns} option is enabled.\r\n *\r\n * @event Hooks#afterColumnCollapse\r\n * @since 8.0.0\r\n * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {boolean} collapsePossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.\r\n * @param {boolean} successfullyCollapsed `true`, if the action affected any non-collapsible column, `false` otherwise.\r\n */\r\n'afterColumnCollapse',\r\n/**\r\n * Fired by {@link CollapsibleColumns} plugin before columns expand. This hook is fired when {@link Options#collapsibleColumns} option is enabled.\r\n *\r\n * @event Hooks#beforeColumnExpand\r\n * @since 8.0.0\r\n * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {boolean} expandPossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.\r\n * @returns {undefined|boolean} If the callback returns `false`, the expanding action will not be completed.\r\n */\r\n'beforeColumnExpand',\r\n/**\r\n * Fired by {@link CollapsibleColumns} plugin before columns expand. This hook is fired when {@link Options#collapsibleColumns} option is enabled.\r\n *\r\n * @event Hooks#afterColumnExpand\r\n * @since 8.0.0\r\n * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.\r\n * @param {boolean} expandPossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.\r\n * @param {boolean} successfullyExpanded `true`, if the action affected any non-collapsible column, `false` otherwise.\r\n */\r\n'afterColumnExpand',\r\n/**\r\n * Fired by {@link AutoColumnSize} plugin within {@link SampleGenerator} utility.\r\n *\r\n * @event Hooks#modifyAutoColumnSizeSeed\r\n * @since 8.4.0\r\n * @param {string|undefined} seed Seed ID, unique name to categorize samples.\r\n * @param {object} cellProperties Object containing the cell properties.\r\n * @param {*} cellValue Value of the cell.\r\n */\r\n'modifyAutoColumnSizeSeed'];\r\n/**\r\n * Template warning message for removed hooks.\r\n *\r\n * @type {string}\r\n */\r\n\r\nvar REMOVED_MESSAGE = toSingleLine(_templateObject || (_templateObject = _taggedTemplateLiteral([\"The plugin hook \\\"[hookName]\\\" was removed in Handsontable [removedInVersion]. \\n  Please consult release notes https://github.com/handsontable/handsontable/releases/tag/[removedInVersion] to \\n  learn about the migration path.\"], [\"The plugin hook \\\"[hookName]\\\" was removed in Handsontable [removedInVersion].\\\\x20\\n  Please consult release notes https://github.com/handsontable/handsontable/releases/tag/[removedInVersion] to\\\\x20\\n  learn about the migration path.\"])));\r\n/**\r\n * The list of the hooks which are removed from the API. The warning message is printed out in\r\n * the developer console when the hook is used.\r\n *\r\n * The Map key is represented by hook name and its value points to the Handsontable version\r\n * in which it was removed.\r\n *\r\n * @type {Map<string, string>}\r\n */\r\n\r\nvar REMOVED_HOOKS = new Map([['modifyRow', '8.0.0'], ['modifyCol', '8.0.0'], ['unmodifyRow', '8.0.0'], ['unmodifyCol', '8.0.0'], ['skipLengthCache', '8.0.0'], ['hiddenColumn', '8.0.0'], ['hiddenRow', '8.0.0']]);\r\n/* eslint-disable jsdoc/require-description-complete-sentence */\r\n\r\n/**\r\n * The list of the hooks which are deprecated. The warning message is printed out in\r\n * the developer console when the hook is used.\r\n *\r\n * The Map key is represented by hook name and its value keeps message which whould be\r\n * printed out when the hook is used.\r\n *\r\n * Usage:\r\n * ```js\r\n * ...\r\n * New Map([\r\n *   ['beforeColumnExpand', 'The plugin hook \"beforeColumnExpand\" is deprecated. Use \"beforeColumnExpand2\" instead.'],\r\n * ])\r\n * ...\r\n * ```\r\n *\r\n *\r\n * @type {Map<string, string>}\r\n */\r\n\r\n/* eslint-enable jsdoc/require-description-complete-sentence */\r\n\r\nvar DEPRECATED_HOOKS = new Map([['beforeAutofillInsidePopulate', 'The plugin hook \"beforeAutofillInsidePopulate\" is deprecated and will be removed in the next major release.']]);\r\n\r\nvar Hooks = /*#__PURE__*/function () {\r\n  /**\r\n   *\r\n   */\r\n  function Hooks() {\r\n    _classCallCheck(this, Hooks);\r\n\r\n    this.globalBucket = this.createEmptyBucket();\r\n  }\r\n  /**\r\n   * Returns a new object with empty handlers related to every registered hook name.\r\n   *\r\n   * @returns {object} The empty bucket object.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * Handsontable.hooks.createEmptyBucket();\r\n   * // Results:\r\n   * {\r\n   * ...\r\n   * afterCreateCol: [],\r\n   * afterCreateRow: [],\r\n   * beforeInit: [],\r\n   * ...\r\n   * }\r\n   * ```\r\n   */\r\n\r\n\r\n  _createClass(Hooks, [{\r\n    key: \"createEmptyBucket\",\r\n    value: function createEmptyBucket() {\r\n      var bucket = Object.create(null); // eslint-disable-next-line no-return-assign\r\n\r\n      arrayEach(REGISTERED_HOOKS, function (hook) {\r\n        return bucket[hook] = [];\r\n      });\r\n      return bucket;\r\n    }\r\n    /**\r\n     * Get hook bucket based on the context of the object or if argument is `undefined`, get the global hook bucket.\r\n     *\r\n     * @param {object} [context=null] A Handsontable instance.\r\n     * @returns {object} Returns a global or Handsontable instance bucket.\r\n     */\r\n\r\n  }, {\r\n    key: \"getBucket\",\r\n    value: function getBucket() {\r\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\r\n\r\n      if (context) {\r\n        if (!context.pluginHookBucket) {\r\n          context.pluginHookBucket = this.createEmptyBucket();\r\n        }\r\n\r\n        return context.pluginHookBucket;\r\n      }\r\n\r\n      return this.globalBucket;\r\n    }\r\n    /**\r\n     * Adds a listener (globally or locally) to a specified hook name.\r\n     * If the `context` parameter is provided, the hook will be added only to the instance it references.\r\n     * Otherwise, the callback will be used everytime the hook fires on any Handsontable instance.\r\n     * You can provide an array of callback functions as the `callback` argument, this way they will all be fired\r\n     * once the hook is triggered.\r\n     *\r\n     * @see Core#addHook\r\n     * @param {string} key Hook name.\r\n     * @param {Function|Array} callback Callback function or an array of functions.\r\n     * @param {object} [context=null] The context for the hook callback to be added - a Handsontable instance or leave empty.\r\n     * @returns {Hooks} Instance of Hooks.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * // single callback, added locally\r\n     * Handsontable.hooks.add('beforeInit', myCallback, hotInstance);\r\n     *\r\n     * // single callback, added globally\r\n     * Handsontable.hooks.add('beforeInit', myCallback);\r\n     *\r\n     * // multiple callbacks, added locally\r\n     * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback], hotInstance);\r\n     *\r\n     * // multiple callbacks, added globally\r\n     * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback]);\r\n     * ```\r\n     */\r\n\r\n  }, {\r\n    key: \"add\",\r\n    value: function add(key, callback) {\r\n      var _this = this;\r\n\r\n      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\r\n\r\n      if (Array.isArray(callback)) {\r\n        arrayEach(callback, function (c) {\r\n          return _this.add(key, c, context);\r\n        });\r\n      } else {\r\n        if (REMOVED_HOOKS.has(key)) {\r\n          warn(substitute(REMOVED_MESSAGE, {\r\n            hookName: key,\r\n            removedInVersion: REMOVED_HOOKS.get(key)\r\n          }));\r\n        }\r\n\r\n        if (DEPRECATED_HOOKS.has(key)) {\r\n          warn(DEPRECATED_HOOKS.get(key));\r\n        }\r\n\r\n        var bucket = this.getBucket(context);\r\n\r\n        if (typeof bucket[key] === 'undefined') {\r\n          this.register(key);\r\n          bucket[key] = [];\r\n        }\r\n\r\n        callback.skip = false;\r\n\r\n        if (bucket[key].indexOf(callback) === -1) {\r\n          // only add a hook if it has not already been added (adding the same hook twice is now silently ignored)\r\n          var foundInitialHook = false;\r\n\r\n          if (callback.initialHook) {\r\n            arrayEach(bucket[key], function (cb, i) {\r\n              if (cb.initialHook) {\r\n                bucket[key][i] = callback;\r\n                foundInitialHook = true;\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n\r\n          if (!foundInitialHook) {\r\n            bucket[key].push(callback);\r\n          }\r\n        }\r\n      }\r\n\r\n      return this;\r\n    }\r\n    /**\r\n     * Adds a listener to a specified hook. After the hook runs this listener will be automatically removed from the bucket.\r\n     *\r\n     * @see Core#addHookOnce\r\n     * @param {string} key Hook/Event name.\r\n     * @param {Function|Array} callback Callback function.\r\n     * @param {object} [context=null] A Handsontable instance.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.once('beforeInit', myCallback, hotInstance);\r\n     * ```\r\n     */\r\n\r\n  }, {\r\n    key: \"once\",\r\n    value: function once(key, callback) {\r\n      var _this2 = this;\r\n\r\n      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\r\n\r\n      if (Array.isArray(callback)) {\r\n        arrayEach(callback, function (c) {\r\n          return _this2.once(key, c, context);\r\n        });\r\n      } else {\r\n        callback.runOnce = true;\r\n        this.add(key, callback, context);\r\n      }\r\n    }\r\n    /**\r\n     * Removes a listener from a hook with a given name. If the `context` argument is provided, it removes a listener from a local hook assigned to the given Handsontable instance.\r\n     *\r\n     * @see Core#removeHook\r\n     * @param {string} key Hook/Event name.\r\n     * @param {Function} callback Callback function (needs the be the function that was previously added to the hook).\r\n     * @param {object} [context=null] Handsontable instance.\r\n     * @returns {boolean} Returns `true` if hook was removed, `false` otherwise.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.remove('beforeInit', myCallback);\r\n     * ```\r\n     */\r\n\r\n  }, {\r\n    key: \"remove\",\r\n    value: function remove(key, callback) {\r\n      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\r\n      var bucket = this.getBucket(context);\r\n\r\n      if (typeof bucket[key] !== 'undefined') {\r\n        if (bucket[key].indexOf(callback) >= 0) {\r\n          callback.skip = true;\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    }\r\n    /**\r\n     * Checks whether there are any registered listeners for the provided hook name.\r\n     * If the `context` parameter is provided, it only checks for listeners assigned to the given Handsontable instance.\r\n     *\r\n     * @param {string} key Hook name.\r\n     * @param {object} [context=null] A Handsontable instance.\r\n     * @returns {boolean} `true` for success, `false` otherwise.\r\n     */\r\n\r\n  }, {\r\n    key: \"has\",\r\n    value: function has(key) {\r\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\r\n      var bucket = this.getBucket(context);\r\n      return !!(bucket[key] !== void 0 && bucket[key].length);\r\n    }\r\n    /**\r\n     * Runs all local and global callbacks assigned to the hook identified by the `key` parameter.\r\n     * It returns either a return value from the last called callback or the first parameter (`p1`) passed to the `run` function.\r\n     *\r\n     * @see Core#runHooks\r\n     * @param {object} context Handsontable instance.\r\n     * @param {string} key Hook/Event name.\r\n     * @param {*} [p1] Parameter to be passed as an argument to the callback function.\r\n     * @param {*} [p2] Parameter to be passed as an argument to the callback function.\r\n     * @param {*} [p3] Parameter to be passed as an argument to the callback function.\r\n     * @param {*} [p4] Parameter to be passed as an argument to the callback function.\r\n     * @param {*} [p5] Parameter to be passed as an argument to the callback function.\r\n     * @param {*} [p6] Parameter to be passed as an argument to the callback function.\r\n     * @returns {*} Either a return value from the last called callback or `p1`.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.run(hot, 'beforeInit');\r\n     * ```\r\n     */\r\n\r\n  }, {\r\n    key: \"run\",\r\n    value: function run(context, key, p1, p2, p3, p4, p5, p6) {\r\n      {\r\n        var globalHandlers = this.globalBucket[key];\r\n        var length = globalHandlers ? globalHandlers.length : 0;\r\n        var index = 0;\r\n\r\n        if (length) {\r\n          // Do not optimise this loop with arrayEach or arrow function! If you do You'll decrease perf because of GC.\r\n          while (index < length) {\r\n            if (!globalHandlers[index] || globalHandlers[index].skip) {\r\n              index += 1;\r\n              /* eslint-disable no-continue */\r\n\r\n              continue;\r\n            } // performance considerations - http://jsperf.com/call-vs-apply-for-a-plugin-architecture\r\n\r\n\r\n            var res = globalHandlers[index].call(context, p1, p2, p3, p4, p5, p6);\r\n\r\n            if (res !== void 0) {\r\n              // eslint-disable-next-line no-param-reassign\r\n              p1 = res;\r\n            }\r\n\r\n            if (globalHandlers[index] && globalHandlers[index].runOnce) {\r\n              this.remove(key, globalHandlers[index]);\r\n            }\r\n\r\n            index += 1;\r\n          }\r\n        }\r\n      }\r\n      {\r\n        var localHandlers = this.getBucket(context)[key];\r\n\r\n        var _length = localHandlers ? localHandlers.length : 0;\r\n\r\n        var _index = 0;\r\n\r\n        if (_length) {\r\n          // Do not optimise this loop with arrayEach or arrow function! If you do You'll decrease perf because of GC.\r\n          while (_index < _length) {\r\n            if (!localHandlers[_index] || localHandlers[_index].skip) {\r\n              _index += 1;\r\n              /* eslint-disable no-continue */\r\n\r\n              continue;\r\n            } // performance considerations - http://jsperf.com/call-vs-apply-for-a-plugin-architecture\r\n\r\n\r\n            var _res = localHandlers[_index].call(context, p1, p2, p3, p4, p5, p6);\r\n\r\n            if (_res !== void 0) {\r\n              // eslint-disable-next-line no-param-reassign\r\n              p1 = _res;\r\n            }\r\n\r\n            if (localHandlers[_index] && localHandlers[_index].runOnce) {\r\n              this.remove(key, localHandlers[_index], context);\r\n            }\r\n\r\n            _index += 1;\r\n          }\r\n        }\r\n      }\r\n      return p1;\r\n    }\r\n    /**\r\n     * Destroy all listeners connected to the context. If no context is provided, the global listeners will be destroyed.\r\n     *\r\n     * @param {object} [context=null] A Handsontable instance.\r\n     * @example\r\n     * ```js\r\n     * // destroy the global listeners\r\n     * Handsontable.hooks.destroy();\r\n     *\r\n     * // destroy the local listeners\r\n     * Handsontable.hooks.destroy(hotInstance);\r\n     * ```\r\n     */\r\n\r\n  }, {\r\n    key: \"destroy\",\r\n    value: function destroy() {\r\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\r\n      // eslint-disable-next-line no-return-assign\r\n      objectEach(this.getBucket(context), function (value, key, bucket) {\r\n        return bucket[key].length = 0;\r\n      });\r\n    }\r\n    /**\r\n     * Registers a hook name (adds it to the list of the known hook names). Used by plugins.\r\n     * It is not necessary to call register, but if you use it, your plugin hook will be used returned by\r\n     * the `getRegistered` method. (which itself is used in the demo https://handsontable.com/docs/tutorial-using-callbacks.html).\r\n     *\r\n     * @param {string} key The hook name.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.register('myHook');\r\n     * ```\r\n     */\r\n\r\n  }, {\r\n    key: \"register\",\r\n    value: function register(key) {\r\n      if (!this.isRegistered(key)) {\r\n        REGISTERED_HOOKS.push(key);\r\n      }\r\n    }\r\n    /**\r\n     * Deregisters a hook name (removes it from the list of known hook names).\r\n     *\r\n     * @param {string} key The hook name.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.deregister('myHook');\r\n     * ```\r\n     */\r\n\r\n  }, {\r\n    key: \"deregister\",\r\n    value: function deregister(key) {\r\n      if (this.isRegistered(key)) {\r\n        REGISTERED_HOOKS.splice(REGISTERED_HOOKS.indexOf(key), 1);\r\n      }\r\n    }\r\n    /**\r\n     * Returns a boolean value depending on if a hook by such name has been removed or deprecated.\r\n     *\r\n     * @param {string} hookName The hook name to check.\r\n     * @returns {boolean} Returns `true` if the provided hook name was marked as deprecated or\r\n     * removed from API, `false` otherwise.\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.isDeprecated('skipLengthCache');\r\n     *\r\n     * // Results:\r\n     * true\r\n     * ```\r\n     */\r\n\r\n  }, {\r\n    key: \"isDeprecated\",\r\n    value: function isDeprecated(hookName) {\r\n      return DEPRECATED_HOOKS.has(hookName) || REMOVED_HOOKS.has(hookName);\r\n    }\r\n    /**\r\n     * Returns a boolean depending on if a hook by such name has been registered.\r\n     *\r\n     * @param {string} hookName The hook name to check.\r\n     * @returns {boolean} `true` for success, `false` otherwise.\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.isRegistered('beforeInit');\r\n     *\r\n     * // Results:\r\n     * true\r\n     * ```\r\n     */\r\n\r\n  }, {\r\n    key: \"isRegistered\",\r\n    value: function isRegistered(hookName) {\r\n      return REGISTERED_HOOKS.indexOf(hookName) >= 0;\r\n    }\r\n    /**\r\n     * Returns an array of registered hooks.\r\n     *\r\n     * @returns {Array} An array of registered hooks.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * Handsontable.hooks.getRegistered();\r\n     *\r\n     * // Results:\r\n     * [\r\n     * ...\r\n     *   'beforeInit',\r\n     *   'beforeRender',\r\n     *   'beforeSetRangeEnd',\r\n     *   'beforeDrawBorders',\r\n     *   'beforeChange',\r\n     * ...\r\n     * ]\r\n     * ```\r\n     */\r\n\r\n  }, {\r\n    key: \"getRegistered\",\r\n    value: function getRegistered() {\r\n      return REGISTERED_HOOKS;\r\n    }\r\n  }], [{\r\n    key: \"getSingleton\",\r\n    value: function getSingleton() {\r\n      return getGlobalSingleton();\r\n    }\r\n  }]);\r\n\r\n  return Hooks;\r\n}();\r\n\r\nvar globalSingleton = new Hooks();\r\n/**\r\n * @returns {Hooks}\r\n */\r\n\r\nfunction getGlobalSingleton() {\r\n  return globalSingleton;\r\n}\r\n\r\nexport default Hooks;"]},"metadata":{},"sourceType":"module"}