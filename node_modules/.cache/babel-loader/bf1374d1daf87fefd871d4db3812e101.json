{"ast":null,"code":"import _slicedToArray from \"C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"defaultValue\", \"children\", \"className\", \"component\", \"components\", \"componentsProps\", \"disabled\", \"error\", \"focused\", \"onChange\", \"required\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport FormControlUnstyledContext from './FormControlContext';\nimport appendOwnerState from '../utils/appendOwnerState';\nimport classes from './formControlUnstyledClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction hasValue(value) {\n  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';\n}\n/**\r\n * Provides context such as filled/focused/error/required for form inputs.\r\n * Relying on the context provides high flexibility and ensures that the state always stays\r\n * consistent across the children of the `FormControl`.\r\n * This context is used by the following components:\r\n *\r\n * *   FormLabel\r\n * *   FormHelperText\r\n * *   Input\r\n * *   InputLabel\r\n *\r\n * You can find one composition example below and more going to [the demos](https://mui.com/components/text-fields/#components).\r\n *\r\n * ```jsx\r\n * <FormControl>\r\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\r\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\r\n * </FormControl>\r\n * ```\r\n *\r\n * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.\r\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\r\n *\r\n * Demos:\r\n *\r\n * - [Text Fields](https://mui.com/components/text-fields/)\r\n *\r\n * API:\r\n *\r\n * - [FormControlUnstyled API](https://mui.com/api/form-control-unstyled/)\r\n */\n\n\nvar FormControlUnstyled = /*#__PURE__*/React.forwardRef(function FormControlUnstyled(props, ref) {\n  var _ref;\n\n  var defaultValue = props.defaultValue,\n      children = props.children,\n      className = props.className,\n      component = props.component,\n      _props$components = props.components,\n      components = _props$components === void 0 ? {} : _props$components,\n      _props$componentsProp = props.componentsProps,\n      componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      _props$focused = props.focused,\n      visuallyFocused = _props$focused === void 0 ? false : _props$focused,\n      onChange = props.onChange,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      incomingValue = props.value,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _useControlled = useControlled({\n    controlled: incomingValue,\n    default: defaultValue,\n    name: 'FormControl',\n    state: 'value'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      value = _useControlled2[0],\n      setValue = _useControlled2[1];\n\n  var filled = hasValue(value);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focusedState = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  if (disabled && focusedState) {\n    setFocused(false);\n  }\n\n  var focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;\n\n  var ownerState = _extends({}, props, {\n    disabled: disabled,\n    error: error,\n    filled: filled,\n    focused: focused,\n    required: required\n  });\n\n  var registerEffect = function registerEffect() {};\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var registeredInput = React.useRef(false);\n\n    registerEffect = function registerEffect() {\n      if (registeredInput.current) {\n        console.error(['MUI: There are multiple `Input` components inside a FormControl.', 'This creates visual inconsistencies, only use one `Input`.'].join('\\n'));\n      }\n\n      registeredInput.current = true;\n      return function () {\n        registeredInput.current = false;\n      };\n    };\n  }\n\n  var handleChange = function handleChange(event) {\n    setValue(event.target.value);\n    onChange == null ? void 0 : onChange(event);\n  };\n\n  var childContext = {\n    disabled: disabled,\n    error: error,\n    filled: filled,\n    focused: focused,\n    onBlur: function onBlur() {\n      setFocused(false);\n    },\n    onChange: handleChange,\n    onFocus: function onFocus() {\n      setFocused(true);\n    },\n    registerEffect: registerEffect,\n    required: required,\n    value: value != null ? value : ''\n  };\n  var Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';\n  var rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);\n  return /*#__PURE__*/_jsx(FormControlUnstyledContext.Provider, {\n    value: childContext,\n    children: /*#__PURE__*/_jsx(Root, _extends({\n      ref: ref\n    }, rootProps, {\n      className: clsx(classes.root, className, rootProps == null ? void 0 : rootProps.className, disabled && classes.disabled),\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControlUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Class name applied to the root element.\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n\n  /**\r\n   * The components used for each slot inside the FormControl.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  components: PropTypes.shape({\n    Root: PropTypes.elementType\n  }),\n\n  /**\r\n   * @ignore\r\n   */\n  componentsProps: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  defaultValue: PropTypes.any,\n\n  /**\r\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * If `true`, the label is displayed in an error state.\r\n   * @default false\r\n   */\n  error: PropTypes.bool,\n\n  /**\r\n   * If `true`, the component is displayed in focused state.\r\n   * @default false\r\n   */\n  focused: PropTypes.bool,\n\n  /**\r\n   * @ignore\r\n   */\n  onChange: PropTypes.func,\n\n  /**\r\n   * If `true`, the label will indicate that the `input` is required.\r\n   * @default false\r\n   */\n  required: PropTypes.bool,\n\n  /**\r\n   * @ignore\r\n   */\n  value: PropTypes.any\n} : void 0;\nexport default FormControlUnstyled;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/@mui/core/FormControlUnstyled/FormControlUnstyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_useControlled","useControlled","FormControlUnstyledContext","appendOwnerState","classes","jsx","_jsx","hasValue","value","Array","isArray","length","FormControlUnstyled","forwardRef","props","ref","_ref","defaultValue","children","className","component","components","componentsProps","disabled","error","focused","visuallyFocused","onChange","required","incomingValue","other","controlled","default","name","state","setValue","filled","useState","focusedState","setFocused","undefined","ownerState","registerEffect","process","env","NODE_ENV","registeredInput","useRef","current","console","join","handleChange","event","target","childContext","onBlur","onFocus","Root","rootProps","root","Provider","propTypes","node","string","elementType","shape","object","any","bool","func"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nconst _excluded = [\"defaultValue\", \"children\", \"className\", \"component\", \"components\", \"componentsProps\", \"disabled\", \"error\", \"focused\", \"onChange\", \"required\", \"value\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { unstable_useControlled as useControlled } from '@mui/utils';\r\nimport FormControlUnstyledContext from './FormControlContext';\r\nimport appendOwnerState from '../utils/appendOwnerState';\r\nimport classes from './formControlUnstyledClasses';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\n\r\nfunction hasValue(value) {\r\n  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';\r\n}\r\n\r\n/**\r\n * Provides context such as filled/focused/error/required for form inputs.\r\n * Relying on the context provides high flexibility and ensures that the state always stays\r\n * consistent across the children of the `FormControl`.\r\n * This context is used by the following components:\r\n *\r\n * *   FormLabel\r\n * *   FormHelperText\r\n * *   Input\r\n * *   InputLabel\r\n *\r\n * You can find one composition example below and more going to [the demos](https://mui.com/components/text-fields/#components).\r\n *\r\n * ```jsx\r\n * <FormControl>\r\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\r\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\r\n * </FormControl>\r\n * ```\r\n *\r\n * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.\r\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\r\n *\r\n * Demos:\r\n *\r\n * - [Text Fields](https://mui.com/components/text-fields/)\r\n *\r\n * API:\r\n *\r\n * - [FormControlUnstyled API](https://mui.com/api/form-control-unstyled/)\r\n */\r\nconst FormControlUnstyled = /*#__PURE__*/React.forwardRef(function FormControlUnstyled(props, ref) {\r\n  var _ref;\r\n\r\n  const {\r\n    defaultValue,\r\n    children,\r\n    className,\r\n    component,\r\n    components = {},\r\n    componentsProps = {},\r\n    disabled = false,\r\n    error = false,\r\n    focused: visuallyFocused = false,\r\n    onChange,\r\n    required = false,\r\n    value: incomingValue\r\n  } = props,\r\n        other = _objectWithoutPropertiesLoose(props, _excluded);\r\n\r\n  const [value, setValue] = useControlled({\r\n    controlled: incomingValue,\r\n    default: defaultValue,\r\n    name: 'FormControl',\r\n    state: 'value'\r\n  });\r\n  const filled = hasValue(value);\r\n  const [focusedState, setFocused] = React.useState(false);\r\n\r\n  if (disabled && focusedState) {\r\n    setFocused(false);\r\n  }\r\n\r\n  const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;\r\n\r\n  const ownerState = _extends({}, props, {\r\n    disabled,\r\n    error,\r\n    filled,\r\n    focused,\r\n    required\r\n  });\r\n\r\n  let registerEffect = () => {};\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    const registeredInput = React.useRef(false);\r\n\r\n    registerEffect = () => {\r\n      if (registeredInput.current) {\r\n        console.error(['MUI: There are multiple `Input` components inside a FormControl.', 'This creates visual inconsistencies, only use one `Input`.'].join('\\n'));\r\n      }\r\n\r\n      registeredInput.current = true;\r\n      return () => {\r\n        registeredInput.current = false;\r\n      };\r\n    };\r\n  }\r\n\r\n  const handleChange = event => {\r\n    setValue(event.target.value);\r\n    onChange == null ? void 0 : onChange(event);\r\n  };\r\n\r\n  const childContext = {\r\n    disabled,\r\n    error,\r\n    filled,\r\n    focused,\r\n    onBlur: () => {\r\n      setFocused(false);\r\n    },\r\n    onChange: handleChange,\r\n    onFocus: () => {\r\n      setFocused(true);\r\n    },\r\n    registerEffect,\r\n    required,\r\n    value: value != null ? value : ''\r\n  };\r\n  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';\r\n  const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);\r\n  return /*#__PURE__*/_jsx(FormControlUnstyledContext.Provider, {\r\n    value: childContext,\r\n    children: /*#__PURE__*/_jsx(Root, _extends({\r\n      ref: ref\r\n    }, rootProps, {\r\n      className: clsx(classes.root, className, rootProps == null ? void 0 : rootProps.className, disabled && classes.disabled),\r\n      children: children\r\n    }))\r\n  });\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? FormControlUnstyled.propTypes\r\n/* remove-proptypes */\r\n= {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\r\n  // ----------------------------------------------------------------------\r\n\r\n  /**\r\n   * The content of the component.\r\n   */\r\n  children: PropTypes.node,\r\n\r\n  /**\r\n   * Class name applied to the root element.\r\n   */\r\n  className: PropTypes.string,\r\n\r\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\r\n  component: PropTypes.elementType,\r\n\r\n  /**\r\n   * The components used for each slot inside the FormControl.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\r\n  components: PropTypes.shape({\r\n    Root: PropTypes.elementType\r\n  }),\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  componentsProps: PropTypes.object,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  defaultValue: PropTypes.any,\r\n\r\n  /**\r\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\r\n   * @default false\r\n   */\r\n  disabled: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true`, the label is displayed in an error state.\r\n   * @default false\r\n   */\r\n  error: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true`, the component is displayed in focused state.\r\n   * @default false\r\n   */\r\n  focused: PropTypes.bool,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  onChange: PropTypes.func,\r\n\r\n  /**\r\n   * If `true`, the label will indicate that the `input` is required.\r\n   * @default false\r\n   */\r\n  required: PropTypes.bool,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  value: PropTypes.any\r\n} : void 0;\r\nexport default FormControlUnstyled;"]},"metadata":{},"sourceType":"module"}