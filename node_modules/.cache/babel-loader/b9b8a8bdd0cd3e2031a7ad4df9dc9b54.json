{"ast":null,"code":"import moment from 'moment';\nimport { isEmpty } from \"../../../helpers/mixed.mjs\";\nimport { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\n/**\r\n * Date sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\r\n *\r\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\r\n * @param {object} columnMeta Column meta object.\r\n * @param {object} columnPluginSettings Plugin settings for the column.\r\n * @returns {Function} The compare function.\r\n */\n\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  return function (value, nextValue) {\n    var sortEmptyCells = columnPluginSettings.sortEmptyCells;\n\n    if (value === nextValue) {\n      return DO_NOT_SWAP;\n    }\n\n    if (isEmpty(value)) {\n      if (isEmpty(nextValue)) {\n        return DO_NOT_SWAP;\n      } // Just fist value is empty and `sortEmptyCells` option was set\n\n\n      if (sortEmptyCells) {\n        return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n      }\n\n      return FIRST_AFTER_SECOND;\n    }\n\n    if (isEmpty(nextValue)) {\n      // Just second value is empty and `sortEmptyCells` option was set\n      if (sortEmptyCells) {\n        return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n      }\n\n      return FIRST_BEFORE_SECOND;\n    }\n\n    var dateFormat = columnMeta.dateFormat;\n    var firstDate = moment(value, dateFormat);\n    var nextDate = moment(nextValue, dateFormat);\n\n    if (!firstDate.isValid()) {\n      return FIRST_AFTER_SECOND;\n    }\n\n    if (!nextDate.isValid()) {\n      return FIRST_BEFORE_SECOND;\n    }\n\n    if (nextDate.isAfter(firstDate)) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    }\n\n    if (nextDate.isBefore(firstDate)) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n\n    return DO_NOT_SWAP;\n  };\n}\nexport var COLUMN_DATA_TYPE = 'date';","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/columnSorting/sortFunction/date.mjs"],"names":["moment","isEmpty","DO_NOT_SWAP","FIRST_BEFORE_SECOND","FIRST_AFTER_SECOND","compareFunctionFactory","sortOrder","columnMeta","columnPluginSettings","value","nextValue","sortEmptyCells","dateFormat","firstDate","nextDate","isValid","isAfter","isBefore","COLUMN_DATA_TYPE"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,WAAT,EAAsBC,mBAAtB,EAA2CC,kBAA3C,QAAqE,0BAArE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,sBAAT,CAAgCC,SAAhC,EAA2CC,UAA3C,EAAuDC,oBAAvD,EAA6E;AAClF,SAAO,UAAUC,KAAV,EAAiBC,SAAjB,EAA4B;AACjC,QAAIC,cAAc,GAAGH,oBAAoB,CAACG,cAA1C;;AAEA,QAAIF,KAAK,KAAKC,SAAd,EAAyB;AACvB,aAAOR,WAAP;AACD;;AAED,QAAID,OAAO,CAACQ,KAAD,CAAX,EAAoB;AAClB,UAAIR,OAAO,CAACS,SAAD,CAAX,EAAwB;AACtB,eAAOR,WAAP;AACD,OAHiB,CAGhB;;;AAGF,UAAIS,cAAJ,EAAoB;AAClB,eAAOL,SAAS,KAAK,KAAd,GAAsBH,mBAAtB,GAA4CC,kBAAnD;AACD;;AAED,aAAOA,kBAAP;AACD;;AAED,QAAIH,OAAO,CAACS,SAAD,CAAX,EAAwB;AACtB;AACA,UAAIC,cAAJ,EAAoB;AAClB,eAAOL,SAAS,KAAK,KAAd,GAAsBF,kBAAtB,GAA2CD,mBAAlD;AACD;;AAED,aAAOA,mBAAP;AACD;;AAED,QAAIS,UAAU,GAAGL,UAAU,CAACK,UAA5B;AACA,QAAIC,SAAS,GAAGb,MAAM,CAACS,KAAD,EAAQG,UAAR,CAAtB;AACA,QAAIE,QAAQ,GAAGd,MAAM,CAACU,SAAD,EAAYE,UAAZ,CAArB;;AAEA,QAAI,CAACC,SAAS,CAACE,OAAV,EAAL,EAA0B;AACxB,aAAOX,kBAAP;AACD;;AAED,QAAI,CAACU,QAAQ,CAACC,OAAT,EAAL,EAAyB;AACvB,aAAOZ,mBAAP;AACD;;AAED,QAAIW,QAAQ,CAACE,OAAT,CAAiBH,SAAjB,CAAJ,EAAiC;AAC/B,aAAOP,SAAS,KAAK,KAAd,GAAsBH,mBAAtB,GAA4CC,kBAAnD;AACD;;AAED,QAAIU,QAAQ,CAACG,QAAT,CAAkBJ,SAAlB,CAAJ,EAAkC;AAChC,aAAOP,SAAS,KAAK,KAAd,GAAsBF,kBAAtB,GAA2CD,mBAAlD;AACD;;AAED,WAAOD,WAAP;AACD,GAlDD;AAmDD;AACD,OAAO,IAAIgB,gBAAgB,GAAG,MAAvB","sourcesContent":["import moment from 'moment';\r\nimport { isEmpty } from \"../../../helpers/mixed.mjs\";\r\nimport { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\r\n/**\r\n * Date sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\r\n *\r\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\r\n * @param {object} columnMeta Column meta object.\r\n * @param {object} columnPluginSettings Plugin settings for the column.\r\n * @returns {Function} The compare function.\r\n */\r\n\r\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\r\n  return function (value, nextValue) {\r\n    var sortEmptyCells = columnPluginSettings.sortEmptyCells;\r\n\r\n    if (value === nextValue) {\r\n      return DO_NOT_SWAP;\r\n    }\r\n\r\n    if (isEmpty(value)) {\r\n      if (isEmpty(nextValue)) {\r\n        return DO_NOT_SWAP;\r\n      } // Just fist value is empty and `sortEmptyCells` option was set\r\n\r\n\r\n      if (sortEmptyCells) {\r\n        return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\r\n      }\r\n\r\n      return FIRST_AFTER_SECOND;\r\n    }\r\n\r\n    if (isEmpty(nextValue)) {\r\n      // Just second value is empty and `sortEmptyCells` option was set\r\n      if (sortEmptyCells) {\r\n        return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\r\n      }\r\n\r\n      return FIRST_BEFORE_SECOND;\r\n    }\r\n\r\n    var dateFormat = columnMeta.dateFormat;\r\n    var firstDate = moment(value, dateFormat);\r\n    var nextDate = moment(nextValue, dateFormat);\r\n\r\n    if (!firstDate.isValid()) {\r\n      return FIRST_AFTER_SECOND;\r\n    }\r\n\r\n    if (!nextDate.isValid()) {\r\n      return FIRST_BEFORE_SECOND;\r\n    }\r\n\r\n    if (nextDate.isAfter(firstDate)) {\r\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\r\n    }\r\n\r\n    if (nextDate.isBefore(firstDate)) {\r\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\r\n    }\r\n\r\n    return DO_NOT_SWAP;\r\n  };\r\n}\r\nexport var COLUMN_DATA_TYPE = 'date';"]},"metadata":{},"sourceType":"module"}