{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\dragAndDrop\\\\dragAndDrop.js\";\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Dropzone from 'react-dropzone-uploader';\nimport React from 'react';\nimport { message } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Layout = ({\n  input,\n  previews,\n  submitButton,\n  dropzoneProps,\n  files,\n  extra: {\n    maxFiles\n  }\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [submitButton, /*#__PURE__*/_jsxDEV(\"div\", { ...dropzoneProps,\n      children: [previews, files.length < maxFiles && input]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Layout;\n\nclass DragAndDrop extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileList: [],\n      success: false,\n      error: false,\n      uploaded: false,\n      errorAlerts: []\n    };\n\n    this.handleSubmit = (files, allFiles) => {\n      this.setState({\n        success: false,\n        uploaded: false,\n        error: false,\n        errorAlerts: [],\n        counter: 0\n      });\n      allFiles.forEach(file => {\n        const formData = new FormData();\n        formData.append('file', file);\n        this.uploadFile(formData);\n      });\n    };\n  }\n\n  async uploadFile(file) {\n    await fetch('http://localhost:5000/upload', {\n      // content-type header should not be specified!\n      method: 'POST',\n      body: file\n    }).then(response => {\n      // Do something with the successful response\n      if (response.status === 200) {\n        if (!this.state.success) {\n          this.setState({\n            success: true\n          });\n        }\n\n        let filename = null;\n\n        for (let value of file.values()) {\n          filename = value.name;\n        }\n\n        let extension = \"\";\n        let i = filename.lastIndexOf('.');\n\n        if (i > 0) {\n          extension = filename.substring(i + 1);\n        }\n\n        if (extension === \"pdf\") {\n          let body = {\n            fileName: filename,\n            user: this.props.user\n          };\n          fetch('http://localhost:5000/uploadHis', {\n            // content-type header should not be specified!\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n          }).then(response => console.log(response.json())).catch(error => message.error(error));\n        }\n      } else {\n        for (let value of file.values()) {\n          let joined = this.state.errorAlerts.concat(value.name);\n          this.setState({\n            errorAlerts: joined,\n            error: true\n          });\n        }\n      }\n\n      let aux = this.state.fileList;\n      aux.splice(0, 1);\n      this.setState({\n        fileList: aux\n      });\n      let max = this.state.fileList.length;\n      console.log(max);\n\n      if (max === 0) {\n        this.setState({\n          uploaded: true\n        });\n      }\n    }).catch(error => message.error(error));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Dropzone, {\n      LayoutComponent: Layout,\n      onSubmit: this.handleSubmit,\n      inputContent: \"Drop Files (Custom Layout)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default DragAndDrop;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/dragAndDrop/dragAndDrop.js"],"names":["Dropzone","React","message","Layout","input","previews","submitButton","dropzoneProps","files","extra","maxFiles","length","DragAndDrop","Component","state","fileList","success","error","uploaded","errorAlerts","handleSubmit","allFiles","setState","counter","forEach","file","formData","FormData","append","uploadFile","fetch","method","body","then","response","status","filename","value","values","name","extension","i","lastIndexOf","substring","fileName","user","props","headers","JSON","stringify","console","log","json","catch","joined","concat","aux","splice","max","render"],"mappings":"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","sourcesContent":["import 'react-dropzone-uploader/dist/styles.css'\r\nimport Dropzone from 'react-dropzone-uploader'\r\nimport React from 'react'\r\nimport {message} from'antd'\r\n\r\nconst Layout = ({ input, previews, submitButton, dropzoneProps, files, extra: { maxFiles } }) => {\r\n  return (\r\n    <div>\r\n      \r\n      {submitButton}\r\n      <div {...dropzoneProps}>\r\n      \r\n      {previews}\r\n      {files.length < maxFiles && input}\r\n        \r\n      </div>\r\n\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nclass DragAndDrop extends React.Component{\r\n\r\n  state = {\r\n    fileList: [],\r\n    success: false,\r\n    error: false,\r\n    uploaded: false,\r\n    errorAlerts: [],\r\n  };\r\n\r\n  async uploadFile(file) {\r\n    await fetch('http://localhost:5000/upload', {\r\n      // content-type header should not be specified!\r\n      method: 'POST',\r\n      body: file,\r\n    })\r\n      .then(response => {\r\n        // Do something with the successful response\r\n        if (response.status === 200){\r\n          if(!this.state.success){\r\n              this.setState({\r\n                success : true,\r\n              })\r\n          }\r\n\r\n          let filename = null;\r\n          for (let value of file.values()){\r\n            filename = value.name\r\n          }\r\n          let extension = \"\";\r\n          let i = filename.lastIndexOf('.');\r\n          if (i > 0) {\r\n            extension = filename.substring(i+1);\r\n          }\r\n          if(extension === \"pdf\"){\r\n            let body =  {\r\n              fileName: filename,\r\n              user: this.props.user,\r\n            }\r\n            fetch('http://localhost:5000/uploadHis', {\r\n              // content-type header should not be specified!\r\n              method: 'POST',\r\n              headers: {\r\n                \"Content-Type\": \"application/json\"\r\n              },\r\n              body: JSON.stringify(body)\r\n            }).then(response => console.log(response.json()))\r\n            .catch(error => message.error(error))\r\n          }\r\n        }else{\r\n          for (let value of file.values()) {\r\n            let joined = this.state.errorAlerts.concat(value.name);\r\n            this.setState({\r\n              errorAlerts : joined,\r\n              error: true\r\n            })\r\n          }\r\n        }\r\n        let aux = this.state.fileList;\r\n        aux.splice(0,1)\r\n        this.setState({\r\n          fileList: aux,\r\n        });\r\n        let max = this.state.fileList.length;\r\n        console.log(max)\r\n        if (max === 0){\r\n          this.setState({\r\n            uploaded: true\r\n          })\r\n        }\r\n\r\n      })\r\n      .catch(error => message.error(error)\r\n    );\r\n  }\r\n\r\n  handleSubmit = (files, allFiles) => {\r\n    this.setState({\r\n      success: false,\r\n      uploaded: false,\r\n      error: false,\r\n      errorAlerts: [],\r\n      counter: 0\r\n    })\r\n\r\n    allFiles.forEach(file => {\r\n      const formData  = new FormData();\r\n      formData.append('file', file);\r\n      this.uploadFile(formData);\r\n\r\n    });    \r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <Dropzone\r\n        LayoutComponent={Layout}\r\n        onSubmit={this.handleSubmit}\r\n        inputContent=\"Drop Files (Custom Layout)\"\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default DragAndDrop;"]},"metadata":{},"sourceType":"module"}