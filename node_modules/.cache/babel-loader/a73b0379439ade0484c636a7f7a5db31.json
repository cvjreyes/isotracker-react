{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n/**\n * Checks if value of n is a numeric one\n * http://jsperf.com/isnan-vs-isnumeric/4.\n *\n * @param {*} value The value to check.\n * @returns {boolean}\n */\n\n\nexport function isNumeric(value) {\n  /* eslint-disable */\n  var t = _typeof(value);\n\n  return t == 'number' ? !isNaN(value) && isFinite(value) : t == 'string' ? !value.length ? false : value.length == 1 ? /\\d/.test(value) : /^\\s*[+-]?\\s*(?:(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)|(?:0x[a-f\\d]+))\\s*$/i.test(value) : t == 'object' ? !!value && typeof value.valueOf() == 'number' && !(value instanceof Date) : false;\n}\n/**\n * A specialized version of `.forEach` defined by ranges.\n *\n * @param {Number} rangeFrom The number from start iterate.\n * @param {Number|Function} rangeTo The number where finish iterate or function as a iteratee.\n * @param {Function} [iteratee] The function invoked per iteration.\n */\n\nexport function rangeEach(rangeFrom, rangeTo, iteratee) {\n  var index = -1;\n\n  if (typeof rangeTo === 'function') {\n    iteratee = rangeTo;\n    rangeTo = rangeFrom;\n  } else {\n    index = rangeFrom - 1;\n  }\n\n  while (++index <= rangeTo) {\n    if (iteratee(index) === false) {\n      break;\n    }\n  }\n}\n/**\n * A specialized version of `.forEach` defined by ranges iterable in reverse order.\n *\n * @param {Number} rangeFrom The number from start iterate.\n * @param {Number|Function} rangeTo The number where finish iterate or function as a iteratee.\n * @param {Function} [iteratee] The function invoked per iteration.\n */\n\nexport function rangeEachReverse(rangeFrom, rangeTo, iteratee) {\n  var index = rangeFrom + 1;\n\n  if (typeof rangeTo === 'function') {\n    iteratee = rangeTo;\n    rangeTo = 0;\n  }\n\n  while (--index >= rangeTo) {\n    if (iteratee(index) === false) {\n      break;\n    }\n  }\n}\n/**\n * Calculate value from percent.\n *\n * @param {Number} value Base value from percent will be calculated.\n * @param {String|Number} percent Can be Number or String (eq. `'33%'`).\n * @returns {Number}\n */\n\nexport function valueAccordingPercent(value, percent) {\n  percent = parseInt(percent.toString().replace('%', ''), 10);\n  percent = parseInt(value * percent / 100, 10);\n  return percent;\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/helpers/number.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","isNumeric","value","t","isNaN","isFinite","length","test","valueOf","Date","rangeEach","rangeFrom","rangeTo","iteratee","index","rangeEachReverse","valueAccordingPercent","percent","parseInt","toString","replace"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Checks if value of n is a numeric one\n * http://jsperf.com/isnan-vs-isnumeric/4.\n *\n * @param {*} value The value to check.\n * @returns {boolean}\n */\nexport function isNumeric(value) {\n  /* eslint-disable */\n  var t = _typeof(value);\n\n  return t == 'number' ? !isNaN(value) && isFinite(value) : t == 'string' ? !value.length ? false : value.length == 1 ? /\\d/.test(value) : /^\\s*[+-]?\\s*(?:(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)|(?:0x[a-f\\d]+))\\s*$/i.test(value) : t == 'object' ? !!value && typeof value.valueOf() == 'number' && !(value instanceof Date) : false;\n}\n/**\n * A specialized version of `.forEach` defined by ranges.\n *\n * @param {Number} rangeFrom The number from start iterate.\n * @param {Number|Function} rangeTo The number where finish iterate or function as a iteratee.\n * @param {Function} [iteratee] The function invoked per iteration.\n */\n\nexport function rangeEach(rangeFrom, rangeTo, iteratee) {\n  var index = -1;\n\n  if (typeof rangeTo === 'function') {\n    iteratee = rangeTo;\n    rangeTo = rangeFrom;\n  } else {\n    index = rangeFrom - 1;\n  }\n\n  while (++index <= rangeTo) {\n    if (iteratee(index) === false) {\n      break;\n    }\n  }\n}\n/**\n * A specialized version of `.forEach` defined by ranges iterable in reverse order.\n *\n * @param {Number} rangeFrom The number from start iterate.\n * @param {Number|Function} rangeTo The number where finish iterate or function as a iteratee.\n * @param {Function} [iteratee] The function invoked per iteration.\n */\n\nexport function rangeEachReverse(rangeFrom, rangeTo, iteratee) {\n  var index = rangeFrom + 1;\n\n  if (typeof rangeTo === 'function') {\n    iteratee = rangeTo;\n    rangeTo = 0;\n  }\n\n  while (--index >= rangeTo) {\n    if (iteratee(index) === false) {\n      break;\n    }\n  }\n}\n/**\n * Calculate value from percent.\n *\n * @param {Number} value Base value from percent will be calculated.\n * @param {String|Number} percent Can be Number or String (eq. `'33%'`).\n * @returns {Number}\n */\n\nexport function valueAccordingPercent(value, percent) {\n  percent = parseInt(percent.toString().replace('%', ''), 10);\n  percent = parseInt(value * percent / 100, 10);\n  return percent;\n}"]},"metadata":{},"sourceType":"module"}