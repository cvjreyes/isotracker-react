{"ast":null,"code":"import * as React from 'react';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nexport default function useTreeItem(nodeId) {\n  var _React$useContext = React.useContext(TreeViewContext),\n      focus = _React$useContext.focus,\n      isExpanded = _React$useContext.isExpanded,\n      isExpandable = _React$useContext.isExpandable,\n      isFocused = _React$useContext.isFocused,\n      isDisabled = _React$useContext.isDisabled,\n      isSelected = _React$useContext.isSelected,\n      multiSelect = _React$useContext.multiSelect,\n      selectNode = _React$useContext.selectNode,\n      selectRange = _React$useContext.selectRange,\n      toggleExpansion = _React$useContext.toggleExpansion;\n\n  var expandable = isExpandable ? isExpandable(nodeId) : false;\n  var expanded = isExpanded ? isExpanded(nodeId) : false;\n  var focused = isFocused ? isFocused(nodeId) : false;\n  var disabled = isDisabled ? isDisabled(nodeId) : false;\n  var selected = isSelected ? isSelected(nodeId) : false;\n\n  var handleExpansion = function handleExpansion(event) {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n\n      var multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey); // If already expanded and trying to toggle selection don't close\n\n      if (expandable && !(multiple && isExpanded(nodeId))) {\n        toggleExpansion(event, nodeId);\n      }\n    }\n  };\n\n  var handleSelection = function handleSelection(event) {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n\n      var multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n\n      if (multiple) {\n        if (event.shiftKey) {\n          selectRange(event, {\n            end: nodeId\n          });\n        } else {\n          selectNode(event, nodeId, true);\n        }\n      } else {\n        selectNode(event, nodeId);\n      }\n    }\n  };\n\n  var preventSelection = function preventSelection(event) {\n    if (event.shiftKey || event.ctrlKey || event.metaKey || disabled) {\n      // Prevent text selection\n      event.preventDefault();\n    }\n  };\n\n  return {\n    disabled: disabled,\n    expanded: expanded,\n    selected: selected,\n    focused: focused,\n    handleExpansion: handleExpansion,\n    handleSelection: handleSelection,\n    preventSelection: preventSelection\n  };\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/@mui/lab/TreeItem/useTreeItem.js"],"names":["React","TreeViewContext","useTreeItem","nodeId","useContext","focus","isExpanded","isExpandable","isFocused","isDisabled","isSelected","multiSelect","selectNode","selectRange","toggleExpansion","expandable","expanded","focused","disabled","selected","handleExpansion","event","multiple","shiftKey","ctrlKey","metaKey","handleSelection","end","preventSelection","preventDefault"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport TreeViewContext from '../TreeView/TreeViewContext';\r\nexport default function useTreeItem(nodeId) {\r\n  const {\r\n    focus,\r\n    isExpanded,\r\n    isExpandable,\r\n    isFocused,\r\n    isDisabled,\r\n    isSelected,\r\n    multiSelect,\r\n    selectNode,\r\n    selectRange,\r\n    toggleExpansion\r\n  } = React.useContext(TreeViewContext);\r\n  const expandable = isExpandable ? isExpandable(nodeId) : false;\r\n  const expanded = isExpanded ? isExpanded(nodeId) : false;\r\n  const focused = isFocused ? isFocused(nodeId) : false;\r\n  const disabled = isDisabled ? isDisabled(nodeId) : false;\r\n  const selected = isSelected ? isSelected(nodeId) : false;\r\n\r\n  const handleExpansion = event => {\r\n    if (!disabled) {\r\n      if (!focused) {\r\n        focus(event, nodeId);\r\n      }\r\n\r\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey); // If already expanded and trying to toggle selection don't close\r\n\r\n      if (expandable && !(multiple && isExpanded(nodeId))) {\r\n        toggleExpansion(event, nodeId);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSelection = event => {\r\n    if (!disabled) {\r\n      if (!focused) {\r\n        focus(event, nodeId);\r\n      }\r\n\r\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\r\n\r\n      if (multiple) {\r\n        if (event.shiftKey) {\r\n          selectRange(event, {\r\n            end: nodeId\r\n          });\r\n        } else {\r\n          selectNode(event, nodeId, true);\r\n        }\r\n      } else {\r\n        selectNode(event, nodeId);\r\n      }\r\n    }\r\n  };\r\n\r\n  const preventSelection = event => {\r\n    if (event.shiftKey || event.ctrlKey || event.metaKey || disabled) {\r\n      // Prevent text selection\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  return {\r\n    disabled,\r\n    expanded,\r\n    selected,\r\n    focused,\r\n    handleExpansion,\r\n    handleSelection,\r\n    preventSelection\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}