{"ast":null,"code":"import { compareFunctionFactory as defaultSort, COLUMN_DATA_TYPE as DEFAULT_DATA_TYPE } from \"../sortFunction/default.mjs\";\nimport { compareFunctionFactory as numericSort, COLUMN_DATA_TYPE as NUMERIC_DATA_TYPE } from \"../sortFunction/numeric.mjs\";\nimport { compareFunctionFactory as checkboxSort, COLUMN_DATA_TYPE as CHECKBOX_DATA_TYPE } from \"../sortFunction/checkbox.mjs\";\nimport { compareFunctionFactory as dateSort, COLUMN_DATA_TYPE as DATE_DATA_TYPE } from \"../sortFunction/date.mjs\";\nimport staticRegister from \"../../../utils/staticRegister.mjs\";\n\nvar _staticRegister = staticRegister('sorting.compareFunctionFactory'),\n    registerCompareFunctionFactory = _staticRegister.register,\n    getGloballyCompareFunctionFactory = _staticRegister.getItem,\n    hasGloballyCompareFunctionFactory = _staticRegister.hasItem;\n\nvar _staticRegister2 = staticRegister('sorting.mainSortComparator'),\n    registerRootComparator = _staticRegister2.register,\n    getRootComparator = _staticRegister2.getItem;\n/**\r\n * Gets sort function for the particular column basing on it's data type.\r\n *\r\n * @param {string} type The data type.\r\n * @returns {Function}\r\n */\n\n\nexport function getCompareFunctionFactory(type) {\n  if (hasGloballyCompareFunctionFactory(type)) {\n    return getGloballyCompareFunctionFactory(type);\n  }\n\n  return getGloballyCompareFunctionFactory(DEFAULT_DATA_TYPE);\n}\nregisterCompareFunctionFactory(NUMERIC_DATA_TYPE, numericSort);\nregisterCompareFunctionFactory(CHECKBOX_DATA_TYPE, checkboxSort);\nregisterCompareFunctionFactory(DATE_DATA_TYPE, dateSort);\nregisterCompareFunctionFactory(DEFAULT_DATA_TYPE, defaultSort);\nexport { registerRootComparator, getRootComparator };","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/columnSorting/sortService/registry.mjs"],"names":["compareFunctionFactory","defaultSort","COLUMN_DATA_TYPE","DEFAULT_DATA_TYPE","numericSort","NUMERIC_DATA_TYPE","checkboxSort","CHECKBOX_DATA_TYPE","dateSort","DATE_DATA_TYPE","staticRegister","_staticRegister","registerCompareFunctionFactory","register","getGloballyCompareFunctionFactory","getItem","hasGloballyCompareFunctionFactory","hasItem","_staticRegister2","registerRootComparator","getRootComparator","getCompareFunctionFactory","type"],"mappings":"AAAA,SAASA,sBAAsB,IAAIC,WAAnC,EAAgDC,gBAAgB,IAAIC,iBAApE,QAA6F,6BAA7F;AACA,SAASH,sBAAsB,IAAII,WAAnC,EAAgDF,gBAAgB,IAAIG,iBAApE,QAA6F,6BAA7F;AACA,SAASL,sBAAsB,IAAIM,YAAnC,EAAiDJ,gBAAgB,IAAIK,kBAArE,QAA+F,8BAA/F;AACA,SAASP,sBAAsB,IAAIQ,QAAnC,EAA6CN,gBAAgB,IAAIO,cAAjE,QAAuF,0BAAvF;AACA,OAAOC,cAAP,MAA2B,mCAA3B;;AAEA,IAAIC,eAAe,GAAGD,cAAc,CAAC,gCAAD,CAApC;AAAA,IACIE,8BAA8B,GAAGD,eAAe,CAACE,QADrD;AAAA,IAEIC,iCAAiC,GAAGH,eAAe,CAACI,OAFxD;AAAA,IAGIC,iCAAiC,GAAGL,eAAe,CAACM,OAHxD;;AAKA,IAAIC,gBAAgB,GAAGR,cAAc,CAAC,4BAAD,CAArC;AAAA,IACIS,sBAAsB,GAAGD,gBAAgB,CAACL,QAD9C;AAAA,IAEIO,iBAAiB,GAAGF,gBAAgB,CAACH,OAFzC;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASM,yBAAT,CAAmCC,IAAnC,EAAyC;AAC9C,MAAIN,iCAAiC,CAACM,IAAD,CAArC,EAA6C;AAC3C,WAAOR,iCAAiC,CAACQ,IAAD,CAAxC;AACD;;AAED,SAAOR,iCAAiC,CAACX,iBAAD,CAAxC;AACD;AACDS,8BAA8B,CAACP,iBAAD,EAAoBD,WAApB,CAA9B;AACAQ,8BAA8B,CAACL,kBAAD,EAAqBD,YAArB,CAA9B;AACAM,8BAA8B,CAACH,cAAD,EAAiBD,QAAjB,CAA9B;AACAI,8BAA8B,CAACT,iBAAD,EAAoBF,WAApB,CAA9B;AACA,SAASkB,sBAAT,EAAiCC,iBAAjC","sourcesContent":["import { compareFunctionFactory as defaultSort, COLUMN_DATA_TYPE as DEFAULT_DATA_TYPE } from \"../sortFunction/default.mjs\";\r\nimport { compareFunctionFactory as numericSort, COLUMN_DATA_TYPE as NUMERIC_DATA_TYPE } from \"../sortFunction/numeric.mjs\";\r\nimport { compareFunctionFactory as checkboxSort, COLUMN_DATA_TYPE as CHECKBOX_DATA_TYPE } from \"../sortFunction/checkbox.mjs\";\r\nimport { compareFunctionFactory as dateSort, COLUMN_DATA_TYPE as DATE_DATA_TYPE } from \"../sortFunction/date.mjs\";\r\nimport staticRegister from \"../../../utils/staticRegister.mjs\";\r\n\r\nvar _staticRegister = staticRegister('sorting.compareFunctionFactory'),\r\n    registerCompareFunctionFactory = _staticRegister.register,\r\n    getGloballyCompareFunctionFactory = _staticRegister.getItem,\r\n    hasGloballyCompareFunctionFactory = _staticRegister.hasItem;\r\n\r\nvar _staticRegister2 = staticRegister('sorting.mainSortComparator'),\r\n    registerRootComparator = _staticRegister2.register,\r\n    getRootComparator = _staticRegister2.getItem;\r\n/**\r\n * Gets sort function for the particular column basing on it's data type.\r\n *\r\n * @param {string} type The data type.\r\n * @returns {Function}\r\n */\r\n\r\n\r\nexport function getCompareFunctionFactory(type) {\r\n  if (hasGloballyCompareFunctionFactory(type)) {\r\n    return getGloballyCompareFunctionFactory(type);\r\n  }\r\n\r\n  return getGloballyCompareFunctionFactory(DEFAULT_DATA_TYPE);\r\n}\r\nregisterCompareFunctionFactory(NUMERIC_DATA_TYPE, numericSort);\r\nregisterCompareFunctionFactory(CHECKBOX_DATA_TYPE, checkboxSort);\r\nregisterCompareFunctionFactory(DATE_DATA_TYPE, dateSort);\r\nregisterCompareFunctionFactory(DEFAULT_DATA_TYPE, defaultSort);\r\nexport { registerRootComparator, getRootComparator };"]},"metadata":{},"sourceType":"module"}