{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\qtrackerViewDataTable\\\\qtrackerViewDataTable.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Table, Input, Button, Space } from 'antd';\nimport { SearchOutlined } from '@ant-design/icons';\nimport Trash from \"../../assets/images/Trash.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CryptoJS = require(\"crypto-js\");\n\nconst SecureStorage = require(\"secure-web-storage\");\n\nvar SECRET_KEY = 'sanud2ha8shd72h';\nvar secureStorage = new SecureStorage(localStorage, {\n  hash: function hash(key) {\n    key = CryptoJS.SHA256(key, SECRET_KEY);\n    return key.toString();\n  },\n  encrypt: function encrypt(data) {\n    data = CryptoJS.AES.encrypt(data, SECRET_KEY);\n    data = data.toString();\n    return data;\n  },\n  decrypt: function decrypt(data) {\n    data = CryptoJS.AES.decrypt(data, SECRET_KEY);\n    data = data.toString(CryptoJS.enc.Utf8);\n    return data;\n  }\n});\n\nclass QTrackerViewDataTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchText: '',\n      searchedColumn: '',\n      data: [],\n      tab: this.props.currentTab,\n      selectedRows: [],\n      selectedRowsKeys: [],\n      updateData: this.props.updateData,\n      username: \"\",\n      acronyms: null,\n      steps: []\n    };\n\n    this.getColumnSearchProps = dataIndex => ({\n      render: text => text\n    });\n\n    this.handleReset = clearFilters => {\n      clearFilters();\n      this.setState({\n        searchText: ''\n      });\n    };\n\n    this.onSelectChange = (selectedRowKeys, selectedRows) => {\n      let ids = [];\n\n      for (let i = 0; i < selectedRows.length; i++) {\n        ids.push(selectedRows[i].id.props.children);\n      }\n\n      this.setState({\n        selectedRowsKeys: selectedRowKeys,\n        selectedRows: selectedRows\n      }); //this.setState({ selectedRows: selectedRows });\n\n      this.props.onChange(ids);\n    };\n  }\n\n  async accept(id) {\n    const body = {\n      id: id,\n      email: secureStorage.getItem(\"user\")\n    };\n    const options = {\n      method: \"POst\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/acceptRequest\", options).then(response => response.json()).then(json => {\n      this.props.updateDataMethod();\n    });\n  }\n\n  async reject(id) {\n    const body = {\n      id: id,\n      email: secureStorage.getItem(\"user\")\n    };\n    const options = {\n      method: \"POst\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/rejectRequest\", options).then(response => response.json()).then(json => {\n      this.props.updateDataMethod();\n    });\n  }\n\n  async componentDidMount() {\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    if (prevProps !== this.props) {\n      const options = {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n    }\n  }\n\n  render() {\n    const columns = [{\n      title: /*#__PURE__*/_jsxDEV(\"center\", {\n        className: \"dataTable__header__text\",\n        children: \"Reference\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'tag',\n      key: 'tag',\n      ...this.getColumnSearchProps('tag'),\n      sorter: {\n        compare: (a, b) => a.tag.localeCompare(b.tag)\n      }\n    }, {\n      title: /*#__PURE__*/_jsxDEV(\"center\", {\n        className: \"dataTable__header__text\",\n        children: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'pid',\n      key: 'pid',\n      ...this.getColumnSearchProps('pid'),\n      sorter: {\n        compare: (a, b) => a.pid.localeCompare(b.pid)\n      }\n    }, {\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dataTable__header__text\",\n        children: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'sptag',\n      key: 'sptag',\n      ...this.getColumnSearchProps('sptag'),\n      sorter: {\n        compare: (a, b) => a.sptag - b.sptag\n      }\n    }, {\n      title: /*#__PURE__*/_jsxDEV(\"center\", {\n        className: \"dataTable__header__text\",\n        children: \"ACTIONS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'actions',\n      key: 'actions',\n      ...this.getColumnSearchProps('actions'),\n      sorter: {\n        compare: (a, b) => a.actions.localeCompare(b.actions)\n      },\n      width: \"800px\"\n    }];\n    var totalElements = null;\n\n    if (this.state.data.length === 0) {\n      totalElements = null;\n    } else {\n      totalElements = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          bottom: 25,\n          left: 0\n        },\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\"Total elements: \", this.state.data.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 24\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.updateData, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"estimatedDataTable__container\",\n        style: {\n          width: \"auto\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Table, {\n          className: \"customTable\",\n          bordered: true,\n          columns: columns,\n          dataSource: this.state.data,\n          scroll: {\n            y: 437\n          },\n          pagination: {\n            disabled: true,\n            defaultPageSize: 5000\n          },\n          size: \"small\",\n          rowClassName: record => record.color.replace('#', '')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }, this), totalElements]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default QTrackerViewDataTable;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/qtrackerViewDataTable/qtrackerViewDataTable.js"],"names":["React","Table","Input","Button","Space","SearchOutlined","Trash","CryptoJS","require","SecureStorage","SECRET_KEY","secureStorage","localStorage","hash","key","SHA256","toString","encrypt","data","AES","decrypt","enc","Utf8","QTrackerViewDataTable","Component","state","searchText","searchedColumn","tab","props","currentTab","selectedRows","selectedRowsKeys","updateData","username","acronyms","steps","getColumnSearchProps","dataIndex","render","text","handleReset","clearFilters","setState","onSelectChange","selectedRowKeys","ids","i","length","push","id","children","onChange","accept","body","email","getItem","options","method","headers","JSON","stringify","fetch","process","env","REACT_APP_SERVER","REACT_APP_NODE_PORT","then","response","json","updateDataMethod","reject","componentDidMount","componentDidUpdate","prevProps","prevState","columns","title","sorter","compare","a","b","tag","localeCompare","pid","sptag","actions","width","totalElements","position","bottom","left","y","disabled","defaultPageSize","record","color","replace"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Table, Input, Button, Space } from 'antd';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport Trash from \"../../assets/images/Trash.png\"\r\n\r\nconst CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\nclass QTrackerViewDataTable extends React.Component{\r\n  state = {\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    data: [],\r\n    tab: this.props.currentTab,\r\n    selectedRows: [],\r\n    selectedRowsKeys: [],\r\n    updateData: this.props.updateData,\r\n    username: \"\",\r\n    acronyms : null,\r\n    steps: []\r\n  };\r\n\r\n  async accept(id){\r\n    const body = {\r\n      id: id,\r\n      email: secureStorage.getItem(\"user\")\r\n    }\r\n    const options = {\r\n      method: \"POst\",\r\n      headers: {\r\n          \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/acceptRequest\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n      this.props.updateDataMethod()\r\n    })\r\n  }\r\n\r\n  async reject(id){\r\n    const body = {\r\n      id: id,\r\n      email: secureStorage.getItem(\"user\")\r\n    }\r\n    const options = {\r\n      method: \"POst\",\r\n      headers: {\r\n          \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/rejectRequest\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n      this.props.updateDataMethod()\r\n    })\r\n  }\r\n\r\n  async componentDidMount(){\r\n\r\n    const options = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  async componentDidUpdate(prevProps, prevState){\r\n    \r\n    if(prevProps !== this.props){\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n    }\r\n\r\n  }\r\n  \r\n\r\n  \r\n  getColumnSearchProps = dataIndex => ({\r\n    \r\n    render: text => \r\n      \r\n      text\r\n    \r\n      \r\n  });\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys, selectedRows) => {\r\n    let ids = []\r\n    for(let i = 0; i < selectedRows.length; i++){\r\n      ids.push(selectedRows[i].id.props.children)\r\n    }\r\n    this.setState({\r\n      selectedRowsKeys: selectedRowKeys,\r\n      selectedRows: selectedRows\r\n    })\r\n    //this.setState({ selectedRows: selectedRows });\r\n    this.props.onChange(ids);\r\n    \r\n  };\r\n  \r\n\r\n  render() {\r\n\r\n    const columns = [\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Reference</center>,\r\n        dataIndex: 'tag',\r\n        key: 'tag',\r\n        ...this.getColumnSearchProps('tag'),\r\n        sorter:{\r\n          compare: (a, b) => a.tag.localeCompare(b.tag),\r\n        },\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">User</center>,\r\n        dataIndex: 'pid',\r\n        key: 'pid',\r\n        ...this.getColumnSearchProps('pid'),\r\n        sorter:{\r\n          compare: (a, b) => a.pid.localeCompare(b.pid),\r\n        },\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">Date</div>,\r\n        dataIndex: 'sptag',\r\n        key: 'sptag',\r\n        ...this.getColumnSearchProps('sptag'),\r\n        sorter: {\r\n            compare: (a, b) => a.sptag - b.sptag,\r\n        },\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">ACTIONS</center>,\r\n        dataIndex: 'actions',\r\n        key: 'actions',\r\n        ...this.getColumnSearchProps('actions'),\r\n        sorter:{\r\n          compare: (a, b) => a.actions.localeCompare(b.actions),\r\n        },\r\n        width: \"800px\"\r\n      },\r\n    ]\r\n\r\n    var totalElements = null;\r\n    if (this.state.data.length === 0){\r\n      totalElements = null;\r\n    }else{\r\n      totalElements = (<div style={{position: \"absolute\", bottom: 25, left:0}}>\r\n      <b>Total elements: {this.state.data.length}</b>\r\n     </div>);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {this.state.updateData}\r\n        <div className=\"estimatedDataTable__container\" style={{width:\"auto\"}}>\r\n        <Table className=\"customTable\" bordered = {true} columns={columns} dataSource={this.state.data} scroll={{y:437}} pagination={{disabled:true, defaultPageSize:5000}} size=\"small\"\r\n         rowClassName= {(record) => record.color.replace('#', '')}/>\r\n          {totalElements}\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QTrackerViewDataTable;"]},"metadata":{},"sourceType":"module"}