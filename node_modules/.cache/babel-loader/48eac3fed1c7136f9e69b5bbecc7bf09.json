{"ast":null,"code":"import * as React from 'react';\nimport { useEffect, useState } from 'react';\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\n\nfunction useLoadScript(src, onLoad, onError) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    } // Find script tag with same src in DOM.\n\n\n    const foundScript = document.querySelector(\"script[src=\\\"\".concat(src, \"\\\"]\")); // Call onLoad if script marked as loaded.\n\n    if (foundScript === null || foundScript === void 0 ? void 0 : foundScript.dataset.loaded) {\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n      return;\n    } // Create or get existed tag.\n\n\n    const script = foundScript || document.createElement(\"script\"); // Set src if no script was found.\n\n    if (!foundScript) {\n      script.src = src;\n    } // Mark script as loaded on load event.\n\n\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    } // Add to DOM if not yet added.\n\n\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\n\n\nfunction useLoadGoogleCharts(param) {\n  let {\n    chartVersion = \"current\",\n    chartPackages = [\"corechart\", \"controls\"],\n    chartLanguage = \"en\",\n    mapsApiKey\n  } = param;\n  const [googleCharts, setGoogleCharts] = useState(null);\n  const [failed, setFailed] = useState(false);\n  useLoadScript(\"https://www.gstatic.com/charts/loader.js\", () => {\n    // @ts-expect-error Getting object from global namespace.\n    const google = window === null || window === void 0 ? void 0 : window.google;\n\n    if (!google) {\n      return;\n    }\n\n    google.charts.load(chartVersion, {\n      packages: chartPackages,\n      language: chartLanguage,\n      mapsApiKey\n    });\n    google.charts.setOnLoadCallback(() => {\n      setGoogleCharts(google);\n    });\n  }, () => {\n    setFailed(true);\n  });\n  return [googleCharts, failed];\n}\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\n\n\nfunction LoadGoogleCharts(param) {\n  let {\n    onLoad,\n    onError,\n    ...params\n  } = param;\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n  return null;\n}\n\nconst chartDefaultProps = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1\n  },\n  rootProps: {},\n  chartWrapperParams: {}\n};\nlet uniqueID = 0;\n\nconst generateUniqueID = () => {\n  uniqueID += 1;\n  return \"reactgooglegraph-\".concat(uniqueID);\n};\n\nconst DEFAULT_CHART_COLORS = [\"#3366CC\", \"#DC3912\", \"#FF9900\", \"#109618\", \"#990099\", \"#3B3EAC\", \"#0099C6\", \"#DD4477\", \"#66AA00\", \"#B82E2E\", \"#316395\", \"#994499\", \"#22AA99\", \"#AAAA11\", \"#6633CC\", \"#E67300\", \"#8B0707\", \"#329262\", \"#5574A6\", \"#3B3EAC\"];\n\nconst loadDataTableFromSpreadSheet = async function (googleViz, spreadSheetUrl) {\n  let urlParams = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n  return new Promise((resolve, reject) => {\n    const headers = \"\".concat(urlParams.headers ? \"headers=\".concat(urlParams.headers) : \"headers=0\");\n    const queryString = \"\".concat(urlParams.query ? \"&tq=\".concat(encodeURIComponent(urlParams.query)) : \"\");\n    const gid = \"\".concat(urlParams.gid ? \"&gid=\".concat(urlParams.gid) : \"\");\n    const sheet = \"\".concat(urlParams.sheet ? \"&sheet=\".concat(urlParams.sheet) : \"\");\n    const access_token = \"\".concat(urlParams.access_token ? \"&access_token=\".concat(urlParams.access_token) : \"\");\n    const urlQueryString = \"\".concat(headers).concat(gid).concat(sheet).concat(queryString).concat(access_token);\n    const urlToSpreadSheet = \"\".concat(spreadSheetUrl, \"/gviz/tq?\").concat(urlQueryString); //&tq=${queryString}`;\n\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send(response => {\n      if (response.isError()) {\n        reject(\"Error in query:  \".concat(response.getMessage(), \" \").concat(response.getDetailedMessage()));\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n\nconst {\n  Provider,\n  Consumer\n} = /*#__PURE__*/React.createContext(chartDefaultProps);\n\nconst ContextProvider = param => {\n  let {\n    children,\n    value\n  } = param;\n  return /*#__PURE__*/React.createElement(Provider, {\n    value: value\n  }, children);\n};\n\nconst ContextConsumer = param => {\n  let {\n    render\n  } = param;\n  return /*#__PURE__*/React.createElement(Consumer, null, context => {\n    return render(context);\n  });\n};\n\nconst GRAY_COLOR = \"#CCCCCC\";\n\nclass GoogleChartDataTableInner extends React.Component {\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      google,\n      googleChartWrapper\n    } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() && googleChartWrapper.getChart().clearChart();\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n\n  render() {\n    return null;\n  }\n\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      hiddenColumns: []\n    };\n\n    this.listenToLegendToggle = () => {\n      const {\n        google,\n        googleChartWrapper\n      } = this.props;\n      google.visualization.events.addListener(googleChartWrapper, \"select\", () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n\n        if (selection.length === 0 || // We want to listen to when a whole row is selected. This is the case only when row === null\n        selection[0].row || !dataTable) {\n          return;\n        }\n\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState(state => ({ ...state,\n            hiddenColumns: [...state.hiddenColumns.filter(colID => colID !== columnID)]\n          }));\n        } else {\n          this.setState(state => ({ ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID]\n          }));\n        }\n      });\n    };\n\n    this.applyFormatters = (dataTable, formatters) => {\n      const {\n        google\n      } = this.props;\n\n      for (let formatter of formatters) {\n        switch (formatter.type) {\n          case \"ArrowFormat\":\n            {\n              const vizFormatter = new google.visualization.ArrowFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n\n          case \"BarFormat\":\n            {\n              const vizFormatter = new google.visualization.BarFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n\n          case \"ColorFormat\":\n            {\n              const vizFormatter = new google.visualization.ColorFormat(formatter.options);\n              const {\n                ranges\n              } = formatter;\n\n              for (let range of ranges) {\n                vizFormatter.addRange(...range);\n              }\n\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n\n          case \"DateFormat\":\n            {\n              const vizFormatter = new google.visualization.DateFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n\n          case \"NumberFormat\":\n            {\n              const vizFormatter = new google.visualization.NumberFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n\n          case \"PatternFormat\":\n            {\n              const vizFormatter = new google.visualization.PatternFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n        }\n      }\n    };\n\n    this.getColumnID = (dataTable, columnIndex) => {\n      return dataTable.getColumnId(columnIndex) || dataTable.getColumnLabel(columnIndex);\n    };\n\n    this.draw = async param => {\n      let {\n        data,\n        diffdata,\n        rows,\n        columns,\n        options,\n        legend_toggle,\n        legendToggle,\n        chartType,\n        formatters,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      } = param;\n      const {\n        google,\n        googleChartWrapper\n      } = this.props;\n      let dataTable;\n      let chartDiff = null;\n\n      if (diffdata) {\n        const oldData = google.visualization.arrayToDataTable(diffdata.old);\n        const newData = google.visualization.arrayToDataTable(diffdata.new);\n        chartDiff = google.visualization[chartType].prototype.computeDiff(oldData, newData);\n      }\n\n      if (data !== null) {\n        if (Array.isArray(data)) {\n          dataTable = google.visualization.arrayToDataTable(data);\n        } else {\n          dataTable = new google.visualization.DataTable(data);\n        }\n      } else if (rows && columns) {\n        dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n      } else if (spreadSheetUrl) {\n        dataTable = await loadDataTableFromSpreadSheet(google, spreadSheetUrl, spreadSheetQueryParameters);\n      } else {\n        dataTable = google.visualization.arrayToDataTable([]);\n      }\n\n      const columnCount = dataTable.getNumberOfColumns();\n\n      for (let i = 0; i < columnCount; i += 1) {\n        const columnID = this.getColumnID(dataTable, i);\n\n        if (this.state.hiddenColumns.includes(columnID)) {\n          const previousColumnLabel = dataTable.getColumnLabel(i);\n          const previousColumnID = dataTable.getColumnId(i);\n          const previousColumnType = dataTable.getColumnType(i);\n          dataTable.removeColumn(i);\n          dataTable.addColumn({\n            label: previousColumnLabel,\n            id: previousColumnID,\n            type: previousColumnType\n          });\n        }\n      }\n\n      const chart = googleChartWrapper.getChart();\n\n      if (googleChartWrapper.getChartType() === \"Timeline\") {\n        chart && chart.clearChart();\n      }\n\n      googleChartWrapper.setChartType(chartType);\n      googleChartWrapper.setOptions(options || {});\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n\n      if (this.props.googleChartDashboard !== null) {\n        this.props.googleChartDashboard.draw(dataTable);\n      }\n\n      if (chartDiff) {\n        googleChartWrapper.setDataTable(chartDiff);\n        googleChartWrapper.draw();\n      }\n\n      if (formatters) {\n        this.applyFormatters(dataTable, formatters);\n        googleChartWrapper.setDataTable(dataTable);\n        googleChartWrapper.draw();\n      }\n\n      if (legendToggle === true || legend_toggle === true) {\n        this.grayOutHiddenColumns({\n          options\n        });\n      }\n\n      return;\n    };\n\n    this.grayOutHiddenColumns = param => {\n      let {\n        options\n      } = param;\n      const {\n        googleChartWrapper\n      } = this.props;\n      const dataTable = googleChartWrapper.getDataTable();\n      if (!dataTable) return;\n      const columnCount = dataTable.getNumberOfColumns();\n      const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n      if (hasAHiddenColumn === false) return;\n      const colors = Array.from({\n        length: columnCount - 1\n      }).map((dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      });\n      googleChartWrapper.setOptions({ ...options,\n        colors\n      });\n      googleChartWrapper.draw();\n    };\n\n    this.onResize = () => {\n      const {\n        googleChartWrapper\n      } = this.props;\n      googleChartWrapper.draw();\n    };\n  }\n\n}\n\nclass GoogleChartDataTable extends React.Component {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  render() {\n    const {\n      google,\n      googleChartWrapper,\n      googleChartDashboard\n    } = this.props;\n    return /*#__PURE__*/React.createElement(ContextConsumer, {\n      render: props => {\n        return /*#__PURE__*/React.createElement(GoogleChartDataTableInner, Object.assign({}, props, {\n          google: google,\n          googleChartWrapper: googleChartWrapper,\n          googleChartDashboard: googleChartDashboard\n        }));\n      }\n    });\n  }\n\n}\n\nclass GoogleChartEvents extends React.Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  listenToEvents(param) {\n    let {\n      chartEvents,\n      google,\n      googleChartWrapper\n    } = param;\n\n    if (!chartEvents) {\n      return;\n    }\n\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n\n    for (let event of chartEvents) {\n      var _this = this;\n\n      const {\n        eventName,\n        callback\n      } = event;\n      google.visualization.events.addListener(googleChartWrapper, eventName, function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        callback({\n          chartWrapper: googleChartWrapper,\n          props: _this.props,\n          google: google,\n          eventArgs: args\n        });\n      });\n    }\n  }\n\n  render() {\n    const {\n      google,\n      googleChartWrapper\n    } = this.props;\n    return /*#__PURE__*/React.createElement(ContextConsumer, {\n      render: propsFromContext => {\n        this.listenToEvents({\n          chartEvents: propsFromContext.chartEvents || null,\n          google,\n          googleChartWrapper\n        });\n        return null;\n      }\n    });\n  }\n\n}\n\nlet controlCounter = 0;\n\nclass GoogleChart extends React.Component {\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper\n    } = this.props;\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(chartConfig);\n    googleChartWrapper.setOptions(options || {});\n\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n\n    const googleChartDashboard = new google.visualization.Dashboard(this.dashboard_ref);\n    const googleChartControls = this.addControls(googleChartWrapper, googleChartDashboard);\n\n    if (toolbarItems) {\n      google.visualization.drawToolbar(this.toolbar_ref.current, toolbarItems);\n    }\n\n    let googleChartEditor = null;\n\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google\n      });\n    }\n\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true\n    });\n  }\n\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n    const {\n      controls\n    } = this.props;\n\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const {\n          controlType,\n          options,\n          controlWrapperParams\n        } = controls[i];\n\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n        }\n\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.state.isReady !== nextState.isReady || nextProps.controls !== this.props.controls;\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      options,\n      style\n    } = this.props;\n    const divStyle = {\n      height: height || options && options.height,\n      width: width || options && options.width,\n      ...style\n    };\n\n    if (this.props.render) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.dashboard_ref,\n        style: divStyle\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.toolbar_ref,\n        id: \"toolbar\"\n      }), this.props.render({\n        renderChart: this.renderChart,\n        renderControl: this.renderControl,\n        renderToolbar: this.renderToolBar\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.dashboard_ref,\n        style: divStyle\n      }, this.renderControl(param => {\n        let {\n          controlProp\n        } = param;\n        return controlProp.controlPosition !== \"bottom\";\n      }), this.renderChart(), this.renderControl(param => {\n        let {\n          controlProp\n        } = param;\n        return controlProp.controlPosition === \"bottom\";\n      }), this.renderToolBar());\n    }\n  }\n\n  constructor(...args1) {\n    var _this1;\n\n    super(), _this1 = this;\n    this.state = {\n      googleChartWrapper: null,\n      googleChartDashboard: null,\n      googleChartControls: null,\n      googleChartEditor: null,\n      isReady: false\n    };\n    this.graphID = null;\n    this.dashboard_ref = /*#__PURE__*/React.createRef();\n    this.toolbar_ref = /*#__PURE__*/React.createRef();\n\n    this.getGraphID = () => {\n      const {\n        graphID,\n        graph_id\n      } = this.props;\n      let instanceGraphID;\n\n      if (!graphID && !graph_id) {\n        if (!this.graphID) {\n          instanceGraphID = generateUniqueID();\n        } else {\n          instanceGraphID = this.graphID;\n        }\n      } else if (graphID && !graph_id) {\n        instanceGraphID = graphID;\n      } else if (graph_id && !graphID) {\n        instanceGraphID = graph_id;\n      } else {\n        instanceGraphID = graphID;\n      }\n\n      this.graphID = instanceGraphID;\n      return this.graphID;\n    };\n\n    this.getControlID = (id, index) => {\n      controlCounter += 1;\n      let controlID;\n\n      if (typeof id === \"undefined\") {\n        controlID = \"googlechart-control-\".concat(index, \"-\").concat(controlCounter);\n      } else {\n        controlID = id;\n      }\n\n      return controlID;\n    };\n\n    this.addControls = (googleChartWrapper, googleChartDashboard) => {\n      const {\n        google,\n        controls\n      } = this.props;\n      const googleChartControls = !controls ? null : controls.map((control, i) => {\n        const {\n          controlID: controlIDMaybe,\n          controlType,\n          options: controlOptions,\n          controlWrapperParams\n        } = control;\n        const controlID = this.getControlID(controlIDMaybe, i);\n        return {\n          controlProp: control,\n          control: new google.visualization.ControlWrapper({\n            containerId: controlID,\n            controlType,\n            options: controlOptions,\n            ...controlWrapperParams\n          })\n        };\n      });\n\n      if (!googleChartControls) {\n        return null;\n      }\n\n      googleChartDashboard.bind(googleChartControls.map(param => {\n        let {\n          control\n        } = param;\n        return control;\n      }), googleChartWrapper);\n\n      for (let chartControl of googleChartControls) {\n        const {\n          control,\n          controlProp\n        } = chartControl;\n        const {\n          controlEvents = []\n        } = controlProp;\n\n        for (let event of controlEvents) {\n          var _this = this;\n\n          const {\n            callback,\n            eventName\n          } = event;\n          google.visualization.events.removeListener(control, eventName, callback);\n          google.visualization.events.addListener(control, eventName, function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: _this.props,\n              google: google,\n              eventArgs: args\n            });\n          });\n        }\n      }\n\n      return googleChartControls;\n    };\n\n    this.renderChart = () => {\n      const {\n        width,\n        height,\n        options,\n        style,\n        className,\n        rootProps,\n        google\n      } = this.props;\n      const divStyle = {\n        height: height || options && options.height,\n        width: width || options && options.width,\n        ...style\n      };\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        id: this.getGraphID(),\n        style: divStyle,\n        className: className\n      }, rootProps), this.state.isReady && this.state.googleChartWrapper !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GoogleChartDataTable, {\n        googleChartWrapper: this.state.googleChartWrapper,\n        google: google,\n        googleChartDashboard: this.state.googleChartDashboard\n      }), /*#__PURE__*/React.createElement(GoogleChartEvents, {\n        googleChartWrapper: this.state.googleChartWrapper,\n        google: google\n      })) : null);\n    };\n\n    this.renderControl = function () {\n      let filter = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : param => {\n        return true;\n      };\n      return _this1.state.isReady && _this1.state.googleChartControls !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, _this1.state.googleChartControls.filter(param => {\n        let {\n          controlProp,\n          control\n        } = param;\n        return filter({\n          control,\n          controlProp\n        });\n      }).map(param => {\n        let {\n          control,\n          controlProp\n        } = param;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: control.getContainerId(),\n          id: control.getContainerId()\n        });\n      })) : null;\n    };\n\n    this.renderToolBar = () => {\n      if (!this.props.toolbarItems) return null;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.toolbar_ref\n      });\n    };\n  }\n\n}\n\nclass Chart$1 extends React.Component {\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement\n    } = this.props;\n    return /*#__PURE__*/React.createElement(ContextProvider, {\n      value: this.props\n    }, this.state.loadingStatus === \"ready\" && this.state.google !== null ? /*#__PURE__*/React.createElement(GoogleChart, Object.assign({}, this.props, {\n      google: this.state.google\n    })) : this.state.loadingStatus === \"errored\" && errorElement ? errorElement : loader, /*#__PURE__*/React.createElement(LoadGoogleCharts, {\n      chartLanguage: chartLanguage,\n      chartPackages: chartPackages,\n      chartVersion: chartVersion,\n      mapsApiKey: mapsApiKey,\n      onLoad: this.onLoad,\n      onError: this.onError\n    }));\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  isFullyLoaded(google) {\n    const {\n      controls,\n      toolbarItems,\n      getChartEditor\n    } = this.props;\n    return google && google.visualization && google.visualization.ChartWrapper && google.visualization.Dashboard && (!controls || google.visualization.ChartWrapper) && (!getChartEditor || google.visualization.ChartEditor) && (!toolbarItems || google.visualization.drawToolbar);\n  }\n\n  constructor(...args) {\n    super(...args);\n    this._isMounted = false;\n    this.state = {\n      loadingStatus: \"loading\",\n      google: null\n    };\n\n    this.onLoad = google1 => {\n      if (this.props.onLoad) {\n        this.props.onLoad(google1);\n      }\n\n      if (this.isFullyLoaded(google1)) {\n        this.onSuccess(google1);\n      } else {\n        // IE11: window.google is not fully set, we have to wait\n        const id = setInterval(() => {\n          const google = window.google;\n\n          if (this._isMounted) {\n            if (google && this.isFullyLoaded(google)) {\n              clearInterval(id);\n              this.onSuccess(google);\n            }\n          } else {\n            clearInterval(id);\n          }\n        }, 1000);\n      }\n    };\n\n    this.onSuccess = google => {\n      this.setState({\n        loadingStatus: \"ready\",\n        google\n      });\n    };\n\n    this.onError = () => {\n      this.setState({\n        loadingStatus: \"errored\"\n      });\n    };\n  }\n\n}\n\nChart$1.defaultProps = chartDefaultProps;\nvar GoogleDataTableColumnRoleType;\n\n(function (GoogleDataTableColumnRoleType) {\n  GoogleDataTableColumnRoleType[\"annotation\"] = \"annotation\";\n  GoogleDataTableColumnRoleType[\"annotationText\"] = \"annotationText\";\n  GoogleDataTableColumnRoleType[\"certainty\"] = \"certainty\";\n  GoogleDataTableColumnRoleType[\"emphasis\"] = \"emphasis\";\n  GoogleDataTableColumnRoleType[\"interval\"] = \"interval\";\n  GoogleDataTableColumnRoleType[\"scope\"] = \"scope\";\n  GoogleDataTableColumnRoleType[\"style\"] = \"style\";\n  GoogleDataTableColumnRoleType[\"tooltip\"] = \"tooltip\";\n  GoogleDataTableColumnRoleType[\"domain\"] = \"domain\";\n})(GoogleDataTableColumnRoleType || (GoogleDataTableColumnRoleType = {}));\n\nvar Chart = Chart$1;\nexport { Chart$1 as Chart, GoogleDataTableColumnRoleType, Chart as default };","map":{"version":3,"sources":["../src/hooks/useLoadScript.ts","../src/hooks/useLoadGoogleCharts.ts","../src/default-props.ts","../src/generate-unique-id.ts","../src/constants.ts","../src/load-data-table-from-spreadsheet.ts","../src/Context.tsx","../src/components/GoogleChartDataTable.tsx","../src/components/GoogleChartEvents.tsx","../src/components/GoogleChart.tsx","../src/ReactGoogleCharts.tsx","../src/types.ts","../src/index.tsx"],"names":["useLoadScript","src","onLoad","onError","useEffect","document","foundScript","querySelector","dataset","loaded","script","createElement","onLoadWithMarker","addEventListener","head","append","removeEventListener","useLoadGoogleCharts","chartVersion","chartPackages","chartLanguage","mapsApiKey","googleCharts","setGoogleCharts","useState","failed","setFailed","google","window","charts","load","packages","language","setOnLoadCallback","LoadGoogleCharts","params","chartDefaultProps","legend_toggle","options","legendToggle","getChartWrapper","spreadSheetQueryParameters","headers","gid","rootProps","chartWrapperParams","uniqueID","generateUniqueID","DEFAULT_CHART_COLORS","loadDataTableFromSpreadSheet","googleViz","spreadSheetUrl","urlParams","Promise","resolve","reject","queryString","query","encodeURIComponent","sheet","access_token","urlQueryString","urlToSpreadSheet","visualization","Query","send","response","isError","getMessage","getDetailedMessage","getDataTable","Provider","Consumer","React","createContext","ContextProvider","children","value","ContextConsumer","render","context","GRAY_COLOR","GoogleChartDataTableInner","Component","state","hiddenColumns","listenToLegendToggle","googleChartWrapper","props","events","addListener","chart","getChart","selection","getSelection","dataTable","length","row","columnIndex","column","columnID","getColumnID","includes","setState","filter","colID","applyFormatters","formatters","formatter","type","vizFormatter","ArrowFormat","format","BarFormat","ColorFormat","ranges","range","addRange","DateFormat","NumberFormat","PatternFormat","getColumnId","getColumnLabel","draw","data","diffdata","rows","columns","chartType","chartDiff","oldData","arrayToDataTable","old","newData","new","prototype","computeDiff","Array","isArray","DataTable","columnCount","getNumberOfColumns","i","previousColumnLabel","previousColumnID","previousColumnType","getColumnType","removeColumn","addColumn","label","id","getChartType","clearChart","setChartType","setOptions","setDataTable","googleChartDashboard","grayOutHiddenColumns","hasAHiddenColumn","colors","from","map","dontcare","onResize","componentDidMount","componentWillUnmount","removeAllListeners","componentDidUpdate","GoogleChartDataTable","shouldComponentUpdate","GoogleChartEvents","listenToEvents","chartEvents","event","eventName","callback","args","chartWrapper","eventArgs","propsFromContext","controlCounter","GoogleChart","googleChartControls","googleChartEditor","isReady","graphID","dashboard_ref","createRef","toolbar_ref","getGraphID","graph_id","instanceGraphID","getControlID","index","controlID","addControls","controls","control","controlIDMaybe","controlType","controlOptions","controlWrapperParams","controlProp","ControlWrapper","containerId","bind","chartControl","controlEvents","removeListener","controlWrapper","toolbarItems","getChartEditor","chartConfig","ChartWrapper","Dashboard","drawToolbar","current","ChartEditor","chartEditor","setControlType","nextProps","nextState","renderChart","width","height","style","className","divStyle","div","Fragment","renderControl","key","getContainerId","renderToolBar","ref","renderToolbar","controlPosition","Chart","_isMounted","loadingStatus","defaultProps","loader","errorElement","isFullyLoaded","onSuccess","setInterval","clearInterval","GoogleDataTableColumnRoleType","annotation","annotationText","certainty","emphasis","interval","scope","tooltip","domain"],"mappings":";;AAEA;;;;;;;SAMgBA,a,CACdC,G,EACAC,M,EACAC,O,EACA;AACAC,EAAAA,SAAS,CAAA,MAAO;AACd,QAAA,CAAKC,QAAL,EAAe;AACb;AACD,KAHa,C;;;AAMd,UAAMC,WAAW,GAAGD,QAAQ,CAACE,aAATF,CACjB,gBAAkB,MAAlB,CAAcJ,GAAd,EAAkB,KAAlB,CADiBI,CAApB,CANc,C;;AAWd,QAAIC,WAAW,KAAA,IAAXA,IAAAA,WAAW,KAAXA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,WAAW,CAAEE,OAAbF,CAAqBG,MAAzB,EAAiC;AAC/BP,MAAAA,MAAM,KAAA,IAANA,IAAAA,MAAM,KAANA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAM,EAANA;AACA;AACD,KAda,C;;;AAiBd,UAAMQ,MAAM,GAAGJ,WAAW,IAAID,QAAQ,CAACM,aAATN,CAAuB,QAAvBA,CAA9B,CAjBc,C;;AAoBd,QAAA,CAAKC,WAAL,EAAkB;AAChBI,MAAAA,MAAM,CAACT,GAAPS,GAAaT,GAAbS;AACD,KAtBa,C;;;AAyBd,UAAME,gBAAgB,GAAA,MAAS;AAC7BF,MAAAA,MAAM,CAACF,OAAPE,CAAeD,MAAfC,GAAwB,GAAxBA;AACAR,MAAAA,MAAM,KAAA,IAANA,IAAAA,MAAM,KAANA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAM,EAANA;AACD,KAHD;;AAKAQ,IAAAA,MAAM,CAACG,gBAAPH,CAAwB,MAAxBA,EAAgCE,gBAAhCF;;AAEA,QAAIP,OAAJ,EAAa;AACXO,MAAAA,MAAM,CAACG,gBAAPH,CAAwB,OAAxBA,EAAiCP,OAAjCO;AACD,KAlCa,C;;;AAqCd,QAAA,CAAKJ,WAAL,EAAkB;AAChBD,MAAAA,QAAQ,CAACS,IAATT,CAAcU,MAAdV,CAAqBK,MAArBL;AACD;;AAED,WAAA,MAAa;AACXK,MAAAA,MAAM,CAACM,mBAAPN,CAA2B,MAA3BA,EAAmCE,gBAAnCF;;AAEA,UAAIP,OAAJ,EAAa;AACXO,QAAAA,MAAM,CAACM,mBAAPN,CAA2B,OAA3BA,EAAoCP,OAApCO;AACD;AACF,KAND;AAOD,GAhDQ,EAgDN,EAhDM,CAATN;AAiDF;ACnDA;;;;;;;;;;;SASgBa,mB,CAAoB,K,EAKL;MALK;AAClCC,IAAAA,YAAY,GAAG,SADmB;AAElCC,IAAAA,aAAa,GAAG,CAAC,WAAD,EAAc,UAAd,CAFkB;AAGlCC,IAAAA,aAAa,GAAG,IAHkB;AAIlCC,IAAAA;AAJkC,MAAA,K;AAMlC,QAAA,CAAOC,YAAP,EAAqBC,eAArB,IAAwCC,QAAQ,CAAmB,IAAnB,CAAhD;AACA,QAAA,CAAOC,MAAP,EAAeC,SAAf,IAA4BF,QAAQ,CAAC,KAAD,CAApC;AAEAxB,EAAAA,aAAa,CACX,0CADW,EACX,MACM;;AAEJ,UAAM2B,MAAM,GAAGC,MAAM,KAAA,IAANA,IAAAA,MAAM,KAANA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAM,CAAED,MAAvB;;AAEA,QAAA,CAAKA,MAAL,EAAa;AACX;AACD;;AAEDA,IAAAA,MAAM,CAACE,MAAPF,CAAcG,IAAdH,CAAmBT,YAAnBS,EAAiC;AAC/BI,MAAAA,QAAQ,EAAEZ,aADqB;AAE/Ba,MAAAA,QAAQ,EAAEZ,aAFqB;AAG/BC,MAAAA;AAH+B,KAAjCM;AAKAA,IAAAA,MAAM,CAACE,MAAPF,CAAcM,iBAAdN,CAA+B,MAAO;AACpCJ,MAAAA,eAAe,CAACI,MAAD,CAAfJ;AACD,KAFDI;AAGD,GAlBU,EAkBV,MACK;AACJD,IAAAA,SAAS,CAAC,IAAD,CAATA;AACD,GArBU,CAAb1B;AAwBA,SAAO,CAACsB,YAAD,EAAeG,MAAf,CAAP;AACD;AAOD;;;;;SAGgBS,gB,CAAiB,K,EAIN;MAJM;AAC/BhC,IAAAA,MAD+B;AAE/BC,IAAAA,OAF+B;AAExB,OACJgC;AAH4B,MAAA,K;AAK/B,QAAA,CAAOb,YAAP,EAAqBG,MAArB,IAA+BR,mBAAmB,CAACkB,MAAD,CAAlD;AAEA/B,EAAAA,SAAS,CAAA,MAAO;AACd,QAAIkB,YAAY,IAAIpB,MAApB,EAA4B;AAC1BA,MAAAA,MAAM,CAACoB,YAAD,CAANpB;AACD;AACF,GAJQ,EAIN,CAACoB,YAAD,CAJM,CAATlB;AAMAA,EAAAA,SAAS,CAAA,MAAO;AACd,QAAIqB,MAAM,IAAItB,OAAd,EAAuB;AACrBA,MAAAA,OAAO;AACR;AACF,GAJQ,EAIN,CAACsB,MAAD,CAJM,CAATrB;AAMA,SAAO,IAAP;AACF;;AClFO,MAAMgC,iBAAiB,GAAmC;;AAE/DC,EAAAA,aAAa,EAAE,KAFgD;;AAI/DC,EAAAA,OAAO,EAAE,EAJsD;AAK/DC,EAAAA,YAAY,EAAE,KALiD;AAM/DC,EAAAA,eAAe,EAAA,MAAQ,CAAE,CANsC;AAO/DC,EAAAA,0BAA0B,EAAE;AAC1BC,IAAAA,OAAO,EAAE,CADiB;AAE1BC,IAAAA,GAAG,EAAE;AAFqB,GAPmC;AAW/DC,EAAAA,SAAS,EAAE,EAXoD;AAY/DC,EAAAA,kBAAkB,EAAE;AAZ2C,CAA1D;ACFP,IAAIC,QAAQ,GAAG,CAAf;;AACO,MAAMC,gBAAgB,GAAA,MAAS;AACpCD,EAAAA,QAAQ,IAAI,CAAZA;AACA,SAAQ,oBAA4B,MAA5B,CAAmBA,QAAnB,CAAR;AACD,CAHM;;ACDA,MAAME,oBAAoB,GAAG,CAClC,SADkC,EAElC,SAFkC,EAGlC,SAHkC,EAIlC,SAJkC,EAKlC,SALkC,EAMlC,SANkC,EAOlC,SAPkC,EAQlC,SARkC,EASlC,SATkC,EAUlC,SAVkC,EAWlC,SAXkC,EAYlC,SAZkC,EAalC,SAbkC,EAclC,SAdkC,EAelC,SAfkC,EAgBlC,SAhBkC,EAiBlC,SAjBkC,EAkBlC,SAlBkC,EAmBlC,SAnBkC,EAoBlC,SApBkC,CAA7B;;ACEA,MAAMC,4BAA4B,GAAA,gBACvCC,SADuC,EAEvCC,cAFuC,EAUpC;MAPHC,SAMC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,KAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAG,E;AAEJ,SAAO,IAAIC,OAAJ,CAAW,CAAEC,OAAF,EAAWC,MAAX,KAAsB;AACtC,UAAMb,OAAO,GAAI,GAEhB,MAFgB,CACfU,SAAS,CAACV,OAAVU,GAAqB,WAA4B,MAA5B,CAAUA,SAAS,CAACV,OAApB,CAArBU,GAAsD,WADvC,CAAjB;AAGA,UAAMI,WAAW,GAAI,GAEpB,MAFoB,CACnBJ,SAAS,CAACK,KAAVL,GAAmB,OAA0C,MAA1C,CAAMM,kBAAkB,CAACN,SAAS,CAACK,KAAX,CAAxB,CAAnBL,GAAkE,EAD/C,CAArB;AAGA,UAAMT,GAAG,GAAI,GAA+C,MAA/C,CAAES,SAAS,CAACT,GAAVS,GAAiB,QAAqB,MAArB,CAAOA,SAAS,CAACT,GAAjB,CAAjBS,GAA0C,EAA5C,CAAb;AACA,UAAMO,KAAK,GAAI,GAAqD,MAArD,CAAEP,SAAS,CAACO,KAAVP,GAAmB,UAAyB,MAAzB,CAASA,SAAS,CAACO,KAAnB,CAAnBP,GAAgD,EAAlD,CAAf;AACA,UAAMQ,YAAY,GAAI,GAErB,MAFqB,CACpBR,SAAS,CAACQ,YAAVR,GAA0B,iBAAuC,MAAvC,CAAgBA,SAAS,CAACQ,YAA1B,CAA1BR,GAAqE,EADjD,CAAtB;AAGA,UAAMS,cAAc,GAAI,GAAYlB,MAAZ,CAAED,OAAF,EAAkBiB,MAAlB,CAAYhB,GAAZ,EAA0Ba,MAA1B,CAAkBG,KAAlB,EAAwCC,MAAxC,CAA0BJ,WAA1B,EAAqD,MAArD,CAAwCI,YAAxC,CAAxB;AACA,UAAME,gBAAgB,GAAI,GAA4BD,MAA5B,CAAEV,cAAF,EAAiB,WAAjB,EAA2C,MAA3C,CAA4BU,cAA5B,CAA1B,CAbsC,CAakC;;AACxE,UAAMJ,KAAK,GAAG,IAAIP,SAAS,CAACa,aAAVb,CAAwBc,KAA5B,CAAkCF,gBAAlC,CAAd;AACAL,IAAAA,KAAK,CAACQ,IAANR,CAAYS,QAAF,IAAoB;AAC5B,UAAIA,QAAQ,CAACC,OAATD,EAAJ,EAAwB;AACtBX,QAAAA,MAAM,CACH,oBAA4CW,MAA5C,CAAmBA,QAAQ,CAACE,UAATF,EAAnB,EAAyC,GAAzC,EAA0E,MAA1E,CAA4CA,QAAQ,CAACG,kBAATH,EAA5C,CADG,CAANX;AAGD,OAJD,MAIO;AACLD,QAAAA,OAAO,CAACY,QAAQ,CAACI,YAATJ,EAAD,CAAPZ;AACD;AACF,KARDG;AASD,GAxBM,CAAP;AAyBD,CApCM;;ACEP,MAAM;AAAEc,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAAsB,aAAGC,KAAK,CAACC,aAAND,CAAoBrC,iBAApBqC,CAA/B;;AAEO,MAAME,eAAe,GAAA,KAAA,IAMtB;MAN0B;AAC9BC,IAAAA,QAD8B;AAE9BC,IAAAA;AAF8B,MAM/B,K;AACC,SAAA,aAAA,KAAA,CAAA,aAAA,CAAQN,QAAR,EAAgB;AAACM,IAAAA,KAAK,EAAEA;AAAR,GAAhB,EAAgCD,QAAhC,CAAA;AACD,CARM;;AAUA,MAAME,eAAe,GAAA,KAAA,IAItB;MAJ0B;AAC9BC,IAAAA;AAD8B,MAI/B,K;AACC,SAAA,aAAA,KAAA,CAAA,aAAA,CACGP,QADH,EACW,IADX,EAEMQ,OADK,IACO;AACZ,WAAOD,MAAM,CAACC,OAAD,CAAb;AACD,GAJL,CAAA;AAOD,CAZM;;ACHP,MAAMC,UAAU,GAAG,SAAnB;;MAaaC,yB,SAAkCT,KAAK,CAACU,S,CAAS;AA0N5DiF,EAAAA,iBAAiB,GAAG;AAClB,SAAKzC,IAAL,CAAU,KAAKnC,KAAf;AACA5D,IAAAA,MAAM,CAACf,gBAAPe,CAAwB,QAAxBA,EAAkC,KAAKuI,QAAvCvI;;AACA,QAAI,KAAK4D,KAAL,CAAWnD,aAAX,IAA4B,KAAKmD,KAAL,CAAWjD,YAA3C,EAAyD;AACvD,WAAK+C,oBAAL;AACD;AACF;;AAED+E,EAAAA,oBAAoB,GAAG;AACrB,UAAM;AAAE1I,MAAAA,MAAF;AAAU4D,MAAAA;AAAV,QAAiC,KAAKC,KAA5C;AACA5D,IAAAA,MAAM,CAACZ,mBAAPY,CAA2B,QAA3BA,EAAqC,KAAKuI,QAA1CvI;AACAD,IAAAA,MAAM,CAACoC,aAAPpC,CAAqB8D,MAArB9D,CAA4B2I,kBAA5B3I,CAA+C4D,kBAA/C5D;;AACA,QAAI4D,kBAAkB,CAACgE,YAAnBhE,OAAsC,UAA1C,EAAsD;AACpDA,MAAAA,kBAAkB,CAACK,QAAnBL,MACEA,kBAAkB,CAACK,QAAnBL,GAA8BiE,UAA9BjE,EADFA;AAED;AACF;;AAEDgF,EAAAA,kBAAkB,GAAG;AACnB,SAAK5C,IAAL,CAAU,KAAKnC,KAAf;AACD;;AACDT,EAAAA,MAAM,GAAG;AACP,WAAO,IAAP;AACD;;;;AAjPI,SAILK,KAJK,GAIG;AACNC,MAAAA,aAAa,EAAE;AADT,KAJH;;AAAA,SAQGC,oBARH,GAQuB,MAAS;AACnC,YAAM;AAAE3D,QAAAA,MAAF;AAAU4D,QAAAA;AAAV,UAAiC,KAAKC,KAA5C;AACA7D,MAAAA,MAAM,CAACoC,aAAPpC,CAAqB8D,MAArB9D,CAA4B+D,WAA5B/D,CACE4D,kBADF5D,EAEE,QAFFA,EAEE,MACM;AACJ,cAAMgE,KAAK,GAAGJ,kBAAkB,CAACK,QAAnBL,EAAd;AACA,cAAMM,SAAS,GAAGF,KAAK,CAACG,YAANH,EAAlB;AACA,cAAMI,SAAS,GAAGR,kBAAkB,CAACjB,YAAnBiB,EAAlB;;AACA,YACEM,SAAS,CAACG,MAAVH,KAAqB,CAArBA,IAAsB;AAEtBA,QAAAA,SAAS,CAAC,CAAD,CAATA,CAAaI,GAFbJ,IAEgB,CACfE,SAJH,EAKE;AACA;AACD;;AACD,cAAMG,WAAW,GAAGL,SAAS,CAAC,CAAD,CAATA,CAAaM,MAAjC;AACA,cAAMC,QAAQ,GAAG,KAAKC,WAAL,CAAiBN,SAAjB,EAA4BG,WAA5B,CAAjB;;AACA,YAAI,KAAKd,KAAL,CAAWC,aAAX,CAAyBiB,QAAzB,CAAkCF,QAAlC,CAAJ,EAAiD;AAC/C,eAAKG,QAAL,CAAenB,KAAF,KAAa,E,GACrBA,KADqB;AAExBC,YAAAA,aAAa,EAAE,C,GACVD,KAAK,CAACC,aAAND,CAAoBoB,MAApBpB,CAA4BqB,KAAF,IAAYA,KAAK,KAAKL,QAAhDhB,CADU;AAFS,WAAb,CAAb;AAMD,SAPD,MAOO;AACL,eAAKmB,QAAL,CAAenB,KAAF,KAAa,E,GACrBA,KADqB;AAExBC,YAAAA,aAAa,EAAE,C,GAAID,KAAK,CAACC,aAAV,EAAyBe,QAAzB;AAFS,WAAb,CAAb;AAID;AACF,OA9BHzE;AAgCD,KA1CI;;AAAA,SA4CG+E,eA5CH,GA4CkB,CAAIX,SAAJ,EAAgCY,UAAhC,KAAsD;AAC3E,YAAM;AAAEhF,QAAAA;AAAF,UAAa,KAAK6D,KAAxB;;AACA,WAAK,IAAIoB,SAAT,IAAsBD,UAAtB,EAAkC;AAChC,gBAAQC,SAAS,CAACC,IAAlB;AACE,eAAK,aAAL;AAAoB;AAClB,oBAAMC,YAAY,GAAG,IAAInF,MAAM,CAACoC,aAAPpC,CAAqBoF,WAAzB,CACnBH,SAAS,CAACtE,OADS,CAArB;AAGAwE,cAAAA,YAAY,CAACE,MAAbF,CAAoBf,SAApBe,EAA+BF,SAAS,CAACT,MAAzCW;AACA;AACD;;AACD,eAAK,WAAL;AAAkB;AAChB,oBAAMA,YAAY,GAAG,IAAInF,MAAM,CAACoC,aAAPpC,CAAqBsF,SAAzB,CACnBL,SAAS,CAACtE,OADS,CAArB;AAGAwE,cAAAA,YAAY,CAACE,MAAbF,CAAoBf,SAApBe,EAA+BF,SAAS,CAACT,MAAzCW;AACA;AACD;;AACD,eAAK,aAAL;AAAoB;AAClB,oBAAMA,YAAY,GAAG,IAAInF,MAAM,CAACoC,aAAPpC,CAAqBuF,WAAzB,CACnBN,SAAS,CAACtE,OADS,CAArB;AAGA,oBAAM;AAAE6E,gBAAAA;AAAF,kBAAaP,SAAnB;;AACA,mBAAK,IAAIQ,KAAT,IAAkBD,MAAlB,EAA0B;AACxBL,gBAAAA,YAAY,CAACO,QAAbP,CAAqB,GAAIM,KAAzBN;AACD;;AACDA,cAAAA,YAAY,CAACE,MAAbF,CAAoBf,SAApBe,EAA+BF,SAAS,CAACT,MAAzCW;AACA;AACD;;AACD,eAAK,YAAL;AAAmB;AACjB,oBAAMA,YAAY,GAAG,IAAInF,MAAM,CAACoC,aAAPpC,CAAqB2F,UAAzB,CACnBV,SAAS,CAACtE,OADS,CAArB;AAGAwE,cAAAA,YAAY,CAACE,MAAbF,CAAoBf,SAApBe,EAA+BF,SAAS,CAACT,MAAzCW;AACA;AACD;;AACD,eAAK,cAAL;AAAqB;AACnB,oBAAMA,YAAY,GAAG,IAAInF,MAAM,CAACoC,aAAPpC,CAAqB4F,YAAzB,CACnBX,SAAS,CAACtE,OADS,CAArB;AAGAwE,cAAAA,YAAY,CAACE,MAAbF,CAAoBf,SAApBe,EAA+BF,SAAS,CAACT,MAAzCW;AACA;AACD;;AACD,eAAK,eAAL;AAAsB;AACpB,oBAAMA,YAAY,GAAG,IAAInF,MAAM,CAACoC,aAAPpC,CAAqB6F,aAAzB,CACnBZ,SAAS,CAACtE,OADS,CAArB;AAGAwE,cAAAA,YAAY,CAACE,MAAbF,CAAoBf,SAApBe,EAA+BF,SAAS,CAACT,MAAzCW;AACA;AACD;AA9CH;AAgDD;AACF,KAhGI;;AAAA,SAiGGT,WAjGH,GAiGc,CAAIN,SAAJ,EAAgCG,WAAhC,KAAwD;AACzE,aACEH,SAAS,CAAC0B,WAAV1B,CAAsBG,WAAtBH,KACAA,SAAS,CAAC2B,cAAV3B,CAAyBG,WAAzBH,CAFF;AAID,KAtGI;;AAAA,SAuGG4B,IAvGH,GAuGO,MAAA,KAAA,IAYiB;UAZP;AACpBC,QAAAA,IADoB;AAEpBC,QAAAA,QAFoB;AAGpBC,QAAAA,IAHoB;AAIpBC,QAAAA,OAJoB;AAKpBzF,QAAAA,OALoB;AAMpBD,QAAAA,aANoB;AAOpBE,QAAAA,YAPoB;AAQpByF,QAAAA,SARoB;AASpBrB,QAAAA,UAToB;AAUpBxD,QAAAA,cAVoB;AAWpBV,QAAAA;AAXoB,UAYE,K;AACtB,YAAM;AAAEd,QAAAA,MAAF;AAAU4D,QAAAA;AAAV,UAAiC,KAAKC,KAA5C;AACA,UAAIO,SAAJ;AACA,UAAIkC,SAAS,GAAG,IAAhB;;AACA,UAAIJ,QAAJ,EAAc;AACZ,cAAMK,OAAO,GAAGvG,MAAM,CAACoC,aAAPpC,CAAqBwG,gBAArBxG,CAAsCkG,QAAQ,CAACO,GAA/CzG,CAAhB;AACA,cAAM0G,OAAO,GAAG1G,MAAM,CAACoC,aAAPpC,CAAqBwG,gBAArBxG,CAAsCkG,QAAQ,CAACS,GAA/C3G,CAAhB;AACAsG,QAAAA,SAAS,GAAGtG,MAAM,CAACoC,aAAPpC,CAAqBqG,SAArBrG,EAAgC4G,SAAhC5G,CAA0C6G,WAA1C7G,CACVuG,OADUvG,EAEV0G,OAFU1G,CAAZsG;AAID;;AACD,UAAIL,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAIa,KAAK,CAACC,OAAND,CAAcb,IAAda,CAAJ,EAAyB;AACvB1C,UAAAA,SAAS,GAAGpE,MAAM,CAACoC,aAAPpC,CAAqBwG,gBAArBxG,CAAsCiG,IAAtCjG,CAAZoE;AACD,SAFD,MAEO;AACLA,UAAAA,SAAS,GAAG,IAAIpE,MAAM,CAACoC,aAAPpC,CAAqBgH,SAAzB,CAAmCf,IAAnC,CAAZ7B;AACD;AACF,OAND,MAMO,IAAI+B,IAAI,IAAIC,OAAZ,EAAqB;AAC1BhC,QAAAA,SAAS,GAAGpE,MAAM,CAACoC,aAAPpC,CAAqBwG,gBAArBxG,CAAsC,CAACoG,OAAD,E,GAAaD,IAAb,CAAtCnG,CAAZoE;AACD,OAFM,MAEA,IAAI5C,cAAJ,EAAoB;AACzB4C,QAAAA,SAAS,GAAI,MAAM9C,4BAA4B,CAC7CtB,MAD6C,EAE7CwB,cAF6C,EAG7CV,0BAH6C,CAA/CsD;AAKD,OANM,MAMA;AACLA,QAAAA,SAAS,GAAGpE,MAAM,CAACoC,aAAPpC,CAAqBwG,gBAArBxG,CAAsC,EAAtCA,CAAZoE;AACD;;AACD,YAAM6C,WAAW,GAAG7C,SAAS,CAAC8C,kBAAV9C,EAApB;;AACA,WAAK,IAAI+C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAApB,EAAiCE,CAAC,IAAI,CAAtC,EAAyC;AACvC,cAAM1C,QAAQ,GAAG,KAAKC,WAAL,CAAiBN,SAAjB,EAA4B+C,CAA5B,CAAjB;;AACA,YAAI,KAAK1D,KAAL,CAAWC,aAAX,CAAyBiB,QAAzB,CAAkCF,QAAlC,CAAJ,EAAiD;AAC/C,gBAAM2C,mBAAmB,GAAGhD,SAAS,CAAC2B,cAAV3B,CAAyB+C,CAAzB/C,CAA5B;AACA,gBAAMiD,gBAAgB,GAAGjD,SAAS,CAAC0B,WAAV1B,CAAsB+C,CAAtB/C,CAAzB;AACA,gBAAMkD,kBAAkB,GAAGlD,SAAS,CAACmD,aAAVnD,CAAwB+C,CAAxB/C,CAA3B;AACAA,UAAAA,SAAS,CAACoD,YAAVpD,CAAuB+C,CAAvB/C;AACAA,UAAAA,SAAS,CAACqD,SAAVrD,CAAoB;AAClBsD,YAAAA,KAAK,EAAEN,mBADW;AAElBO,YAAAA,EAAE,EAAEN,gBAFc;AAGlBnC,YAAAA,IAAI,EAAEoC;AAHY,WAApBlD;AAKD;AACF;;AACD,YAAMJ,KAAK,GAAGJ,kBAAkB,CAACK,QAAnBL,EAAd;;AACA,UAAIA,kBAAkB,CAACgE,YAAnBhE,OAAsC,UAA1C,EAAsD;AACpDI,QAAAA,KAAK,IAAIA,KAAK,CAAC6D,UAAN7D,EAATA;AACD;;AACDJ,MAAAA,kBAAkB,CAACkE,YAAnBlE,CAAgCyC,SAAhCzC;AACAA,MAAAA,kBAAkB,CAACmE,UAAnBnE,CAA8BjD,OAAO,IAAI,EAAzCiD;AACAA,MAAAA,kBAAkB,CAACoE,YAAnBpE,CAAgCQ,SAAhCR;AACAA,MAAAA,kBAAkB,CAACoC,IAAnBpC;;AACA,UAAI,KAAKC,KAAL,CAAWoE,oBAAX,KAAoC,IAAxC,EAA8C;AAC5C,aAAKpE,KAAL,CAAWoE,oBAAX,CAAgCjC,IAAhC,CAAqC5B,SAArC;AACD;;AAED,UAAIkC,SAAJ,EAAe;AACb1C,QAAAA,kBAAkB,CAACoE,YAAnBpE,CAAgC0C,SAAhC1C;AACAA,QAAAA,kBAAkB,CAACoC,IAAnBpC;AACD;;AACD,UAAIoB,UAAJ,EAAgB;AACd,aAAKD,eAAL,CAAqBX,SAArB,EAAgCY,UAAhC;AACApB,QAAAA,kBAAkB,CAACoE,YAAnBpE,CAAgCQ,SAAhCR;AACAA,QAAAA,kBAAkB,CAACoC,IAAnBpC;AACD;;AACD,UAAIhD,YAAY,KAAK,IAAjBA,IAAyBF,aAAa,KAAK,IAA/C,EAAqD;AACnD,aAAKwH,oBAAL,CAA0B;AAAEvH,UAAAA;AAAF,SAA1B;AACD;;AACD;AACD,KAxLI;;AAAA,SAyLGuH,oBAzLH,GAyLuB,KAAA,IAItB;UAJ0B;AAC9BvH,QAAAA;AAD8B,UAI/B,K;AACC,YAAM;AAAEiD,QAAAA;AAAF,UAAyB,KAAKC,KAApC;AACA,YAAMO,SAAS,GAAGR,kBAAkB,CAACjB,YAAnBiB,EAAlB;AACA,UAAA,CAAKQ,SAAL,EAAgB;AAChB,YAAM6C,WAAW,GAAG7C,SAAS,CAAC8C,kBAAV9C,EAApB;AACA,YAAM+D,gBAAgB,GAAG,KAAK1E,KAAL,CAAWC,aAAX,CAAyBW,MAAzB,GAAkC,CAA3D;AACA,UAAI8D,gBAAgB,KAAK,KAAzB,EAAgC;AAChC,YAAMC,MAAM,GAAGtB,KAAK,CAACuB,IAANvB,CAAW;AAAEzC,QAAAA,MAAM,EAAE4C,WAAW,GAAG;AAAxB,OAAXH,EAAwCwB,GAAxCxB,CAA2C,CACvDyB,QADuD,EAC7CpB,CAD6C,KACvC;AACf,cAAM1C,QAAQ,GAAG,KAAKC,WAAL,CAAiBN,SAAjB,EAA4B+C,CAAC,GAAG,CAAhC,CAAjB;;AACA,YAAI,KAAK1D,KAAL,CAAWC,aAAX,CAAyBiB,QAAzB,CAAkCF,QAAlC,CAAJ,EAAiD;AAC/C,iBAAOnB,UAAP;AACD,SAFD,MAEO,IAAI3C,OAAO,IAAIA,OAAO,CAACyH,MAAvB,EAA+B;AACpC,iBAAOzH,OAAO,CAACyH,MAARzH,CAAewG,CAAfxG,CAAP;AACD,SAFM,MAEA;AACL,iBAAOU,oBAAoB,CAAC8F,CAAD,CAA3B;AACD;AACF,OAVYL,CAAf;AAYAlD,MAAAA,kBAAkB,CAACmE,UAAnBnE,CAA8B,E,GACzBjD,OADyB;AAE5ByH,QAAAA;AAF4B,OAA9BxE;AAIAA,MAAAA,kBAAkB,CAACoC,IAAnBpC;AACD,KArNI;;AAAA,SAsNG4E,QAtNH,GAsNW,MAAS;AACvB,YAAM;AAAE5E,QAAAA;AAAF,UAAyB,KAAKC,KAApC;AACAD,MAAAA,kBAAkB,CAACoC,IAAnBpC;AACD,KAzNI;;;AAAuD;;MAoPjDiF,oB,SAA6B/F,KAAK,CAACU,S,CAAS;AACvDiF,EAAAA,iBAAiB,GAAG,CAAE;;AAEtBC,EAAAA,oBAAoB,GAAG,CAAE;;AACzBI,EAAAA,qBAAqB,GAAG;AACtB,WAAO,KAAP;AACD;;AACD1F,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEpD,MAAAA,MAAF;AAAU4D,MAAAA,kBAAV;AAA8BqE,MAAAA;AAA9B,QAAuD,KAAKpE,KAAlE;AACA,WAAA,aAAA,KAAA,CAAA,aAAA,CACGV,eADH,EACkB;AACdC,MAAAA,MAAM,EAAGS,KAAH,IAAa;AACjB,eAAA,aAAA,KAAA,CAAA,aAAA,CACGN,yBADH,EAC4B,MAAA,CAAA,MAAA,CAAA,EAAA,EACpBM,KADoB,EACf;AACT7D,UAAAA,MAAM,EAAEA,MADC;AAET4D,UAAAA,kBAAkB,EAAEA,kBAFX;AAGTqE,UAAAA,oBAAoB,EAAEA;AAHb,SADe,CAD5B,CAAA;AAQD;AAVa,KADlB,CAAA;AAcD;;AAvBsD;;MCrP5Cc,iB,SAA0BjG,KAAK,CAACU,S,CAAS;AACpDsF,EAAAA,qBAAqB,GAAG;AACtB,WAAO,KAAP;AACD;;AACDE,EAAAA,cAAc,CAAC,KAAD,EAIS;QAJR;AACbC,MAAAA,WADa;AAEbjJ,MAAAA,MAFa;AAGb4D,MAAAA;AAHa,QAAA,K;;AAKb,QAAA,CAAKqF,WAAL,EAAkB;AAChB;AACD;;AACDjJ,IAAAA,MAAM,CAACoC,aAAPpC,CAAqB8D,MAArB9D,CAA4B2I,kBAA5B3I,CAA+C4D,kBAA/C5D;;AACA,SAAK,IAAIkJ,KAAT,IAAkBD,WAAlB,EAA+B;;;AAC7B,YAAM;AAAEE,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAA0BF,KAAhC;AACAlJ,MAAAA,MAAM,CAACoC,aAAPpC,CAAqB8D,MAArB9D,CAA4B+D,WAA5B/D,CACE4D,kBADF5D,EAEEmJ,SAFFnJ,EAGE,YAAoB;0CAAhBqJ,IAAI,GAAA,IAAA,KAAA,CAAA,IAAA,C,EAAA,IAAA,GAAA,C,EAAA,IAAA,GAAA,I,EAAA,IAAA,E,EAAA;AAAJA,UAAAA,IAAI,CAAA,IAAA,CAAJA,GAAI,SAAA,CAAA,IAAA,CAAJA;;;AACFD,QAAAA,QAAQ,CAAC;AACPE,UAAAA,YAAY,EAAE1F,kBADP;AAEPC,UAAAA,KAAK,EAAA,KAAA,CAAOA,KAFL;AAGP7D,UAAAA,MAAM,EAAEA,MAHD;AAIPuJ,UAAAA,SAAS,EAAEF;AAJJ,SAAD,CAARD;AAMD,OAVHpJ;AAYD;AACF;;AACDoD,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEpD,MAAAA,MAAF;AAAU4D,MAAAA;AAAV,QAAiC,KAAKC,KAA5C;AACA,WAAA,aAAA,KAAA,CAAA,aAAA,CACGV,eADH,EACkB;AACdC,MAAAA,MAAM,EAAGoG,gBAAH,IAAwB;AAC5B,aAAKR,cAAL,CAAoB;AAClBC,UAAAA,WAAW,EAAEO,gBAAgB,CAACP,WAAjBO,IAAgC,IAD3B;AAElBxJ,UAAAA,MAFkB;AAGlB4D,UAAAA;AAHkB,SAApB;AAKA,eAAO,IAAP;AACD;AARa,KADlB,CAAA;AAYD;;AA3CmD;;ACatD,IAAI6F,cAAc,GAAG,CAArB;;MAEaC,W,SAAoB5G,KAAK,CAACU,S,CAAS;AAsG9CiF,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AACJ9H,MAAAA,OADI;AAEJX,MAAAA,MAFI;AAGJqG,MAAAA,SAHI;AAIJnF,MAAAA,kBAJI;AAKJqK,MAAAA,YALI;AAMJC,MAAAA,cANI;AAOJ3K,MAAAA;AAPI,QAQF,KAAKgD,KART;AAUA,UAAM4H,WAAW,GAAG;AAClBpF,MAAAA,SADkB;AAElB1F,MAAAA,OAFkB;AAGlBsK,MAAAA,WAAW,EAAE,KAAKf,UAAL,EAHK;SAIfhJ;AAJe,KAApB;AAMA,UAAM0C,kBAAkB,GAAG,IAAI5D,MAAM,CAACoC,aAAPpC,CAAqB0L,YAAzB,CACzBD,WADyB,CAA3B;AAGA7H,IAAAA,kBAAkB,CAACmE,UAAnBnE,CAA8BjD,OAAO,IAAI,EAAzCiD;;AACA,QAAI/C,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAAC+C,kBAAD,EAAqB5D,MAArB,CAAfa;AACD;;AACD,UAAMoH,oBAAoB,GAAG,IAAIjI,MAAM,CAACoC,aAAPpC,CAAqB2L,SAAzB,CAC3B,KAAK5B,aADsB,CAA7B;AAIA,UAAMJ,mBAAmB,GAAG,KAAKa,WAAL,CAC1B5G,kBAD0B,EAE1BqE,oBAF0B,CAA5B;;AAIA,QAAIsD,YAAJ,EAAkB;AAChBvL,MAAAA,MAAM,CAACoC,aAAPpC,CAAqB4L,WAArB5L,CACE,KAAKiK,WAAL,CAAiB4B,OADnB7L,EAEEuL,YAFFvL;AAID;;AACD,QAAI4J,iBAAiB,GAA6B,IAAlD;;AACA,QAAI4B,cAAJ,EAAoB;AAClB5B,MAAAA,iBAAiB,GAAG,IAAI5J,MAAM,CAACoC,aAAPpC,CAAqB8L,WAAzB,EAApBlC;AACA4B,MAAAA,cAAc,CAAC;AACbO,QAAAA,WAAW,EAAEnC,iBADA;AAEbN,QAAAA,YAAY,EAAE1F,kBAFD;AAGb5D,QAAAA;AAHa,OAAD,CAAdwL;AAKD;;AAED,SAAK5G,QAAL,CAAc;AACZgF,MAAAA,iBADY;AAEZD,MAAAA,mBAAmB,EAAEA,mBAFT;AAGZ1B,MAAAA,oBAAoB,EAAEA,oBAHV;AAIZrE,MAAAA,kBAJY;AAKZiG,MAAAA,OAAO,EAAE;AALG,KAAd;AAOD;;AACDjB,EAAAA,kBAAkB,GAAG;AACnB,QAAA,CAAK,KAAKnF,KAAL,CAAWG,kBAAhB,EAAoC;AACpC,QAAA,CAAK,KAAKH,KAAL,CAAWwE,oBAAhB,EAAsC;AACtC,QAAA,CAAK,KAAKxE,KAAL,CAAWkG,mBAAhB,EAAqC;AAErC,UAAM;AAAEc,MAAAA;AAAF,QAAe,KAAK5G,KAA1B;;AACA,QAAI4G,QAAJ,EAAc;AACZ,WAAK,IAAItD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsD,QAAQ,CAACpG,MAA7B,EAAqC8C,CAAC,IAAI,CAA1C,EAA6C;AAC3C,cAAM;AAAEyD,UAAAA,WAAF;AAAejK,UAAAA,OAAf;AAAwBmK,UAAAA;AAAxB,YAAiDL,QAAQ,CAACtD,CAAD,CAA/D;;AACA,YAAI2D,oBAAoB,IAAI,WAAWA,oBAAvC,EAA6D;AAC3D,eAAKrH,KAAL,CAAWkG,mBAAX,CAA+BxC,CAA/B,EAAkCuD,OAAlC,CAA0C9F,QAA1C,CACEkG,oBAAoB,CAAC,OAAD,CADtB;AAGD;;AACD,aAAKrH,KAAL,CAAWkG,mBAAX,CAA+BxC,CAA/B,EAAkCuD,OAAlC,CAA0C3C,UAA1C,CAAqDpH,OAArD;AACA,aAAK8C,KAAL,CAAWkG,mBAAX,CAA+BxC,CAA/B,EAAkCuD,OAAlC,CAA0CsB,cAA1C,CAAyDpB,WAAzD;AACD;AACF;AACF;;AACD9B,EAAAA,qBAAqB,CAACmD,SAAD,EAAmBC,SAAnB,EAAqC;AACxD,WACE,KAAKzI,KAAL,CAAWoG,OAAX,KAAuBqC,SAAS,CAACrC,OAAjC,IACAoC,SAAS,CAACxB,QAAVwB,KAAuB,KAAKpI,KAAL,CAAW4G,QAFpC;AAID;;AA+DDrH,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEgJ,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiB1L,MAAAA,OAAjB;AAA0B2L,MAAAA;AAA1B,QAAoC,KAAKzI,KAA/C;AAEA,UAAM2I,QAAQ,GAAG;AACfH,MAAAA,MAAM,EAAEA,MAAM,IAAK1L,OAAO,IAAIA,OAAO,CAAC0L,MADvB;AAEfD,MAAAA,KAAK,EAAEA,KAAK,IAAKzL,OAAO,IAAIA,OAAO,CAACyL,KAFrB;SAGZE;AAHY,KAAjB;;AAKA,QAAI,KAAKzI,KAAL,CAAWT,MAAf,EAAuB;AACrB,aAAA,aAAA,KAAA,CAAA,aAAA,CACGqJ,KADH,EACGA;AAAIM,QAAAA,GAAG,EAAE,KAAKhD,aAAd0C;AAA6BH,QAAAA,KAAK,EAAEE;AAApCC,OADH,E,iCAEKA,K,EAAAA;AAAIM,QAAAA,GAAG,EAAE,KAAK9C,WAAdwC;AAA2B9E,QAAAA,EAAE,EAAC;AAA9B8E,O,CAFL,EAGK,KAAK5I,KAAL,CAAWT,MAAX,CAAkB;AACjB+I,QAAAA,WAAW,EAAE,KAAKA,WADD;AAEjBQ,QAAAA,aAAa,EAAE,KAAKA,aAFH;AAGjBK,QAAAA,aAAa,EAAE,KAAKF;AAHH,OAAlB,CAHL,CAAA;AAUD,KAXD,MAWO;AACL,aAAA,aAAA,KAAA,CAAA,aAAA,CACGL,KADH,EACGA;AAAIM,QAAAA,GAAG,EAAE,KAAKhD,aAAd0C;AAA6BH,QAAAA,KAAK,EAAEE;AAApCC,OADH,EAEK,KAAKE,aAAL,CAAkB,KAAA,IAAsB;YAApB;AAAE5B,UAAAA;AAAF,YAAe,K;AAClC,eAAOA,WAAW,CAACkC,eAAZlC,KAAgC,QAAvC;AACD,OAFA,CAFL,EAKK,KAAKoB,WAAL,EALL,EAMK,KAAKQ,aAAL,CAAkB,KAAA,IAAsB;YAApB;AAAE5B,UAAAA;AAAF,YAAe,K;AAClC,eAAOA,WAAW,CAACkC,eAAZlC,KAAgC,QAAvC;AACD,OAFA,CANL,EASK,KAAK+B,aAAL,EATL,CAAA;AAYD;AACF;;;;;;AAtRI,SACLrJ,KADK,GACG;AACNG,MAAAA,kBAAkB,EAAE,IADd;AAENqE,MAAAA,oBAAoB,EAAE,IAFhB;AAGN0B,MAAAA,mBAAmB,EAAE,IAHf;AAINC,MAAAA,iBAAiB,EAAE,IAJb;AAKNC,MAAAA,OAAO,EAAE;AALH,KADH;AAAA,SAQLC,OARK,GAQoB,IARpB;AAAA,SASGC,aATH,GASgB,aAAoCjH,KAAK,CAACkH,SAANlH,EATpD;AAAA,SAUGmH,WAVH,GAUc,aAAoCnH,KAAK,CAACkH,SAANlH,EAVlD;;AAAA,SAWGoH,UAXH,GAWa,MAAS;AACzB,YAAM;AAAEJ,QAAAA,OAAF;AAAWK,QAAAA;AAAX,UAAwB,KAAKtG,KAAnC;AACA,UAAIuG,eAAJ;;AACA,UAAA,CAAKN,OAAL,IAAY,CAAKK,QAAjB,EAA2B;AACzB,YAAA,CAAK,KAAKL,OAAV,EAAmB;AACjBM,UAAAA,eAAe,GAAGhJ,gBAAgB,EAAlCgJ;AACD,SAFD,MAEO;AACLA,UAAAA,eAAe,GAAG,KAAKN,OAAvBM;AACD;AACF,OAND,MAMO,IAAIN,OAAO,IAAA,CAAKK,QAAhB,EAA0B;AAC/BC,QAAAA,eAAe,GAAGN,OAAlBM;AACD,OAFM,MAEA,IAAID,QAAQ,IAAA,CAAKL,OAAjB,EAA0B;AAC/BM,QAAAA,eAAe,GAAGD,QAAlBC;AACD,OAFM,MAEA;AACLA,QAAAA,eAAe,GAAGN,OAAlBM;AACD;;AACD,WAAKN,OAAL,GAAeM,eAAf;AACA,aAAO,KAAKN,OAAZ;AACD,KA7BI;;AAAA,SA8BGO,YA9BH,GA8Be,CAAI1C,EAAJ,EAA4B2C,KAA5B,KAA8C;AAChEb,MAAAA,cAAc,IAAI,CAAlBA;AACA,UAAIc,SAAJ;;AACA,UAAI,OAAO5C,EAAP,KAAc,WAAlB,EAA+B;AAC7B4C,QAAAA,SAAS,GAAI,uBAA+Bd,MAA/B,CAAsBa,KAAtB,EAA4B,GAA5B,EAA8C,MAA9C,CAA+Bb,cAA/B,CAAbc;AACD,OAFD,MAEO;AACLA,QAAAA,SAAS,GAAG5C,EAAZ4C;AACD;;AACD,aAAOA,SAAP;AACD,KAvCI;;AAAA,SAyCLC,WAzCK,GAyCM,CACT5G,kBADS,EAETqE,oBAFS,KAGN;AACH,YAAM;AAAEjI,QAAAA,MAAF;AAAUyK,QAAAA;AAAV,UAAuB,KAAK5G,KAAlC;AAEA,YAAM8F,mBAAmB,GAAA,CAAIc,QAAJ,GACrB,IADqB,GAErBA,QAAQ,CAACnC,GAATmC,CAAY,CAAEC,OAAF,EAAWvD,CAAX,KAAiB;AAC3B,cAAM;AACJoD,UAAAA,SAAS,EAAEI,cADP;AAEJC,UAAAA,WAFI;AAGJjK,UAAAA,OAAO,EAAEkK,cAHL;AAIJC,UAAAA;AAJI,YAKFJ,OALJ;AAMA,cAAMH,SAAS,GAAG,KAAKF,YAAL,CAAkBM,cAAlB,EAAkCxD,CAAlC,CAAlB;AACA,eAAO;AACL4D,UAAAA,WAAW,EAAEL,OADR;AAELA,UAAAA,OAAO,EAAE,IAAI1K,MAAM,CAACoC,aAAPpC,CAAqBgL,cAAzB,CAAwC;AAC/CC,YAAAA,WAAW,EAAEV,SADkC;AAE/CK,YAAAA,WAF+C;AAG/CjK,YAAAA,OAAO,EAAEkK,cAHsC;eAI5CC;AAJ4C,WAAxC;AAFJ,SAAP;AASD,OAjBDL,CAFJ;;AAoBA,UAAA,CAAKd,mBAAL,EAA0B;AACxB,eAAO,IAAP;AACD;;AACD1B,MAAAA,oBAAoB,CAACiD,IAArBjD,CACE0B,mBAAmB,CAACrB,GAApBqB,CAAuB,KAAA,IAAkBe;YAAhB;AAAEA,UAAAA;AAAF,YAAW,K;eAAKA,O;AAAO,OAAhDf,CADF1B,EAEErE,kBAFFqE;;AAIA,WAAK,IAAIkD,YAAT,IAAyBxB,mBAAzB,EAA8C;AAC5C,cAAM;AAAEe,UAAAA,OAAF;AAAWK,UAAAA;AAAX,YAA2BI,YAAjC;AACA,cAAM;AAAEC,UAAAA,aAAa,GAAG;AAAlB,YAAyBL,WAA/B;;AACA,aAAK,IAAI7B,KAAT,IAAkBkC,aAAlB,EAAiC;;;AAC/B,gBAAM;AAAEhC,YAAAA,QAAF;AAAYD,YAAAA;AAAZ,cAA0BD,KAAhC;AACAlJ,UAAAA,MAAM,CAACoC,aAAPpC,CAAqB8D,MAArB9D,CAA4BqL,cAA5BrL,CACE0K,OADF1K,EAEEmJ,SAFFnJ,EAGEoJ,QAHFpJ;AAKAA,UAAAA,MAAM,CAACoC,aAAPpC,CAAqB8D,MAArB9D,CAA4B+D,WAA5B/D,CACE0K,OADF1K,EAEEmJ,SAFFnJ,EAGE,YAAoB;8CAAhBqJ,IAAI,GAAA,IAAA,KAAA,CAAA,IAAA,C,EAAA,IAAA,GAAA,C,EAAA,IAAA,GAAA,I,EAAA,IAAA,E,EAAA;AAAJA,cAAAA,IAAI,CAAA,IAAA,CAAJA,GAAI,SAAA,CAAA,IAAA,CAAJA;;;AACFD,YAAAA,QAAQ,CAAC;AACPE,cAAAA,YAAY,EAAE1F,kBADP;AAEP0H,cAAAA,cAAc,EAAEZ,OAFT;AAGP7G,cAAAA,KAAK,EAAA,KAAA,CAAOA,KAHL;AAIP7D,cAAAA,MAAM,EAAEA,MAJD;AAKPuJ,cAAAA,SAAS,EAAEF;AALJ,aAAD,CAARD;AAOD,WAXHpJ;AAaD;AACF;;AACD,aAAO2J,mBAAP;AACD,KApGI;;AAAA,SAuLLwC,WAvLK,GAuLM,MAAS;AAClB,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA,MAAT;AAAiB1L,QAAAA,OAAjB;AAA0B2L,QAAAA,KAA1B;AAAiCC,QAAAA,SAAjC;AAA4CtL,QAAAA,SAA5C;AAAuDjB,QAAAA;AAAvD,UACJ,KAAK6D,KADP;AAGA,YAAM2I,QAAQ,GAAG;AACfH,QAAAA,MAAM,EAAEA,MAAM,IAAK1L,OAAO,IAAIA,OAAO,CAAC0L,MADvB;AAEfD,QAAAA,KAAK,EAAEA,KAAK,IAAKzL,OAAO,IAAIA,OAAO,CAACyL,KAFrB;WAGZE;AAHY,OAAjB;AAKA,aAAA,aAAA,KAAA,CAAA,aAAA,CACGG,KADH,EACGA,MAAAA,CAAAA,MAAAA,CAAAA;AACC9E,QAAAA,EAAE,EAAE,KAAKuC,UAAL,EADLuC;AAECH,QAAAA,KAAK,EAAEE,QAFRC;AAGCF,QAAAA,SAAS,EAAEA;AAHZE,OAAAA,EAIKxL,SAJLwL,CADH,EAOK,KAAKhJ,KAAL,CAAWoG,OAAX,IAAsB,KAAKpG,KAAL,CAAWG,kBAAX,KAAkC,IAAxD,GAA4D,aAAA,KAAA,CAAA,aAAA,CAC1Dd,KAAK,CAAC4J,QADoD,EAC5C,IAD4C,EAC5C,aAAA,KAAA,CAAA,aAAA,CACZ7D,oBADY,EACQ;AACnBjF,QAAAA,kBAAkB,EAAE,KAAKH,KAAL,CAAWG,kBADZ;AAEnB5D,QAAAA,MAAM,EAAEA,MAFW;AAGnBiI,QAAAA,oBAAoB,EAAE,KAAKxE,KAAL,CAAWwE;AAHd,OADR,CAD4C,E,iCAOxDc,iB,EAAiB;AAChBnF,QAAAA,kBAAkB,EAAE,KAAKH,KAAL,CAAWG,kBADf;AAEhB5D,QAAAA,MAAM,EAAEA;AAFQ,O,CAPuC,CAA5D,GAYG,IAnBR,CAAA;AAsBD,KAtNI;;AAAA,SAuNL2M,aAvNK,GAuNW,YAQX;UAPH9H,MAAM,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,KAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,KAAA,IAMA;eAAA,I;AAAI,O;AAEV,aAAA,MAAA,CAAYpB,KAAZ,CAAkBoG,OAAlB,IAAyB,MAAA,CAASpG,KAAT,CAAekG,mBAAf,KAAuC,IAAhE,GAAoE,aAAA,KAAA,CAAA,aAAA,CACjE7G,KAAK,CAAC4J,QAD2D,EACnD,IADmD,EACnD,MAAA,CACPjJ,KADO,CACDkG,mBADC,CAEV9E,MAFU,CAEJ,KAAA,IAA+B;YAA7B;AAAEkG,UAAAA,WAAF;AAAeL,UAAAA;AAAf,YAAwB,K;AAC/B,eAAO7F,MAAM,CAAC;AAAE6F,UAAAA,OAAF;AAAWK,UAAAA;AAAX,SAAD,CAAb;AACD,OAJU,EAKVzC,GALU,CAKP,KAAA,IAA+B;YAA7B;AAAEoC,UAAAA,OAAF;AAAWK,UAAAA;AAAX,YAAwB,K;AAC5B,eAAA,aAAA,KAAA,CAAA,aAAA,CACG0B,KADH,EACGA;AACCG,UAAAA,GAAG,EAAElC,OAAO,CAACmC,cAARnC,EADN+B;AAEC9E,UAAAA,EAAE,EAAE+C,OAAO,CAACmC,cAARnC;AAFL+B,SADH,CAAA;AAMD,OAZU,CADmD,CAApE,GAeI,IAfJ;AAgBD,KAhPI;;AAAA,SAiPLK,aAjPK,GAiPQ,MAAS;AACpB,UAAA,CAAK,KAAKjJ,KAAL,CAAW0H,YAAhB,EAA8B,OAAO,IAAP;AAC9B,aAAA,aAAA,KAAA,CAAA,aAAA,CAAQkB,KAAR,EAAQA;AAAIM,QAAAA,GAAG,EAAE,KAAK9C;AAAdwC,OAAR,CAAA;AACD,KApPI;;;AAAyC;;MC5BnCS,O,SAAcpK,KAAK,CAACU,S,CAAS;AAaxCJ,EAAAA,MAAM,GAAG;AACP,UAAM;AACJ3D,MAAAA,aADI;AAEJD,MAAAA,aAFI;AAGJD,MAAAA,YAHI;AAIJG,MAAAA,UAJI;AAKJ4N,MAAAA,MALI;AAMJC,MAAAA;AANI,QAOF,KAAK1J,KAPT;AAQA,WAAA,aAAA,KAAA,CAAA,aAAA,CACGb,eADH,EACkB;AAACE,MAAAA,KAAK,EAAE,KAAKW;AAAb,KADlB,EAEK,KAAKJ,KAAL,CAAW2J,aAAX,KAA6B,OAA7B,IAAwC,KAAK3J,KAAL,CAAWzD,MAAX,KAAsB,IAA9D,GAAkE,aAAA,KAAA,CAAA,aAAA,CAChE0J,WADgE,EACrD,MAAA,CAAA,MAAA,CAAA,EAAA,EACL,KAAK7F,KADA,EACK;AACf7D,MAAAA,MAAM,EAAE,KAAKyD,KAAL,CAAWzD;AADJ,KADL,CADqD,CAAlE,GAKG,KAAKyD,KAAL,CAAW2J,aAAX,KAA6B,SAA7B,IAA0CG,YAA1C,GACFA,YADE,GAGFD,MAVN,EAUY,aAAA,KAAA,CAAA,aAAA,CAEP/M,gBAFO,EAES;AACfd,MAAAA,aAAa,EAAEA,aADA;AAEfD,MAAAA,aAAa,EAAEA,aAFA;AAGfD,MAAAA,YAAY,EAAEA,YAHC;AAIfG,MAAAA,UAAU,EAAEA,UAJG;AAKfnB,MAAAA,MAAM,EAAE,KAAKA,MALE;AAMfC,MAAAA,OAAO,EAAE,KAAKA;AANC,KAFT,CAVZ,CAAA;AAsBD;;AAEDiK,EAAAA,iBAAiB,GAAG;AAClB,SAAK0E,UAAL,GAAkB,IAAlB;AACD;;AAEDzE,EAAAA,oBAAoB,GAAG;AACrB,SAAKyE,UAAL,GAAkB,KAAlB;AACD;;AA0CDK,EAAAA,aAAa,CAACxN,MAAD,EAAoB;AAC/B,UAAM;AAAEyK,MAAAA,QAAF;AAAYc,MAAAA,YAAZ;AAA0BC,MAAAA;AAA1B,QAA6C,KAAK3H,KAAxD;AAEA,WACE7D,MAAM,IACNA,MAAM,CAACoC,aADPpC,IAEAA,MAAM,CAACoC,aAAPpC,CAAqB0L,YAFrB1L,IAGAA,MAAM,CAACoC,aAAPpC,CAAqB2L,SAHrB3L,KAG8B,CAC5ByK,QAD4B,IAChBzK,MAAM,CAACoC,aAAPpC,CAAqB0L,YAJnC1L,MAI+C,CAC7CwL,cAD6C,IAC3BxL,MAAM,CAACoC,aAAPpC,CAAqB8L,WALzC9L,MAKoD,CAClDuL,YADkD,IAClCvL,MAAM,CAACoC,aAAPpC,CAAqB4L,WANvC5L,CADF;AASD;;;;AA1GI,SAILmN,UAJK,GAIQ,KAJR;AAAA,SAML1J,KANK,GAMG;AACN2J,MAAAA,aAAa,EAAE,SADT;AAENpN,MAAAA,MAAM,EAAE;AAFF,KANH;;AAAA,SAsDLzB,MAtDK,GAsDKyB,OAAJ,IAA0B;AAC9B,UAAI,KAAK6D,KAAL,CAAWtF,MAAf,EAAuB;AACrB,aAAKsF,KAAL,CAAWtF,MAAX,CAAkByB,OAAlB;AACD;;AACD,UAAI,KAAKwN,aAAL,CAAmBxN,OAAnB,CAAJ,EAAgC;AAC9B,aAAKyN,SAAL,CAAezN,OAAf;AACD,OAFD,MAEO;;AAEL,cAAM2H,EAAE,GAAG+F,WAAW,CAAA,MAAO;AAC3B,gBAAM1N,MAAM,GACVC,MAAM,CAGND,MAJF;;AAMA,cAAI,KAAKmN,UAAT,EAAqB;AACnB,gBAAInN,MAAM,IAAI,KAAKwN,aAAL,CAAmBxN,MAAnB,CAAd,EAA0C;AACxC2N,cAAAA,aAAa,CAAChG,EAAD,CAAbgG;AACA,mBAAKF,SAAL,CAAezN,MAAf;AACD;AACF,WALD,MAKO;AACL2N,YAAAA,aAAa,CAAChG,EAAD,CAAbgG;AACD;AACF,SAfqB,EAenB,IAfmB,CAAtB;AAgBD;AACF,KA/EI;;AAAA,SAiFLF,SAjFK,GAiFQzN,MAAJ,IAA0B;AACjC,WAAK4E,QAAL,CAAc;AACZwI,QAAAA,aAAa,EAAE,OADH;AAEZpN,QAAAA;AAFY,OAAd;AAID,KAtFI;;AAAA,SAwFLxB,OAxFK,GAwFE,MAAS;AACd,WAAKoG,QAAL,CAAc;AACZwI,QAAAA,aAAa,EAAE;AADH,OAAd;AAGD,KA5FI;;;AAAmC;;AAA7BF,OAAK,CAWTG,YAXIH,GAWWzM,iBAXXyM;;;WCgQDU,6B,EAA6B;AAA7BA,EAAAA,6BAA6B,CACvCC,YADuC,CAA7BD,GACVC,YADUD;AAAAA,EAAAA,6BAA6B,CAEvCE,gBAFuC,CAA7BF,GAEVE,gBAFUF;AAAAA,EAAAA,6BAA6B,CAGvCG,WAHuC,CAA7BH,GAGVG,WAHUH;AAAAA,EAAAA,6BAA6B,CAIvCI,UAJuC,CAA7BJ,GAIVI,UAJUJ;AAAAA,EAAAA,6BAA6B,CAKvCK,UALuC,CAA7BL,GAKVK,UALUL;AAAAA,EAAAA,6BAA6B,CAMvCM,OANuC,CAA7BN,GAMVM,OANUN;AAAAA,EAAAA,6BAA6B,CAOvCtB,OAPuC,CAA7BsB,GAOVtB,OAPUsB;AAAAA,EAAAA,6BAA6B,CAQvCO,SARuC,CAA7BP,GAQVO,SARUP;AAAAA,EAAAA,6BAA6B,CASvCQ,QATuC,CAA7BR,GASVQ,QATUR;GAAAA,6BAA6B,KAA7BA,6BAA6B,GAAA,EAAA,C;;ACxQzC,IAAA,KAAA,GAAeV,OAAf","sourcesContent":["import { useEffect } from \"react\";\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nexport function useLoadScript(\n  src: string,\n  onLoad?: () => void,\n  onError?: () => void\n) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    }\n\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector<HTMLScriptElement>(\n      `script[src=\"${src}\"]`\n    );\n\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad?.();\n      return;\n    }\n\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad?.();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n","import { useState, useEffect } from \"react\";\nimport { GoogleChartVersion, GoogleChartPackages, GoogleViz } from \"../types\";\nimport { useLoadScript } from \"./useLoadScript\";\n\nexport interface IUseLoadGoogleChartsParams {\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nexport function useLoadGoogleCharts({\n  chartVersion = \"current\",\n  chartPackages = [\"corechart\", \"controls\"],\n  chartLanguage = \"en\",\n  mapsApiKey,\n}: IUseLoadGoogleChartsParams) {\n  const [googleCharts, setGoogleCharts] = useState<GoogleViz | null>(null);\n  const [failed, setFailed] = useState(false);\n\n  useLoadScript(\n    \"https://www.gstatic.com/charts/loader.js\",\n    () => {\n      // @ts-expect-error Getting object from global namespace.\n      const google = window?.google as GoogleViz;\n\n      if (!google) {\n        return;\n      }\n\n      google.charts.load(chartVersion, {\n        packages: chartPackages,\n        language: chartLanguage,\n        mapsApiKey,\n      });\n      google.charts.setOnLoadCallback(() => {\n        setGoogleCharts(google);\n      });\n    },\n    () => {\n      setFailed(true);\n    }\n  );\n\n  return [googleCharts, failed] as const;\n}\n\nexport interface ILoadGoogleChartsProps extends IUseLoadGoogleChartsParams {\n  onLoad?(googleCharts: GoogleViz): void;\n  onError?(): void;\n}\n\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nexport function LoadGoogleCharts({\n  onLoad,\n  onError,\n  ...params\n}: ILoadGoogleChartsProps) {\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n\n  return null;\n}\n","import { ReactGoogleChartProps } from \"./types\";\n\nexport const chartDefaultProps: Partial<ReactGoogleChartProps> = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1,\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n};\n","let uniqueID = 0;\nexport const generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n","export const DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\"\n];\n","import { GoogleViz } from \"./types\";\n\nexport const loadDataTableFromSpreadSheet = async (\n  googleViz: GoogleViz,\n  spreadSheetUrl: string,\n  urlParams: {\n    headers?: number;\n    gid?: any;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  } = {}\n) => {\n  return new Promise((resolve, reject) => {\n    const headers = `${\n      urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`\n    }`;\n    const queryString = `${\n      urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``\n    }`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${\n      urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"\n    }`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send((response: any) => {\n      if (response.isError()) {\n        reject(\n          `Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`\n        );\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n","import * as React from \"react\";\nimport { chartDefaultProps } from \"./default-props\";\n\nimport { ReactGoogleChartProps } from \"./types\";\nconst { Provider, Consumer } = React.createContext(chartDefaultProps);\n\nexport const ContextProvider = ({\n  children,\n  value,\n}: {\n  children: any;\n  value: ReactGoogleChartProps;\n}) => {\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport const ContextConsumer = ({\n  render,\n}: {\n  render: (context: ReactGoogleChartProps) => JSX.Element | null;\n}) => {\n  return (\n    <Consumer>\n      {(context) => {\n        return render(context as ReactGoogleChartProps);\n      }}\n    </Consumer>\n  );\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  GoogleDataTable,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n} from \"../types\";\nimport { DEFAULT_CHART_COLORS } from \"../constants\";\n\nimport { loadDataTableFromSpreadSheet } from \"../load-data-table-from-spreadsheet\";\nimport { ContextConsumer } from \"../Context\";\n\nconst GRAY_COLOR = \"#CCCCCC\";\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport type GoogleChartDataTableProps = {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  googleChartDashboard: GoogleChartDashboard | null;\n};\ninterface State {\n  hiddenColumns: string[];\n}\nexport class GoogleChartDataTableInner extends React.Component<\n  ReactGoogleChartProps & GoogleChartDataTableProps,\n  State\n> {\n  state = {\n    hiddenColumns: [],\n  } as State;\n\n  private listenToLegendToggle = () => {\n    const { google, googleChartWrapper } = this.props;\n    google.visualization.events.addListener(\n      googleChartWrapper,\n      \"select\",\n      () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (\n          selection.length === 0 ||\n          // We want to listen to when a whole row is selected. This is the case only when row === null\n          selection[0].row ||\n          !dataTable\n        ) {\n          return;\n        }\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [\n              ...state.hiddenColumns.filter((colID) => colID !== columnID),\n            ],\n          }));\n        } else {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID],\n          }));\n        }\n      }\n    );\n  };\n\n  private applyFormatters = (dataTable: GoogleDataTable, formatters: any[]) => {\n    const { google } = this.props;\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\": {\n          const vizFormatter = new google.visualization.ArrowFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"BarFormat\": {\n          const vizFormatter = new google.visualization.BarFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"ColorFormat\": {\n          const vizFormatter = new google.visualization.ColorFormat(\n            formatter.options\n          );\n          const { ranges } = formatter;\n          for (let range of ranges) {\n            vizFormatter.addRange(...range);\n          }\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"DateFormat\": {\n          const vizFormatter = new google.visualization.DateFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"NumberFormat\": {\n          const vizFormatter = new google.visualization.NumberFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"PatternFormat\": {\n          const vizFormatter = new google.visualization.PatternFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n      }\n    }\n  };\n  private getColumnID = (dataTable: GoogleDataTable, columnIndex: number) => {\n    return (\n      dataTable.getColumnId(columnIndex) ||\n      dataTable.getColumnLabel(columnIndex)\n    );\n  };\n  private draw = async ({\n    data,\n    diffdata,\n    rows,\n    columns,\n    options,\n    legend_toggle,\n    legendToggle,\n    chartType,\n    formatters,\n    spreadSheetUrl,\n    spreadSheetQueryParameters,\n  }: ReactGoogleChartProps) => {\n    const { google, googleChartWrapper } = this.props;\n    let dataTable: GoogleDataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(\n        oldData,\n        newData\n      );\n    }\n    if (data !== null) {\n      if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = (await loadDataTableFromSpreadSheet(\n        google,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      )) as GoogleDataTable;\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n    for (let i = 0; i < columnCount; i += 1) {\n      const columnID = this.getColumnID(dataTable, i);\n      if (this.state.hiddenColumns.includes(columnID)) {\n        const previousColumnLabel = dataTable.getColumnLabel(i);\n        const previousColumnID = dataTable.getColumnId(i);\n        const previousColumnType = dataTable.getColumnType(i);\n        dataTable.removeColumn(i);\n        dataTable.addColumn({\n          label: previousColumnLabel,\n          id: previousColumnID,\n          type: previousColumnType,\n        });\n      }\n    }\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    googleChartWrapper.setDataTable(dataTable);\n    googleChartWrapper.draw();\n    if (this.props.googleChartDashboard !== null) {\n      this.props.googleChartDashboard.draw(dataTable);\n    }\n\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumns({ options });\n    }\n    return;\n  };\n  private grayOutHiddenColumns = ({\n    options,\n  }: {\n    options: ReactGoogleChartProps[\"options\"];\n  }) => {\n    const { googleChartWrapper } = this.props;\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({ length: columnCount - 1 }).map(\n      (dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      }\n    );\n    googleChartWrapper.setOptions({\n      ...options,\n      colors,\n    });\n    googleChartWrapper.draw();\n  };\n  private onResize = () => {\n    const { googleChartWrapper } = this.props;\n    googleChartWrapper.draw();\n  };\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n\n  componentWillUnmount() {\n    const { google, googleChartWrapper } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() &&\n        googleChartWrapper.getChart().clearChart();\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n  render() {\n    return null;\n  }\n}\n\nexport class GoogleChartDataTable extends React.Component<GoogleChartDataTableProps> {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    const { google, googleChartWrapper, googleChartDashboard } = this.props;\n    return (\n      <ContextConsumer\n        render={(props) => {\n          return (\n            <GoogleChartDataTableInner\n              {...props}\n              google={google}\n              googleChartWrapper={googleChartWrapper}\n              googleChartDashboard={googleChartDashboard}\n            />\n          );\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  ReactGoogleChartEvent,\n} from \"../types\";\n\nimport { ContextConsumer } from \"../Context\";\n\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport interface Props {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n}\n\nexport interface ListenToEventsArgs {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  chartEvents: ReactGoogleChartEvent[] | null;\n}\n\nexport class GoogleChartEvents extends React.Component<Props> {\n  shouldComponentUpdate() {\n    return false;\n  }\n  listenToEvents({\n    chartEvents,\n    google,\n    googleChartWrapper,\n  }: ListenToEventsArgs) {\n    if (!chartEvents) {\n      return;\n    }\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    for (let event of chartEvents) {\n      const { eventName, callback } = event;\n      google.visualization.events.addListener(\n        googleChartWrapper,\n        eventName,\n        (...args: any[]) => {\n          callback({\n            chartWrapper: googleChartWrapper,\n            props: this.props as any,\n            google: google,\n            eventArgs: args,\n          });\n        }\n      );\n    }\n  }\n  render() {\n    const { google, googleChartWrapper } = this.props;\n    return (\n      <ContextConsumer\n        render={(propsFromContext) => {\n          this.listenToEvents({\n            chartEvents: propsFromContext.chartEvents || null,\n            google,\n            googleChartWrapper,\n          });\n          return null;\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  GoogleChartDashboard,\n  GoogleChartEditor,\n} from \"../types\";\nimport { generateUniqueID } from \"../generate-unique-id\";\nimport { GoogleChartDataTable } from \"./GoogleChartDataTable\";\nimport { GoogleChartEvents } from \"./GoogleChartEvents\";\n\nexport type Props = {\n  google: GoogleViz;\n  graphID?: string | null;\n  graph_id?: string | null;\n  options?: ReactGoogleChartProps[\"options\"];\n  chartWrapperParams?: {};\n  chartType: ReactGoogleChartProps[\"chartType\"];\n  width?: ReactGoogleChartProps[\"width\"];\n  height?: ReactGoogleChartProps[\"height\"];\n  style?: ReactGoogleChartProps[\"style\"];\n  className?: ReactGoogleChartProps[\"className\"];\n  rootProps?: ReactGoogleChartProps[\"rootProps\"];\n} & ReactGoogleChartProps;\n\nexport interface State {\n  googleChartWrapper: GoogleChartWrapper | null;\n  isReady: boolean;\n  googleChartDashboard: GoogleChartDashboard | null;\n  googleChartEditor: GoogleChartEditor | null;\n  googleChartControls:\n    | { control: GoogleChartControl; controlProp: GoogleChartControlProp }[]\n    | null;\n}\n\nlet controlCounter = 0;\n\nexport class GoogleChart extends React.Component<Props, State> {\n  state = {\n    googleChartWrapper: null,\n    googleChartDashboard: null,\n    googleChartControls: null,\n    googleChartEditor: null,\n    isReady: false,\n  } as State;\n  graphID: null | string = null;\n  private dashboard_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private toolbar_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private getGraphID = () => {\n    const { graphID, graph_id } = this.props;\n    let instanceGraphID: string;\n    if (!graphID && !graph_id) {\n      if (!this.graphID) {\n        instanceGraphID = generateUniqueID();\n      } else {\n        instanceGraphID = this.graphID;\n      }\n    } else if (graphID && !graph_id) {\n      instanceGraphID = graphID as string;\n    } else if (graph_id && !graphID) {\n      instanceGraphID = graph_id as string;\n    } else {\n      instanceGraphID = graphID as string;\n    }\n    this.graphID = instanceGraphID;\n    return this.graphID as string;\n  };\n  private getControlID = (id: undefined | string, index: number) => {\n    controlCounter += 1;\n    let controlID: string;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${index}-${controlCounter}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n\n  addControls = (\n    googleChartWrapper: GoogleChartWrapper,\n    googleChartDashboard: GoogleChartDashboard\n  ) => {\n    const { google, controls } = this.props;\n\n    const googleChartControls = !controls\n      ? null\n      : controls.map((control, i) => {\n          const {\n            controlID: controlIDMaybe,\n            controlType,\n            options: controlOptions,\n            controlWrapperParams,\n          } = control;\n          const controlID = this.getControlID(controlIDMaybe, i);\n          return {\n            controlProp: control,\n            control: new google.visualization.ControlWrapper({\n              containerId: controlID,\n              controlType,\n              options: controlOptions,\n              ...controlWrapperParams,\n            }),\n          };\n        });\n    if (!googleChartControls) {\n      return null;\n    }\n    googleChartDashboard.bind(\n      googleChartControls.map(({ control }) => control),\n      googleChartWrapper\n    );\n    for (let chartControl of googleChartControls) {\n      const { control, controlProp } = chartControl;\n      const { controlEvents = [] } = controlProp;\n      for (let event of controlEvents) {\n        const { callback, eventName } = event;\n        google.visualization.events.removeListener(\n          control,\n          eventName,\n          callback\n        );\n        google.visualization.events.addListener(\n          control,\n          eventName,\n          (...args: any[]) => {\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: this.props as any,\n              google: google,\n              eventArgs: args,\n            });\n          }\n        );\n      }\n    }\n    return googleChartControls;\n  };\n\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n    } = this.props;\n\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams,\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(\n      chartConfig\n    );\n    googleChartWrapper.setOptions(options || {});\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n    const googleChartDashboard = new google.visualization.Dashboard(\n      this.dashboard_ref\n    );\n\n    const googleChartControls = this.addControls(\n      googleChartWrapper,\n      googleChartDashboard\n    );\n    if (toolbarItems) {\n      google.visualization.drawToolbar(\n        this.toolbar_ref.current as HTMLDivElement,\n        toolbarItems\n      );\n    }\n    let googleChartEditor: null | GoogleChartEditor = null;\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google,\n      });\n    }\n\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true,\n    });\n  }\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n\n    const { controls } = this.props;\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const { controlType, options, controlWrapperParams } = controls[i];\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(\n            controlWrapperParams[\"state\"]\n          );\n        }\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return (\n      this.state.isReady !== nextState.isReady ||\n      nextProps.controls !== this.props.controls\n    );\n  }\n  renderChart = () => {\n    const { width, height, options, style, className, rootProps, google } =\n      this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    return (\n      <div\n        id={this.getGraphID()}\n        style={divStyle}\n        className={className}\n        {...rootProps}\n      >\n        {this.state.isReady && this.state.googleChartWrapper !== null ? (\n          <React.Fragment>\n            <GoogleChartDataTable\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n              googleChartDashboard={this.state.googleChartDashboard}\n            />\n            <GoogleChartEvents\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n            />\n          </React.Fragment>\n        ) : null}\n      </div>\n    );\n  };\n  renderControl = (\n    filter = ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => true\n  ) => {\n    return this.state.isReady && this.state.googleChartControls !== null ? (\n      <React.Fragment>\n        {this.state.googleChartControls\n          .filter(({ controlProp, control }) => {\n            return filter({ control, controlProp });\n          })\n          .map(({ control, controlProp }) => {\n            return (\n              <div\n                key={control.getContainerId()}\n                id={control.getContainerId()}\n              />\n            );\n          })}\n      </React.Fragment>\n    ) : null;\n  };\n  renderToolBar = () => {\n    if (!this.props.toolbarItems) return null;\n    return <div ref={this.toolbar_ref} />;\n  };\n  render() {\n    const { width, height, options, style } = this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    if (this.props.render) {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          <div ref={this.toolbar_ref} id=\"toolbar\" />\n          {this.props.render({\n            renderChart: this.renderChart,\n            renderControl: this.renderControl,\n            renderToolbar: this.renderToolBar,\n          })}\n        </div>\n      );\n    } else {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition !== \"bottom\";\n          })}\n          {this.renderChart()}\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition === \"bottom\";\n          })}\n          {this.renderToolBar()}\n        </div>\n      );\n    }\n  }\n}\n","import * as React from \"react\";\n\nimport {\n  GoogleViz,\n  ReactGoogleChartProps,\n  ReactGoogleChartState,\n} from \"./types\";\nimport { LoadGoogleCharts } from \"./hooks\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { GoogleChart } from \"./components/GoogleChart\";\nimport { ContextProvider } from \"./Context\";\n\nexport class Chart extends React.Component<\n  ReactGoogleChartProps,\n  ReactGoogleChartState\n> {\n  _isMounted = false;\n\n  state = {\n    loadingStatus: \"loading\" as ReactGoogleChartState[\"loadingStatus\"],\n    google: null as ReactGoogleChartState[\"google\"],\n  };\n\n  static defaultProps = chartDefaultProps;\n\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement,\n    } = this.props;\n    return (\n      <ContextProvider value={this.props as ReactGoogleChartProps}>\n        {this.state.loadingStatus === \"ready\" && this.state.google !== null ? (\n          <GoogleChart\n            {...(this.props as ReactGoogleChartProps)}\n            google={this.state.google}\n          />\n        ) : this.state.loadingStatus === \"errored\" && errorElement ? (\n          errorElement\n        ) : (\n          loader\n        )}\n        <LoadGoogleCharts\n          chartLanguage={chartLanguage}\n          chartPackages={chartPackages}\n          chartVersion={chartVersion}\n          mapsApiKey={mapsApiKey}\n          onLoad={this.onLoad}\n          onError={this.onError}\n        />\n      </ContextProvider>\n    );\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onLoad = (google: GoogleViz) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(google);\n    }\n    if (this.isFullyLoaded(google)) {\n      this.onSuccess(google);\n    } else {\n      // IE11: window.google is not fully set, we have to wait\n      const id = setInterval(() => {\n        const google = (\n          window as Window & {\n            google?: GoogleViz;\n          }\n        ).google;\n\n        if (this._isMounted) {\n          if (google && this.isFullyLoaded(google)) {\n            clearInterval(id);\n            this.onSuccess(google);\n          }\n        } else {\n          clearInterval(id);\n        }\n      }, 1000);\n    }\n  };\n\n  onSuccess = (google: GoogleViz) => {\n    this.setState({\n      loadingStatus: \"ready\",\n      google,\n    });\n  };\n\n  onError = () => {\n    this.setState({\n      loadingStatus: \"errored\",\n    });\n  };\n\n  isFullyLoaded(google: GoogleViz) {\n    const { controls, toolbarItems, getChartEditor } = this.props;\n\n    return (\n      google &&\n      google.visualization &&\n      google.visualization.ChartWrapper &&\n      google.visualization.Dashboard &&\n      (!controls || google.visualization.ChartWrapper) &&\n      (!getChartEditor || google.visualization.ChartEditor) &&\n      (!toolbarItems || google.visualization.drawToolbar)\n    );\n  }\n}\n\nexport default Chart;\n","// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\n\nexport type GoogleVizDrawToolbar = (\n  toolbarContainer: HTMLDivElement,\n  components: GoogleChartToolbarItem[]\n) => any;\n\nexport type GoogleViz = {\n  charts: GoogleChartLoader;\n  visualization: {\n    ChartWrapper: GoogleChartWrapper;\n    ChartEditor: GoogleChartEditor;\n    DataTable: GoogleDataTable;\n    events: GoogleVizEvents;\n    arrayToDataTable: GoogleArrayToDataTable;\n    drawToolbar: GoogleVizDrawToolbar;\n    [otherKeys: string]: any;\n  };\n};\n\nexport type GoogleChartTicks = (number | Date)[];\n\nexport type GoogleChartEditor = {\n  new (): GoogleChartEditor;\n  openDialog: (\n    chartWrapper: GoogleChartWrapper,\n    chartEditorOptions?: { dataSourceInput?: any; [otherKeyMaybe: string]: any }\n  ) => null;\n  getChartWrapper: () => GoogleChartWrapper;\n  setChartWrapper: (chartWrapper: GoogleChartWrapper) => GoogleChartWrapper;\n  closeDialog: () => null;\n};\n\nexport type GoogleChartLoaderOptions = {\n  packages?: GoogleChartPackages[];\n  language?: string;\n  mapsApiKey?: string;\n};\nexport type GoogleChartLoader = {\n  load: (\n    version: GoogleChartVersion,\n    googleChartOptions: GoogleChartLoaderOptions\n  ) => void;\n  setOnLoadCallback: (callback: () => void) => void;\n};\nexport interface ChartWrapperProps {\n  chartType: GoogleChartWrapperChartType;\n  containerId?: string;\n  options?: {\n    width?: number;\n    height?: number;\n    is3D?: boolean;\n    title?: string;\n    backgroundColor: string;\n  };\n  dataTable?: {};\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view?: any[] | {};\n  render?: (props: ChartWrapperProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (\n    props: ChartWrapperProps,\n    chartWrapper: GoogleChartWrapper\n  ) => any;\n}\n\nexport type VizEventsProps = {\n  chartWrapper: GoogleChartWrapper;\n  onReady?: (chartWrapper: GoogleChartWrapper) => any;\n  onError?: (chartWrapper: GoogleChartWrapper) => any;\n  onSelect?: (selection: Array<{ row?: any; column?: any }>) => any;\n  render?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n};\n\n/*\n *\n * <GoogleChartsTypes>\n *\n */\n\n/*\n *\n * Reference + Docs:\n * https://developers.google.com/chart/interactive/docs/reference#constructor_3\n * https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n *\n */\nexport type GoogleChartWrapperChartType =\n  | \"AnnotationChart\"\n  | \"AreaChart\"\n  | \"BarChart\"\n  | \"BubbleChart\"\n  | \"Calendar\"\n  | \"CandlestickChart\"\n  | \"ColumnChart\"\n  | \"ComboChart\"\n  | \"DiffChart\"\n  | \"DonutChart\"\n  | \"Gantt\"\n  | \"Gauge\"\n  | \"GeoChart\"\n  | \"Histogram\"\n  | \"LineChart\"\n  | \"Line\"\n  | \"Bar\"\n  | \"Map\"\n  | \"OrgChart\"\n  | \"PieChart\"\n  | \"Sankey\"\n  | \"ScatterChart\"\n  | \"Scatter\"\n  | \"SteppedAreaChart\"\n  | \"Table\"\n  | \"Timeline\"\n  | \"TreeMap\"\n  | \"WaterfallChart\"\n  | \"WordTree\";\n\n// https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\nexport interface ChartWrapperOptions {\n  chartType: string;\n  containerId: string;\n  options: Partial<{\n    width: number;\n    height: number;\n    is3D: boolean;\n    title: string;\n    backgroundColor: string;\n    hAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    vAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    legend: any;\n    colors: string[];\n    [otherOptionKey: string]: any;\n  }>;\n  dataTable?: GoogleDataTable;\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view: any[] | {};\n  [otherOptionKey: string]: any;\n}\n\nexport type GoogleChartAction = {\n  id: string;\n  text: string;\n  action: (chartWrapper: GoogleChartWrapper) => void;\n};\n\nexport type GoogleChartControlProp = {\n  controlType:\n    | \"CategoryFilter\"\n    | \"ChartRangeFilter\"\n    | \"DateRangeFilter\"\n    | \"NumberRangeFilter\"\n    | \"StringFilter\";\n  options: {};\n  controlWrapperParams?: {};\n  controlID?: string;\n  controlPosition?: \"top\" | \"bottom\";\n  controlEvents?: ReactGoogleChartEvent[];\n};\n\nexport type GoogleChartWrapper = {\n  new (chartWrapperOptions: Partial<ChartWrapperOptions>): GoogleChartWrapper;\n  draw: (chartArgs?: ChartWrapperProps) => any;\n  toJSON: () => string;\n  clone: () => GoogleChartWrapper;\n  getDataSourceUrl: () => string;\n  getDataTable: () => GoogleDataTable | null; // null if datasourceurl set or ref to DataTable\n  getChartType: () => GoogleChartWrapperChartType;\n  getChartName: () => string;\n  getChart: () => {\n    removeAction: (actionID: string) => void;\n    getSelection: () => { row?: any; column?: any }[];\n    setAction: (ChartAction: GoogleChartAction) => void;\n    getImageURI: () => void;\n    clearChart: () => void; // Clears the chart, and releases all of its allocated resources.\n  }; // ref to chart\n  getContainerId: () => string;\n  getQuery: () => string;\n  getRefreshInterval: () => number;\n  getOption: (key: string, opt_default_value?: any) => any; // returns opt_default_value if key not found\n  getOptions: () => {};\n  getSelection: () => { row?: any; column?: any }[];\n  getView: () => {} | any[]; // Same format as toJSON\n\n  setDataSourceUrl: (url: string) => void;\n  setDataTable: (table: any) => void;\n  setChartType: (chartType: GoogleChartWrapperChartType) => void;\n  setChartName: (name: string) => void; // Sets an arbitrary name for the chart. This is not shown anywhere on the chart, unless a custom chart is explicitly designed to use it.\n  setContainerId: (id: string) => void; // Sets the ID of the containing DOM element for the chart.\n  setQuery: (query_string: string) => void; // Sets a query string, if this chart queries a data source. You must also set the data source URL if specifying this value.\n  setRefreshInterval: (interval: number) => void; // Sets the refresh interval for this chart, if it queries a data source. You must also set a data source URL if specifying this value. Zero indicates no refresh.\n  setOption: (key: string, value: any) => void; // \tSets a single chart option value, where key is the option name and value is the value. To unset an option, pass in null for the value. Note that key may be a qualified name, such as 'vAxis.title'.\n  setOptions: (options_obj: Partial<ChartWrapperOptions[\"options\"]>) => void; //\n};\n\nexport type GoogleVizEventName =\n  | \"ready\"\n  | \"error\"\n  | \"select\"\n  | \"animationfinish\"\n  | \"statechange\"\n  | \"ok\"\n  | \"cancel\"\n  | \"animationstart\";\n\nexport type GoogleVizEvents = {\n  addListener: (\n    chartWrapper: GoogleChartWrapper | GoogleChartControl | GoogleChartEditor,\n    name: GoogleVizEventName,\n    onEvent: (chartWrapper: GoogleChartWrapper) => any\n  ) => any;\n  removeListener: (\n    chartWrapper: GoogleChartWrapper,\n    name: GoogleVizEventName,\n    callback: Function\n  ) => any;\n  removeAllListeners: (chartWrapper: GoogleChartWrapper) => any;\n};\n\nexport type GoogleChartPackages =\n  | \"corechart\"\n  | \"charteditor\"\n  | \"controls\"\n  | \"calendar\"\n  | \"gantt\"\n  | \"gauge\"\n  | \"geochart\"\n  | \"map\"\n  | \"orgchart\"\n  | \"sankey\"\n  | \"table\"\n  | \"timeline\"\n  | \"treemap\"\n  | \"wordtree\";\n\nexport type GoogleChartVersion = \"current\" | \"upcoming\";\n\nexport type GoogleDataTableColumnType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"date\"\n  | \"datetime\"\n  | \"timeofday\";\n\n// export type GoogleDataTable = {\n//   addColumn: (type: GoogleDataTableColumnType) => number;\n// };\n\n// Reference https://developers.google.com/chart/interactive/docs/roles\nexport enum GoogleDataTableColumnRoleType {\n  annotation = \"annotation\",\n  annotationText = \"annotationText\",\n  certainty = \"certainty\",\n  emphasis = \"emphasis\",\n  interval = \"interval\",\n  scope = \"scope\",\n  style = \"style\",\n  tooltip = \"tooltip\",\n  domain = \"domain\",\n}\n\nexport type GoogleDataTableColumn =\n  | {\n      type: GoogleDataTableColumnType;\n      label?: string; //  A label for the column.\n      role?: GoogleDataTableColumnRoleType;\n      pattern?: string;\n      p?: {};\n      id?: string;\n    }\n  | string;\n\n// Ref : https://developers.google.com/chart/interactive/docs/reference#dataparam\n\nexport type GoogleDataTableCell =\n  | {\n      v?: any; // The cell value. Type should match DataTableColumn type field\n      f?: string; // A string version of the v value, formatted for display.\n      p?: {};\n    }\n  | string\n  | number\n  | boolean\n  | Date;\n\nexport type GoogleDataTableRow = GoogleDataTableCell[];\n\nexport type GoogleDataTableJS = {\n  cols: GoogleDataTableColumn[];\n  rows: {\n    c: GoogleDataTableRow;\n  }[];\n  p?: {};\n};\n\n// Reference : https://developers.google.com/chart/interactive/docs/reference#DataTable\n\nexport type GoogleDataTableRowFilter = {\n  column: number;\n  value: any;\n  minValue?: any;\n  maxValue?: any;\n};\n\nexport type GoogleDataTableSortColumns =\n  | number\n  | {\n      column: number;\n      desc: boolean;\n    }\n  | number[]\n  | {\n      column: number;\n      desc: boolean;\n    }[];\n\nexport type GoogleDataTable = {\n  // https://developers.google.com/chart/interactive/docs/reference#dataparam\n  new (dataParam: any): GoogleDataTable;\n  addColumn: (column: GoogleDataTableColumn) => number;\n  addRow: (row?: GoogleDataTableRow) => number;\n  addRows: (rows?: GoogleDataTableRow[] | number[] | any[]) => number;\n  clone: () => GoogleDataTable;\n\n  getColumnId: (columnIndex: number) => string;\n  getColumnLabel: (columnIndex: number) => string;\n  getColumnPattern: (columnIndex: number) => string;\n  getColumnProperties: (columnIndex: number) => {};\n  getColumnProperty: (columnIndex: number, name: string) => any;\n  getColumnRange: (columnIndex: number) => {\n    min: number | null;\n    max: number | null;\n  };\n  getColumnRole: (columnIndex: number) => GoogleDataTableColumnRoleType;\n  getColumnType: (columnIndex: number) => GoogleDataTableColumnType;\n  getDistinctValues: (columnIndex: number) => any[];\n  getFilteredRows: (filters: GoogleDataTableRowFilter[]) => number[];\n  getFormattedValue: (rowIndex: number, columnIndex: number) => string;\n  getNumberOfColumns: () => number;\n  getNumberOfRows: () => number;\n  getProperties: (rowIndex: number, columnIndex: number) => {};\n  getProperty: (rowIndex: number, columnIndex: number, name: string) => any;\n  getRowProperties: (rowIndex: number) => {};\n  getRowProperty: (rowIndex: number, name: string) => any;\n  getSortedRows: (sortColumns: GoogleDataTableSortColumns) => number[];\n  getTableProperties: () => {};\n  getTableProperty: (name: string) => any;\n  getValue: (\n    rowIndex: number,\n    columnIndex: number\n  ) => boolean | string | number | Date | number[] | null;\n  insertColumn: (\n    columnIndex: number,\n    type: GoogleDataTableColumnType,\n    label?: string,\n    id?: string\n  ) => void;\n  insertRows: (\n    rowIndex: number,\n    numberOrArray: GoogleDataTableRow[] | number\n  ) => void;\n  removeColumn: (columnIndex: number) => void;\n  removeColumns: (columnIndex: number, numberOfColumns: number) => void;\n  removeRow: (rowIndex: number) => void;\n  removeRows: (rowIndex: number, numberOfColumns: number) => void;\n  setCell: (\n    rowIndex: number,\n    columnIndex: number,\n    value?: any,\n    formattedValue?: string,\n    properties?: {}\n  ) => {};\n  setColumnLabel: (columnIndex: number, label: string) => void;\n  setColumnProperty: (columnIndex: number, name: string, value: any) => void;\n  setColumnProperties: (columnIndex: number, properties: {} | null) => void;\n  setFormattedValue: (\n    rowIndex: number,\n    columnIndex: number,\n    formattedValue: string\n  ) => void;\n  setProperty: (\n    rowIndex: number,\n    columnIndex: number,\n    name: string,\n    value: any\n  ) => void;\n  setProperties: (\n    rowIndex: number,\n    columnIndex: number,\n    properties: {} | null\n  ) => void;\n\n  setRowProperty: (rowIndex: number, name: string, value: any) => void;\n  setRowProperties: (rowIndex: number, properties: {} | null) => void;\n  setTableProperties: (properties: {} | null) => void;\n  setValue: (rowIndex: number, columnIndex: number, value: string) => void;\n  sort: (sortColumns: GoogleDataTableSortColumns) => void;\n  toJSON: () => string; // GoogleDataTableJS\n};\n\nexport type GoogleArrayToDataTable = (\n  data: any[][],\n  isFirstRowLabels?: boolean\n) => GoogleDataTable;\n\nexport type GoogleChartOptions = {\n  width?: number;\n  height?: number;\n  is3D?: boolean;\n  backgroundColor: string;\n\n  title?: string;\n  hAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  vAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  bubble?: {};\n  pieHole?: number;\n  redFrom?: number;\n  redTo?: number;\n  yellowFrom?: number;\n  yellowTo?: number;\n  minorTicks?: number;\n  legend?:\n    | string\n    | {\n        position?: string;\n        maxLines?: number;\n        [otherOptionKey: string]: any;\n      };\n  curveType?: string;\n  showTooltip?: boolean;\n  showInfoWindow?: boolean;\n  allowHtml?: boolean;\n  isStacked?: string | boolean;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  headerHeight?: number;\n  fontColor?: string;\n  showScale?: boolean;\n  bar?: { groupWidth?: string }; // Remove space between bars.\n  candlestick?: {\n    fallingColor?: { strokeWidth?: number; fill?: string }; // red\n    risingColor?: { strokeWidth?: number; fill?: string }; // green\n    [otherOptionKey: string]: any;\n  };\n  wordtree?: {\n    format?: string;\n    word?: string;\n    [otherOptionKey: string]: any;\n  };\n  [otherOptionKey: string]: any;\n};\n\n/*\n *\n * </GoogleChartsTypes>\n *\n */\n\nexport type WindowWithMaybeGoogle = Window & { google?: any };\n\nexport type ReactGoogleChartEvent = {\n  eventName: GoogleVizEventName;\n  callback: (eventCallbackArgs: {\n    chartWrapper: GoogleChartWrapper;\n    controlWrapper?: GoogleChartControl;\n    props: ReactGoogleChartProps;\n    google: GoogleViz;\n    eventArgs: any;\n  }) => void;\n};\n\nexport type GoogleChartToolbarItem = {\n  type: \"igoogle\" | \"html\" | \"csv\" | \"htmlcode\";\n  datasource: string;\n  gadget?: string;\n  userPrefs?: {\n    \"3d\": number;\n    [otherKeyMaybe: string]: any;\n  };\n};\n\nexport type ReactGoogleChartProps = {\n  height?: string | number;\n  width?: string | number;\n  graphID?: string;\n  chartType: GoogleChartWrapperChartType;\n  diffdata?: {\n    old: any;\n    new: any;\n  };\n  options?: ChartWrapperOptions[\"options\"];\n  loader?: JSX.Element;\n  errorElement?: JSX.Element;\n  data?: any[] | {};\n  rows?: GoogleDataTableRow[];\n  columns?: GoogleDataTableColumn[];\n  chartActions?: GoogleChartAction[];\n  chartEvents?: ReactGoogleChartEvent[];\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n  graph_id?: string;\n  legendToggle?: boolean;\n  legend_toggle?: boolean;\n  onLoad?: (google: GoogleViz) => void;\n  getChartWrapper?: (\n    chartWrapper: GoogleChartWrapper,\n    google: GoogleViz\n  ) => void;\n  getChartEditor?: (args: {\n    chartEditor: GoogleChartEditor;\n    chartWrapper: GoogleChartWrapper;\n    google: GoogleViz;\n  }) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  formatters?: {\n    column: number | number[];\n    type:\n      | \"ArrowFormat\"\n      | \"BarFormat\"\n      | \"ColorFormat\"\n      | \"DateFormat\"\n      | \"NumberFormat\"\n      | \"PatternFormat\";\n    options?: {};\n  }[];\n  spreadSheetUrl?: string;\n  spreadSheetQueryParameters?: {\n    headers: number;\n    gid?: number | string;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  };\n  rootProps?: any;\n  controls?: GoogleChartControlProp[];\n  render?: ReactGoogleChartDashboardRender;\n  //https://developers.google.com/chart/interactive/docs/gallery/toolbar#example_1\n  toolbarItems?: GoogleChartToolbarItem[];\n  toolbarID?: string;\n  chartWrapperParams?: any;\n};\n\nexport type GoogleChartDashboard = {\n  draw: (data: GoogleDataTable) => void;\n  bind: (\n    controlWrapperOrWrappers: GoogleChartControl | GoogleChartControl[],\n    chartWrapper: GoogleChartWrapper\n  ) => void;\n};\n\nexport type ReactGoogleChartDashboardRender = ({\n  renderControl,\n  renderChart,\n  renderToolbar,\n}: {\n  renderControl: (\n    filter: ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => boolean\n  ) => any;\n  renderChart: () => any;\n  renderToolbar: () => any;\n}) => any;\nexport type GoogleChartControlOptions = any;\nexport type GoogleChartControl = {\n  getContainerId: () => string;\n  getOptions: () => GoogleChartControlOptions;\n  getState: () => any;\n  setState: (state: any) => void;\n  setOptions: (options: GoogleChartControlOptions) => void;\n  setControlType: (controlType: string) => void;\n};\n\nexport type ReactGoogleChartState = {\n  loadingStatus: \"loading\" | \"errored\" | \"ready\";\n  google: null | GoogleViz;\n  // hiddenColumns: string[];\n};\n\nexport type ReactGoogleChartContext = {\n  data: ReactGoogleChartProps[\"data\"];\n  rows: ReactGoogleChartProps[\"rows\"] | null;\n  columns: ReactGoogleChartProps[\"columns\"] | null;\n  diffdata: ReactGoogleChartProps[\"diffdata\"] | null;\n  options: ReactGoogleChartProps[\"options\"] | null;\n  legend_toggle: ReactGoogleChartProps[\"legend_toggle\"] | null;\n  legendToggle: ReactGoogleChartProps[\"legendToggle\"] | null;\n  chartType: ReactGoogleChartProps[\"chartType\"] | null;\n  formatters: ReactGoogleChartProps[\"formatters\"] | null;\n  spreadSheetUrl: ReactGoogleChartProps[\"spreadSheetUrl\"] | null;\n  spreadSheetQueryParameters:\n    | ReactGoogleChartProps[\"spreadSheetQueryParameters\"]\n    | null;\n};\n","import { Chart } from \"./ReactGoogleCharts\";\n\nexport * from \"./types\";\nexport { Chart };\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}