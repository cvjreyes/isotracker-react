{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { arrayEach, arrayFilter, arrayReduce, arrayMap } from \"../../helpers/array.mjs\";\nimport { cancelAnimationFrame, requestAnimationFrame } from \"../../helpers/feature.mjs\";\nimport GhostTable from \"../../utils/ghostTable.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { isObject, hasOwnProperty } from \"../../helpers/object.mjs\";\nimport { valueAccordingPercent, rangeEach } from \"../../helpers/number.mjs\";\nimport SamplesGenerator from \"../../utils/samplesGenerator.mjs\";\nimport { isPercentValue } from \"../../helpers/string.mjs\";\nimport { ViewportColumnsCalculator } from \"../../3rdparty/walkontable/src/index.mjs\";\nimport { PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nHooks.getSingleton().register('modifyAutoColumnSizeSeed');\nexport var PLUGIN_KEY = 'autoColumnSize';\nexport var PLUGIN_PRIORITY = 10;\nvar privatePool = new WeakMap();\nvar COLUMN_SIZE_MAP_NAME = 'autoColumnSize';\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin AutoColumnSize\n * @class AutoColumnSize\n *\n * @description\n * This plugin allows to set column widths based on their widest cells.\n *\n * By default, the plugin is declared as `undefined`, which makes it enabled (same as if it was declared as `true`).\n * Enabling this plugin may decrease the overall table performance, as it needs to calculate the widths of all cells to\n * resize the columns accordingly.\n * If you experience problems with the performance, try turning this feature off and declaring the column widths manually.\n *\n * Column width calculations are divided into sync and async part. Each of this parts has their own advantages and\n * disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous\n * operations don't block the browser UI.\n *\n * To configure the sync/async distribution, you can pass an absolute value (number of columns) or a percentage value to a config object:\n * ```js\n * // as a number (300 columns in sync, rest async)\n * autoColumnSize: {syncLimit: 300},.\n *\n * // as a string (percent)\n * autoColumnSize: {syncLimit: '40%'},\n * ```\n *\n * The plugin uses {@link GhostTable} and {@link SamplesGenerator} for calculations.\n * First, {@link SamplesGenerator} prepares samples of data with its coordinates.\n * Next {@link GhostTable} uses coordinates to get cells' renderers and append all to the DOM through DocumentFragment.\n *\n * Sampling accepts additional options:\n * - *samplingRatio* - Defines how many samples for the same length will be used to calculate. Default is `3`.\n *   ```js\n *   autoColumnSize: {\n *     samplingRatio: 10,\n *   }\n *   ```\n * - *allowSampleDuplicates* - Defines if duplicated values might be used in sampling. Default is `false`.\n *   ```js\n *   autoColumnSize: {\n *     allowSampleDuplicates: true,\n *   }\n * ```\n *\n * To configure this plugin see {@link Options#autoColumnSize}.\n *\n * @example\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *   data: getData(),\n *   autoColumnSize: true\n * });\n * // Access to plugin instance:\n * const plugin = hot.getPlugin('autoColumnSize');\n *\n * plugin.getColumnWidth(4);\n *\n * if (plugin.isEnabled()) {\n *   // code...\n * }\n * ```\n */\n\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\nexport var AutoColumnSize = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(AutoColumnSize, _BasePlugin);\n\n  var _super = _createSuper(AutoColumnSize);\n\n  function AutoColumnSize(hotInstance) {\n    var _this;\n\n    _classCallCheck(this, AutoColumnSize);\n\n    _this = _super.call(this, hotInstance);\n    privatePool.set(_assertThisInitialized(_this), {\n      /**\n       * Cached column header names. It is used to diff current column headers with previous state and detect which\n       * columns width should be updated.\n       *\n       * @private\n       * @type {Array}\n       */\n      cachedColumnHeaders: []\n    });\n    /**\n     * Instance of {@link GhostTable} for rows and columns size calculations.\n     *\n     * @private\n     * @type {GhostTable}\n     */\n\n    _this.ghostTable = new GhostTable(_this.hot);\n    /**\n     * Instance of {@link SamplesGenerator} for generating samples necessary for columns width calculations.\n     *\n     * @private\n     * @type {SamplesGenerator}\n     * @fires Hooks#modifyAutoColumnSizeSeed\n     */\n\n    _this.samplesGenerator = new SamplesGenerator(function (row, column) {\n      var cellMeta = _this.hot.getCellMeta(row, column);\n\n      var cellValue = '';\n\n      if (!cellMeta.spanned) {\n        cellValue = _this.hot.getDataAtCell(row, column);\n      }\n\n      var bundleSeed = '';\n\n      if (_this.hot.hasHook('modifyAutoColumnSizeSeed')) {\n        bundleSeed = _this.hot.runHooks('modifyAutoColumnSizeSeed', bundleSeed, cellMeta, cellValue);\n      }\n\n      return {\n        value: cellValue,\n        bundleSeed: bundleSeed\n      };\n    });\n    /**\n     * `true` only if the first calculation was performed.\n     *\n     * @private\n     * @type {boolean}\n     */\n\n    _this.firstCalculation = true;\n    /**\n     * `true` if the size calculation is in progress.\n     *\n     * @type {boolean}\n     */\n\n    _this.inProgress = false;\n    /**\n     * Number of already measured columns (we already know their sizes).\n     *\n     * @type {number}\n     */\n\n    _this.measuredColumns = 0;\n    /**\n     * PhysicalIndexToValueMap to keep and track widths for physical column indexes.\n     *\n     * @private\n     * @type {PhysicalIndexToValueMap}\n     */\n\n    _this.columnWidthsMap = new IndexToValueMap();\n\n    _this.hot.columnIndexMapper.registerMap(COLUMN_SIZE_MAP_NAME, _this.columnWidthsMap); // Leave the listener active to allow auto-sizing the columns when the plugin is disabled.\n    // This is necesseary for width recalculation for resize handler doubleclick (ManualColumnResize).\n\n\n    _this.addHook('beforeColumnResize', function (size, column, isDblClick) {\n      return _this.onBeforeColumnResize(size, column, isDblClick);\n    });\n\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link AutoColumnSize#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n\n\n  _createClass(AutoColumnSize, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.hot.getSettings()[PLUGIN_KEY] !== false && !this.hot.getSettings().colWidths;\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      var setting = this.hot.getSettings()[PLUGIN_KEY];\n\n      if (setting && setting.useHeaders !== null && setting.useHeaders !== void 0) {\n        this.ghostTable.setSetting('useHeaders', setting.useHeaders);\n      }\n\n      this.setSamplingOptions();\n      this.addHook('afterLoadData', function () {\n        return _this2.onAfterLoadData();\n      });\n      this.addHook('beforeChange', function (changes) {\n        return _this2.onBeforeChange(changes);\n      });\n      this.addHook('afterFormulasValuesUpdate', function (changes) {\n        return _this2.onAfterFormulasValuesUpdate(changes);\n      });\n      this.addHook('beforeRender', function (force) {\n        return _this2.onBeforeRender(force);\n      });\n      this.addHook('modifyColWidth', function (width, col) {\n        return _this2.getColumnWidth(col, width);\n      });\n      this.addHook('afterInit', function () {\n        return _this2.onAfterInit();\n      });\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\n     */\n\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      var changedColumns = this.findColumnsWhereHeaderWasChanged();\n\n      if (changedColumns.length) {\n        this.clearCache(changedColumns);\n        this.calculateVisibleColumnsWidth();\n      }\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"updatePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      var _this3 = this;\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"disablePlugin\", this).call(this); // Leave the listener active to allow auto-sizing the columns when the plugin is disabled.\n      // This is necesseary for width recalculation for resize handler doubleclick (ManualColumnResize).\n\n\n      this.addHook('beforeColumnResize', function (size, column, isDblClick) {\n        return _this3.onBeforeColumnResize(size, column, isDblClick);\n      });\n    }\n    /**\n     * Calculates visible columns width.\n     */\n\n  }, {\n    key: \"calculateVisibleColumnsWidth\",\n    value: function calculateVisibleColumnsWidth() {\n      var rowsCount = this.hot.countRows(); // Keep last column widths unchanged for situation when all rows was deleted or trimmed (pro #6)\n\n      if (!rowsCount) {\n        return;\n      }\n\n      var force = this.hot.renderCall;\n      var firstVisibleColumn = this.getFirstVisibleColumn();\n      var lastVisibleColumn = this.getLastVisibleColumn();\n\n      if (firstVisibleColumn === -1 || lastVisibleColumn === -1) {\n        return;\n      }\n\n      this.calculateColumnsWidth({\n        from: firstVisibleColumn,\n        to: lastVisibleColumn\n      }, void 0, force);\n    }\n    /**\n     * Calculates a columns width.\n     *\n     * @param {number|object} colRange Visual column index or an object with `from` and `to` visual indexes as a range.\n     * @param {number|object} rowRange Visual row index or an object with `from` and `to` visual indexes as a range.\n     * @param {boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.\n     */\n\n  }, {\n    key: \"calculateColumnsWidth\",\n    value: function calculateColumnsWidth() {\n      var _this4 = this;\n\n      var colRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countCols() - 1\n      };\n      var rowRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false; // eslint-disable-line max-len\n\n      var columnsRange = typeof colRange === 'number' ? {\n        from: colRange,\n        to: colRange\n      } : colRange;\n      var rowsRange = typeof rowRange === 'number' ? {\n        from: rowRange,\n        to: rowRange\n      } : rowRange;\n      rangeEach(columnsRange.from, columnsRange.to, function (visualColumn) {\n        var physicalColumn = _this4.hot.toPhysicalColumn(visualColumn);\n\n        if (physicalColumn === null) {\n          physicalColumn = visualColumn;\n        }\n\n        if (force || _this4.columnWidthsMap.getValueAtIndex(physicalColumn) === null && !_this4.hot._getColWidthFromSettings(physicalColumn)) {\n          var samples = _this4.samplesGenerator.generateColumnSamples(visualColumn, rowsRange);\n\n          arrayEach(samples, function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                column = _ref2[0],\n                sample = _ref2[1];\n\n            return _this4.ghostTable.addColumn(column, sample);\n          });\n        }\n      });\n\n      if (this.ghostTable.columns.length) {\n        this.hot.batchExecution(function () {\n          _this4.ghostTable.getWidths(function (visualColumn, width) {\n            var physicalColumn = _this4.hot.toPhysicalColumn(visualColumn);\n\n            _this4.columnWidthsMap.setValueAtIndex(physicalColumn, width);\n          });\n        }, true);\n        this.measuredColumns = columnsRange.to + 1;\n        this.ghostTable.clean();\n      }\n    }\n    /**\n     * Calculates all columns width. The calculated column will be cached in the {@link AutoColumnSize#widths} property.\n     * To retrieve width for specified column use {@link AutoColumnSize#getColumnWidth} method.\n     *\n     * @param {object|number} rowRange Row index or an object with `from` and `to` properties which define row range.\n     */\n\n  }, {\n    key: \"calculateAllColumnsWidth\",\n    value: function calculateAllColumnsWidth() {\n      var _this5 = this;\n\n      var rowRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var current = 0;\n      var length = this.hot.countCols() - 1;\n      var timer = null;\n      this.inProgress = true;\n\n      var loop = function loop() {\n        // When hot was destroyed after calculating finished cancel frame\n        if (!_this5.hot) {\n          cancelAnimationFrame(timer);\n          _this5.inProgress = false;\n          return;\n        }\n\n        _this5.calculateColumnsWidth({\n          from: current,\n          to: Math.min(current + AutoColumnSize.CALCULATION_STEP, length)\n        }, rowRange);\n\n        current = current + AutoColumnSize.CALCULATION_STEP + 1;\n\n        if (current < length) {\n          timer = requestAnimationFrame(loop);\n        } else {\n          cancelAnimationFrame(timer);\n          _this5.inProgress = false; // @TODO Should call once per render cycle, currently fired separately in different plugins\n\n          _this5.hot.view.adjustElementsSize();\n        }\n      };\n\n      var syncLimit = this.getSyncCalculationLimit(); // sync\n\n      if (this.firstCalculation && syncLimit >= 0) {\n        this.calculateColumnsWidth({\n          from: 0,\n          to: syncLimit\n        }, rowRange);\n        this.firstCalculation = false;\n        current = syncLimit + 1;\n      } // async\n\n\n      if (current < length) {\n        loop();\n      } else {\n        this.inProgress = false;\n      }\n    }\n    /**\n     * Sets the sampling options.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"setSamplingOptions\",\n    value: function setSamplingOptions() {\n      var setting = this.hot.getSettings()[PLUGIN_KEY];\n      var samplingRatio = setting && hasOwnProperty(setting, 'samplingRatio') ? setting.samplingRatio : void 0;\n      var allowSampleDuplicates = setting && hasOwnProperty(setting, 'allowSampleDuplicates') ? setting.allowSampleDuplicates : void 0;\n\n      if (samplingRatio && !isNaN(samplingRatio)) {\n        this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));\n      }\n\n      if (allowSampleDuplicates) {\n        this.samplesGenerator.setAllowDuplicates(allowSampleDuplicates);\n      }\n    }\n    /**\n     * Recalculates all columns width (overwrite cache values).\n     */\n\n  }, {\n    key: \"recalculateAllColumnsWidth\",\n    value: function recalculateAllColumnsWidth() {\n      if (this.hot.view && this.hot.view.wt.wtTable.isVisible()) {\n        this.clearCache();\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * Gets value which tells how many columns should be calculated synchronously (rest of the columns will be calculated\n     * asynchronously). The limit is calculated based on `syncLimit` set to `autoColumnSize` option (see {@link Options#autoColumnSize}).\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getSyncCalculationLimit\",\n    value: function getSyncCalculationLimit() {\n      var settings = this.hot.getSettings()[PLUGIN_KEY];\n      /* eslint-disable no-bitwise */\n\n      var limit = AutoColumnSize.SYNC_CALCULATION_LIMIT;\n      var colsLimit = this.hot.countCols() - 1;\n\n      if (isObject(settings)) {\n        limit = settings.syncLimit;\n\n        if (isPercentValue(limit)) {\n          limit = valueAccordingPercent(colsLimit, limit);\n        } else {\n          // Force to Number\n          limit >>= 0;\n        }\n      }\n\n      return Math.min(limit, colsLimit);\n    }\n    /**\n     * Gets the calculated column width.\n     *\n     * @param {number} column Visual column index.\n     * @param {number} [defaultWidth] Default column width. It will be picked up if no calculated width found.\n     * @param {boolean} [keepMinimum=true] If `true` then returned value won't be smaller then 50 (default column width).\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getColumnWidth\",\n    value: function getColumnWidth(column) {\n      var defaultWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n      var keepMinimum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var width = defaultWidth;\n\n      if (width === void 0) {\n        width = this.columnWidthsMap.getValueAtIndex(this.hot.toPhysicalColumn(column));\n\n        if (keepMinimum && typeof width === 'number') {\n          width = Math.max(width, ViewportColumnsCalculator.DEFAULT_WIDTH);\n        }\n      }\n\n      return width;\n    }\n    /**\n     * Gets the first visible column.\n     *\n     * @returns {number} Returns visual column index, -1 if table is not rendered or if there are no columns to base the the calculations on.\n     */\n\n  }, {\n    key: \"getFirstVisibleColumn\",\n    value: function getFirstVisibleColumn() {\n      var wot = this.hot.view.wt;\n\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        // Fist fully visible column is stored as renderable index.\n        var firstFullyVisibleColumn = wot.wtTable.getFirstVisibleColumn();\n\n        if (firstFullyVisibleColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(firstFullyVisibleColumn);\n        }\n      }\n\n      if (wot.wtViewport.columnsRenderCalculator) {\n        var firstRenderedColumn = wot.wtTable.getFirstRenderedColumn(); // There are no rendered column.\n\n        if (firstRenderedColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(firstRenderedColumn);\n        }\n      }\n\n      return -1;\n    }\n    /**\n     * Gets the last visible column.\n     *\n     * @returns {number} Returns visual column index or -1 if table is not rendered.\n     */\n\n  }, {\n    key: \"getLastVisibleColumn\",\n    value: function getLastVisibleColumn() {\n      var wot = this.hot.view.wt;\n\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        // Last fully visible column is stored as renderable index.\n        var lastFullyVisibleColumn = wot.wtTable.getLastVisibleColumn();\n\n        if (lastFullyVisibleColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(lastFullyVisibleColumn);\n        }\n      }\n\n      if (wot.wtViewport.columnsRenderCalculator) {\n        // Last fully visible column is stored as renderable index.\n        var lastRenderedColumn = wot.wtTable.getLastRenderedColumn(); // There are no rendered columns.\n\n        if (lastRenderedColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(lastRenderedColumn);\n        }\n      }\n\n      return -1;\n    }\n    /**\n     * Collects all columns which titles has been changed in comparison to the previous state.\n     *\n     * @private\n     * @returns {Array} It returns an array of physical column indexes.\n     */\n\n  }, {\n    key: \"findColumnsWhereHeaderWasChanged\",\n    value: function findColumnsWhereHeaderWasChanged() {\n      var columnHeaders = this.hot.getColHeader();\n\n      var _privatePool$get = privatePool.get(this),\n          cachedColumnHeaders = _privatePool$get.cachedColumnHeaders;\n\n      var changedColumns = arrayReduce(columnHeaders, function (acc, columnTitle, physicalColumn) {\n        var cachedColumnsLength = cachedColumnHeaders.length;\n\n        if (cachedColumnsLength - 1 < physicalColumn || cachedColumnHeaders[physicalColumn] !== columnTitle) {\n          acc.push(physicalColumn);\n        }\n\n        if (cachedColumnsLength - 1 < physicalColumn) {\n          cachedColumnHeaders.push(columnTitle);\n        } else {\n          cachedColumnHeaders[physicalColumn] = columnTitle;\n        }\n\n        return acc;\n      }, []);\n      return changedColumns;\n    }\n    /**\n     * Clears cache of calculated column widths. If you want to clear only selected columns pass an array with their indexes.\n     * Otherwise whole cache will be cleared.\n     *\n     * @param {number[]} [columns] List of physical column indexes to clear.\n     */\n\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      var _this6 = this;\n\n      var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (columns.length) {\n        this.hot.batchExecution(function () {\n          arrayEach(columns, function (physicalIndex) {\n            _this6.columnWidthsMap.setValueAtIndex(physicalIndex, null);\n          });\n        }, true);\n      } else {\n        this.columnWidthsMap.clear();\n      }\n    }\n    /**\n     * Checks if all widths were calculated. If not then return `true` (need recalculate).\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isNeedRecalculate\",\n    value: function isNeedRecalculate() {\n      return !!arrayFilter(this.columnWidthsMap.getValues().slice(0, this.measuredColumns), function (item) {\n        return item === null;\n      }).length;\n    }\n    /**\n     * On before render listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onBeforeRender\",\n    value: function onBeforeRender() {\n      this.calculateVisibleColumnsWidth();\n\n      if (this.isNeedRecalculate() && !this.inProgress) {\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * On after load data listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData() {\n      var _this7 = this;\n\n      if (this.hot.view) {\n        this.recalculateAllColumnsWidth();\n      } else {\n        // first load - initialization\n        setTimeout(function () {\n          if (_this7.hot) {\n            _this7.recalculateAllColumnsWidth();\n          }\n        }, 0);\n      }\n    }\n    /**\n     * On before change listener.\n     *\n     * @private\n     * @param {Array} changes An array of modified data.\n     */\n\n  }, {\n    key: \"onBeforeChange\",\n    value: function onBeforeChange(changes) {\n      var _this8 = this;\n\n      var changedColumns = arrayMap(changes, function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            columnProperty = _ref4[1];\n\n        return _this8.hot.toPhysicalColumn(_this8.hot.propToCol(columnProperty));\n      });\n      this.clearCache(Array.from(new Set(changedColumns)));\n    }\n    /**\n     * On before column resize listener.\n     *\n     * @private\n     * @param {number} size Calculated new column width.\n     * @param {number} column Visual index of the resized column.\n     * @param {boolean} isDblClick  Flag that determines whether there was a double-click.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"onBeforeColumnResize\",\n    value: function onBeforeColumnResize(size, column, isDblClick) {\n      var newSize = size;\n\n      if (isDblClick) {\n        this.calculateColumnsWidth(column, void 0, true);\n        newSize = this.getColumnWidth(column, void 0, false);\n      }\n\n      return newSize;\n    }\n    /**\n     * On after Handsontable init fill plugin with all necessary values.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterInit\",\n    value: function onAfterInit() {\n      privatePool.get(this).cachedColumnHeaders = this.hot.getColHeader();\n    }\n    /**\n     * After formulas values updated listener.\n     *\n     * @private\n     * @param {Array} changes An array of modified data.\n     */\n\n  }, {\n    key: \"onAfterFormulasValuesUpdate\",\n    value: function onAfterFormulasValuesUpdate(changes) {\n      var filteredChanges = arrayFilter(changes, function (change) {\n        var _change$address;\n\n        return isDefined((_change$address = change.address) === null || _change$address === void 0 ? void 0 : _change$address.col);\n      });\n      var changedColumns = arrayMap(filteredChanges, function (change) {\n        return change.address.col;\n      });\n      this.clearCache(Array.from(new Set(changedColumns)));\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.ghostTable.clean();\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"destroy\", this).call(this);\n    }\n  }], [{\n    key: \"PLUGIN_KEY\",\n    get: function get() {\n      return PLUGIN_KEY;\n    }\n  }, {\n    key: \"PLUGIN_PRIORITY\",\n    get: function get() {\n      return PLUGIN_PRIORITY;\n    }\n  }, {\n    key: \"CALCULATION_STEP\",\n    get: function get() {\n      return 50;\n    }\n  }, {\n    key: \"SYNC_CALCULATION_LIMIT\",\n    get: function get() {\n      return 50;\n    }\n  }]);\n\n  return AutoColumnSize;\n}(BasePlugin);","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/autoColumnSize/autoColumnSize.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","len","length","arr2","_i","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","_get","property","receiver","Reflect","get","base","_superPropBase","desc","getOwnPropertyDescriptor","object","hasOwnProperty","_getPrototypeOf","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","BasePlugin","arrayEach","arrayFilter","arrayReduce","arrayMap","cancelAnimationFrame","requestAnimationFrame","GhostTable","Hooks","isObject","valueAccordingPercent","rangeEach","SamplesGenerator","isPercentValue","ViewportColumnsCalculator","PhysicalIndexToValueMap","IndexToValueMap","isDefined","getSingleton","register","PLUGIN_KEY","PLUGIN_PRIORITY","privatePool","WeakMap","COLUMN_SIZE_MAP_NAME","AutoColumnSize","_BasePlugin","_super","hotInstance","_this","set","cachedColumnHeaders","ghostTable","hot","samplesGenerator","row","column","cellMeta","getCellMeta","cellValue","spanned","getDataAtCell","bundleSeed","hasHook","runHooks","firstCalculation","inProgress","measuredColumns","columnWidthsMap","columnIndexMapper","registerMap","addHook","size","isDblClick","onBeforeColumnResize","isEnabled","getSettings","colWidths","enablePlugin","_this2","enabled","setting","useHeaders","setSetting","setSamplingOptions","onAfterLoadData","changes","onBeforeChange","onAfterFormulasValuesUpdate","force","onBeforeRender","width","col","getColumnWidth","onAfterInit","updatePlugin","changedColumns","findColumnsWhereHeaderWasChanged","clearCache","calculateVisibleColumnsWidth","disablePlugin","_this3","rowsCount","countRows","renderCall","firstVisibleColumn","getFirstVisibleColumn","lastVisibleColumn","getLastVisibleColumn","calculateColumnsWidth","to","_this4","colRange","undefined","countCols","rowRange","columnsRange","rowsRange","visualColumn","physicalColumn","toPhysicalColumn","getValueAtIndex","_getColWidthFromSettings","samples","generateColumnSamples","_ref","_ref2","sample","addColumn","columns","batchExecution","getWidths","setValueAtIndex","clean","calculateAllColumnsWidth","_this5","current","timer","loop","Math","min","CALCULATION_STEP","view","adjustElementsSize","syncLimit","getSyncCalculationLimit","samplingRatio","allowSampleDuplicates","isNaN","setSampleCount","parseInt","setAllowDuplicates","recalculateAllColumnsWidth","wt","wtTable","isVisible","settings","limit","SYNC_CALCULATION_LIMIT","colsLimit","defaultWidth","keepMinimum","max","DEFAULT_WIDTH","wot","wtViewport","columnsVisibleCalculator","firstFullyVisibleColumn","getVisualFromRenderableIndex","columnsRenderCalculator","firstRenderedColumn","getFirstRenderedColumn","lastFullyVisibleColumn","lastRenderedColumn","getLastRenderedColumn","columnHeaders","getColHeader","_privatePool$get","acc","columnTitle","cachedColumnsLength","_this6","physicalIndex","clear","isNeedRecalculate","getValues","item","_this7","setTimeout","_this8","_ref3","_ref4","columnProperty","propToCol","Set","newSize","filteredChanges","change","_change$address","address","destroy"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.object.set-prototype-of.js\";\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.reflect.construct.js\";\nimport \"core-js/modules/es.reflect.get.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { arrayEach, arrayFilter, arrayReduce, arrayMap } from \"../../helpers/array.mjs\";\nimport { cancelAnimationFrame, requestAnimationFrame } from \"../../helpers/feature.mjs\";\nimport GhostTable from \"../../utils/ghostTable.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { isObject, hasOwnProperty } from \"../../helpers/object.mjs\";\nimport { valueAccordingPercent, rangeEach } from \"../../helpers/number.mjs\";\nimport SamplesGenerator from \"../../utils/samplesGenerator.mjs\";\nimport { isPercentValue } from \"../../helpers/string.mjs\";\nimport { ViewportColumnsCalculator } from \"../../3rdparty/walkontable/src/index.mjs\";\nimport { PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nHooks.getSingleton().register('modifyAutoColumnSizeSeed');\nexport var PLUGIN_KEY = 'autoColumnSize';\nexport var PLUGIN_PRIORITY = 10;\nvar privatePool = new WeakMap();\nvar COLUMN_SIZE_MAP_NAME = 'autoColumnSize';\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin AutoColumnSize\n * @class AutoColumnSize\n *\n * @description\n * This plugin allows to set column widths based on their widest cells.\n *\n * By default, the plugin is declared as `undefined`, which makes it enabled (same as if it was declared as `true`).\n * Enabling this plugin may decrease the overall table performance, as it needs to calculate the widths of all cells to\n * resize the columns accordingly.\n * If you experience problems with the performance, try turning this feature off and declaring the column widths manually.\n *\n * Column width calculations are divided into sync and async part. Each of this parts has their own advantages and\n * disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous\n * operations don't block the browser UI.\n *\n * To configure the sync/async distribution, you can pass an absolute value (number of columns) or a percentage value to a config object:\n * ```js\n * // as a number (300 columns in sync, rest async)\n * autoColumnSize: {syncLimit: 300},.\n *\n * // as a string (percent)\n * autoColumnSize: {syncLimit: '40%'},\n * ```\n *\n * The plugin uses {@link GhostTable} and {@link SamplesGenerator} for calculations.\n * First, {@link SamplesGenerator} prepares samples of data with its coordinates.\n * Next {@link GhostTable} uses coordinates to get cells' renderers and append all to the DOM through DocumentFragment.\n *\n * Sampling accepts additional options:\n * - *samplingRatio* - Defines how many samples for the same length will be used to calculate. Default is `3`.\n *   ```js\n *   autoColumnSize: {\n *     samplingRatio: 10,\n *   }\n *   ```\n * - *allowSampleDuplicates* - Defines if duplicated values might be used in sampling. Default is `false`.\n *   ```js\n *   autoColumnSize: {\n *     allowSampleDuplicates: true,\n *   }\n * ```\n *\n * To configure this plugin see {@link Options#autoColumnSize}.\n *\n * @example\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *   data: getData(),\n *   autoColumnSize: true\n * });\n * // Access to plugin instance:\n * const plugin = hot.getPlugin('autoColumnSize');\n *\n * plugin.getColumnWidth(4);\n *\n * if (plugin.isEnabled()) {\n *   // code...\n * }\n * ```\n */\n\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\nexport var AutoColumnSize = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(AutoColumnSize, _BasePlugin);\n\n  var _super = _createSuper(AutoColumnSize);\n\n  function AutoColumnSize(hotInstance) {\n    var _this;\n\n    _classCallCheck(this, AutoColumnSize);\n\n    _this = _super.call(this, hotInstance);\n    privatePool.set(_assertThisInitialized(_this), {\n      /**\n       * Cached column header names. It is used to diff current column headers with previous state and detect which\n       * columns width should be updated.\n       *\n       * @private\n       * @type {Array}\n       */\n      cachedColumnHeaders: []\n    });\n    /**\n     * Instance of {@link GhostTable} for rows and columns size calculations.\n     *\n     * @private\n     * @type {GhostTable}\n     */\n\n    _this.ghostTable = new GhostTable(_this.hot);\n    /**\n     * Instance of {@link SamplesGenerator} for generating samples necessary for columns width calculations.\n     *\n     * @private\n     * @type {SamplesGenerator}\n     * @fires Hooks#modifyAutoColumnSizeSeed\n     */\n\n    _this.samplesGenerator = new SamplesGenerator(function (row, column) {\n      var cellMeta = _this.hot.getCellMeta(row, column);\n\n      var cellValue = '';\n\n      if (!cellMeta.spanned) {\n        cellValue = _this.hot.getDataAtCell(row, column);\n      }\n\n      var bundleSeed = '';\n\n      if (_this.hot.hasHook('modifyAutoColumnSizeSeed')) {\n        bundleSeed = _this.hot.runHooks('modifyAutoColumnSizeSeed', bundleSeed, cellMeta, cellValue);\n      }\n\n      return {\n        value: cellValue,\n        bundleSeed: bundleSeed\n      };\n    });\n    /**\n     * `true` only if the first calculation was performed.\n     *\n     * @private\n     * @type {boolean}\n     */\n\n    _this.firstCalculation = true;\n    /**\n     * `true` if the size calculation is in progress.\n     *\n     * @type {boolean}\n     */\n\n    _this.inProgress = false;\n    /**\n     * Number of already measured columns (we already know their sizes).\n     *\n     * @type {number}\n     */\n\n    _this.measuredColumns = 0;\n    /**\n     * PhysicalIndexToValueMap to keep and track widths for physical column indexes.\n     *\n     * @private\n     * @type {PhysicalIndexToValueMap}\n     */\n\n    _this.columnWidthsMap = new IndexToValueMap();\n\n    _this.hot.columnIndexMapper.registerMap(COLUMN_SIZE_MAP_NAME, _this.columnWidthsMap); // Leave the listener active to allow auto-sizing the columns when the plugin is disabled.\n    // This is necesseary for width recalculation for resize handler doubleclick (ManualColumnResize).\n\n\n    _this.addHook('beforeColumnResize', function (size, column, isDblClick) {\n      return _this.onBeforeColumnResize(size, column, isDblClick);\n    });\n\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link AutoColumnSize#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n\n\n  _createClass(AutoColumnSize, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.hot.getSettings()[PLUGIN_KEY] !== false && !this.hot.getSettings().colWidths;\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      var setting = this.hot.getSettings()[PLUGIN_KEY];\n\n      if (setting && setting.useHeaders !== null && setting.useHeaders !== void 0) {\n        this.ghostTable.setSetting('useHeaders', setting.useHeaders);\n      }\n\n      this.setSamplingOptions();\n      this.addHook('afterLoadData', function () {\n        return _this2.onAfterLoadData();\n      });\n      this.addHook('beforeChange', function (changes) {\n        return _this2.onBeforeChange(changes);\n      });\n      this.addHook('afterFormulasValuesUpdate', function (changes) {\n        return _this2.onAfterFormulasValuesUpdate(changes);\n      });\n      this.addHook('beforeRender', function (force) {\n        return _this2.onBeforeRender(force);\n      });\n      this.addHook('modifyColWidth', function (width, col) {\n        return _this2.getColumnWidth(col, width);\n      });\n      this.addHook('afterInit', function () {\n        return _this2.onAfterInit();\n      });\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\n     */\n\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      var changedColumns = this.findColumnsWhereHeaderWasChanged();\n\n      if (changedColumns.length) {\n        this.clearCache(changedColumns);\n        this.calculateVisibleColumnsWidth();\n      }\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"updatePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      var _this3 = this;\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"disablePlugin\", this).call(this); // Leave the listener active to allow auto-sizing the columns when the plugin is disabled.\n      // This is necesseary for width recalculation for resize handler doubleclick (ManualColumnResize).\n\n\n      this.addHook('beforeColumnResize', function (size, column, isDblClick) {\n        return _this3.onBeforeColumnResize(size, column, isDblClick);\n      });\n    }\n    /**\n     * Calculates visible columns width.\n     */\n\n  }, {\n    key: \"calculateVisibleColumnsWidth\",\n    value: function calculateVisibleColumnsWidth() {\n      var rowsCount = this.hot.countRows(); // Keep last column widths unchanged for situation when all rows was deleted or trimmed (pro #6)\n\n      if (!rowsCount) {\n        return;\n      }\n\n      var force = this.hot.renderCall;\n      var firstVisibleColumn = this.getFirstVisibleColumn();\n      var lastVisibleColumn = this.getLastVisibleColumn();\n\n      if (firstVisibleColumn === -1 || lastVisibleColumn === -1) {\n        return;\n      }\n\n      this.calculateColumnsWidth({\n        from: firstVisibleColumn,\n        to: lastVisibleColumn\n      }, void 0, force);\n    }\n    /**\n     * Calculates a columns width.\n     *\n     * @param {number|object} colRange Visual column index or an object with `from` and `to` visual indexes as a range.\n     * @param {number|object} rowRange Visual row index or an object with `from` and `to` visual indexes as a range.\n     * @param {boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.\n     */\n\n  }, {\n    key: \"calculateColumnsWidth\",\n    value: function calculateColumnsWidth() {\n      var _this4 = this;\n\n      var colRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countCols() - 1\n      };\n      var rowRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      // eslint-disable-line max-len\n      var columnsRange = typeof colRange === 'number' ? {\n        from: colRange,\n        to: colRange\n      } : colRange;\n      var rowsRange = typeof rowRange === 'number' ? {\n        from: rowRange,\n        to: rowRange\n      } : rowRange;\n      rangeEach(columnsRange.from, columnsRange.to, function (visualColumn) {\n        var physicalColumn = _this4.hot.toPhysicalColumn(visualColumn);\n\n        if (physicalColumn === null) {\n          physicalColumn = visualColumn;\n        }\n\n        if (force || _this4.columnWidthsMap.getValueAtIndex(physicalColumn) === null && !_this4.hot._getColWidthFromSettings(physicalColumn)) {\n          var samples = _this4.samplesGenerator.generateColumnSamples(visualColumn, rowsRange);\n\n          arrayEach(samples, function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                column = _ref2[0],\n                sample = _ref2[1];\n\n            return _this4.ghostTable.addColumn(column, sample);\n          });\n        }\n      });\n\n      if (this.ghostTable.columns.length) {\n        this.hot.batchExecution(function () {\n          _this4.ghostTable.getWidths(function (visualColumn, width) {\n            var physicalColumn = _this4.hot.toPhysicalColumn(visualColumn);\n\n            _this4.columnWidthsMap.setValueAtIndex(physicalColumn, width);\n          });\n        }, true);\n        this.measuredColumns = columnsRange.to + 1;\n        this.ghostTable.clean();\n      }\n    }\n    /**\n     * Calculates all columns width. The calculated column will be cached in the {@link AutoColumnSize#widths} property.\n     * To retrieve width for specified column use {@link AutoColumnSize#getColumnWidth} method.\n     *\n     * @param {object|number} rowRange Row index or an object with `from` and `to` properties which define row range.\n     */\n\n  }, {\n    key: \"calculateAllColumnsWidth\",\n    value: function calculateAllColumnsWidth() {\n      var _this5 = this;\n\n      var rowRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var current = 0;\n      var length = this.hot.countCols() - 1;\n      var timer = null;\n      this.inProgress = true;\n\n      var loop = function loop() {\n        // When hot was destroyed after calculating finished cancel frame\n        if (!_this5.hot) {\n          cancelAnimationFrame(timer);\n          _this5.inProgress = false;\n          return;\n        }\n\n        _this5.calculateColumnsWidth({\n          from: current,\n          to: Math.min(current + AutoColumnSize.CALCULATION_STEP, length)\n        }, rowRange);\n\n        current = current + AutoColumnSize.CALCULATION_STEP + 1;\n\n        if (current < length) {\n          timer = requestAnimationFrame(loop);\n        } else {\n          cancelAnimationFrame(timer);\n          _this5.inProgress = false; // @TODO Should call once per render cycle, currently fired separately in different plugins\n\n          _this5.hot.view.adjustElementsSize();\n        }\n      };\n\n      var syncLimit = this.getSyncCalculationLimit(); // sync\n\n      if (this.firstCalculation && syncLimit >= 0) {\n        this.calculateColumnsWidth({\n          from: 0,\n          to: syncLimit\n        }, rowRange);\n        this.firstCalculation = false;\n        current = syncLimit + 1;\n      } // async\n\n\n      if (current < length) {\n        loop();\n      } else {\n        this.inProgress = false;\n      }\n    }\n    /**\n     * Sets the sampling options.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"setSamplingOptions\",\n    value: function setSamplingOptions() {\n      var setting = this.hot.getSettings()[PLUGIN_KEY];\n      var samplingRatio = setting && hasOwnProperty(setting, 'samplingRatio') ? setting.samplingRatio : void 0;\n      var allowSampleDuplicates = setting && hasOwnProperty(setting, 'allowSampleDuplicates') ? setting.allowSampleDuplicates : void 0;\n\n      if (samplingRatio && !isNaN(samplingRatio)) {\n        this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));\n      }\n\n      if (allowSampleDuplicates) {\n        this.samplesGenerator.setAllowDuplicates(allowSampleDuplicates);\n      }\n    }\n    /**\n     * Recalculates all columns width (overwrite cache values).\n     */\n\n  }, {\n    key: \"recalculateAllColumnsWidth\",\n    value: function recalculateAllColumnsWidth() {\n      if (this.hot.view && this.hot.view.wt.wtTable.isVisible()) {\n        this.clearCache();\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * Gets value which tells how many columns should be calculated synchronously (rest of the columns will be calculated\n     * asynchronously). The limit is calculated based on `syncLimit` set to `autoColumnSize` option (see {@link Options#autoColumnSize}).\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getSyncCalculationLimit\",\n    value: function getSyncCalculationLimit() {\n      var settings = this.hot.getSettings()[PLUGIN_KEY];\n      /* eslint-disable no-bitwise */\n\n      var limit = AutoColumnSize.SYNC_CALCULATION_LIMIT;\n      var colsLimit = this.hot.countCols() - 1;\n\n      if (isObject(settings)) {\n        limit = settings.syncLimit;\n\n        if (isPercentValue(limit)) {\n          limit = valueAccordingPercent(colsLimit, limit);\n        } else {\n          // Force to Number\n          limit >>= 0;\n        }\n      }\n\n      return Math.min(limit, colsLimit);\n    }\n    /**\n     * Gets the calculated column width.\n     *\n     * @param {number} column Visual column index.\n     * @param {number} [defaultWidth] Default column width. It will be picked up if no calculated width found.\n     * @param {boolean} [keepMinimum=true] If `true` then returned value won't be smaller then 50 (default column width).\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getColumnWidth\",\n    value: function getColumnWidth(column) {\n      var defaultWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n      var keepMinimum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var width = defaultWidth;\n\n      if (width === void 0) {\n        width = this.columnWidthsMap.getValueAtIndex(this.hot.toPhysicalColumn(column));\n\n        if (keepMinimum && typeof width === 'number') {\n          width = Math.max(width, ViewportColumnsCalculator.DEFAULT_WIDTH);\n        }\n      }\n\n      return width;\n    }\n    /**\n     * Gets the first visible column.\n     *\n     * @returns {number} Returns visual column index, -1 if table is not rendered or if there are no columns to base the the calculations on.\n     */\n\n  }, {\n    key: \"getFirstVisibleColumn\",\n    value: function getFirstVisibleColumn() {\n      var wot = this.hot.view.wt;\n\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        // Fist fully visible column is stored as renderable index.\n        var firstFullyVisibleColumn = wot.wtTable.getFirstVisibleColumn();\n\n        if (firstFullyVisibleColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(firstFullyVisibleColumn);\n        }\n      }\n\n      if (wot.wtViewport.columnsRenderCalculator) {\n        var firstRenderedColumn = wot.wtTable.getFirstRenderedColumn(); // There are no rendered column.\n\n        if (firstRenderedColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(firstRenderedColumn);\n        }\n      }\n\n      return -1;\n    }\n    /**\n     * Gets the last visible column.\n     *\n     * @returns {number} Returns visual column index or -1 if table is not rendered.\n     */\n\n  }, {\n    key: \"getLastVisibleColumn\",\n    value: function getLastVisibleColumn() {\n      var wot = this.hot.view.wt;\n\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        // Last fully visible column is stored as renderable index.\n        var lastFullyVisibleColumn = wot.wtTable.getLastVisibleColumn();\n\n        if (lastFullyVisibleColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(lastFullyVisibleColumn);\n        }\n      }\n\n      if (wot.wtViewport.columnsRenderCalculator) {\n        // Last fully visible column is stored as renderable index.\n        var lastRenderedColumn = wot.wtTable.getLastRenderedColumn(); // There are no rendered columns.\n\n        if (lastRenderedColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(lastRenderedColumn);\n        }\n      }\n\n      return -1;\n    }\n    /**\n     * Collects all columns which titles has been changed in comparison to the previous state.\n     *\n     * @private\n     * @returns {Array} It returns an array of physical column indexes.\n     */\n\n  }, {\n    key: \"findColumnsWhereHeaderWasChanged\",\n    value: function findColumnsWhereHeaderWasChanged() {\n      var columnHeaders = this.hot.getColHeader();\n\n      var _privatePool$get = privatePool.get(this),\n          cachedColumnHeaders = _privatePool$get.cachedColumnHeaders;\n\n      var changedColumns = arrayReduce(columnHeaders, function (acc, columnTitle, physicalColumn) {\n        var cachedColumnsLength = cachedColumnHeaders.length;\n\n        if (cachedColumnsLength - 1 < physicalColumn || cachedColumnHeaders[physicalColumn] !== columnTitle) {\n          acc.push(physicalColumn);\n        }\n\n        if (cachedColumnsLength - 1 < physicalColumn) {\n          cachedColumnHeaders.push(columnTitle);\n        } else {\n          cachedColumnHeaders[physicalColumn] = columnTitle;\n        }\n\n        return acc;\n      }, []);\n      return changedColumns;\n    }\n    /**\n     * Clears cache of calculated column widths. If you want to clear only selected columns pass an array with their indexes.\n     * Otherwise whole cache will be cleared.\n     *\n     * @param {number[]} [columns] List of physical column indexes to clear.\n     */\n\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      var _this6 = this;\n\n      var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (columns.length) {\n        this.hot.batchExecution(function () {\n          arrayEach(columns, function (physicalIndex) {\n            _this6.columnWidthsMap.setValueAtIndex(physicalIndex, null);\n          });\n        }, true);\n      } else {\n        this.columnWidthsMap.clear();\n      }\n    }\n    /**\n     * Checks if all widths were calculated. If not then return `true` (need recalculate).\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isNeedRecalculate\",\n    value: function isNeedRecalculate() {\n      return !!arrayFilter(this.columnWidthsMap.getValues().slice(0, this.measuredColumns), function (item) {\n        return item === null;\n      }).length;\n    }\n    /**\n     * On before render listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onBeforeRender\",\n    value: function onBeforeRender() {\n      this.calculateVisibleColumnsWidth();\n\n      if (this.isNeedRecalculate() && !this.inProgress) {\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * On after load data listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData() {\n      var _this7 = this;\n\n      if (this.hot.view) {\n        this.recalculateAllColumnsWidth();\n      } else {\n        // first load - initialization\n        setTimeout(function () {\n          if (_this7.hot) {\n            _this7.recalculateAllColumnsWidth();\n          }\n        }, 0);\n      }\n    }\n    /**\n     * On before change listener.\n     *\n     * @private\n     * @param {Array} changes An array of modified data.\n     */\n\n  }, {\n    key: \"onBeforeChange\",\n    value: function onBeforeChange(changes) {\n      var _this8 = this;\n\n      var changedColumns = arrayMap(changes, function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            columnProperty = _ref4[1];\n\n        return _this8.hot.toPhysicalColumn(_this8.hot.propToCol(columnProperty));\n      });\n      this.clearCache(Array.from(new Set(changedColumns)));\n    }\n    /**\n     * On before column resize listener.\n     *\n     * @private\n     * @param {number} size Calculated new column width.\n     * @param {number} column Visual index of the resized column.\n     * @param {boolean} isDblClick  Flag that determines whether there was a double-click.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"onBeforeColumnResize\",\n    value: function onBeforeColumnResize(size, column, isDblClick) {\n      var newSize = size;\n\n      if (isDblClick) {\n        this.calculateColumnsWidth(column, void 0, true);\n        newSize = this.getColumnWidth(column, void 0, false);\n      }\n\n      return newSize;\n    }\n    /**\n     * On after Handsontable init fill plugin with all necessary values.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterInit\",\n    value: function onAfterInit() {\n      privatePool.get(this).cachedColumnHeaders = this.hot.getColHeader();\n    }\n    /**\n     * After formulas values updated listener.\n     *\n     * @private\n     * @param {Array} changes An array of modified data.\n     */\n\n  }, {\n    key: \"onAfterFormulasValuesUpdate\",\n    value: function onAfterFormulasValuesUpdate(changes) {\n      var filteredChanges = arrayFilter(changes, function (change) {\n        var _change$address;\n\n        return isDefined((_change$address = change.address) === null || _change$address === void 0 ? void 0 : _change$address.col);\n      });\n      var changedColumns = arrayMap(filteredChanges, function (change) {\n        return change.address.col;\n      });\n      this.clearCache(Array.from(new Set(changedColumns)));\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.ghostTable.clean();\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"destroy\", this).call(this);\n    }\n  }], [{\n    key: \"PLUGIN_KEY\",\n    get: function get() {\n      return PLUGIN_KEY;\n    }\n  }, {\n    key: \"PLUGIN_PRIORITY\",\n    get: function get() {\n      return PLUGIN_PRIORITY;\n    }\n  }, {\n    key: \"CALCULATION_STEP\",\n    get: function get() {\n      return 50;\n    }\n  }, {\n    key: \"SYNC_CALCULATION_LIMIT\",\n    get: function get() {\n      return 50;\n    }\n  }]);\n\n  return AutoColumnSize;\n}(BasePlugin);"]},"metadata":{},"sourceType":"module"}