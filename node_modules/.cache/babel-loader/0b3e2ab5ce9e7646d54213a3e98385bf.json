{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\modelledDataTable\\\\modelledDataTable.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Table } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ModelledDataTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchText: '',\n      searchedColumn: '',\n      data: [],\n      displayData: [],\n      filterData: [\"\", \"\", \"\", \"\", \"\"],\n      tab: this.props.currentTab,\n      selectedRows: [],\n      selectedRowsKeys: [],\n      updateData: this.props.updateData,\n      username: \"\",\n      acronyms: null,\n      filters: []\n    };\n\n    this.getColumnSearchProps = dataIndex => ({\n      render: text => text\n    });\n\n    this.handleReset = clearFilters => {\n      clearFilters();\n      this.setState({\n        searchText: ''\n      });\n    };\n\n    this.onSelectChange = (selectedRowKeys, selectedRows) => {\n      let ids = [];\n\n      for (let i = 0; i < selectedRows.length; i++) {\n        ids.push(selectedRows[i].id.props.children);\n      }\n\n      this.setState({\n        selectedRowsKeys: selectedRowKeys,\n        selectedRows: selectedRows\n      }); //this.setState({ selectedRows: selectedRows });\n\n      this.props.onChange(ids);\n    };\n  }\n\n  unlock(isoid) {\n    this.props.unlock(isoid);\n  }\n\n  componentDidMount() {\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/api/modelled\", options).then(response => response.json()).then(async json => {\n      var rows = [];\n      var row = null;\n\n      for (let i = 0; i < json.rows.length; i++) {\n        row = {\n          id: json.rows[i].isoid,\n          tag: json.rows[i].tag,\n          type: json.rows[i].code.toString()\n        };\n\n        if (json.rows[i].blocked === 1 && this.props.role === \"SpecialityLead\") {\n          console.log(\"ASD\");\n          row.id = /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [json.rows[i].isoid, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              onClick: () => this.unlock(json.rows[i].isoid),\n              style: {\n                fontSize: \"12px\",\n                borderColor: \"black\",\n                padding: \"2px 5px 2px 5px\",\n                marginLeft: \"10px\"\n              },\n              children: \"UNLOCK\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 50\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 24\n          }, this);\n        }\n\n        if (row) {\n          if (i % 2 === 0) {\n            row[\"color\"] = \"#fff\";\n          } else {\n            row[\"color\"] = \"#eee\";\n          }\n        }\n\n        if (row.id && row.tag) {\n          rows.push(row);\n        }\n      }\n\n      let filterRow = [{\n        tag: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"filter__input\",\n            placeholder: \"TAG\",\n            onChange: e => this.filter(0, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 36\n        }, this),\n        id: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"filter__input\",\n            placeholder: \"ISO ID\",\n            onChange: e => this.filter(1, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 171\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 166\n        }, this),\n        type: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"filter__input\",\n            placeholder: \"Type\",\n            onChange: e => this.filter(2, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 306\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 301\n        }, this)\n      }];\n      this.setState({\n        data: rows,\n        role: this.props.role,\n        displayData: rows\n      });\n      await this.setState({\n        filters: filterRow\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps !== this.props) {\n      const options = {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/api/modelled\", options).then(response => response.json()).then(async json => {\n        var rows = [];\n        var row = null;\n\n        for (let i = 0; i < json.rows.length; i++) {\n          row = {\n            id: json.rows[i].isoid,\n            tag: json.rows[i].tag,\n            type: json.rows[i].code.toString()\n          };\n\n          if (json.rows[i].blocked === 1 && this.props.role === \"SpecialityLead\") {\n            row.id = /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [json.rows[i].isoid, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success\",\n                onClick: () => this.unlock(json.rows[i].isoid),\n                style: {\n                  fontSize: \"12px\",\n                  borderColor: \"black\",\n                  padding: \"2px 5px 2px 5px\",\n                  marginLeft: \"10px\"\n                },\n                children: \"UNLOCK\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 50\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 24\n            }, this);\n          }\n\n          if (row) {\n            if (i % 2 === 0) {\n              row[\"color\"] = \"#fff\";\n            } else {\n              row[\"color\"] = \"#eee\";\n            }\n          }\n\n          if (row.id && row.tag) {\n            rows.push(row);\n          }\n        }\n\n        let filterRow = [{\n          tag: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"filter__input\",\n              placeholder: \"TAG\",\n              onChange: e => this.filter(0, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 36\n          }, this),\n          id: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"filter__input\",\n              placeholder: \"ISO ID\",\n              onChange: e => this.filter(1, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 171\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 166\n          }, this),\n          type: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"filter__input\",\n              placeholder: \"Type\",\n              onChange: e => this.filter(2, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 306\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 301\n          }, this)\n        }];\n        this.setState({\n          data: rows,\n          role: this.props.role,\n          displayData: rows\n        });\n        await this.setState({\n          filters: filterRow\n        });\n      });\n    }\n  }\n\n  async filter(column, value) {\n    let fd = this.state.filterData;\n    fd[column] = value;\n    await this.setState({\n      filterData: fd\n    });\n    let auxDisplayData = this.state.data;\n    let resultData = [];\n    let fil,\n        exists = null;\n\n    for (let i = 0; i < auxDisplayData.length; i++) {\n      exists = true;\n\n      for (let column = 0; column < Object.keys(auxDisplayData[i]).length - 1; column++) {\n        fil = Object.keys(auxDisplayData[i])[column];\n\n        if (fil === \"tag\") {\n          fil = \"id\";\n        } else if (fil === \"id\") {\n          fil = \"tag\";\n        }\n\n        if (auxDisplayData[i][fil].props) {\n          if (this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].props.children[0].includes(this.state.filterData[column])) {\n            exists = false;\n          }\n        } else if (auxDisplayData[i][fil]) {\n          if (this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].includes(this.state.filterData[column])) {\n            exists = false;\n          }\n        } else {\n          exists = false;\n        }\n      }\n\n      if (exists) {\n        resultData.push(auxDisplayData[i]);\n      }\n    }\n\n    await this.setState({\n      displayData: resultData\n    });\n  }\n\n  render() {\n    const columns = [{\n      title: /*#__PURE__*/_jsxDEV(\"center\", {\n        className: \"dataTable__header__text\",\n        children: \"TAG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'tag',\n      key: 'tag',\n      ...this.getColumnSearchProps('tag'),\n      sorter: {\n        compare: (a, b) => a.tag.localeCompare(b.tag)\n      }\n    }, {\n      title: /*#__PURE__*/_jsxDEV(\"center\", {\n        className: \"dataTable__header__text\",\n        children: \"ISO ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'id',\n      key: 'id',\n      ...this.getColumnSearchProps('id'),\n      sorter: {\n        compare: (a, b) => a.id.localeCompare(b.id)\n      }\n    }, {\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dataTable__header__text\",\n        children: \"Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'type',\n      key: 'type',\n      ...this.getColumnSearchProps('type'),\n      sorter: {\n        compare: (a, b) => a.type.localeCompare(b.type)\n      }\n    }];\n    var totalElements = null;\n\n    if (this.state.data.length === 0) {\n      totalElements = null;\n    } else {\n      totalElements = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          bottom: 25,\n          left: 0\n        },\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\"Total elements: \", this.state.data.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 24\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.updateData, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dataTable__container\",\n        style: {\n          float: \"top\",\n          position: \"relative\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Table, {\n          className: \"customTable\",\n          style: {\n            height: '540px'\n          },\n          bordered: true,\n          columns: columns,\n          dataSource: this.state.displayData,\n          scroll: {\n            y: 437\n          },\n          pagination: {\n            disabled: true,\n            defaultPageSize: 5000\n          },\n          size: \"small\",\n          rowClassName: record => record.color.replace('#', '')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          className: \"filter__table\",\n          pagination: {\n            disabled: true\n          },\n          scroll: {\n            y: 437\n          },\n          showHeader: false,\n          bordered: true,\n          columns: columns,\n          dataSource: this.state.filters,\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 9\n        }, this), totalElements]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ModelledDataTable;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/modelledDataTable/modelledDataTable.js"],"names":["React","Table","ModelledDataTable","Component","state","searchText","searchedColumn","data","displayData","filterData","tab","props","currentTab","selectedRows","selectedRowsKeys","updateData","username","acronyms","filters","getColumnSearchProps","dataIndex","render","text","handleReset","clearFilters","setState","onSelectChange","selectedRowKeys","ids","i","length","push","id","children","onChange","unlock","isoid","componentDidMount","options","method","headers","fetch","process","env","REACT_APP_SERVER","REACT_APP_NODE_PORT","then","response","json","rows","row","tag","type","code","toString","blocked","role","console","log","fontSize","borderColor","padding","marginLeft","filterRow","e","filter","target","value","componentDidUpdate","prevProps","prevState","column","fd","auxDisplayData","resultData","fil","exists","Object","keys","includes","columns","title","key","sorter","compare","a","b","localeCompare","totalElements","position","bottom","left","float","height","y","disabled","defaultPageSize","record","color","replace"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Table } from 'antd';\r\n\r\n\r\nclass ModelledDataTable extends React.Component{\r\n  state = {\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    data: [],\r\n    displayData: [],\r\n    filterData: [\"\", \"\", \"\", \"\", \"\"],\r\n    tab: this.props.currentTab,\r\n    selectedRows: [],\r\n    selectedRowsKeys: [],\r\n    updateData: this.props.updateData,\r\n    username: \"\",\r\n    acronyms : null,\r\n    filters: []\r\n  };\r\n\r\n  unlock(isoid){\r\n    this.props.unlock(isoid)\r\n  }\r\n\r\n  componentDidMount(){\r\n\r\n    const options = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n    }\r\n\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/modelled\", options)\r\n      .then(response => response.json())\r\n      .then(async json => {\r\n        var rows = []\r\n        var row = null\r\n        for(let i = 0; i < json.rows.length; i++){\r\n            row = {id: json.rows[i].isoid, tag: json.rows[i].tag, type: json.rows[i].code.toString()}\r\n            if(json.rows[i].blocked === 1 && this.props.role === \"SpecialityLead\"){\r\n              console.log(\"ASD\")\r\n              row.id = <div>{json.rows[i].isoid} <button className=\"btn btn-success\" onClick={()=>this.unlock(json.rows[i].isoid)} style={{fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\",  marginLeft:\"10px\"}}>UNLOCK</button></div>\r\n            }\r\n            if(row){\r\n              if(i % 2 === 0){\r\n                row[\"color\"] = \"#fff\"\r\n              }else{\r\n                row[\"color\"] = \"#eee\"\r\n              }\r\n            }\r\n            if(row.id && row.tag){\r\n              rows.push(row)\r\n            }\r\n            \r\n            }\r\n        \r\n            let filterRow = [{tag: <div><input type=\"text\" className=\"filter__input\" placeholder=\"TAG\" onChange={(e) => this.filter(0, e.target.value)}/></div>, id: <div><input type=\"text\" className=\"filter__input\" placeholder=\"ISO ID\" onChange={(e) => this.filter(1, e.target.value)}/></div>, type: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Type\" onChange={(e) => this.filter(2,e.target.value)}/></div>}]\r\n             \r\n            this.setState({data : rows, role: this.props.role, displayData: rows});\r\n            await this.setState({filters : filterRow})\r\n\r\n    }) \r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n\r\n    if(prevProps !== this.props){\r\n      const options = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n    }\r\n\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/modelled\", options)\r\n      .then(response => response.json())\r\n      .then(async json => {\r\n        var rows = []\r\n        var row = null\r\n        for(let i = 0; i < json.rows.length; i++){\r\n            row = {id: json.rows[i].isoid, tag: json.rows[i].tag, type: json.rows[i].code.toString()}\r\n            if(json.rows[i].blocked === 1 && this.props.role === \"SpecialityLead\"){\r\n              row.id = <div>{json.rows[i].isoid} <button className=\"btn btn-success\" onClick={()=>this.unlock(json.rows[i].isoid)} style={{fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\",  marginLeft:\"10px\"}}>UNLOCK</button></div>\r\n            }\r\n            if(row){\r\n              if(i % 2 === 0){\r\n                row[\"color\"] = \"#fff\"\r\n              }else{\r\n                row[\"color\"] = \"#eee\"\r\n              }\r\n            }\r\n            if(row.id && row.tag){\r\n              rows.push(row)\r\n            }\r\n            \r\n            }\r\n        \r\n            let filterRow = [{tag: <div><input type=\"text\" className=\"filter__input\" placeholder=\"TAG\" onChange={(e) => this.filter(0, e.target.value)}/></div>, id: <div><input type=\"text\" className=\"filter__input\" placeholder=\"ISO ID\" onChange={(e) => this.filter(1, e.target.value)}/></div>, type: <div><input type=\"text\" className=\"filter__input\" placeholder=\"Type\" onChange={(e) => this.filter(2,e.target.value)}/></div>}]\r\n             \r\n            this.setState({data : rows, role: this.props.role, displayData: rows});\r\n            await this.setState({filters : filterRow})\r\n\r\n    }) \r\n    }\r\n\r\n  }\r\n\r\n  async filter(column, value){\r\n    let fd = this.state.filterData\r\n    fd[column] = value\r\n    await this.setState({filterData: fd})\r\n\r\n    let auxDisplayData = this.state.data\r\n    let resultData = []\r\n    let fil, exists = null\r\n    for(let i = 0; i < auxDisplayData.length; i++){\r\n      exists = true\r\n      for(let column = 0; column < Object.keys(auxDisplayData[i]).length-1; column ++){\r\n        fil = Object.keys(auxDisplayData[i])[column]\r\n        if(fil === \"tag\"){\r\n          fil = \"id\"\r\n        }else if(fil === \"id\"){\r\n          fil = \"tag\"\r\n        }\r\n        if(auxDisplayData[i][fil].props){\r\n          if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].props.children[0].includes(this.state.filterData[column])){\r\n            exists = false\r\n          }        \r\n        }else if(auxDisplayData[i][fil]){\r\n          if(this.state.filterData[column] !== \"\" && this.state.filterData[column] && !auxDisplayData[i][fil].includes(this.state.filterData[column])){\r\n            exists = false\r\n          }\r\n        }else{\r\n          exists = false\r\n        }\r\n          \r\n        \r\n      }\r\n      if(exists){\r\n        resultData.push(auxDisplayData[i])\r\n      }\r\n    }\r\n    await this.setState({displayData: resultData})\r\n  }\r\n  \r\n  getColumnSearchProps = dataIndex => ({\r\n    \r\n    render: text => \r\n      \r\n      text\r\n    \r\n      \r\n  });\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys, selectedRows) => {\r\n    let ids = []\r\n    for(let i = 0; i < selectedRows.length; i++){\r\n      ids.push(selectedRows[i].id.props.children)\r\n    }\r\n    this.setState({\r\n      selectedRowsKeys: selectedRowKeys,\r\n      selectedRows: selectedRows\r\n    })\r\n    //this.setState({ selectedRows: selectedRows });\r\n    this.props.onChange(ids);\r\n    \r\n  };\r\n  \r\n\r\n  render() {\r\n\r\n    const columns = [\r\n      {\r\n        title: <center className=\"dataTable__header__text\">TAG</center>,\r\n        dataIndex: 'tag',\r\n        key: 'tag',\r\n        ...this.getColumnSearchProps('tag'),\r\n        sorter:{\r\n          compare: (a, b) => a.tag.localeCompare(b.tag),\r\n        },\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">ISO ID</center>,\r\n        dataIndex: 'id',\r\n        key: 'id',\r\n        ...this.getColumnSearchProps('id'),\r\n        sorter:{\r\n          compare: (a, b) => a.id.localeCompare(b.id),\r\n        },\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">Type</div>,\r\n        dataIndex: 'type',\r\n        key: 'type',\r\n        ...this.getColumnSearchProps('type'),\r\n        sorter: {\r\n          compare: (a, b) => a.type.localeCompare(b.type),\r\n        },\r\n      },\r\n    ];\r\n\r\n    var totalElements = null;\r\n    if (this.state.data.length === 0){\r\n      totalElements = null;\r\n    }else{\r\n      totalElements = (<div style={{position: \"absolute\", bottom: 25, left:0}}>\r\n      <b>Total elements: {this.state.data.length}</b>\r\n     </div>);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {this.state.updateData}\r\n        <div className=\"dataTable__container\" style={{float:\"top\", position:\"relative\"}}>\r\n        <Table className=\"customTable\" style={{ height: '540px' }} bordered = {true}  columns={columns} dataSource={this.state.displayData} scroll={{y:437}} pagination={{disabled:true, defaultPageSize:5000}} size=\"small\" rowClassName= {(record) => record.color.replace('#', '')}/>\r\n        <Table className=\"filter__table\" pagination={{disabled:true}} scroll={{y:437}} showHeader = {false} bordered = {true} columns={columns} dataSource={this.state.filters} size=\"small\"/>\r\n          {totalElements}\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModelledDataTable;"]},"metadata":{},"sourceType":"module"}