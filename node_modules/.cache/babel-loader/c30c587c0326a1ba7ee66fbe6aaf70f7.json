{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\progressPlotCurve\\\\progressPlotCurve.js\";\nimport React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ProgressPlotCurve extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      pipesWeight: 0,\n      instsWeight: 0,\n      equisWeight: 0,\n      civilsWeight: 0,\n      elecsWeight: 0\n    };\n  }\n\n  async componentDidMount() {\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/currentProgress\", options).then(response => response.json()).then(async json => {\n      await this.setState({\n        pipesWeight: json.weight\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/equipments/weight\", options).then(response => response.json()).then(async json => {\n      await this.setState({\n        equisWeight: json.weight\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/civils/weight\", options).then(response => response.json()).then(async json => {\n      await this.setState({\n        civilsWeight: json.weight\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/instrumentation/weight\", options).then(response => response.json()).then(async json => {\n      await this.setState({\n        instsWeight: json.weight\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/electrical/weight\", options).then(response => response.json()).then(async json => {\n      await this.setState({\n        elecsWeight: json.weight\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/gcurve\", options).then(response => response.json()).then(async json => {\n      let weeks = [];\n\n      for (let i = 0; i < json.rows.length; i++) {\n        let progress = json.rows[i].progress_pipes * (this.state.pipesWeight / 100) + json.rows[i].progress_equis * (this.state.equisWeight / 100) + json.rows[i].progress_insts * (this.state.pipesInsts / 100) + json.rows[i].progress_civils * (this.state.civilsWeight / 100) + json.rows[i].progress_elecs * (this.state.elecsWeight / 100);\n        let estimated = json.rows[i].estimated_pipes * (this.state.pipesWeight / 100) + json.rows[i].estimated_equis * (this.state.equisWeight / 100) + json.rows[i].estimated_insts * (this.state.pipesInsts / 100) + json.rows[i].estimated_civils * (this.state.civilsWeight / 100) + json.rows[i].estimated_elecs * (this.state.elecsWeight / 100);\n        weeks.push({\n          name: \"W\" + json.rows[i].week,\n          estimated: estimated,\n          progress: progress\n        });\n      }\n\n      await this.setState({\n        data: weeks\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"6000%\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        width: 500,\n        height: 300,\n        data: this.state.data,\n        margin: {\n          top: 35,\n          right: 30,\n          left: 20,\n          bottom: -15\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          label: {\n            value: \"Progress(%)\",\n            position: \"insideLeft\",\n            angle: -90,\n            dy: 30\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"progress\",\n          stroke: \"blue\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"estimated\",\n          stroke: \"red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 3\n    }, this);\n  }\n\n}\nProgressPlotCurve.demoUrl = 'https://codesandbox.io/s/simple-line-chart-kec3v';","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/progressPlotCurve/progressPlotCurve.js"],"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","ProgressPlotCurve","PureComponent","state","data","pipesWeight","instsWeight","equisWeight","civilsWeight","elecsWeight","componentDidMount","options","method","headers","fetch","process","env","REACT_APP_SERVER","REACT_APP_NODE_PORT","then","response","json","setState","weight","catch","error","console","log","weeks","i","rows","length","progress","progress_pipes","progress_equis","progress_insts","pipesInsts","progress_civils","progress_elecs","estimated","estimated_pipes","estimated_equis","estimated_insts","estimated_civils","estimated_elecs","push","name","week","render","top","right","left","bottom","value","position","angle","dy","r","demoUrl"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\n  export default class ProgressPlotCurve extends React.PureComponent {\r\n\tstatic demoUrl = 'https://codesandbox.io/s/simple-line-chart-kec3v';\r\n\t\r\n\tstate = {\r\n\t\tdata: [],\r\n        pipesWeight: 0,\r\n        instsWeight: 0,\r\n        equisWeight: 0,\r\n        civilsWeight: 0,\r\n        elecsWeight: 0\r\n\t  };\r\n\r\n\r\n\tasync componentDidMount (){\r\n\r\n\t\tconst options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/currentProgress\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                await this.setState({pipesWeight: json.weight})\r\n            }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })   \r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/equipments/weight\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                await this.setState({equisWeight: json.weight})\r\n            }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            }) \r\n            \r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/civils/weight\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                await this.setState({civilsWeight: json.weight})\r\n            }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            }) \r\n            \r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/instrumentation/weight\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                await this.setState({instsWeight: json.weight})\r\n            }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })   \r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/electrical/weight\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                await this.setState({elecsWeight: json.weight})\r\n            }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })    \r\n\r\n        \r\n\r\n\t\tawait fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/gcurve\", options)\r\n\t\t.then(response => response.json())\r\n\t\t.then(async json=>{\r\n\t\t\tlet weeks = []\r\n\t\t\tfor(let i = 0; i < json.rows.length; i++){\r\n\t\t\t\tlet progress = json.rows[i].progress_pipes*(this.state.pipesWeight/100) + json.rows[i].progress_equis*(this.state.equisWeight/100) + json.rows[i].progress_insts*(this.state.pipesInsts/100) + json.rows[i].progress_civils*(this.state.civilsWeight/100) + json.rows[i].progress_elecs*(this.state.elecsWeight/100)\r\n\t\t\t\tlet estimated = json.rows[i].estimated_pipes*(this.state.pipesWeight/100) + json.rows[i].estimated_equis*(this.state.equisWeight/100) + json.rows[i].estimated_insts*(this.state.pipesInsts/100) + json.rows[i].estimated_civils*(this.state.civilsWeight/100) + json.rows[i].estimated_elecs*(this.state.elecsWeight/100)\r\n\t\t\t\tweeks.push({name: \"W\"+json.rows[i].week, estimated: estimated, progress: progress})\r\n            }\r\n\r\n\t\t\tawait this.setState({data: weeks})\r\n\t\t})\r\n\t}\r\n\t\r\n\r\n\trender() {\r\n\t  return (\r\n\t\t<ResponsiveContainer width=\"100%\" height=\"6000%\">\r\n\t\t  <LineChart\r\n\t\t\twidth={500}\r\n\t\t\theight={300}\r\n\t\t\tdata={this.state.data}\r\n\t\t\tmargin={{\r\n\t\t\t  top: 35,\r\n\t\t\t  right: 30,\r\n\t\t\t  left: 20,\r\n\t\t\t  bottom: -15,\r\n\t\t\t}}\r\n\t\t  >\r\n\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\r\n\t\t\t<XAxis dataKey=\"name\" />\r\n\t\t\t<YAxis label={{ value: \"Progress(%)\", position: \"insideLeft\", angle: -90,   dy: 30}} />\r\n\t\t\t<Tooltip />\r\n\t\t\t<Legend />\r\n\t\t\t<Line type=\"monotone\" dataKey=\"progress\" stroke=\"blue\" activeDot={{ r: 8 }} />\r\n\t\t\t<Line type=\"monotone\" dataKey=\"estimated\" stroke=\"red\" />\r\n\t\t  </LineChart>\r\n\t\t</ResponsiveContainer>\r\n\t  );\r\n\t}\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}