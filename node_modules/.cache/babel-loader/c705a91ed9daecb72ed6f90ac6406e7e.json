{"ast":null,"code":"/**\r\n * An array diff implementation. The function iterates through the arrays and depends\r\n * on the diff results, collect the changes as a list of the objects.\r\n *\r\n * Each object contains information about the differences in the indexes of the arrays.\r\n * The changes also contain data about the new and previous array values.\r\n *\r\n * @param {Array} baseArray The base array to diff from.\r\n * @param {Array} newArray The new array to compare with.\r\n * @returns {Array}\r\n */\nexport function arrayDiff(baseArray, newArray) {\n  var changes = [];\n  var i = 0;\n  var j = 0;\n  /* eslint-disable no-plusplus */\n\n  for (; i < baseArray.length && j < newArray.length; i++, j++) {\n    if (baseArray[i] !== newArray[j]) {\n      changes.push({\n        op: 'replace',\n        index: j,\n        oldValue: baseArray[i],\n        newValue: newArray[j]\n      });\n    }\n  }\n\n  for (; i < newArray.length; i++) {\n    changes.push({\n      op: 'insert',\n      index: i,\n      oldValue: void 0,\n      newValue: newArray[i]\n    });\n  }\n\n  for (; j < baseArray.length; j++) {\n    changes.push({\n      op: 'remove',\n      index: j,\n      oldValue: baseArray[j],\n      newValue: void 0\n    });\n  }\n\n  return changes;\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/translations/changesObservable/utils.mjs"],"names":["arrayDiff","baseArray","newArray","changes","i","j","length","push","op","index","oldValue","newValue"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,SAAT,CAAmBC,SAAnB,EAA8BC,QAA9B,EAAwC;AAC7C,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AACA;;AAEA,SAAOD,CAAC,GAAGH,SAAS,CAACK,MAAd,IAAwBD,CAAC,GAAGH,QAAQ,CAACI,MAA5C,EAAoDF,CAAC,IAAIC,CAAC,EAA1D,EAA8D;AAC5D,QAAIJ,SAAS,CAACG,CAAD,CAAT,KAAiBF,QAAQ,CAACG,CAAD,CAA7B,EAAkC;AAChCF,MAAAA,OAAO,CAACI,IAAR,CAAa;AACXC,QAAAA,EAAE,EAAE,SADO;AAEXC,QAAAA,KAAK,EAAEJ,CAFI;AAGXK,QAAAA,QAAQ,EAAET,SAAS,CAACG,CAAD,CAHR;AAIXO,QAAAA,QAAQ,EAAET,QAAQ,CAACG,CAAD;AAJP,OAAb;AAMD;AACF;;AAED,SAAOD,CAAC,GAAGF,QAAQ,CAACI,MAApB,EAA4BF,CAAC,EAA7B,EAAiC;AAC/BD,IAAAA,OAAO,CAACI,IAAR,CAAa;AACXC,MAAAA,EAAE,EAAE,QADO;AAEXC,MAAAA,KAAK,EAAEL,CAFI;AAGXM,MAAAA,QAAQ,EAAE,KAAK,CAHJ;AAIXC,MAAAA,QAAQ,EAAET,QAAQ,CAACE,CAAD;AAJP,KAAb;AAMD;;AAED,SAAOC,CAAC,GAAGJ,SAAS,CAACK,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAChCF,IAAAA,OAAO,CAACI,IAAR,CAAa;AACXC,MAAAA,EAAE,EAAE,QADO;AAEXC,MAAAA,KAAK,EAAEJ,CAFI;AAGXK,MAAAA,QAAQ,EAAET,SAAS,CAACI,CAAD,CAHR;AAIXM,MAAAA,QAAQ,EAAE,KAAK;AAJJ,KAAb;AAMD;;AAED,SAAOR,OAAP;AACD","sourcesContent":["/**\r\n * An array diff implementation. The function iterates through the arrays and depends\r\n * on the diff results, collect the changes as a list of the objects.\r\n *\r\n * Each object contains information about the differences in the indexes of the arrays.\r\n * The changes also contain data about the new and previous array values.\r\n *\r\n * @param {Array} baseArray The base array to diff from.\r\n * @param {Array} newArray The new array to compare with.\r\n * @returns {Array}\r\n */\r\nexport function arrayDiff(baseArray, newArray) {\r\n  var changes = [];\r\n  var i = 0;\r\n  var j = 0;\r\n  /* eslint-disable no-plusplus */\r\n\r\n  for (; i < baseArray.length && j < newArray.length; i++, j++) {\r\n    if (baseArray[i] !== newArray[j]) {\r\n      changes.push({\r\n        op: 'replace',\r\n        index: j,\r\n        oldValue: baseArray[i],\r\n        newValue: newArray[j]\r\n      });\r\n    }\r\n  }\r\n\r\n  for (; i < newArray.length; i++) {\r\n    changes.push({\r\n      op: 'insert',\r\n      index: i,\r\n      oldValue: void 0,\r\n      newValue: newArray[i]\r\n    });\r\n  }\r\n\r\n  for (; j < baseArray.length; j++) {\r\n    changes.push({\r\n      op: 'remove',\r\n      index: j,\r\n      oldValue: baseArray[j],\r\n      newValue: void 0\r\n    });\r\n  }\r\n\r\n  return changes;\r\n}"]},"metadata":{},"sourceType":"module"}