{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\dragAndDrop\\\\dragAndDrop.js\";\n//Drag and drop para subir isometricas\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Upload, message, Button } from 'antd';\nimport { InboxOutlined } from '@ant-design/icons';\nimport Alert from '@material-ui/lab/Alert';\nimport Collapse from '@material-ui/core/Collapse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DragAndDrop extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileList: [],\n      success: false,\n      error: false,\n      uploaded: false,\n      errorAlerts: []\n    };\n\n    this.handleUpload = () => {\n      this.setState({\n        success: false,\n        uploaded: false,\n        error: false,\n        errorAlerts: [],\n        counter: 0\n      });\n      this.state.fileList.forEach(file => {\n        const formData = new FormData();\n        formData.append('file', file);\n        this.uploadFile(formData);\n      });\n    };\n  }\n\n  async uploadFile(file) {\n    await fetch('http://localhost:5000/upload', {\n      // content-type header should not be specified!\n      method: 'POST',\n      body: file\n    }).then(response => {\n      // Do something with the successful response\n      if (response.status === 200) {\n        if (!this.state.success) {\n          this.setState({\n            success: true\n          });\n        }\n\n        let filename = null;\n\n        for (let value of file.values()) {\n          filename = value.name;\n        }\n\n        let extension = \"\";\n        let i = filename.lastIndexOf('.');\n\n        if (i > 0) {\n          extension = filename.substring(i + 1);\n        }\n\n        if (extension === \"pdf\") {\n          let body = {\n            fileName: filename,\n            user: this.props.user\n          };\n          fetch('http://localhost:5000/uploadHis', {\n            // content-type header should not be specified!\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n          }).then(response => console.log(response.json())).catch(error => message.error(error));\n        }\n      } else {\n        for (let value of file.values()) {\n          let joined = this.state.errorAlerts.concat(value.name);\n          this.setState({\n            errorAlerts: joined,\n            error: true\n          });\n        }\n      }\n\n      let aux = this.state.fileList;\n      aux.splice(0, 1);\n      this.setState({\n        fileList: aux\n      });\n      let max = this.state.fileList.length;\n      console.log(max);\n\n      if (max === 0) {\n        this.setState({\n          uploaded: true\n        });\n      }\n    }).catch(error => message.error(error));\n  }\n\n  render() {\n    const fileList = this.state.fileList;\n    const errorAlerts = this.state.errorAlerts;\n    const {\n      Dragger\n    } = Upload;\n    let errors = [];\n\n    for (let i = 0; i < errorAlerts.length; i++) {\n      let extension = \"\";\n      let j = errorAlerts[i].lastIndexOf('.');\n\n      if (j > 0) {\n        extension = errorAlerts[i].substring(j + 1);\n      }\n\n      if (extension === 'zip' || extension === 'pdf') {\n        errors.push( /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          children: [\"The file \", errorAlerts[i], \" already exists!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 19\n        }, this));\n      } else {\n        errors.push( /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          children: [\"The file \", errorAlerts[i], \" has an invalid format!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 19\n        }, this));\n      }\n    }\n\n    const props = {\n      name: 'file',\n      multiple: true,\n      action: 'http://localhost:5000/upload',\n      onRemove: file => {\n        this.setState(state => {\n          const index = state.fileList.indexOf(file);\n          const newFileList = state.fileList.slice();\n          newFileList.splice(index, 1);\n          return {\n            fileList: newFileList\n          };\n        });\n      },\n      beforeUpload: file => {\n        this.setState(state => ({\n          fileList: [...state.fileList, file],\n          success: false,\n          error: 0,\n          uploaded: false\n        }));\n        return false;\n      },\n      accept: \".pdf,.zip\",\n      fileList\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleUpload,\n        class: \"btn btn-info btn-lg\",\n        style: {\n          backgroundColor: \"#17a2b8\",\n          width: \"100%\"\n        },\n        children: \"Upload files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Dragger, { ...props,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ant-upload-drag-icon\",\n          children: /*#__PURE__*/_jsxDEV(InboxOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ant-upload-text\",\n          children: \"Click or drag the isometrics to this area to upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ant-upload-hint\",\n          children: \"You can drop single or multiple isometrics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 15\n      }, this), \",\", /*#__PURE__*/_jsxDEV(Collapse, {\n        in: this.state.success,\n        children: /*#__PURE__*/_jsxDEV(Collapse, {\n          in: this.state.uploaded,\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            children: \"The files have been uploaded!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: this.state.error,\n        children: /*#__PURE__*/_jsxDEV(Collapse, {\n          in: this.state.uploaded,\n          children: errors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default DragAndDrop;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/dragAndDrop/dragAndDrop.js"],"names":["React","Upload","message","Button","InboxOutlined","Alert","Collapse","DragAndDrop","Component","state","fileList","success","error","uploaded","errorAlerts","handleUpload","setState","counter","forEach","file","formData","FormData","append","uploadFile","fetch","method","body","then","response","status","filename","value","values","name","extension","i","lastIndexOf","substring","fileName","user","props","headers","JSON","stringify","console","log","json","catch","joined","concat","aux","splice","max","length","render","Dragger","errors","j","push","multiple","action","onRemove","index","indexOf","newFileList","slice","beforeUpload","accept","backgroundColor","width"],"mappings":"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","sourcesContent":["//Drag and drop para subir isometricas\r\n\r\nimport React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Upload, message , Button} from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse'\r\n\r\n\r\nclass DragAndDrop extends React.Component{\r\n\r\n  state = {\r\n    fileList: [],\r\n    success: false,\r\n    error: false,\r\n    uploaded: false,\r\n    errorAlerts: [],\r\n  };\r\n\r\n  async uploadFile(file) {\r\n    await fetch('http://localhost:5000/upload', {\r\n      // content-type header should not be specified!\r\n      method: 'POST',\r\n      body: file,\r\n    })\r\n      .then(response => {\r\n        // Do something with the successful response\r\n        if (response.status === 200){\r\n          if(!this.state.success){\r\n              this.setState({\r\n                success : true,\r\n              })\r\n          }\r\n\r\n          let filename = null;\r\n          for (let value of file.values()){\r\n            filename = value.name\r\n          }\r\n          let extension = \"\";\r\n          let i = filename.lastIndexOf('.');\r\n          if (i > 0) {\r\n            extension = filename.substring(i+1);\r\n          }\r\n          if(extension === \"pdf\"){\r\n            let body =  {\r\n              fileName: filename,\r\n              user: this.props.user,\r\n            }\r\n            fetch('http://localhost:5000/uploadHis', {\r\n              // content-type header should not be specified!\r\n              method: 'POST',\r\n              headers: {\r\n                \"Content-Type\": \"application/json\"\r\n              },\r\n              body: JSON.stringify(body)\r\n            }).then(response => console.log(response.json()))\r\n            .catch(error => message.error(error))\r\n          }\r\n        }else{\r\n          for (let value of file.values()) {\r\n            let joined = this.state.errorAlerts.concat(value.name);\r\n            this.setState({\r\n              errorAlerts : joined,\r\n              error: true\r\n            })\r\n          }\r\n        }\r\n        let aux = this.state.fileList;\r\n        aux.splice(0,1)\r\n        this.setState({\r\n          fileList: aux,\r\n        });\r\n        let max = this.state.fileList.length;\r\n        console.log(max)\r\n        if (max === 0){\r\n          this.setState({\r\n            uploaded: true\r\n          })\r\n        }\r\n\r\n      })\r\n      .catch(error => message.error(error)\r\n    );\r\n  }\r\n\r\n  handleUpload = () =>{\r\n    this.setState({\r\n      success: false,\r\n      uploaded: false,\r\n      error: false,\r\n      errorAlerts: [],\r\n      counter: 0\r\n    })\r\n\r\n    this.state.fileList.forEach(file => {\r\n\r\n      const formData  = new FormData();\r\n      formData.append('file', file);\r\n      this.uploadFile(formData);\r\n\r\n    });    \r\n  }\r\n\r\nrender (){\r\n  \r\n  const fileList = this.state.fileList;\r\n  const errorAlerts = this.state.errorAlerts;\r\n  const { Dragger } = Upload;\r\n\r\n  let errors = []\r\n  for(let i = 0; i < errorAlerts.length; i++){\r\n    let extension = \"\";\r\n    let j = errorAlerts[i].lastIndexOf('.');\r\n    if (j > 0) {\r\n      extension = errorAlerts[i].substring(j+1);\r\n    }\r\n    if (extension === 'zip' || extension === 'pdf' ){\r\n      errors.push(<Alert severity=\"error\"\r\n      >\r\n        The file {errorAlerts[i]} already exists!\r\n\r\n      </Alert>)\r\n    }else{\r\n      errors.push(<Alert severity=\"error\"\r\n      >\r\n        The file {errorAlerts[i]} has an invalid format!\r\n\r\n      </Alert>)\r\n    }\r\n  }\r\n\r\n  const props = {\r\n    name: 'file',\r\n    multiple: true,\r\n    action: 'http://localhost:5000/upload',\r\n    onRemove: file => {\r\n      this.setState(state => {\r\n        const index = state.fileList.indexOf(file);\r\n        const newFileList = state.fileList.slice();\r\n        newFileList.splice(index, 1);\r\n        return {\r\n          fileList: newFileList,\r\n        };\r\n      });\r\n    },\r\n    beforeUpload: file => {\r\n      this.setState(state => ({\r\n        fileList: [...state.fileList, file],\r\n        success: false,\r\n        error: 0,\r\n        uploaded: false\r\n      }));\r\n\r\n      return false;\r\n      },\r\n    accept: \".pdf,.zip\",\r\n      fileList\r\n    };\r\n\r\n      return(\r\n          <div>\r\n            <button onClick={this.handleUpload} class=\"btn btn-info btn-lg\" style={{backgroundColor: \"#17a2b8\", width:\"100%\"}}>Upload files</button>\r\n              <Dragger {...props}>\r\n                \r\n                  <p className=\"ant-upload-drag-icon\">\r\n                    <InboxOutlined />\r\n                  </p>\r\n                  <p className=\"ant-upload-text\">Click or drag the isometrics to this area to upload</p>\r\n                  <p className=\"ant-upload-hint\">\r\n                    You can drop single or multiple isometrics\r\n                  </p>\r\n              </Dragger>,\r\n              <Collapse in={this.state.success}>\r\n                <Collapse in={this.state.uploaded}>\r\n                  <Alert\r\n                  >\r\n                    The files have been uploaded!\r\n\r\n                  </Alert>\r\n              </Collapse>\r\n            </Collapse>\r\n            <Collapse in={this.state.error}>\r\n              <Collapse in={this.state.uploaded}>\r\n                {errors}\r\n              </Collapse>\r\n            </Collapse>\r\n          </div>\r\n      );\r\n      }\r\n}\r\n\r\nexport default DragAndDrop;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}