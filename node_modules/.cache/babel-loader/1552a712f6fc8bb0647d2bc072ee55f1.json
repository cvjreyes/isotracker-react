{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n\n  _classApplyDescriptorSet(receiver, descriptor, value);\n\n  return value;\n}\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n\n    descriptor.value = value;\n  }\n}\n\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n}\n\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n\n  return descriptor.value;\n}\n\nimport { mixin } from \"../../helpers/object.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\n/**\r\n * The ChangesObserver module is an object that represents a disposable resource\r\n * provided by the ChangesObservable module.\r\n *\r\n * @class ChangesObserver\r\n */\n\nvar _currentInitialChanges = /*#__PURE__*/new WeakMap();\n\nexport var ChangesObserver = /*#__PURE__*/function () {\n  function ChangesObserver() {\n    _classCallCheck(this, ChangesObserver);\n\n    _currentInitialChanges.set(this, {\n      writable: true,\n      value: []\n    });\n  }\n\n  _createClass(ChangesObserver, [{\n    key: \"subscribe\",\n    value:\n    /**\r\n     * Subscribes to the observer.\r\n     *\r\n     * @param {Function} callback A function that will be called when the new changes will appear.\r\n     * @returns {ChangesObserver}\r\n     */\n    function subscribe(callback) {\n      this.addLocalHook('change', callback);\n\n      this._write(_classPrivateFieldGet(this, _currentInitialChanges));\n\n      return this;\n    }\n    /**\r\n     * Unsubscribes all subscriptions. After the method call, the observer would not produce\r\n     * any new events.\r\n     *\r\n     * @returns {ChangesObserver}\r\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      this.runLocalHooks('unsubscribe');\n      this.clearLocalHooks();\n      return this;\n    }\n    /**\r\n     * The write method is executed by the ChangesObservable module. The module produces all\r\n     * changes events that are distributed further by the observer.\r\n     *\r\n     * @private\r\n     * @param {object} changes The chunk of changes produced by the ChangesObservable module.\r\n     * @returns {ChangesObserver}\r\n     */\n\n  }, {\n    key: \"_write\",\n    value: function _write(changes) {\n      if (changes.length > 0) {\n        this.runLocalHooks('change', changes);\n      }\n\n      return this;\n    }\n    /**\r\n     * The write method is executed by the ChangesObservable module. The module produces initial\r\n     * changes that will be used to notify new subscribers.\r\n     *\r\n     * @private\r\n     * @param {object} initialChanges The chunk of changes produced by the ChangesObservable module.\r\n     */\n\n  }, {\n    key: \"_writeInitialChanges\",\n    value: function _writeInitialChanges(initialChanges) {\n      _classPrivateFieldSet(this, _currentInitialChanges, initialChanges);\n    }\n  }]);\n\n  return ChangesObserver;\n}();\nmixin(ChangesObserver, localHooks);","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/translations/changesObservable/observer.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_classPrivateFieldSet","receiver","privateMap","value","_classExtractFieldDescriptor","_classApplyDescriptorSet","set","call","_classPrivateFieldGet","_classApplyDescriptorGet","action","has","get","mixin","localHooks","_currentInitialChanges","WeakMap","ChangesObserver","subscribe","callback","addLocalHook","_write","unsubscribe","runLocalHooks","clearLocalHooks","changes","_writeInitialChanges","initialChanges"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/es.weak-map.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\r\n\r\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\r\n\r\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\r\n\r\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\r\n\r\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\r\n\r\nimport { mixin } from \"../../helpers/object.mjs\";\r\nimport localHooks from \"../../mixins/localHooks.mjs\";\r\n/**\r\n * The ChangesObserver module is an object that represents a disposable resource\r\n * provided by the ChangesObservable module.\r\n *\r\n * @class ChangesObserver\r\n */\r\n\r\nvar _currentInitialChanges = /*#__PURE__*/new WeakMap();\r\n\r\nexport var ChangesObserver = /*#__PURE__*/function () {\r\n  function ChangesObserver() {\r\n    _classCallCheck(this, ChangesObserver);\r\n\r\n    _currentInitialChanges.set(this, {\r\n      writable: true,\r\n      value: []\r\n    });\r\n  }\r\n\r\n  _createClass(ChangesObserver, [{\r\n    key: \"subscribe\",\r\n    value:\r\n    /**\r\n     * Subscribes to the observer.\r\n     *\r\n     * @param {Function} callback A function that will be called when the new changes will appear.\r\n     * @returns {ChangesObserver}\r\n     */\r\n    function subscribe(callback) {\r\n      this.addLocalHook('change', callback);\r\n\r\n      this._write(_classPrivateFieldGet(this, _currentInitialChanges));\r\n\r\n      return this;\r\n    }\r\n    /**\r\n     * Unsubscribes all subscriptions. After the method call, the observer would not produce\r\n     * any new events.\r\n     *\r\n     * @returns {ChangesObserver}\r\n     */\r\n\r\n  }, {\r\n    key: \"unsubscribe\",\r\n    value: function unsubscribe() {\r\n      this.runLocalHooks('unsubscribe');\r\n      this.clearLocalHooks();\r\n      return this;\r\n    }\r\n    /**\r\n     * The write method is executed by the ChangesObservable module. The module produces all\r\n     * changes events that are distributed further by the observer.\r\n     *\r\n     * @private\r\n     * @param {object} changes The chunk of changes produced by the ChangesObservable module.\r\n     * @returns {ChangesObserver}\r\n     */\r\n\r\n  }, {\r\n    key: \"_write\",\r\n    value: function _write(changes) {\r\n      if (changes.length > 0) {\r\n        this.runLocalHooks('change', changes);\r\n      }\r\n\r\n      return this;\r\n    }\r\n    /**\r\n     * The write method is executed by the ChangesObservable module. The module produces initial\r\n     * changes that will be used to notify new subscribers.\r\n     *\r\n     * @private\r\n     * @param {object} initialChanges The chunk of changes produced by the ChangesObservable module.\r\n     */\r\n\r\n  }, {\r\n    key: \"_writeInitialChanges\",\r\n    value: function _writeInitialChanges(initialChanges) {\r\n      _classPrivateFieldSet(this, _currentInitialChanges, initialChanges);\r\n    }\r\n  }]);\r\n\r\n  return ChangesObserver;\r\n}();\r\nmixin(ChangesObserver, localHooks);"]},"metadata":{},"sourceType":"module"}