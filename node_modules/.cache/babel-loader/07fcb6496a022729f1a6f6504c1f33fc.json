{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\estimatedPipesExcel\\\\estimatedPipesExcel.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { HotTable } from '@handsontable/react';\nimport 'handsontable/dist/handsontable.full.css';\nimport \"./estimatedPipesExcel.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EstimatedPipesExcel extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchText: '',\n      searchedColumn: '',\n      data: [],\n      tab: this.props.currentTab,\n      selectedRows: [],\n      selectedRowsKeys: [],\n      updateData: this.props.updateData,\n      username: \"\",\n      acronyms: null,\n      diameters: [],\n      areas: [],\n      trains: [\"01\", \"02\", \"03\", \"04\", \"05\"],\n      line_refs: [],\n      new_data: {},\n      warning: false,\n      empty: false,\n      tags: []\n    };\n\n    this.handleChange = async (changes, source) => {\n      if (source !== 'loadData') {\n        let data_aux = this.state.data;\n\n        for (let i = 0; i < changes.length; i += 4) {\n          let row_id = changes[i][0];\n\n          if (this.state.data[row_id].Status === \"ESTIMATED*\" || this.state.data[row_id].Status === \"MODELLED\") {\n            data_aux[row_id][changes[0][1]] = \"##########\";\n            await this.setState({\n              data: data_aux,\n              warning: true\n            });\n          } else {\n            let row = this.state.data[row_id];\n            console.log(i);\n\n            if (changes[i][1] === 'Line reference') {\n              const options = {\n                method: \"GET\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              };\n              await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/getDataByRef/\" + changes[i][3], options).then(response => response.json()).then(async json => {\n                if (json.pipe) {\n                  data_aux[row_id].Unit = json.pipe[0].unit;\n                  data_aux[row_id].Fluid = json.pipe[0].fluid;\n                  data_aux[row_id].Seq = json.pipe[0].seq;\n                  data_aux[row_id].Spec = json.pipe[0].spec_code;\n                  data_aux[row_id].Insulation = json.pipe[0].insulation;\n\n                  if (json.pipe[0].calc_notes !== \"NA\") {\n                    data_aux[row_id].Type = \"TL3\";\n                  } else if (process.env.NODE_MMDN === \"0\") {\n                    if (data_aux[row_id].Diameter < 2.00) {\n                      data_aux[row_id].Type = \"TL1\";\n                    } else {\n                      data_aux[row_id].Type = \"TL2\";\n                    }\n                  } else {\n                    if (data_aux[row_id].Diameter < 50) {\n                      data_aux[row_id].Type = \"TL1\";\n                    } else {\n                      data_aux[row_id].Type = \"TL2\";\n                    }\n                  }\n\n                  await this.setState({\n                    data: data_aux\n                  });\n                }\n              });\n            }\n\n            if (row.Area && row.Diameter && row.Train && row[\"Line reference\"]) {\n              let tag_order = process.env.REACT_APP_TAG_ORDER.split(/[ -]+/);\n              data_aux[row_id].Tag = row[tag_order[0]] + \"-\" + row[tag_order[1]] + \"-\" + row[tag_order[2]] + \"-\" + row[tag_order[3]] + \"-\" + row[tag_order[4]] + \"-\" + row[tag_order[5]] + \"-\" + row[tag_order[6]] + \"_\" + row[tag_order[7]];\n            }\n\n            let new_data = this.state.new_data;\n\n            if (this.state.tags.indexOf(data_aux[row_id].Tag) > -1 && this.state.tags.indexOf(data_aux[row_id].Tag) !== row_id) {\n              data_aux[row_id].Tag = \"ALREADY EXISTS\";\n              data_aux[row_id].Area = \"\";\n              data_aux[row_id].Diameter = \"\";\n              data_aux[row_id].Train = \"\";\n              data_aux[row_id].Status = \"\";\n            } else {\n              data_aux[row_id].Status = \"ESTIMATED\";\n\n              if (data_aux[row_id].Type !== \"TL3\") {\n                if (process.env.NODE_MMDN === \"0\") {\n                  if (data_aux[row_id].Diameter < 2.00) {\n                    data_aux[row_id].Type = \"TL1\";\n                  } else {\n                    data_aux[row_id].Type = \"TL2\";\n                  }\n                } else {\n                  if (data_aux[row_id].Diameter < 50) {\n                    data_aux[row_id].Type = \"TL1\";\n                  } else {\n                    data_aux[row_id].Type = \"TL2\";\n                  }\n                }\n              }\n\n              new_data[row_id] = row;\n            }\n\n            await this.setState({\n              data: data_aux,\n              new_data: new_data\n            });\n\n            if (!row[\"Line reference\"] && row.id) {\n              let new_data = this.state.new_data;\n              new_data[row_id] = {\n                \"Line reference\": \"deleted\",\n                id: row.id\n              };\n              await this.setState({\n                data: data_aux,\n                new_data: new_data\n              });\n            }\n          }\n        }\n      }\n    };\n  }\n\n  async componentDidMount() {\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/api/areas\", options).then(response => response.json()).then(json => {\n      let areas_options = [];\n\n      for (let i = 0; i < json.length; i++) {\n        areas_options.push(json[i].name);\n      }\n\n      this.setState({\n        areas: areas_options\n      });\n    });\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/api/diameters\", options).then(response => response.json()).then(json => {\n      let diameters = [];\n\n      for (let i = 0; i < json.diameters.length; i++) {\n        diameters.push(json.diameters[i].diameter);\n      }\n\n      this.setState({\n        diameters: diameters\n      });\n    });\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/api/lineRefs\", options).then(response => response.json()).then(json => {\n      let line_refs = [];\n\n      for (let i = 0; i < json.line_refs.length; i++) {\n        line_refs.push(json.line_refs[i].line_ref);\n      }\n\n      this.setState({\n        line_refs: line_refs\n      });\n    });\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/modelledEstimatedPipes\", options).then(response => response.json()).then(async json => {\n      let rows = [];\n      let tags = [];\n\n      for (let i = 0; i < json.rows.length; i++) {\n        rows.push({\n          \"Line reference\": json.rows[i].line_reference,\n          \"Tag\": json.rows[i].tag,\n          \"Unit\": json.rows[i].unit,\n          \"Area\": json.rows[i].area,\n          \"Fluid\": json.rows[i].fluid,\n          \"Seq\": json.rows[i].seq,\n          \"Spec\": json.rows[i].spec,\n          \"Type\": json.rows[i].type,\n          \"Diameter\": json.rows[i].diameter,\n          \"Insulation\": json.rows[i].insulation,\n          \"Train\": json.rows[i].train,\n          \"Status\": json.rows[i].status,\n          \"id\": json.rows[i].id\n        });\n        tags.push(json.rows[i].tag);\n      }\n\n      await this.setState({\n        data: rows,\n        tags: tags\n      });\n    });\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    if (prevProps !== this.props) {\n      const options = {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/modelledEstimatedPipes\", options).then(response => response.json()).then(async json => {\n        let rows = [];\n\n        for (let i = 0; i < json.rows.length; i++) {\n          rows.push({\n            \"Line reference\": json.rows[i].line_reference,\n            \"Tag\": json.rows[i].tag,\n            \"Unit\": json.rows[i].unit,\n            \"Area\": json.rows[i].area,\n            \"Fluid\": json.rows[i].fluid,\n            \"Seq\": json.rows[i].seq,\n            \"Spec\": json.rows[i].spec,\n            \"Type\": json.rows[i].type,\n            \"Diameter\": json.rows[i].diameter,\n            \"Insulation\": json.rows[i].insulation,\n            \"Train\": json.rows[i].train,\n            \"Status\": json.rows[i].status,\n            \"id\": json.rows[i].id\n          });\n        }\n\n        await this.setState({\n          data: rows\n        });\n      });\n    }\n  }\n\n  addRow() {\n    let rows = this.state.data;\n    rows.push({\n      \"Line reference\": \"\",\n      \"Tag\": \"\",\n      \"Unit\": \"\",\n      \"Area\": \"\",\n      \"Fluid\": \"\",\n      \"Seq\": \"\",\n      \"Spec\": \"\",\n      \"Type\": \"\",\n      \"Diameter\": \"\",\n      \"Insulation\": \"\",\n      \"Train\": \"\",\n      \"Status\": \"\"\n    });\n    this.setState({\n      data: rows\n    });\n  }\n\n  async submitChanges() {\n    let new_rows = [];\n    Object.entries(this.state.new_data).map(([key, value]) => new_rows.push(value));\n\n    for (let i = 0; i < new_rows.length; i++) {\n      if (new_rows[i][\"Line reference\"] === \"\" || new_rows[i].Tag === \"\" || new_rows[i].Unit === \"\" || new_rows[i].Area === \"\" || new_rows[i].Fluid === \"\" || new_rows[i].Seq === \"\" || new_rows[i].Spec === \"\" || new_rows[i].Diameter === \"\" || new_rows[i].Insulation === \"\" || new_rows[i].Train === \"\" || new_rows[i][\"Line reference\"] === null || new_rows[i].Tag === null || new_rows[i].Unit === null || new_rows[i].Area === null || new_rows[i].Fluid === null || new_rows[i].Seq === null || new_rows[i].Spec === null || new_rows[i].Diameter === null || new_rows[i].Insulation === null || new_rows[i].Train === null) {\n        await this.setState({\n          empty: true\n        });\n        new_rows.splice(i, 1);\n      }\n    }\n\n    const body = {\n      rows: new_rows\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/submitModelledEstimatedPipes\", options).then(response => response.json()).then(async json => {\n      if (json.success) {\n        this.props.success();\n      }\n\n      if (this.state.warning) {\n        this.props.estimatedWarning();\n      }\n\n      if (this.state.empty) {\n        this.props.estimatedEmpty();\n      }\n\n      this.setState({\n        new_data: [],\n        warning: false,\n        empty: false\n      });\n    });\n    await this.props.updateData();\n  }\n\n  render() {\n    const settings = {\n      licenseKey: 'non-commercial-and-evaluation',\n      colWidths: [280, 480, 105, 100, 140, 130, 111, 100, 110, 130, 100, 143],\n      fontSize: 24 //... other options\n\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"hot-app\",\n        children: [/*#__PURE__*/_jsxDEV(HotTable, {\n          data: this.state.data,\n          colHeaders: [\"<b className='header'>Line reference</b>\", \"<b>Tag</b>\", \"<b>Unit</b>\", \"<b>Area</b>\", \"<b>Fluid</b>\", \"<b>Seq</b>\", \"<b>Spec</b>\", \"<b>Type</b>\", \"<b>Diameter</b>\", \"<b>Insulation</b>\", \"<b>Train</b>\", \"<b>Status</b>\"],\n          rowHeaders: true,\n          rowHeights: \"30px\",\n          columnHeaderHeight: 30,\n          width: \"100%\",\n          height: \"520\",\n          settings: settings,\n          manualColumnResize: true,\n          manualRowResize: true,\n          columns: [{\n            data: \"Line reference\",\n            type: 'dropdown',\n            source: this.state.line_refs,\n            strict: true\n          }, {\n            data: \"Tag\",\n            type: 'text',\n            readOnly: true\n          }, {\n            data: \"Unit\",\n            type: 'text',\n            readOnly: true\n          }, {\n            data: \"Area\",\n            type: 'dropdown',\n            source: this.state.areas,\n            strict: true\n          }, {\n            data: \"Fluid\",\n            type: 'text',\n            readOnly: true\n          }, {\n            data: \"Seq\",\n            type: 'text',\n            readOnly: true\n          }, {\n            data: \"Spec\",\n            type: 'text',\n            readOnly: true\n          }, {\n            data: \"Type\",\n            type: 'text',\n            readOnly: true\n          }, {\n            data: \"Diameter\",\n            type: 'dropdown',\n            source: this.state.diameters,\n            strict: true\n          }, {\n            data: \"Insulation\",\n            type: 'text',\n            readOnly: true\n          }, {\n            data: \"Train\",\n            type: 'dropdown',\n            source: this.state.trains,\n            strict: true\n          }, {\n            data: \"Status\",\n            type: 'text',\n            readOnly: true\n          }],\n          filters: true,\n          dropdownMenu: ['make_read_only', '---------', 'alignment', '---------', 'filter_by_condition', '---------', 'filter_operators', '---------', 'filter_by_condition2', '---------', 'filter_by_value', '---------', 'filter_action_bar'],\n          afterChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginLeft: \"695px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn btn-sm btn-info\",\n            onClick: () => this.addRow(),\n            style: {\n              marginRight: \"25px\",\n              fontSize: \"16px\",\n              width: \"160px\",\n              borderRadius: \"10px\"\n            },\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn btn-sm btn-success\",\n            onClick: () => this.submitChanges(),\n            style: {\n              marginRight: \"5px\",\n              fontSize: \"16px\",\n              width: \"160px\",\n              borderRadius: \"10px\"\n            },\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default EstimatedPipesExcel;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/estimatedPipesExcel/estimatedPipesExcel.js"],"names":["React","HotTable","EstimatedPipesExcel","Component","state","searchText","searchedColumn","data","tab","props","currentTab","selectedRows","selectedRowsKeys","updateData","username","acronyms","diameters","areas","trains","line_refs","new_data","warning","empty","tags","handleChange","changes","source","data_aux","i","length","row_id","Status","setState","row","console","log","options","method","headers","fetch","process","env","REACT_APP_SERVER","REACT_APP_NODE_PORT","then","response","json","pipe","Unit","unit","Fluid","fluid","Seq","seq","Spec","spec_code","Insulation","insulation","calc_notes","Type","NODE_MMDN","Diameter","Area","Train","tag_order","REACT_APP_TAG_ORDER","split","Tag","indexOf","id","componentDidMount","areas_options","push","name","diameter","line_ref","rows","line_reference","tag","area","spec","type","train","status","componentDidUpdate","prevProps","prevState","addRow","submitChanges","new_rows","Object","entries","map","key","value","splice","body","JSON","stringify","success","estimatedWarning","estimatedEmpty","render","settings","licenseKey","colWidths","fontSize","strict","readOnly","marginLeft","marginRight","width","borderRadius"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { HotTable } from '@handsontable/react';\r\nimport 'handsontable/dist/handsontable.full.css';\r\nimport \"./estimatedPipesExcel.css\"\r\n\r\nclass EstimatedPipesExcel extends React.Component{\r\n  state = {\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    data: [],\r\n    tab: this.props.currentTab,\r\n    selectedRows: [],\r\n    selectedRowsKeys: [],\r\n    updateData: this.props.updateData,\r\n    username: \"\",\r\n    acronyms : null,\r\n    diameters: [],\r\n    areas: [],\r\n    trains: [\"01\", \"02\", \"03\", \"04\", \"05\"],\r\n    line_refs: [],\r\n    new_data: {},\r\n    warning: false,\r\n    empty: false,\r\n    tags: []\r\n  };\r\n\r\n  async componentDidMount(){\r\n\r\n    const options = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n    }\r\n\r\n\r\n  fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/areas\", options)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      let areas_options = []\r\n      for(let i = 0; i < json.length; i++){\r\n        areas_options.push(json[i].name)\r\n      }\r\n      this.setState({areas : areas_options});\r\n\r\n  })\r\n\r\n  await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/diameters\", options)\r\n  .then(response => response.json())\r\n  .then(json => {\r\n    let diameters = []\r\n    for(let i = 0; i < json.diameters.length; i++){\r\n      diameters.push(json.diameters[i].diameter)\r\n    }\r\n    this.setState({diameters : diameters});\r\n\r\n  })\r\n\r\n  await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/lineRefs\", options)\r\n  .then(response => response.json())\r\n  .then(json => {\r\n    let line_refs = []\r\n    for(let i = 0; i < json.line_refs.length; i++){\r\n      line_refs.push(json.line_refs[i].line_ref)\r\n    }\r\n    this.setState({line_refs : line_refs});\r\n\r\n  })\r\n\r\n  await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/modelledEstimatedPipes\", options)\r\n  .then(response => response.json())\r\n  .then(async json => {\r\n    let rows = [] \r\n    let tags = []\r\n    for(let i = 0; i < json.rows.length; i++){\r\n      rows.push({\"Line reference\": json.rows[i].line_reference, \"Tag\": json.rows[i].tag, \"Unit\": json.rows[i].unit, \"Area\": json.rows[i].area, \"Fluid\": json.rows[i].fluid, \"Seq\": json.rows[i].seq, \"Spec\": json.rows[i].spec, \"Type\": json.rows[i].type, \"Diameter\": json.rows[i].diameter, \"Insulation\": json.rows[i].insulation, \"Train\": json.rows[i].train, \"Status\": json.rows[i].status, \"id\":json.rows[i].id})\r\n      tags.push(json.rows[i].tag)\r\n    }\r\n    await this.setState({data: rows, tags: tags})\r\n  })\r\n}\r\n\r\nasync componentDidUpdate(prevProps, prevState){\r\n\r\n  if(prevProps !== this.props){\r\n\r\n    const options = {\r\n      method: \"GET\",\r\n      headers: {\r\n          \"Content-Type\": \"application/json\"\r\n      },\r\n    }\r\n\r\n    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/modelledEstimatedPipes\", options)\r\n    .then(response => response.json())\r\n    .then(async json => {\r\n      let rows = [] \r\n      for(let i = 0; i < json.rows.length; i++){\r\n        rows.push({\"Line reference\": json.rows[i].line_reference, \"Tag\": json.rows[i].tag, \"Unit\": json.rows[i].unit, \"Area\": json.rows[i].area, \"Fluid\": json.rows[i].fluid, \"Seq\": json.rows[i].seq, \"Spec\": json.rows[i].spec, \"Type\": json.rows[i].type, \"Diameter\": json.rows[i].diameter, \"Insulation\": json.rows[i].insulation, \"Train\": json.rows[i].train, \"Status\": json.rows[i].status, \"id\":json.rows[i].id})\r\n      }\r\n      await this.setState({data: rows})\r\n    })\r\n  }\r\n\r\n}\r\n\r\n  addRow(){\r\n    let rows = this.state.data\r\n    rows.push({\"Line reference\": \"\", \"Tag\": \"\", \"Unit\": \"\", \"Area\": \"\", \"Fluid\": \"\", \"Seq\": \"\", \"Spec\": \"\", \"Type\": \"\", \"Diameter\": \"\", \"Insulation\": \"\", \"Train\": \"\", \"Status\": \"\"})\r\n    this.setState({data: rows})\r\n  }\r\n  \r\n  async submitChanges(){\r\n    \r\n    let new_rows = []\r\n    Object.entries(this.state.new_data)\r\n    .map( ([key, value]) => new_rows.push(value))\r\n    for(let i = 0; i < new_rows.length; i++){\r\n      if(new_rows[i][\"Line reference\"] === \"\" || new_rows[i].Tag === \"\" || new_rows[i].Unit === \"\" || new_rows[i].Area === \"\" || new_rows[i].Fluid === \"\" || new_rows[i].Seq === \"\" || new_rows[i].Spec === \"\" || new_rows[i].Diameter === \"\" || new_rows[i].Insulation === \"\" || new_rows[i].Train === \"\" || new_rows[i][\"Line reference\"] === null || new_rows[i].Tag === null || new_rows[i].Unit === null || new_rows[i].Area === null || new_rows[i].Fluid === null || new_rows[i].Seq === null || new_rows[i].Spec === null || new_rows[i].Diameter === null || new_rows[i].Insulation === null || new_rows[i].Train === null){\r\n        await this.setState({empty: true})\r\n        new_rows.splice(i, 1)\r\n      }\r\n    }\r\n\r\n    const body = {\r\n      rows: new_rows,\r\n    }\r\n    const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submitModelledEstimatedPipes\", options)\r\n    .then(response => response.json())\r\n    .then(async json => {\r\n      if(json.success){\r\n        this.props.success()\r\n        \r\n      }\r\n      if(this.state.warning){\r\n        this.props.estimatedWarning()\r\n      }\r\n      if(this.state.empty){\r\n        this.props.estimatedEmpty()\r\n      }\r\n      this.setState({new_data: [], warning: false, empty: false})\r\n    })\r\n\r\n    await this.props.updateData()\r\n  }\r\n\r\n  handleChange = async(changes, source) =>{\r\n    if (source !== 'loadData'){\r\n      let data_aux = this.state.data\r\n      \r\n      for(let i = 0; i < changes.length; i+=4){\r\n        let row_id = changes[i][0]\r\n        if(this.state.data[row_id].Status === \"ESTIMATED*\" || this.state.data[row_id].Status === \"MODELLED\"){\r\n          data_aux[row_id][changes[0][1]] = \"##########\"\r\n          await this.setState({data: data_aux, warning: true})\r\n        }else{\r\n        let row = this.state.data[row_id]\r\n          console.log(i)\r\n        if (changes[i][1] === 'Line reference'){\r\n          const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n          }\r\n        \r\n          await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getDataByRef/\" + changes[i][3], options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n              if(json.pipe){\r\n                data_aux[row_id].Unit = json.pipe[0].unit\r\n                data_aux[row_id].Fluid = json.pipe[0].fluid\r\n                data_aux[row_id].Seq = json.pipe[0].seq\r\n                data_aux[row_id].Spec = json.pipe[0].spec_code\r\n                data_aux[row_id].Insulation = json.pipe[0].insulation\r\n\r\n                  if(json.pipe[0].calc_notes !== \"NA\"){\r\n                    data_aux[row_id].Type = \"TL3\"\r\n                  }else if(process.env.NODE_MMDN === \"0\"){\r\n                    if(data_aux[row_id].Diameter < 2.00){\r\n                      data_aux[row_id].Type = \"TL1\"\r\n                    }else{\r\n                      data_aux[row_id].Type = \"TL2\"\r\n                    }\r\n                  }else{\r\n                    if(data_aux[row_id].Diameter < 50){\r\n                      data_aux[row_id].Type = \"TL1\"\r\n                    }else{\r\n                      data_aux[row_id].Type = \"TL2\"\r\n                    }\r\n                  }\r\n                \r\n                \r\n\r\n              await this.setState({data : data_aux})\r\n              }\r\n          })\r\n  \r\n        }\r\n        if(row.Area && row.Diameter && row.Train && row[\"Line reference\"]){\r\n          let tag_order = process.env.REACT_APP_TAG_ORDER.split(/[ -]+/)        \r\n          data_aux[row_id].Tag = row[tag_order[0]] + \"-\" + row[tag_order[1]] + \"-\" + row[tag_order[2]] + \"-\" + row[tag_order[3]] + \"-\" + row[tag_order[4]] + \"-\" + row[tag_order[5]] + \"-\" + row[tag_order[6]] + \"_\" + row[tag_order[7]]  \r\n        }\r\n        let new_data = this.state.new_data\r\n        if(this.state.tags.indexOf(data_aux[row_id].Tag) > -1 && this.state.tags.indexOf(data_aux[row_id].Tag) !== row_id){\r\n          data_aux[row_id].Tag = \"ALREADY EXISTS\"\r\n          data_aux[row_id].Area = \"\"\r\n          data_aux[row_id].Diameter = \"\"\r\n          data_aux[row_id].Train = \"\"\r\n          data_aux[row_id].Status = \"\"\r\n        }else{\r\n          data_aux[row_id].Status = \"ESTIMATED\"\r\n          if(data_aux[row_id].Type !== \"TL3\"){\r\n            if(process.env.NODE_MMDN === \"0\"){\r\n              if(data_aux[row_id].Diameter < 2.00){\r\n                data_aux[row_id].Type = \"TL1\"\r\n              }else{\r\n                data_aux[row_id].Type = \"TL2\"\r\n              }\r\n            }else{\r\n              if(data_aux[row_id].Diameter < 50){\r\n                data_aux[row_id].Type = \"TL1\"\r\n              }else{\r\n                data_aux[row_id].Type = \"TL2\"\r\n              }\r\n            }\r\n          }\r\n          new_data[row_id] = row\r\n        }\r\n        await this.setState({data : data_aux, new_data: new_data})\r\n        \r\n        if(!row[\"Line reference\"] && row.id){\r\n          let new_data = this.state.new_data\r\n          new_data[row_id] = {\"Line reference\": \"deleted\", id: row.id}\r\n          await this.setState({data : data_aux, new_data: new_data})\r\n        }\r\n      }\r\n    }\r\n      \r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const settings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: [280, 480, 105, 100, 140, 130, 111, 100, 110, 130, 100, 143],\r\n        fontSize: 24\r\n        //... other options\r\n      }\r\n  \r\n\r\n      return (\r\n          <div>\r\n            <div id=\"hot-app\">\r\n              <HotTable\r\n                data={this.state.data}\r\n                colHeaders={[\"<b className='header'>Line reference</b>\", \"<b>Tag</b>\", \"<b>Unit</b>\", \"<b>Area</b>\", \"<b>Fluid</b>\", \"<b>Seq</b>\", \"<b>Spec</b>\", \"<b>Type</b>\", \"<b>Diameter</b>\", \"<b>Insulation</b>\", \"<b>Train</b>\", \"<b>Status</b>\"]}\r\n                rowHeaders={true}\r\n                rowHeights=\"30px\"\r\n                columnHeaderHeight={30}\r\n                width=\"100%\"\r\n                height=\"520\"\r\n                settings={settings}\r\n                manualColumnResize={true}\r\n                manualRowResize={true}\r\n                columns= {[{ data: \"Line reference\", type:'dropdown', source: this.state.line_refs, strict: true},{ data: \"Tag\", type:'text', readOnly: true},{ data: \"Unit\", type:'text', readOnly: true},{ data: \"Area\", type:'dropdown', source: this.state.areas, strict: true }, { data: \"Fluid\", type:'text', readOnly: true}, { data: \"Seq\", type:'text', readOnly: true}, { data: \"Spec\", type:'text', readOnly: true},  { data: \"Type\", type:'text', readOnly: true}, { data: \"Diameter\", type:'dropdown', source: this.state.diameters, strict: true}, { data: \"Insulation\", type:'text', readOnly: true},{ data: \"Train\", type:'dropdown', source: this.state.trains, strict: true},{ data: \"Status\", type:'text', readOnly: true}]}\r\n                filters={true}\r\n                dropdownMenu= {[\r\n                    'make_read_only',\r\n                    '---------',\r\n                    'alignment',\r\n                    '---------',\r\n                    'filter_by_condition',\r\n                    '---------',\r\n                    'filter_operators',\r\n                    '---------',\r\n                    'filter_by_condition2',\r\n                    '---------',\r\n                    'filter_by_value',\r\n                    '---------',\r\n                    'filter_action_bar',\r\n                  ]}\r\n                  afterChange={this.handleChange}\r\n              />\r\n              <br></br>\r\n              <div style={{marginLeft:\"695px\"}}>\r\n                  <button class=\"btn btn-sm btn-info\" onClick={() => this.addRow()} style={{marginRight:\"25px\", fontSize:\"16px\", width:\"160px\", borderRadius:\"10px\"}}>Add</button>\r\n                  <button class=\"btn btn-sm btn-success\" onClick={() => this.submitChanges()} style={{marginRight:\"5px\", fontSize:\"16px\", width:\"160px\", borderRadius:\"10px\"}}>Save</button>\r\n              </div>\r\n              <br></br>\r\n            </div>\r\n          </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default EstimatedPipesExcel;"]},"metadata":{},"sourceType":"module"}