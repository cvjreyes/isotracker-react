{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\n/**\r\n * @param {HiddenColumns} hiddenColumnsPlugin The plugin instance.\r\n * @returns {object}\r\n */\n\nexport default function showColumnItem(hiddenColumnsPlugin) {\n  var columns = [];\n  return {\n    key: 'hidden_columns_show',\n    name: function name() {\n      var pluralForm = columns.length > 1 ? 1 : 0;\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_SHOW_COLUMN, pluralForm);\n    },\n    callback: function callback() {\n      var _this$columnIndexMapp, _this$columnIndexMapp2;\n\n      if (columns.length === 0) {\n        return;\n      }\n\n      var startVisualColumn = columns[0];\n      var endVisualColumn = columns[columns.length - 1]; // Add to the selection one more visual column on the left.\n\n      startVisualColumn = (_this$columnIndexMapp = this.columnIndexMapper.getFirstNotHiddenIndex(startVisualColumn - 1, -1)) !== null && _this$columnIndexMapp !== void 0 ? _this$columnIndexMapp : 0; // Add to the selection one more visual column on the right.\n\n      endVisualColumn = (_this$columnIndexMapp2 = this.columnIndexMapper.getFirstNotHiddenIndex(endVisualColumn + 1, 1)) !== null && _this$columnIndexMapp2 !== void 0 ? _this$columnIndexMapp2 : this.countCols() - 1;\n      hiddenColumnsPlugin.showColumns(columns); // We render columns at first. It was needed for getting fixed columns.\n      // Please take a look at #6864 for broader description.\n\n      this.render();\n      this.view.adjustElementsSize(true);\n      var allColumnsSelected = endVisualColumn - startVisualColumn + 1 === this.countCols(); // When all headers needs to be selected then do nothing. The header selection is\n      // automatically handled by corner click.\n\n      if (!allColumnsSelected) {\n        this.selectColumns(startVisualColumn, endVisualColumn);\n      }\n    },\n    disabled: false,\n    hidden: function hidden() {\n      var _this = this;\n\n      var hiddenPhysicalColumns = arrayMap(hiddenColumnsPlugin.getHiddenColumns(), function (visualColumnIndex) {\n        return _this.toPhysicalColumn(visualColumnIndex);\n      });\n\n      if (!(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner()) || hiddenPhysicalColumns.length < 1) {\n        return true;\n      }\n\n      columns.length = 0;\n      var selectedRangeLast = this.getSelectedRangeLast();\n      var visualStartColumn = selectedRangeLast.getTopLeftCorner().col;\n      var visualEndColumn = selectedRangeLast.getBottomRightCorner().col;\n      var columnIndexMapper = this.columnIndexMapper;\n      var renderableStartColumn = columnIndexMapper.getRenderableFromVisualIndex(visualStartColumn);\n      var renderableEndColumn = columnIndexMapper.getRenderableFromVisualIndex(visualEndColumn);\n      var notTrimmedColumnIndexes = columnIndexMapper.getNotTrimmedIndexes();\n      var physicalColumnIndexes = [];\n\n      if (visualStartColumn !== visualEndColumn) {\n        var visualColumnsInRange = visualEndColumn - visualStartColumn + 1;\n        var renderedColumnsInRange = renderableEndColumn - renderableStartColumn + 1; // Collect not trimmed columns if there are some hidden columns in the selection range.\n\n        if (visualColumnsInRange > renderedColumnsInRange) {\n          var physicalIndexesInRange = notTrimmedColumnIndexes.slice(visualStartColumn, visualEndColumn + 1);\n          physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(physicalIndexesInRange.filter(function (physicalIndex) {\n            return hiddenPhysicalColumns.includes(physicalIndex);\n          })));\n        } // Handled column is the first rendered index and there are some visual indexes before it.\n\n      } else if (renderableStartColumn === 0 && renderableStartColumn < visualStartColumn) {\n        // not trimmed indexes -> array of mappings from visual (native array's index) to physical indexes (value).\n        physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(notTrimmedColumnIndexes.slice(0, visualStartColumn))); // physical indexes\n        // When all columns are hidden and the context menu is triggered using top-left corner.\n      } else if (renderableStartColumn === null) {\n        // Show all hidden columns.\n        physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(notTrimmedColumnIndexes.slice(0, this.countCols())));\n      } else {\n        var lastVisualIndex = this.countCols() - 1;\n        var lastRenderableIndex = columnIndexMapper.getRenderableFromVisualIndex(columnIndexMapper.getFirstNotHiddenIndex(lastVisualIndex, -1)); // Handled column is the last rendered index and there are some visual indexes after it.\n\n        if (renderableEndColumn === lastRenderableIndex && lastVisualIndex > visualEndColumn) {\n          physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(notTrimmedColumnIndexes.slice(visualEndColumn + 1)));\n        }\n      }\n\n      arrayEach(physicalColumnIndexes, function (physicalColumnIndex) {\n        columns.push(_this.toVisualColumn(physicalColumnIndex));\n      });\n      return columns.length === 0;\n    }\n  };\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/hiddenColumns/contextMenuItem/showColumn.mjs"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","arrayEach","arrayMap","C","showColumnItem","hiddenColumnsPlugin","columns","key","pluralForm","getTranslatedPhrase","CONTEXTMENU_ITEMS_SHOW_COLUMN","callback","_this$columnIndexMapp","_this$columnIndexMapp2","startVisualColumn","endVisualColumn","columnIndexMapper","getFirstNotHiddenIndex","countCols","showColumns","render","view","adjustElementsSize","allColumnsSelected","selectColumns","disabled","hidden","_this","hiddenPhysicalColumns","getHiddenColumns","visualColumnIndex","toPhysicalColumn","selection","isSelectedByColumnHeader","isSelectedByCorner","selectedRangeLast","getSelectedRangeLast","visualStartColumn","getTopLeftCorner","col","visualEndColumn","getBottomRightCorner","renderableStartColumn","getRenderableFromVisualIndex","renderableEndColumn","notTrimmedColumnIndexes","getNotTrimmedIndexes","physicalColumnIndexes","visualColumnsInRange","renderedColumnsInRange","physicalIndexesInRange","push","apply","filter","physicalIndex","includes","lastVisualIndex","lastRenderableIndex","physicalColumnIndex","toVisualColumn"],"mappings":"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","sourcesContent":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\r\n\r\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\r\n\r\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\r\n\r\nimport \"core-js/modules/es.array.slice.js\";\r\nimport \"core-js/modules/es.array.filter.js\";\r\nimport \"core-js/modules/es.array.includes.js\";\r\nimport \"core-js/modules/es.string.includes.js\";\r\nimport \"core-js/modules/es.symbol.js\";\r\nimport \"core-js/modules/es.symbol.description.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.symbol.iterator.js\";\r\nimport \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\nimport \"core-js/modules/es.array.from.js\";\r\nimport \"core-js/modules/es.function.name.js\";\r\nimport { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\r\nimport * as C from \"../../../i18n/constants.mjs\";\r\n/**\r\n * @param {HiddenColumns} hiddenColumnsPlugin The plugin instance.\r\n * @returns {object}\r\n */\r\n\r\nexport default function showColumnItem(hiddenColumnsPlugin) {\r\n  var columns = [];\r\n  return {\r\n    key: 'hidden_columns_show',\r\n    name: function name() {\r\n      var pluralForm = columns.length > 1 ? 1 : 0;\r\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_SHOW_COLUMN, pluralForm);\r\n    },\r\n    callback: function callback() {\r\n      var _this$columnIndexMapp, _this$columnIndexMapp2;\r\n\r\n      if (columns.length === 0) {\r\n        return;\r\n      }\r\n\r\n      var startVisualColumn = columns[0];\r\n      var endVisualColumn = columns[columns.length - 1]; // Add to the selection one more visual column on the left.\r\n\r\n      startVisualColumn = (_this$columnIndexMapp = this.columnIndexMapper.getFirstNotHiddenIndex(startVisualColumn - 1, -1)) !== null && _this$columnIndexMapp !== void 0 ? _this$columnIndexMapp : 0; // Add to the selection one more visual column on the right.\r\n\r\n      endVisualColumn = (_this$columnIndexMapp2 = this.columnIndexMapper.getFirstNotHiddenIndex(endVisualColumn + 1, 1)) !== null && _this$columnIndexMapp2 !== void 0 ? _this$columnIndexMapp2 : this.countCols() - 1;\r\n      hiddenColumnsPlugin.showColumns(columns); // We render columns at first. It was needed for getting fixed columns.\r\n      // Please take a look at #6864 for broader description.\r\n\r\n      this.render();\r\n      this.view.adjustElementsSize(true);\r\n      var allColumnsSelected = endVisualColumn - startVisualColumn + 1 === this.countCols(); // When all headers needs to be selected then do nothing. The header selection is\r\n      // automatically handled by corner click.\r\n\r\n      if (!allColumnsSelected) {\r\n        this.selectColumns(startVisualColumn, endVisualColumn);\r\n      }\r\n    },\r\n    disabled: false,\r\n    hidden: function hidden() {\r\n      var _this = this;\r\n\r\n      var hiddenPhysicalColumns = arrayMap(hiddenColumnsPlugin.getHiddenColumns(), function (visualColumnIndex) {\r\n        return _this.toPhysicalColumn(visualColumnIndex);\r\n      });\r\n\r\n      if (!(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner()) || hiddenPhysicalColumns.length < 1) {\r\n        return true;\r\n      }\r\n\r\n      columns.length = 0;\r\n      var selectedRangeLast = this.getSelectedRangeLast();\r\n      var visualStartColumn = selectedRangeLast.getTopLeftCorner().col;\r\n      var visualEndColumn = selectedRangeLast.getBottomRightCorner().col;\r\n      var columnIndexMapper = this.columnIndexMapper;\r\n      var renderableStartColumn = columnIndexMapper.getRenderableFromVisualIndex(visualStartColumn);\r\n      var renderableEndColumn = columnIndexMapper.getRenderableFromVisualIndex(visualEndColumn);\r\n      var notTrimmedColumnIndexes = columnIndexMapper.getNotTrimmedIndexes();\r\n      var physicalColumnIndexes = [];\r\n\r\n      if (visualStartColumn !== visualEndColumn) {\r\n        var visualColumnsInRange = visualEndColumn - visualStartColumn + 1;\r\n        var renderedColumnsInRange = renderableEndColumn - renderableStartColumn + 1; // Collect not trimmed columns if there are some hidden columns in the selection range.\r\n\r\n        if (visualColumnsInRange > renderedColumnsInRange) {\r\n          var physicalIndexesInRange = notTrimmedColumnIndexes.slice(visualStartColumn, visualEndColumn + 1);\r\n          physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(physicalIndexesInRange.filter(function (physicalIndex) {\r\n            return hiddenPhysicalColumns.includes(physicalIndex);\r\n          })));\r\n        } // Handled column is the first rendered index and there are some visual indexes before it.\r\n\r\n      } else if (renderableStartColumn === 0 && renderableStartColumn < visualStartColumn) {\r\n        // not trimmed indexes -> array of mappings from visual (native array's index) to physical indexes (value).\r\n        physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(notTrimmedColumnIndexes.slice(0, visualStartColumn))); // physical indexes\r\n        // When all columns are hidden and the context menu is triggered using top-left corner.\r\n      } else if (renderableStartColumn === null) {\r\n        // Show all hidden columns.\r\n        physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(notTrimmedColumnIndexes.slice(0, this.countCols())));\r\n      } else {\r\n        var lastVisualIndex = this.countCols() - 1;\r\n        var lastRenderableIndex = columnIndexMapper.getRenderableFromVisualIndex(columnIndexMapper.getFirstNotHiddenIndex(lastVisualIndex, -1)); // Handled column is the last rendered index and there are some visual indexes after it.\r\n\r\n        if (renderableEndColumn === lastRenderableIndex && lastVisualIndex > visualEndColumn) {\r\n          physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(notTrimmedColumnIndexes.slice(visualEndColumn + 1)));\r\n        }\r\n      }\r\n\r\n      arrayEach(physicalColumnIndexes, function (physicalColumnIndex) {\r\n        columns.push(_this.toVisualColumn(physicalColumnIndex));\r\n      });\r\n      return columns.length === 0;\r\n    }\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}