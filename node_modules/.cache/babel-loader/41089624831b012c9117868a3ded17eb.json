{"ast":null,"code":"import { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { empty, addClass } from \"../../helpers/dom/element.mjs\";\nimport { stopImmediatePropagation, isImmediatePropagationStopped } from \"../../helpers/dom/event.mjs\";\nimport { partial } from \"../../helpers/function.mjs\";\nimport { equalsIgnoreCase } from \"../../helpers/string.mjs\";\nimport { isEmpty } from \"../../helpers/mixed.mjs\";\nimport { isKey } from \"../../helpers/unicode.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nvar isListeningKeyDownEvent = new WeakMap();\nvar isCheckboxListenerAdded = new WeakMap();\nvar BAD_VALUE_CLASS = 'htBadValue';\nvar ATTR_ROW = 'data-row';\nvar ATTR_COLUMN = 'data-col';\nexport var RENDERER_TYPE = 'checkbox';\nHooks.getSingleton().add('modifyAutoColumnSizeSeed', function (bundleSeed, cellMeta, cellValue) {\n  var label = cellMeta.label,\n      type = cellMeta.type,\n      row = cellMeta.row,\n      column = cellMeta.column,\n      prop = cellMeta.prop;\n\n  if (type !== RENDERER_TYPE) {\n    return;\n  }\n\n  if (label) {\n    var labelValue = label.value,\n        labelProperty = label.property;\n    var labelText = cellValue;\n\n    if (labelValue) {\n      labelText = typeof labelValue === 'function' ? labelValue(row, column, prop, cellValue) : labelValue;\n    } else if (labelProperty) {\n      var labelData = this.getDataAtRowProp(row, labelProperty);\n      labelText = labelData !== null ? labelData : cellValue;\n    }\n\n    bundleSeed = labelText;\n  }\n\n  return bundleSeed;\n});\n/**\r\n * Checkbox renderer.\r\n *\r\n * @private\r\n * @param {Core} instance The Handsontable instance.\r\n * @param {HTMLTableCellElement} TD The rendered cell element.\r\n * @param {number} row The visual row index.\r\n * @param {number} col The visual column index.\r\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\r\n * @param {*} value The rendered value.\r\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\r\n */\n\nexport function checkboxRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var rootDocument = instance.rootDocument;\n  baseRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  registerEvents(instance);\n  var input = createInput(rootDocument);\n  var labelOptions = cellProperties.label;\n  var badValue = false;\n\n  if (typeof cellProperties.checkedTemplate === 'undefined') {\n    cellProperties.checkedTemplate = true;\n  }\n\n  if (typeof cellProperties.uncheckedTemplate === 'undefined') {\n    cellProperties.uncheckedTemplate = false;\n  }\n\n  empty(TD); // TODO identify under what circumstances this line can be removed\n\n  if (value === cellProperties.checkedTemplate || equalsIgnoreCase(value, cellProperties.checkedTemplate)) {\n    input.checked = true;\n  } else if (value === cellProperties.uncheckedTemplate || equalsIgnoreCase(value, cellProperties.uncheckedTemplate)) {\n    input.checked = false;\n  } else if (isEmpty(value)) {\n    // default value\n    addClass(input, 'noValue');\n  } else {\n    input.style.display = 'none';\n    addClass(input, BAD_VALUE_CLASS);\n    badValue = true;\n  }\n\n  input.setAttribute(ATTR_ROW, row);\n  input.setAttribute(ATTR_COLUMN, col);\n\n  if (!badValue && labelOptions) {\n    var labelText = '';\n\n    if (labelOptions.value) {\n      labelText = typeof labelOptions.value === 'function' ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;\n    } else if (labelOptions.property) {\n      var labelValue = instance.getDataAtRowProp(row, labelOptions.property);\n      labelText = labelValue !== null ? labelValue : '';\n    }\n\n    var label = createLabel(rootDocument, labelText, labelOptions.separated !== true);\n\n    if (labelOptions.position === 'before') {\n      if (labelOptions.separated) {\n        TD.appendChild(label);\n        TD.appendChild(input);\n      } else {\n        label.appendChild(input);\n        input = label;\n      }\n    } else if (!labelOptions.position || labelOptions.position === 'after') {\n      if (labelOptions.separated) {\n        TD.appendChild(input);\n        TD.appendChild(label);\n      } else {\n        label.insertBefore(input, label.firstChild);\n        input = label;\n      }\n    }\n  }\n\n  if (!labelOptions || labelOptions && !labelOptions.separated) {\n    TD.appendChild(input);\n  }\n\n  if (badValue) {\n    TD.appendChild(rootDocument.createTextNode('#bad-value#'));\n  }\n\n  if (!isListeningKeyDownEvent.has(instance)) {\n    isListeningKeyDownEvent.set(instance, true);\n    instance.addHook('beforeKeyDown', onBeforeKeyDown);\n  }\n  /**\r\n   * On before key down DOM listener.\r\n   *\r\n   * @private\r\n   * @param {Event} event The keyboard event object.\r\n   */\n\n\n  function onBeforeKeyDown(event) {\n    var toggleKeys = 'SPACE|ENTER';\n    var switchOffKeys = 'DELETE|BACKSPACE';\n    var isKeyCode = partial(isKey, event.keyCode);\n\n    if (!instance.getSettings().enterBeginsEditing && isKeyCode('ENTER')) {\n      return;\n    }\n\n    if (isKeyCode(\"\".concat(toggleKeys, \"|\").concat(switchOffKeys)) && !isImmediatePropagationStopped(event)) {\n      eachSelectedCheckboxCell(function () {\n        stopImmediatePropagation(event);\n        event.preventDefault();\n      });\n    }\n\n    if (isKeyCode(toggleKeys)) {\n      changeSelectedCheckboxesState();\n    }\n\n    if (isKeyCode(switchOffKeys)) {\n      changeSelectedCheckboxesState(true);\n    }\n  }\n  /**\r\n   * Change checkbox checked property.\r\n   *\r\n   * @private\r\n   * @param {boolean} [uncheckCheckbox=false] The new \"checked\" state for the checkbox elements.\r\n   */\n\n\n  function changeSelectedCheckboxesState() {\n    var uncheckCheckbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var selRange = instance.getSelectedRange();\n\n    if (!selRange) {\n      return;\n    }\n\n    for (var key = 0; key < selRange.length; key++) {\n      var _selRange$key$getTopL = selRange[key].getTopLeftCorner(),\n          startRow = _selRange$key$getTopL.row,\n          startColumn = _selRange$key$getTopL.col;\n\n      var _selRange$key$getBott = selRange[key].getBottomRightCorner(),\n          endRow = _selRange$key$getBott.row,\n          endColumn = _selRange$key$getBott.col;\n\n      var changes = [];\n\n      for (var visualRow = startRow; visualRow <= endRow; visualRow += 1) {\n        for (var visualColumn = startColumn; visualColumn <= endColumn; visualColumn += 1) {\n          var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n\n          if (cachedCellProperties.type !== 'checkbox') {\n            return;\n          }\n          /* eslint-disable no-continue */\n\n\n          if (cachedCellProperties.readOnly === true) {\n            continue;\n          }\n\n          if (typeof cachedCellProperties.checkedTemplate === 'undefined') {\n            cachedCellProperties.checkedTemplate = true;\n          }\n\n          if (typeof cachedCellProperties.uncheckedTemplate === 'undefined') {\n            cachedCellProperties.uncheckedTemplate = false;\n          }\n\n          var dataAtCell = instance.getDataAtCell(visualRow, visualColumn);\n\n          if (uncheckCheckbox === false) {\n            if ([cachedCellProperties.checkedTemplate, cachedCellProperties.checkedTemplate.toString()].includes(dataAtCell)) {\n              // eslint-disable-line max-len\n              changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n            } else if ([cachedCellProperties.uncheckedTemplate, cachedCellProperties.uncheckedTemplate.toString(), null, void 0].includes(dataAtCell)) {\n              // eslint-disable-line max-len\n              changes.push([visualRow, visualColumn, cachedCellProperties.checkedTemplate]);\n            }\n          } else {\n            changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n          }\n        }\n      }\n\n      if (changes.length > 0) {\n        instance.setDataAtCell(changes);\n      }\n    }\n  }\n  /**\r\n   * Call callback for each found selected cell with checkbox type.\r\n   *\r\n   * @private\r\n   * @param {Function} callback The callback function.\r\n   */\n\n\n  function eachSelectedCheckboxCell(callback) {\n    var selRange = instance.getSelectedRange();\n\n    if (!selRange) {\n      return;\n    }\n\n    for (var key = 0; key < selRange.length; key++) {\n      var topLeft = selRange[key].getTopLeftCorner();\n      var bottomRight = selRange[key].getBottomRightCorner();\n\n      for (var visualRow = topLeft.row; visualRow <= bottomRight.row; visualRow++) {\n        for (var visualColumn = topLeft.col; visualColumn <= bottomRight.col; visualColumn++) {\n          var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n\n          if (cachedCellProperties.type !== 'checkbox') {\n            return;\n          }\n\n          var cell = instance.getCell(visualRow, visualColumn);\n\n          if (cell === null || cell === void 0) {\n            callback(visualRow, visualColumn, cachedCellProperties);\n          } else {\n            var checkboxes = cell.querySelectorAll('input[type=checkbox]');\n\n            if (checkboxes.length > 0 && !cachedCellProperties.readOnly) {\n              callback(checkboxes);\n            }\n          }\n        }\n      }\n    }\n  }\n}\ncheckboxRenderer.RENDERER_TYPE = RENDERER_TYPE;\n/**\r\n * Register checkbox listeners.\r\n *\r\n * @param {Core} instance The Handsontable instance.\r\n * @returns {EventManager}\r\n */\n\nfunction registerEvents(instance) {\n  var eventManager = isCheckboxListenerAdded.get(instance);\n\n  if (!eventManager) {\n    var rootElement = instance.rootElement;\n    eventManager = new EventManager(instance);\n    eventManager.addEventListener(rootElement, 'click', function (event) {\n      return onClick(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'mouseup', function (event) {\n      return onMouseUp(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'change', function (event) {\n      return onChange(event, instance);\n    });\n    isCheckboxListenerAdded.set(instance, eventManager);\n  }\n\n  return eventManager;\n}\n/**\r\n * Create input element.\r\n *\r\n * @param {Document} rootDocument The document owner.\r\n * @returns {Node}\r\n */\n\n\nfunction createInput(rootDocument) {\n  var input = rootDocument.createElement('input');\n  input.className = 'htCheckboxRendererInput';\n  input.type = 'checkbox';\n  input.setAttribute('autocomplete', 'off');\n  input.setAttribute('tabindex', '-1');\n  return input.cloneNode(false);\n}\n/**\r\n * Create label element.\r\n *\r\n * @param {Document} rootDocument The document owner.\r\n * @param {string} text The label text.\r\n * @param {boolean} fullWidth Determines whether label should have full width.\r\n * @returns {Node}\r\n */\n\n\nfunction createLabel(rootDocument, text, fullWidth) {\n  var label = rootDocument.createElement('label');\n  label.className = \"htCheckboxRendererLabel \".concat(fullWidth ? 'fullWidth' : '');\n  label.appendChild(rootDocument.createTextNode(text));\n  return label.cloneNode(true);\n}\n/**\r\n * `mouseup` callback.\r\n *\r\n * @private\r\n * @param {Event} event `mouseup` event.\r\n * @param {Core} instance The Handsontable instance.\r\n */\n\n\nfunction onMouseUp(event, instance) {\n  var target = event.target;\n\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n\n  setTimeout(instance.listen, 10);\n}\n/**\r\n * `click` callback.\r\n *\r\n * @private\r\n * @param {MouseEvent} event `click` event.\r\n * @param {Core} instance The Handsontable instance.\r\n */\n\n\nfunction onClick(event, instance) {\n  var target = event.target;\n\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n\n  var row = parseInt(target.getAttribute(ATTR_ROW), 10);\n  var col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n\n  if (cellProperties.readOnly) {\n    event.preventDefault();\n  }\n}\n/**\r\n * `change` callback.\r\n *\r\n * @param {Event} event `change` event.\r\n * @param {Core} instance The Handsontable instance.\r\n */\n\n\nfunction onChange(event, instance) {\n  var target = event.target;\n\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n\n  var row = parseInt(target.getAttribute(ATTR_ROW), 10);\n  var col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n\n  if (!cellProperties.readOnly) {\n    var newCheckboxValue = null;\n\n    if (event.target.checked) {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? true : cellProperties.checkedTemplate;\n    } else {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? false : cellProperties.uncheckedTemplate;\n    }\n\n    instance.setDataAtCell(row, col, newCheckboxValue);\n  }\n}\n/**\r\n * Check if the provided element is the checkbox input.\r\n *\r\n * @private\r\n * @param {HTMLElement} element The element in question.\r\n * @returns {boolean}\r\n */\n\n\nfunction isCheckboxInput(element) {\n  return element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/renderers/checkboxRenderer/checkboxRenderer.mjs"],"names":["baseRenderer","EventManager","empty","addClass","stopImmediatePropagation","isImmediatePropagationStopped","partial","equalsIgnoreCase","isEmpty","isKey","Hooks","isListeningKeyDownEvent","WeakMap","isCheckboxListenerAdded","BAD_VALUE_CLASS","ATTR_ROW","ATTR_COLUMN","RENDERER_TYPE","getSingleton","add","bundleSeed","cellMeta","cellValue","label","type","row","column","prop","labelValue","value","labelProperty","property","labelText","labelData","getDataAtRowProp","checkboxRenderer","instance","TD","col","cellProperties","rootDocument","apply","registerEvents","input","createInput","labelOptions","badValue","checkedTemplate","uncheckedTemplate","checked","style","display","setAttribute","call","createLabel","separated","position","appendChild","insertBefore","firstChild","createTextNode","has","set","addHook","onBeforeKeyDown","event","toggleKeys","switchOffKeys","isKeyCode","keyCode","getSettings","enterBeginsEditing","concat","eachSelectedCheckboxCell","preventDefault","changeSelectedCheckboxesState","uncheckCheckbox","arguments","length","undefined","selRange","getSelectedRange","key","_selRange$key$getTopL","getTopLeftCorner","startRow","startColumn","_selRange$key$getBott","getBottomRightCorner","endRow","endColumn","changes","visualRow","visualColumn","cachedCellProperties","getCellMeta","readOnly","dataAtCell","getDataAtCell","toString","includes","push","setDataAtCell","callback","topLeft","bottomRight","cell","getCell","checkboxes","querySelectorAll","eventManager","get","rootElement","addEventListener","onClick","onMouseUp","onChange","createElement","className","cloneNode","text","fullWidth","target","isCheckboxInput","hasAttribute","setTimeout","listen","parseInt","getAttribute","newCheckboxValue","element","tagName"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/es.weak-map.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\nimport \"core-js/modules/es.array.includes.js\";\r\nimport \"core-js/modules/es.string.includes.js\";\r\nimport \"core-js/modules/es.regexp.to-string.js\";\r\nimport \"core-js/modules/web.timers.js\";\r\nimport { baseRenderer } from \"../baseRenderer/index.mjs\";\r\nimport EventManager from \"../../eventManager.mjs\";\r\nimport { empty, addClass } from \"../../helpers/dom/element.mjs\";\r\nimport { stopImmediatePropagation, isImmediatePropagationStopped } from \"../../helpers/dom/event.mjs\";\r\nimport { partial } from \"../../helpers/function.mjs\";\r\nimport { equalsIgnoreCase } from \"../../helpers/string.mjs\";\r\nimport { isEmpty } from \"../../helpers/mixed.mjs\";\r\nimport { isKey } from \"../../helpers/unicode.mjs\";\r\nimport Hooks from \"../../pluginHooks.mjs\";\r\nvar isListeningKeyDownEvent = new WeakMap();\r\nvar isCheckboxListenerAdded = new WeakMap();\r\nvar BAD_VALUE_CLASS = 'htBadValue';\r\nvar ATTR_ROW = 'data-row';\r\nvar ATTR_COLUMN = 'data-col';\r\nexport var RENDERER_TYPE = 'checkbox';\r\nHooks.getSingleton().add('modifyAutoColumnSizeSeed', function (bundleSeed, cellMeta, cellValue) {\r\n  var label = cellMeta.label,\r\n      type = cellMeta.type,\r\n      row = cellMeta.row,\r\n      column = cellMeta.column,\r\n      prop = cellMeta.prop;\r\n\r\n  if (type !== RENDERER_TYPE) {\r\n    return;\r\n  }\r\n\r\n  if (label) {\r\n    var labelValue = label.value,\r\n        labelProperty = label.property;\r\n    var labelText = cellValue;\r\n\r\n    if (labelValue) {\r\n      labelText = typeof labelValue === 'function' ? labelValue(row, column, prop, cellValue) : labelValue;\r\n    } else if (labelProperty) {\r\n      var labelData = this.getDataAtRowProp(row, labelProperty);\r\n      labelText = labelData !== null ? labelData : cellValue;\r\n    }\r\n\r\n    bundleSeed = labelText;\r\n  }\r\n\r\n  return bundleSeed;\r\n});\r\n/**\r\n * Checkbox renderer.\r\n *\r\n * @private\r\n * @param {Core} instance The Handsontable instance.\r\n * @param {HTMLTableCellElement} TD The rendered cell element.\r\n * @param {number} row The visual row index.\r\n * @param {number} col The visual column index.\r\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\r\n * @param {*} value The rendered value.\r\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\r\n */\r\n\r\nexport function checkboxRenderer(instance, TD, row, col, prop, value, cellProperties) {\r\n  var rootDocument = instance.rootDocument;\r\n  baseRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\r\n  registerEvents(instance);\r\n  var input = createInput(rootDocument);\r\n  var labelOptions = cellProperties.label;\r\n  var badValue = false;\r\n\r\n  if (typeof cellProperties.checkedTemplate === 'undefined') {\r\n    cellProperties.checkedTemplate = true;\r\n  }\r\n\r\n  if (typeof cellProperties.uncheckedTemplate === 'undefined') {\r\n    cellProperties.uncheckedTemplate = false;\r\n  }\r\n\r\n  empty(TD); // TODO identify under what circumstances this line can be removed\r\n\r\n  if (value === cellProperties.checkedTemplate || equalsIgnoreCase(value, cellProperties.checkedTemplate)) {\r\n    input.checked = true;\r\n  } else if (value === cellProperties.uncheckedTemplate || equalsIgnoreCase(value, cellProperties.uncheckedTemplate)) {\r\n    input.checked = false;\r\n  } else if (isEmpty(value)) {\r\n    // default value\r\n    addClass(input, 'noValue');\r\n  } else {\r\n    input.style.display = 'none';\r\n    addClass(input, BAD_VALUE_CLASS);\r\n    badValue = true;\r\n  }\r\n\r\n  input.setAttribute(ATTR_ROW, row);\r\n  input.setAttribute(ATTR_COLUMN, col);\r\n\r\n  if (!badValue && labelOptions) {\r\n    var labelText = '';\r\n\r\n    if (labelOptions.value) {\r\n      labelText = typeof labelOptions.value === 'function' ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;\r\n    } else if (labelOptions.property) {\r\n      var labelValue = instance.getDataAtRowProp(row, labelOptions.property);\r\n      labelText = labelValue !== null ? labelValue : '';\r\n    }\r\n\r\n    var label = createLabel(rootDocument, labelText, labelOptions.separated !== true);\r\n\r\n    if (labelOptions.position === 'before') {\r\n      if (labelOptions.separated) {\r\n        TD.appendChild(label);\r\n        TD.appendChild(input);\r\n      } else {\r\n        label.appendChild(input);\r\n        input = label;\r\n      }\r\n    } else if (!labelOptions.position || labelOptions.position === 'after') {\r\n      if (labelOptions.separated) {\r\n        TD.appendChild(input);\r\n        TD.appendChild(label);\r\n      } else {\r\n        label.insertBefore(input, label.firstChild);\r\n        input = label;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!labelOptions || labelOptions && !labelOptions.separated) {\r\n    TD.appendChild(input);\r\n  }\r\n\r\n  if (badValue) {\r\n    TD.appendChild(rootDocument.createTextNode('#bad-value#'));\r\n  }\r\n\r\n  if (!isListeningKeyDownEvent.has(instance)) {\r\n    isListeningKeyDownEvent.set(instance, true);\r\n    instance.addHook('beforeKeyDown', onBeforeKeyDown);\r\n  }\r\n  /**\r\n   * On before key down DOM listener.\r\n   *\r\n   * @private\r\n   * @param {Event} event The keyboard event object.\r\n   */\r\n\r\n\r\n  function onBeforeKeyDown(event) {\r\n    var toggleKeys = 'SPACE|ENTER';\r\n    var switchOffKeys = 'DELETE|BACKSPACE';\r\n    var isKeyCode = partial(isKey, event.keyCode);\r\n\r\n    if (!instance.getSettings().enterBeginsEditing && isKeyCode('ENTER')) {\r\n      return;\r\n    }\r\n\r\n    if (isKeyCode(\"\".concat(toggleKeys, \"|\").concat(switchOffKeys)) && !isImmediatePropagationStopped(event)) {\r\n      eachSelectedCheckboxCell(function () {\r\n        stopImmediatePropagation(event);\r\n        event.preventDefault();\r\n      });\r\n    }\r\n\r\n    if (isKeyCode(toggleKeys)) {\r\n      changeSelectedCheckboxesState();\r\n    }\r\n\r\n    if (isKeyCode(switchOffKeys)) {\r\n      changeSelectedCheckboxesState(true);\r\n    }\r\n  }\r\n  /**\r\n   * Change checkbox checked property.\r\n   *\r\n   * @private\r\n   * @param {boolean} [uncheckCheckbox=false] The new \"checked\" state for the checkbox elements.\r\n   */\r\n\r\n\r\n  function changeSelectedCheckboxesState() {\r\n    var uncheckCheckbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\r\n    var selRange = instance.getSelectedRange();\r\n\r\n    if (!selRange) {\r\n      return;\r\n    }\r\n\r\n    for (var key = 0; key < selRange.length; key++) {\r\n      var _selRange$key$getTopL = selRange[key].getTopLeftCorner(),\r\n          startRow = _selRange$key$getTopL.row,\r\n          startColumn = _selRange$key$getTopL.col;\r\n\r\n      var _selRange$key$getBott = selRange[key].getBottomRightCorner(),\r\n          endRow = _selRange$key$getBott.row,\r\n          endColumn = _selRange$key$getBott.col;\r\n\r\n      var changes = [];\r\n\r\n      for (var visualRow = startRow; visualRow <= endRow; visualRow += 1) {\r\n        for (var visualColumn = startColumn; visualColumn <= endColumn; visualColumn += 1) {\r\n          var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\r\n\r\n          if (cachedCellProperties.type !== 'checkbox') {\r\n            return;\r\n          }\r\n          /* eslint-disable no-continue */\r\n\r\n\r\n          if (cachedCellProperties.readOnly === true) {\r\n            continue;\r\n          }\r\n\r\n          if (typeof cachedCellProperties.checkedTemplate === 'undefined') {\r\n            cachedCellProperties.checkedTemplate = true;\r\n          }\r\n\r\n          if (typeof cachedCellProperties.uncheckedTemplate === 'undefined') {\r\n            cachedCellProperties.uncheckedTemplate = false;\r\n          }\r\n\r\n          var dataAtCell = instance.getDataAtCell(visualRow, visualColumn);\r\n\r\n          if (uncheckCheckbox === false) {\r\n            if ([cachedCellProperties.checkedTemplate, cachedCellProperties.checkedTemplate.toString()].includes(dataAtCell)) {\r\n              // eslint-disable-line max-len\r\n              changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\r\n            } else if ([cachedCellProperties.uncheckedTemplate, cachedCellProperties.uncheckedTemplate.toString(), null, void 0].includes(dataAtCell)) {\r\n              // eslint-disable-line max-len\r\n              changes.push([visualRow, visualColumn, cachedCellProperties.checkedTemplate]);\r\n            }\r\n          } else {\r\n            changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (changes.length > 0) {\r\n        instance.setDataAtCell(changes);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Call callback for each found selected cell with checkbox type.\r\n   *\r\n   * @private\r\n   * @param {Function} callback The callback function.\r\n   */\r\n\r\n\r\n  function eachSelectedCheckboxCell(callback) {\r\n    var selRange = instance.getSelectedRange();\r\n\r\n    if (!selRange) {\r\n      return;\r\n    }\r\n\r\n    for (var key = 0; key < selRange.length; key++) {\r\n      var topLeft = selRange[key].getTopLeftCorner();\r\n      var bottomRight = selRange[key].getBottomRightCorner();\r\n\r\n      for (var visualRow = topLeft.row; visualRow <= bottomRight.row; visualRow++) {\r\n        for (var visualColumn = topLeft.col; visualColumn <= bottomRight.col; visualColumn++) {\r\n          var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\r\n\r\n          if (cachedCellProperties.type !== 'checkbox') {\r\n            return;\r\n          }\r\n\r\n          var cell = instance.getCell(visualRow, visualColumn);\r\n\r\n          if (cell === null || cell === void 0) {\r\n            callback(visualRow, visualColumn, cachedCellProperties);\r\n          } else {\r\n            var checkboxes = cell.querySelectorAll('input[type=checkbox]');\r\n\r\n            if (checkboxes.length > 0 && !cachedCellProperties.readOnly) {\r\n              callback(checkboxes);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\ncheckboxRenderer.RENDERER_TYPE = RENDERER_TYPE;\r\n/**\r\n * Register checkbox listeners.\r\n *\r\n * @param {Core} instance The Handsontable instance.\r\n * @returns {EventManager}\r\n */\r\n\r\nfunction registerEvents(instance) {\r\n  var eventManager = isCheckboxListenerAdded.get(instance);\r\n\r\n  if (!eventManager) {\r\n    var rootElement = instance.rootElement;\r\n    eventManager = new EventManager(instance);\r\n    eventManager.addEventListener(rootElement, 'click', function (event) {\r\n      return onClick(event, instance);\r\n    });\r\n    eventManager.addEventListener(rootElement, 'mouseup', function (event) {\r\n      return onMouseUp(event, instance);\r\n    });\r\n    eventManager.addEventListener(rootElement, 'change', function (event) {\r\n      return onChange(event, instance);\r\n    });\r\n    isCheckboxListenerAdded.set(instance, eventManager);\r\n  }\r\n\r\n  return eventManager;\r\n}\r\n/**\r\n * Create input element.\r\n *\r\n * @param {Document} rootDocument The document owner.\r\n * @returns {Node}\r\n */\r\n\r\n\r\nfunction createInput(rootDocument) {\r\n  var input = rootDocument.createElement('input');\r\n  input.className = 'htCheckboxRendererInput';\r\n  input.type = 'checkbox';\r\n  input.setAttribute('autocomplete', 'off');\r\n  input.setAttribute('tabindex', '-1');\r\n  return input.cloneNode(false);\r\n}\r\n/**\r\n * Create label element.\r\n *\r\n * @param {Document} rootDocument The document owner.\r\n * @param {string} text The label text.\r\n * @param {boolean} fullWidth Determines whether label should have full width.\r\n * @returns {Node}\r\n */\r\n\r\n\r\nfunction createLabel(rootDocument, text, fullWidth) {\r\n  var label = rootDocument.createElement('label');\r\n  label.className = \"htCheckboxRendererLabel \".concat(fullWidth ? 'fullWidth' : '');\r\n  label.appendChild(rootDocument.createTextNode(text));\r\n  return label.cloneNode(true);\r\n}\r\n/**\r\n * `mouseup` callback.\r\n *\r\n * @private\r\n * @param {Event} event `mouseup` event.\r\n * @param {Core} instance The Handsontable instance.\r\n */\r\n\r\n\r\nfunction onMouseUp(event, instance) {\r\n  var target = event.target;\r\n\r\n  if (!isCheckboxInput(target)) {\r\n    return;\r\n  }\r\n\r\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\r\n    return;\r\n  }\r\n\r\n  setTimeout(instance.listen, 10);\r\n}\r\n/**\r\n * `click` callback.\r\n *\r\n * @private\r\n * @param {MouseEvent} event `click` event.\r\n * @param {Core} instance The Handsontable instance.\r\n */\r\n\r\n\r\nfunction onClick(event, instance) {\r\n  var target = event.target;\r\n\r\n  if (!isCheckboxInput(target)) {\r\n    return;\r\n  }\r\n\r\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\r\n    return;\r\n  }\r\n\r\n  var row = parseInt(target.getAttribute(ATTR_ROW), 10);\r\n  var col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\r\n  var cellProperties = instance.getCellMeta(row, col);\r\n\r\n  if (cellProperties.readOnly) {\r\n    event.preventDefault();\r\n  }\r\n}\r\n/**\r\n * `change` callback.\r\n *\r\n * @param {Event} event `change` event.\r\n * @param {Core} instance The Handsontable instance.\r\n */\r\n\r\n\r\nfunction onChange(event, instance) {\r\n  var target = event.target;\r\n\r\n  if (!isCheckboxInput(target)) {\r\n    return;\r\n  }\r\n\r\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\r\n    return;\r\n  }\r\n\r\n  var row = parseInt(target.getAttribute(ATTR_ROW), 10);\r\n  var col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\r\n  var cellProperties = instance.getCellMeta(row, col);\r\n\r\n  if (!cellProperties.readOnly) {\r\n    var newCheckboxValue = null;\r\n\r\n    if (event.target.checked) {\r\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? true : cellProperties.checkedTemplate;\r\n    } else {\r\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? false : cellProperties.uncheckedTemplate;\r\n    }\r\n\r\n    instance.setDataAtCell(row, col, newCheckboxValue);\r\n  }\r\n}\r\n/**\r\n * Check if the provided element is the checkbox input.\r\n *\r\n * @private\r\n * @param {HTMLElement} element The element in question.\r\n * @returns {boolean}\r\n */\r\n\r\n\r\nfunction isCheckboxInput(element) {\r\n  return element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\r\n}"]},"metadata":{},"sourceType":"module"}