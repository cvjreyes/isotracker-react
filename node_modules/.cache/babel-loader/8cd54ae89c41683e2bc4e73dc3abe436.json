{"ast":null,"code":"import EventManager from \"../eventManager.mjs\";\nimport { isCtrlMetaKey, isKey } from \"../helpers/unicode.mjs\";\nvar eventManager = new EventManager();\nvar pressedKeys = new Set();\nvar refCount = 0;\n/**\r\n * Begins observing keyboard keys states.\r\n *\r\n * @param {Document} rootDocument The document owner.\r\n */\n\nfunction startObserving(rootDocument) {\n  if (refCount === 0) {\n    eventManager.addEventListener(rootDocument, 'keydown', function (event) {\n      if (!pressedKeys.has(event.keyCode)) {\n        pressedKeys.add(event.keyCode);\n      }\n    });\n    eventManager.addEventListener(rootDocument, 'keyup', function (event) {\n      if (pressedKeys.has(event.keyCode)) {\n        pressedKeys.delete(event.keyCode);\n      }\n    });\n    eventManager.addEventListener(rootDocument, 'visibilitychange', function () {\n      if (rootDocument.hidden) {\n        pressedKeys.clear();\n      }\n    });\n    eventManager.addEventListener(rootDocument.defaultView, 'blur', function () {\n      pressedKeys.clear();\n    });\n  }\n\n  refCount += 1;\n}\n/**\r\n * Stops observing keyboard keys states and clear all previously saved states.\r\n */\n\n\nfunction stopObserving() {\n  if (refCount > 0) {\n    refCount -= 1;\n  }\n\n  if (refCount === 0) {\n    _resetState();\n  }\n}\n/**\r\n * Remove all listeners attached to the DOM and clear all previously saved states.\r\n */\n\n\nfunction _resetState() {\n  eventManager.clearEvents();\n  pressedKeys.clear();\n  refCount = 0;\n}\n/**\r\n * Checks if provided keyCode or keyCodes are pressed.\r\n *\r\n * @param {string} keyCodes The key codes passed as a string defined in helpers/unicode.js file delimited with '|'.\r\n * @returns {boolean}\r\n */\n\n\nfunction isPressed(keyCodes) {\n  return Array.from(pressedKeys.values()).some(function (_keyCode) {\n    return isKey(_keyCode, keyCodes);\n  });\n}\n/**\r\n * Checks if ctrl keys are pressed.\r\n *\r\n * @returns {boolean}\r\n */\n\n\nfunction isPressedCtrlKey() {\n  var values = Array.from(pressedKeys.values());\n  return values.some(function (_keyCode) {\n    return isCtrlMetaKey(_keyCode);\n  });\n}\n/**\r\n * Returns reference count. Useful for debugging and testing purposes.\r\n *\r\n * @returns {number}\r\n */\n\n\nfunction _getRefCount() {\n  return refCount;\n}\n\nexport { _getRefCount, _resetState, isPressed, isPressedCtrlKey, startObserving, stopObserving };","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/utils/keyStateObserver.mjs"],"names":["EventManager","isCtrlMetaKey","isKey","eventManager","pressedKeys","Set","refCount","startObserving","rootDocument","addEventListener","event","has","keyCode","add","delete","hidden","clear","defaultView","stopObserving","_resetState","clearEvents","isPressed","keyCodes","Array","from","values","some","_keyCode","isPressedCtrlKey","_getRefCount"],"mappings":"AAMA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,SAASC,aAAT,EAAwBC,KAAxB,QAAqC,wBAArC;AACA,IAAIC,YAAY,GAAG,IAAIH,YAAJ,EAAnB;AACA,IAAII,WAAW,GAAG,IAAIC,GAAJ,EAAlB;AACA,IAAIC,QAAQ,GAAG,CAAf;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,cAAT,CAAwBC,YAAxB,EAAsC;AACpC,MAAIF,QAAQ,KAAK,CAAjB,EAAoB;AAClBH,IAAAA,YAAY,CAACM,gBAAb,CAA8BD,YAA9B,EAA4C,SAA5C,EAAuD,UAAUE,KAAV,EAAiB;AACtE,UAAI,CAACN,WAAW,CAACO,GAAZ,CAAgBD,KAAK,CAACE,OAAtB,CAAL,EAAqC;AACnCR,QAAAA,WAAW,CAACS,GAAZ,CAAgBH,KAAK,CAACE,OAAtB;AACD;AACF,KAJD;AAKAT,IAAAA,YAAY,CAACM,gBAAb,CAA8BD,YAA9B,EAA4C,OAA5C,EAAqD,UAAUE,KAAV,EAAiB;AACpE,UAAIN,WAAW,CAACO,GAAZ,CAAgBD,KAAK,CAACE,OAAtB,CAAJ,EAAoC;AAClCR,QAAAA,WAAW,CAACU,MAAZ,CAAmBJ,KAAK,CAACE,OAAzB;AACD;AACF,KAJD;AAKAT,IAAAA,YAAY,CAACM,gBAAb,CAA8BD,YAA9B,EAA4C,kBAA5C,EAAgE,YAAY;AAC1E,UAAIA,YAAY,CAACO,MAAjB,EAAyB;AACvBX,QAAAA,WAAW,CAACY,KAAZ;AACD;AACF,KAJD;AAKAb,IAAAA,YAAY,CAACM,gBAAb,CAA8BD,YAAY,CAACS,WAA3C,EAAwD,MAAxD,EAAgE,YAAY;AAC1Eb,MAAAA,WAAW,CAACY,KAAZ;AACD,KAFD;AAGD;;AAEDV,EAAAA,QAAQ,IAAI,CAAZ;AACD;AACD;AACA;AACA;;;AAGA,SAASY,aAAT,GAAyB;AACvB,MAAIZ,QAAQ,GAAG,CAAf,EAAkB;AAChBA,IAAAA,QAAQ,IAAI,CAAZ;AACD;;AAED,MAAIA,QAAQ,KAAK,CAAjB,EAAoB;AAClBa,IAAAA,WAAW;AACZ;AACF;AACD;AACA;AACA;;;AAGA,SAASA,WAAT,GAAuB;AACrBhB,EAAAA,YAAY,CAACiB,WAAb;AACAhB,EAAAA,WAAW,CAACY,KAAZ;AACAV,EAAAA,QAAQ,GAAG,CAAX;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASe,SAAT,CAAmBC,QAAnB,EAA6B;AAC3B,SAAOC,KAAK,CAACC,IAAN,CAAWpB,WAAW,CAACqB,MAAZ,EAAX,EAAiCC,IAAjC,CAAsC,UAAUC,QAAV,EAAoB;AAC/D,WAAOzB,KAAK,CAACyB,QAAD,EAAWL,QAAX,CAAZ;AACD,GAFM,CAAP;AAGD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASM,gBAAT,GAA4B;AAC1B,MAAIH,MAAM,GAAGF,KAAK,CAACC,IAAN,CAAWpB,WAAW,CAACqB,MAAZ,EAAX,CAAb;AACA,SAAOA,MAAM,CAACC,IAAP,CAAY,UAAUC,QAAV,EAAoB;AACrC,WAAO1B,aAAa,CAAC0B,QAAD,CAApB;AACD,GAFM,CAAP;AAGD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASE,YAAT,GAAwB;AACtB,SAAOvB,QAAP;AACD;;AAED,SAASuB,YAAT,EAAuBV,WAAvB,EAAoCE,SAApC,EAA+CO,gBAA/C,EAAiErB,cAAjE,EAAiFW,aAAjF","sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.set.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\nimport \"core-js/modules/es.array.from.js\";\r\nimport EventManager from \"../eventManager.mjs\";\r\nimport { isCtrlMetaKey, isKey } from \"../helpers/unicode.mjs\";\r\nvar eventManager = new EventManager();\r\nvar pressedKeys = new Set();\r\nvar refCount = 0;\r\n/**\r\n * Begins observing keyboard keys states.\r\n *\r\n * @param {Document} rootDocument The document owner.\r\n */\r\n\r\nfunction startObserving(rootDocument) {\r\n  if (refCount === 0) {\r\n    eventManager.addEventListener(rootDocument, 'keydown', function (event) {\r\n      if (!pressedKeys.has(event.keyCode)) {\r\n        pressedKeys.add(event.keyCode);\r\n      }\r\n    });\r\n    eventManager.addEventListener(rootDocument, 'keyup', function (event) {\r\n      if (pressedKeys.has(event.keyCode)) {\r\n        pressedKeys.delete(event.keyCode);\r\n      }\r\n    });\r\n    eventManager.addEventListener(rootDocument, 'visibilitychange', function () {\r\n      if (rootDocument.hidden) {\r\n        pressedKeys.clear();\r\n      }\r\n    });\r\n    eventManager.addEventListener(rootDocument.defaultView, 'blur', function () {\r\n      pressedKeys.clear();\r\n    });\r\n  }\r\n\r\n  refCount += 1;\r\n}\r\n/**\r\n * Stops observing keyboard keys states and clear all previously saved states.\r\n */\r\n\r\n\r\nfunction stopObserving() {\r\n  if (refCount > 0) {\r\n    refCount -= 1;\r\n  }\r\n\r\n  if (refCount === 0) {\r\n    _resetState();\r\n  }\r\n}\r\n/**\r\n * Remove all listeners attached to the DOM and clear all previously saved states.\r\n */\r\n\r\n\r\nfunction _resetState() {\r\n  eventManager.clearEvents();\r\n  pressedKeys.clear();\r\n  refCount = 0;\r\n}\r\n/**\r\n * Checks if provided keyCode or keyCodes are pressed.\r\n *\r\n * @param {string} keyCodes The key codes passed as a string defined in helpers/unicode.js file delimited with '|'.\r\n * @returns {boolean}\r\n */\r\n\r\n\r\nfunction isPressed(keyCodes) {\r\n  return Array.from(pressedKeys.values()).some(function (_keyCode) {\r\n    return isKey(_keyCode, keyCodes);\r\n  });\r\n}\r\n/**\r\n * Checks if ctrl keys are pressed.\r\n *\r\n * @returns {boolean}\r\n */\r\n\r\n\r\nfunction isPressedCtrlKey() {\r\n  var values = Array.from(pressedKeys.values());\r\n  return values.some(function (_keyCode) {\r\n    return isCtrlMetaKey(_keyCode);\r\n  });\r\n}\r\n/**\r\n * Returns reference count. Useful for debugging and testing purposes.\r\n *\r\n * @returns {number}\r\n */\r\n\r\n\r\nfunction _getRefCount() {\r\n  return refCount;\r\n}\r\n\r\nexport { _getRefCount, _resetState, isPressed, isPressedCtrlKey, startObserving, stopObserving };"]},"metadata":{},"sourceType":"module"}