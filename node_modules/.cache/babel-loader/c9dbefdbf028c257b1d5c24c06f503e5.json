{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { expandMetaType } from \"../utils.mjs\";\n/**\n * The table meta object is a layer that keeps all settings of the Handsontable that was passed in\n * the constructor. That layer contains all default settings inherited from the GlobalMeta layer\n * merged with settings passed by the developer. Adding, removing, or changing property in that\n * object has no direct reflection on any other layers.\n *\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n */\n\nvar TableMeta = /*#__PURE__*/function () {\n  function TableMeta(globalMeta) {\n    _classCallCheck(this, TableMeta);\n\n    var MetaCtor = globalMeta.getMetaConstructor();\n    /**\n     * Main object (instance of the internal TableMeta class from GlobalMeta), holder for all settings defined in the table scope.\n     *\n     * @type {object}\n     */\n\n    this.meta = new MetaCtor();\n  }\n  /**\n   * Gets settings object for this layer.\n   *\n   * @returns {object}\n   */\n\n\n  _createClass(TableMeta, [{\n    key: \"getMeta\",\n    value: function getMeta() {\n      return this.meta;\n    }\n    /**\n     * Updates table settings object by merging settings with the current state.\n     *\n     * @param {object} settings An object to merge with.\n     */\n\n  }, {\n    key: \"updateMeta\",\n    value: function updateMeta(settings) {\n      extend(this.meta, settings);\n      extend(this.meta, expandMetaType(settings.type, settings));\n    }\n  }]);\n\n  return TableMeta;\n}();\n\nexport { TableMeta as default };","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/dataMap/metaManager/metaLayers/tableMeta.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","extend","expandMetaType","TableMeta","globalMeta","MetaCtor","getMetaConstructor","meta","value","getMeta","updateMeta","settings","type","default"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,MAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,KAAnC,EAA0C;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAE,QAAIE,UAAU,GAAGH,KAAK,CAACC,CAAD,CAAtB;AAA2BE,IAAAA,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;AAAwDD,IAAAA,UAAU,CAACE,YAAX,GAA0B,IAA1B;AAAgC,QAAI,WAAWF,UAAf,EAA2BA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AAA4BC,IAAAA,MAAM,CAACC,cAAP,CAAsBT,MAAtB,EAA8BI,UAAU,CAACM,GAAzC,EAA8CN,UAA9C;AAA4D;AAAE;;AAE7T,SAASO,YAAT,CAAsBd,WAAtB,EAAmCe,UAAnC,EAA+CC,WAA/C,EAA4D;AAAE,MAAID,UAAJ,EAAgBb,iBAAiB,CAACF,WAAW,CAACiB,SAAb,EAAwBF,UAAxB,CAAjB;AAAsD,MAAIC,WAAJ,EAAiBd,iBAAiB,CAACF,WAAD,EAAcgB,WAAd,CAAjB;AAA6C,SAAOhB,WAAP;AAAqB;;AAEvN,SAASkB,MAAT,QAAuB,6BAAvB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GAAG,aAAa,YAAY;AACvC,WAASA,SAAT,CAAmBC,UAAnB,EAA+B;AAC7BvB,IAAAA,eAAe,CAAC,IAAD,EAAOsB,SAAP,CAAf;;AAEA,QAAIE,QAAQ,GAAGD,UAAU,CAACE,kBAAX,EAAf;AACA;AACJ;AACA;AACA;AACA;;AAEI,SAAKC,IAAL,GAAY,IAAIF,QAAJ,EAAZ;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGER,EAAAA,YAAY,CAACM,SAAD,EAAY,CAAC;AACvBP,IAAAA,GAAG,EAAE,SADkB;AAEvBY,IAAAA,KAAK,EAAE,SAASC,OAAT,GAAmB;AACxB,aAAO,KAAKF,IAAZ;AACD;AACD;AACJ;AACA;AACA;AACA;;AAT2B,GAAD,EAWrB;AACDX,IAAAA,GAAG,EAAE,YADJ;AAEDY,IAAAA,KAAK,EAAE,SAASE,UAAT,CAAoBC,QAApB,EAA8B;AACnCV,MAAAA,MAAM,CAAC,KAAKM,IAAN,EAAYI,QAAZ,CAAN;AACAV,MAAAA,MAAM,CAAC,KAAKM,IAAN,EAAYL,cAAc,CAACS,QAAQ,CAACC,IAAV,EAAgBD,QAAhB,CAA1B,CAAN;AACD;AALA,GAXqB,CAAZ,CAAZ;;AAmBA,SAAOR,SAAP;AACD,CAxC4B,EAA7B;;AA0CA,SAASA,SAAS,IAAIU,OAAtB","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { expandMetaType } from \"../utils.mjs\";\n/**\n * The table meta object is a layer that keeps all settings of the Handsontable that was passed in\n * the constructor. That layer contains all default settings inherited from the GlobalMeta layer\n * merged with settings passed by the developer. Adding, removing, or changing property in that\n * object has no direct reflection on any other layers.\n *\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n */\n\nvar TableMeta = /*#__PURE__*/function () {\n  function TableMeta(globalMeta) {\n    _classCallCheck(this, TableMeta);\n\n    var MetaCtor = globalMeta.getMetaConstructor();\n    /**\n     * Main object (instance of the internal TableMeta class from GlobalMeta), holder for all settings defined in the table scope.\n     *\n     * @type {object}\n     */\n\n    this.meta = new MetaCtor();\n  }\n  /**\n   * Gets settings object for this layer.\n   *\n   * @returns {object}\n   */\n\n\n  _createClass(TableMeta, [{\n    key: \"getMeta\",\n    value: function getMeta() {\n      return this.meta;\n    }\n    /**\n     * Updates table settings object by merging settings with the current state.\n     *\n     * @param {object} settings An object to merge with.\n     */\n\n  }, {\n    key: \"updateMeta\",\n    value: function updateMeta(settings) {\n      extend(this.meta, settings);\n      extend(this.meta, expandMetaType(settings.type, settings));\n    }\n  }]);\n\n  return TableMeta;\n}();\n\nexport { TableMeta as default };"]},"metadata":{},"sourceType":"module"}