{"ast":null,"code":"/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * SheetClip - Spreadsheet Clipboard Parser.\n * version 0.2\n *\n * This tiny library transforms JavaScript arrays to strings that are pasteable by LibreOffice, OpenOffice,\n * Google Docs and Microsoft Excel.\n *\n * Copyright 2012, Marcin Warpechowski\n * Licensed under the MIT license.\n * http://github.com/warpech/sheetclip/\n */\nvar regUniversalNewLine = /^(\\r\\n|\\n\\r|\\r|\\n)/;\nvar regNextCellNoQuotes = /^[^\\t\\r\\n]+/;\nvar regNextEmptyCell = /^\\t/;\n/**\n * Decode spreadsheet string into array.\n *\n * @param {string} str The string to parse.\n * @returns {Array}\n */\n\nexport function parse(str) {\n  var arr = [['']];\n\n  if (str.length === 0) {\n    return arr;\n  }\n\n  var column = 0;\n  var row = 0;\n  var lastLength;\n\n  while (str.length > 0) {\n    if (lastLength === str.length) {\n      // In the case If in last cycle we didn't match anything, we have to leave the infinite loop\n      break;\n    }\n\n    lastLength = str.length;\n\n    if (str.match(regNextEmptyCell)) {\n      str = str.replace(regNextEmptyCell, '');\n      column += 1;\n      arr[row][column] = '';\n    } else if (str.match(regUniversalNewLine)) {\n      str = str.replace(regUniversalNewLine, '');\n      column = 0;\n      row += 1;\n      arr[row] = [''];\n    } else {\n      var nextCell = '';\n\n      if (str.startsWith('\"')) {\n        var quoteNo = 0;\n        var isStillCell = true;\n\n        while (isStillCell) {\n          var nextChar = str.slice(0, 1);\n\n          if (nextChar === '\"') {\n            quoteNo += 1;\n          }\n\n          nextCell += nextChar;\n          str = str.slice(1);\n\n          if (str.length === 0 || str.match(/^[\\t\\r\\n]/) && quoteNo % 2 === 0) {\n            isStillCell = false;\n          }\n        }\n\n        nextCell = nextCell.replace(/^\"/, '').replace(/\"$/, '').replace(/[\"]*/g, function (match) {\n          return new Array(Math.floor(match.length / 2)).fill('\"').join('');\n        });\n      } else {\n        var matchedText = str.match(regNextCellNoQuotes);\n        nextCell = matchedText ? matchedText[0] : '';\n        str = str.slice(nextCell.length);\n      }\n\n      arr[row][column] = nextCell;\n    }\n  }\n\n  return arr;\n}\n/**\n * Encode array into valid spreadsheet string.\n *\n * @param {Array} arr An array of arrays to stringify.\n * @returns {string}\n */\n\nexport function stringify(arr) {\n  var r;\n  var rLen;\n  var c;\n  var cLen;\n  var str = '';\n  var val;\n\n  for (r = 0, rLen = arr.length; r < rLen; r += 1) {\n    cLen = arr[r].length;\n\n    for (c = 0; c < cLen; c += 1) {\n      if (c > 0) {\n        str += '\\t';\n      }\n\n      val = arr[r][c];\n\n      if (typeof val === 'string') {\n        if (val.indexOf('\\n') > -1) {\n          str += \"\\\"\".concat(val.replace(/\"/g, '\"\"'), \"\\\"\");\n        } else {\n          str += val;\n        }\n      } else if (val === null || val === void 0) {\n        // void 0 resolves to undefined\n        str += '';\n      } else {\n        str += val;\n      }\n    }\n\n    if (r !== rLen - 1) {\n      str += '\\n';\n    }\n  }\n\n  return str;\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/3rdparty/SheetClip/SheetClip.mjs"],"names":["regUniversalNewLine","regNextCellNoQuotes","regNextEmptyCell","parse","str","arr","length","column","row","lastLength","match","replace","nextCell","startsWith","quoteNo","isStillCell","nextChar","slice","Array","Math","floor","fill","join","matchedText","stringify","r","rLen","c","cLen","val","indexOf","concat"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.index-of.js\";\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * SheetClip - Spreadsheet Clipboard Parser.\n * version 0.2\n *\n * This tiny library transforms JavaScript arrays to strings that are pasteable by LibreOffice, OpenOffice,\n * Google Docs and Microsoft Excel.\n *\n * Copyright 2012, Marcin Warpechowski\n * Licensed under the MIT license.\n * http://github.com/warpech/sheetclip/\n */\nvar regUniversalNewLine = /^(\\r\\n|\\n\\r|\\r|\\n)/;\nvar regNextCellNoQuotes = /^[^\\t\\r\\n]+/;\nvar regNextEmptyCell = /^\\t/;\n/**\n * Decode spreadsheet string into array.\n *\n * @param {string} str The string to parse.\n * @returns {Array}\n */\n\nexport function parse(str) {\n  var arr = [['']];\n\n  if (str.length === 0) {\n    return arr;\n  }\n\n  var column = 0;\n  var row = 0;\n  var lastLength;\n\n  while (str.length > 0) {\n    if (lastLength === str.length) {\n      // In the case If in last cycle we didn't match anything, we have to leave the infinite loop\n      break;\n    }\n\n    lastLength = str.length;\n\n    if (str.match(regNextEmptyCell)) {\n      str = str.replace(regNextEmptyCell, '');\n      column += 1;\n      arr[row][column] = '';\n    } else if (str.match(regUniversalNewLine)) {\n      str = str.replace(regUniversalNewLine, '');\n      column = 0;\n      row += 1;\n      arr[row] = [''];\n    } else {\n      var nextCell = '';\n\n      if (str.startsWith('\"')) {\n        var quoteNo = 0;\n        var isStillCell = true;\n\n        while (isStillCell) {\n          var nextChar = str.slice(0, 1);\n\n          if (nextChar === '\"') {\n            quoteNo += 1;\n          }\n\n          nextCell += nextChar;\n          str = str.slice(1);\n\n          if (str.length === 0 || str.match(/^[\\t\\r\\n]/) && quoteNo % 2 === 0) {\n            isStillCell = false;\n          }\n        }\n\n        nextCell = nextCell.replace(/^\"/, '').replace(/\"$/, '').replace(/[\"]*/g, function (match) {\n          return new Array(Math.floor(match.length / 2)).fill('\"').join('');\n        });\n      } else {\n        var matchedText = str.match(regNextCellNoQuotes);\n        nextCell = matchedText ? matchedText[0] : '';\n        str = str.slice(nextCell.length);\n      }\n\n      arr[row][column] = nextCell;\n    }\n  }\n\n  return arr;\n}\n/**\n * Encode array into valid spreadsheet string.\n *\n * @param {Array} arr An array of arrays to stringify.\n * @returns {string}\n */\n\nexport function stringify(arr) {\n  var r;\n  var rLen;\n  var c;\n  var cLen;\n  var str = '';\n  var val;\n\n  for (r = 0, rLen = arr.length; r < rLen; r += 1) {\n    cLen = arr[r].length;\n\n    for (c = 0; c < cLen; c += 1) {\n      if (c > 0) {\n        str += '\\t';\n      }\n\n      val = arr[r][c];\n\n      if (typeof val === 'string') {\n        if (val.indexOf('\\n') > -1) {\n          str += \"\\\"\".concat(val.replace(/\"/g, '\"\"'), \"\\\"\");\n        } else {\n          str += val;\n        }\n      } else if (val === null || val === void 0) {\n        // void 0 resolves to undefined\n        str += '';\n      } else {\n        str += val;\n      }\n    }\n\n    if (r !== rLen - 1) {\n      str += '\\n';\n    }\n  }\n\n  return str;\n}"]},"metadata":{},"sourceType":"module"}