{"ast":null,"code":"import { isEmpty } from \"../../../helpers/mixed.mjs\";\nimport { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\n/**\r\n * Numeric sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\r\n *\r\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\r\n * @param {object} columnMeta Column meta object.\r\n * @param {object} columnPluginSettings Plugin settings for the column.\r\n * @returns {Function} The compare function.\r\n */\n\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  return function (value, nextValue) {\n    var parsedFirstValue = parseFloat(value);\n    var parsedSecondValue = parseFloat(nextValue);\n    var sortEmptyCells = columnPluginSettings.sortEmptyCells; // Watch out when changing this part of code! Check below returns 0 (as expected) when comparing empty string, null, undefined\n\n    if (parsedFirstValue === parsedSecondValue || isNaN(parsedFirstValue) && isNaN(parsedSecondValue)) {\n      return DO_NOT_SWAP;\n    }\n\n    if (sortEmptyCells) {\n      if (isEmpty(value)) {\n        return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n      }\n\n      if (isEmpty(nextValue)) {\n        return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n      }\n    }\n\n    if (isNaN(parsedFirstValue)) {\n      return FIRST_AFTER_SECOND;\n    }\n\n    if (isNaN(parsedSecondValue)) {\n      return FIRST_BEFORE_SECOND;\n    }\n\n    if (parsedFirstValue < parsedSecondValue) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    } else if (parsedFirstValue > parsedSecondValue) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n\n    return DO_NOT_SWAP;\n  };\n}\nexport var COLUMN_DATA_TYPE = 'numeric';","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/columnSorting/sortFunction/numeric.mjs"],"names":["isEmpty","DO_NOT_SWAP","FIRST_BEFORE_SECOND","FIRST_AFTER_SECOND","compareFunctionFactory","sortOrder","columnMeta","columnPluginSettings","value","nextValue","parsedFirstValue","parseFloat","parsedSecondValue","sortEmptyCells","isNaN","COLUMN_DATA_TYPE"],"mappings":"AAAA,SAASA,OAAT,QAAwB,4BAAxB;AACA,SAASC,WAAT,EAAsBC,mBAAtB,EAA2CC,kBAA3C,QAAqE,0BAArE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,sBAAT,CAAgCC,SAAhC,EAA2CC,UAA3C,EAAuDC,oBAAvD,EAA6E;AAClF,SAAO,UAAUC,KAAV,EAAiBC,SAAjB,EAA4B;AACjC,QAAIC,gBAAgB,GAAGC,UAAU,CAACH,KAAD,CAAjC;AACA,QAAII,iBAAiB,GAAGD,UAAU,CAACF,SAAD,CAAlC;AACA,QAAII,cAAc,GAAGN,oBAAoB,CAACM,cAA1C,CAHiC,CAGyB;;AAE1D,QAAIH,gBAAgB,KAAKE,iBAArB,IAA0CE,KAAK,CAACJ,gBAAD,CAAL,IAA2BI,KAAK,CAACF,iBAAD,CAA9E,EAAmG;AACjG,aAAOX,WAAP;AACD;;AAED,QAAIY,cAAJ,EAAoB;AAClB,UAAIb,OAAO,CAACQ,KAAD,CAAX,EAAoB;AAClB,eAAOH,SAAS,KAAK,KAAd,GAAsBH,mBAAtB,GAA4CC,kBAAnD;AACD;;AAED,UAAIH,OAAO,CAACS,SAAD,CAAX,EAAwB;AACtB,eAAOJ,SAAS,KAAK,KAAd,GAAsBF,kBAAtB,GAA2CD,mBAAlD;AACD;AACF;;AAED,QAAIY,KAAK,CAACJ,gBAAD,CAAT,EAA6B;AAC3B,aAAOP,kBAAP;AACD;;AAED,QAAIW,KAAK,CAACF,iBAAD,CAAT,EAA8B;AAC5B,aAAOV,mBAAP;AACD;;AAED,QAAIQ,gBAAgB,GAAGE,iBAAvB,EAA0C;AACxC,aAAOP,SAAS,KAAK,KAAd,GAAsBH,mBAAtB,GAA4CC,kBAAnD;AACD,KAFD,MAEO,IAAIO,gBAAgB,GAAGE,iBAAvB,EAA0C;AAC/C,aAAOP,SAAS,KAAK,KAAd,GAAsBF,kBAAtB,GAA2CD,mBAAlD;AACD;;AAED,WAAOD,WAAP;AACD,GAlCD;AAmCD;AACD,OAAO,IAAIc,gBAAgB,GAAG,SAAvB","sourcesContent":["import { isEmpty } from \"../../../helpers/mixed.mjs\";\r\nimport { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\r\n/**\r\n * Numeric sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\r\n *\r\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\r\n * @param {object} columnMeta Column meta object.\r\n * @param {object} columnPluginSettings Plugin settings for the column.\r\n * @returns {Function} The compare function.\r\n */\r\n\r\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\r\n  return function (value, nextValue) {\r\n    var parsedFirstValue = parseFloat(value);\r\n    var parsedSecondValue = parseFloat(nextValue);\r\n    var sortEmptyCells = columnPluginSettings.sortEmptyCells; // Watch out when changing this part of code! Check below returns 0 (as expected) when comparing empty string, null, undefined\r\n\r\n    if (parsedFirstValue === parsedSecondValue || isNaN(parsedFirstValue) && isNaN(parsedSecondValue)) {\r\n      return DO_NOT_SWAP;\r\n    }\r\n\r\n    if (sortEmptyCells) {\r\n      if (isEmpty(value)) {\r\n        return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\r\n      }\r\n\r\n      if (isEmpty(nextValue)) {\r\n        return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\r\n      }\r\n    }\r\n\r\n    if (isNaN(parsedFirstValue)) {\r\n      return FIRST_AFTER_SECOND;\r\n    }\r\n\r\n    if (isNaN(parsedSecondValue)) {\r\n      return FIRST_BEFORE_SECOND;\r\n    }\r\n\r\n    if (parsedFirstValue < parsedSecondValue) {\r\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\r\n    } else if (parsedFirstValue > parsedSecondValue) {\r\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\r\n    }\r\n\r\n    return DO_NOT_SWAP;\r\n  };\r\n}\r\nexport var COLUMN_DATA_TYPE = 'numeric';"]},"metadata":{},"sourceType":"module"}