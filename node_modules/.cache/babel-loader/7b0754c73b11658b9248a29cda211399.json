{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\pages\\\\pipingProduction\\\\pipingProduction.js\",\n    _s = $RefreshSig$();\n\nimport NavBar from '../../components/navBar/navBar';\nimport React, { useState, useEffect } from 'react';\nimport { HotTable } from '@handsontable/react';\nimport IdleTimer from 'react-idle-timer';\nimport { useHistory } from \"react-router\";\nimport BackIcon from \"../../assets/images/back.svg\";\nimport AlertF from \"../../components/alert/alert\";\nimport './pipingProduction.css';\nimport SaveIcon from \"../../assets/images/save.svg\"; //Página de home con el menú para ir a las aplicaciones de isotracker\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PITRequests = () => {\n  _s();\n\n  const history = useHistory();\n\n  const CryptoJS = require(\"crypto-js\");\n\n  const SecureStorage = require(\"secure-web-storage\");\n\n  var SECRET_KEY = 'sanud2ha8shd72h';\n  var secureStorage = new SecureStorage(localStorage, {\n    hash: function hash(key) {\n      key = CryptoJS.SHA256(key, SECRET_KEY);\n      return key.toString();\n    },\n    encrypt: function encrypt(data) {\n      data = CryptoJS.AES.encrypt(data, SECRET_KEY);\n      data = data.toString();\n      return data;\n    },\n    decrypt: function decrypt(data) {\n      data = CryptoJS.AES.decrypt(data, SECRET_KEY);\n      data = data.toString(CryptoJS.enc.Utf8);\n      return data;\n    }\n  });\n  document.body.style.zoom = 0.8;\n  const [updateData, setUpdateData] = useState(false);\n  const [updateRows, setUpdateRows] = useState(false);\n  const [tables, setTables] = useState([]);\n  const [materials, setMaterials] = useState();\n  const [materialsList, setMaterialsList] = useState([]);\n  const [piping, setPiping] = useState();\n  const [management, setManagement] = useState([]);\n  const [estimatedData, setEstimatedData] = useState();\n  const [forecastData, setForecastData] = useState();\n  const [success, setSuccess] = useState(false);\n  const [spanAlert, setSpanAlert] = useState(false);\n  const [pipingAlert, setPipingAlert] = useState(false);\n  const [materialsAlert, setMaterialsAlert] = useState(false);\n\n  function handleOnIdle() {\n    const body = {\n      user: secureStorage.getItem(\"user\")\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/exitEditCSP\", options).then(response => response.json()).then(async json => {});\n    secureStorage.clear();\n    history.push(\"/\" + process.env.REACT_APP_PROJECT);\n  }\n\n  useEffect(async () => {\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/getEstimatedMatWeek\", options).then(response => response.json()).then(async json => {\n      const estimated = json.estimated;\n      fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/getForecastMatWeek\", options).then(response => response.json()).then(async json => {\n        const forecast = json.forecast;\n        let tables = [];\n        let material = estimated[0].material_id;\n        const settings = {\n          licenseKey: 'non-commercial-and-evaluation',\n          colWidths: 40,\n          rowHeaderWidth: 190 //... other options\n\n        };\n        let weeks = [];\n        let est = {};\n        let sumEst = {};\n        let countEst = 0;\n        let forc = {};\n        let col = [];\n        let sumEstCells = [];\n\n        for (let i = 0; i < estimated.length; i++) {\n          if (estimated[i].material_id === material) {\n            weeks.push(estimated[i].week.toString());\n            est[estimated[i].week.toString()] = estimated[i].estimated;\n            forc[forecast[i].week.toString()] = forecast[i].estimated;\n            countEst += estimated[i].estimated;\n            sumEst[estimated[i].week.toString()] = countEst;\n            col.push({\n              data: estimated[i].week.toString(),\n              type: \"numeric\"\n            });\n            sumEstCells.push({\n              row: 2,\n              col: i,\n              readOnly: true\n            });\n          } else {\n            let estimatedData = estimatedData;\n            await tables.push( /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"hot-app\",\n              children: [/*#__PURE__*/_jsxDEV(\"text\", {\n                className: \"materials__title\",\n                children: [estimated[i - 1].name.toUpperCase(), \" Isometrics\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 69\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"save__button\",\n                onClick: () => submitEstimatedForecast(estimated[i - 1].material_id, est, forc),\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: SaveIcon,\n                  alt: \"save\",\n                  className: \"save__icon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 268\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 157\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginTop: \"10px\"\n                },\n                children: /*#__PURE__*/_jsxDEV(HotTable, {\n                  data: [est, forc, sumEst],\n                  colHeaders: weeks,\n                  rowHeaders: [\"Estimated\", \"Forecast\", \"Estimated progress\"],\n                  width: \"2150\",\n                  height: \"200\",\n                  settings: settings,\n                  manualColumnResize: true,\n                  manualRowResize: true,\n                  columns: col,\n                  filters: true,\n                  cell: sumEstCells\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 65\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 51\n            }, this));\n            weeks = [estimated[i].week.toString()];\n            est = {};\n            forc = {};\n            sumEst = {};\n            countEst = estimated[i].estimated;\n            est[estimated[i].week.toString()] = estimated[i].estimated;\n            forc[forecast[i].week.toString()] = forecast[i].estimated;\n            sumEst[estimated[i].week.toString()] = countEst;\n            col = [{\n              data: estimated[i].week.toString(),\n              type: \"numeric\"\n            }];\n            material = estimated[i].material_id;\n          }\n        }\n\n        let estimatedData = estimatedData;\n        estimatedData.push(est);\n        await tables.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"hot-app\",\n          children: [/*#__PURE__*/_jsxDEV(\"text\", {\n            className: \"materials__title\",\n            children: [estimated[estimated.length - 1].name.toUpperCase(), \" Isometrics\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 61\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save__button\",\n            onClick: () => submitEstimatedForecast(material, est, forc),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: SaveIcon,\n              alt: \"save\",\n              className: \"save__icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 257\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 164\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: \"10px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(HotTable, {\n              data: [est, forc, sumEst],\n              colHeaders: weeks,\n              rowHeaders: [\"Estimated\", \"Forecast\", \"Estimated progress\"],\n              width: \"2150\",\n              height: \"200\",\n              settings: settings,\n              manualColumnResize: true,\n              manualRowResize: true,\n              columns: col,\n              filters: true,\n              cell: sumEstCells\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 57\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 43\n        }, this));\n        setTables(tables);\n      });\n    });\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/getMaterials\", options).then(response => response.json()).then(async json => {\n      const materials = json.materials;\n      let mat = [];\n      let matList = [];\n\n      for (let i = 0; i < materials.length; i++) {\n        mat.push({\n          \"id\": materials[i].id,\n          \"Material\": materials[i].name\n        });\n        matList.push(materials[i].name);\n      }\n\n      await setMaterials(mat);\n      await setMaterialsList(matList);\n    });\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/getMaterialsPipingClass\", options).then(response => response.json()).then(async json => {\n      const materials = json.materials;\n      let piping = [];\n\n      for (let i = 0; i < materials.length; i++) {\n        piping.push({\n          \"id\": materials[i].piping_id,\n          \"PipingClass\": materials[i].piping,\n          \"Material\": materials[i].material\n        });\n      }\n\n      await setPiping(piping);\n    });\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/getProjectSpan\", options).then(response => response.json()).then(async json => {\n      const span = json.span;\n      await setManagement({\n        \"Starting date\": span[0].starting_date.toString().substring(8, 10) + \"/\" + span[0].starting_date.toString().substring(5, 7) + \"/\" + span[0].starting_date.toString().substring(0, 4),\n        \"Finishing date\": span[0].finishing_date.toString().substring(8, 10) + \"/\" + span[0].finishing_date.toString().substring(5, 7) + \"/\" + span[0].finishing_date.toString().substring(0, 4)\n      });\n    });\n  }, [updateData]);\n\n  async function addRowMaterials() {\n    let m = materials;\n    m.push({\n      \"id\": \"\",\n      \"Material\": \"\"\n    });\n    await setMaterials(m);\n    await setUpdateRows(!updateRows);\n  }\n\n  async function addRowPiping() {\n    let p = piping;\n    p.push({\n      \"id\": \"\",\n      \"Material\": \"\"\n    });\n    await setPiping(p);\n    await setUpdateRows(!updateRows);\n  }\n\n  async function submitChangesMaterials() {\n    const body = {\n      materials: materials\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/submitMaterials\", options).then(response => response.json()).then(async json => {\n      if (json.success) {\n        await setMaterialsAlert(true);\n        await setUpdateData(!updateData);\n      }\n    });\n  }\n\n  async function submitChangesPiping() {\n    const body = {\n      piping: piping\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/submitPipingClass\", options).then(response => response.json()).then(async json => {\n      if (json.success) {\n        await setPipingAlert(true);\n        await setUpdateData(!updateData);\n      }\n    });\n  }\n\n  async function submitManagement() {\n    const body = {\n      span: management\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/submitProjectSpan\", options).then(response => response.json()).then(async json => {\n      if (json.success) {\n        await setSpanAlert(true);\n        await setUpdateData(!updateData);\n      }\n    });\n  }\n\n  async function submitEstimatedForecast(material_id, estimated, forecast) {\n    console.log(estimated);\n    const body = {\n      material_id: material_id,\n      estimated: estimated,\n      forecast: forecast\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/submitEstimatedForecast\", options).then(response => response.json()).then(async json => {\n      if (json.success) {\n        await setSuccess(true);\n        await setUpdateData(!updateData);\n      }\n    });\n  }\n\n  const matSettings = {\n    licenseKey: 'non-commercial-and-evaluation',\n    colWidths: 450 //... other options\n\n  };\n  const pipingSettings = {\n    licenseKey: 'non-commercial-and-evaluation',\n    colWidths: 225 //... other options\n\n  };\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    children: [updateData, updateRows, /*#__PURE__*/_jsxDEV(IdleTimer, {\n      timeout: 1000 * 60 * 15,\n      onIdle: handleOnIdle,\n      debounce: 250\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `alert alert-success ${spanAlert ? 'alert-shown' : 'alert-hidden'}`,\n      onTransitionEnd: () => setSpanAlert(false),\n      children: /*#__PURE__*/_jsxDEV(AlertF, {\n        type: \"success\",\n        text: \"Project week span saved!\",\n        margin: \"0px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `alert alert-success ${pipingAlert ? 'alert-shown' : 'alert-hidden'}`,\n      onTransitionEnd: () => setPipingAlert(false),\n      children: /*#__PURE__*/_jsxDEV(AlertF, {\n        type: \"success\",\n        text: \"Piping classes saved!\",\n        margin: \"0px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `alert alert-success ${materialsAlert ? 'alert-shown' : 'alert-hidden'}`,\n      onTransitionEnd: () => setMaterialsAlert(false),\n      children: /*#__PURE__*/_jsxDEV(AlertF, {\n        type: \"success\",\n        text: \"Materials saved!\",\n        margin: \"0px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `alert alert-success ${success ? 'alert-shown' : 'alert-hidden'}`,\n      onTransitionEnd: () => setSuccess(false),\n      children: /*#__PURE__*/_jsxDEV(AlertF, {\n        type: \"success\",\n        text: \"Changes saved!\",\n        margin: \"0px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back__button\",\n      onClick: () => history.push('/' + process.env.REACT_APP_PROJECT + '/piping'),\n      style: {\n        width: \"175px\",\n        marginLeft: \"100px\",\n        marginTop: \"120px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: BackIcon,\n        alt: \"hold\",\n        className: \"navBar__icon\",\n        style: {\n          marginRight: \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 182\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"back__button__text\",\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 272\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph__container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"materials__pc__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"hot-app\",\n          style: {\n            marginBottom: \"20px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(HotTable, {\n            data: materials,\n            colHeaders: [\"<b>Material</b>\"],\n            rowHeaders: true,\n            width: \"500\",\n            height: \"225\",\n            settings: matSettings,\n            manualColumnResize: true,\n            manualRowResize: true,\n            columns: [{\n              data: \"Material\"\n            }],\n            filters: true,\n            dropdownMenu: ['make_read_only', '---------', 'alignment', '---------', 'filter_by_condition', '---------', 'filter_operators', '---------', 'filter_by_condition2', '---------', 'filter_by_value', '---------', 'filter_action_bar']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn btn-sm btn-info\",\n          onClick: () => addRowMaterials(),\n          style: {\n            marginRight: \"5px\",\n            fontSize: \"16px\",\n            width: \"60px\",\n            borderRadius: \"10px\",\n            backgroundColor: \"#338DF1\",\n            marginLeft: \"190px\"\n          },\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn btn-sm btn-success\",\n          onClick: () => submitChangesMaterials(),\n          style: {\n            marginRight: \"5px\",\n            fontSize: \"16px\",\n            width: \"60px\",\n            borderRadius: \"10px\",\n            backgroundColor: \"#7BD36D\"\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"hot-app\",\n          style: {\n            marginBottom: \"20px\",\n            marginTop: \"40px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(HotTable, {\n            data: piping,\n            colHeaders: [\"<b>Piping class</b>\", \"<b>Material</b>\"],\n            rowHeaders: true,\n            width: \"500\",\n            height: \"225\",\n            settings: pipingSettings,\n            manualColumnResize: true,\n            manualRowResize: true,\n            columns: [{\n              data: \"PipingClass\"\n            }, {\n              data: \"Material\",\n              type: \"dropdown\",\n              strict: \"true\",\n              source: materialsList\n            }],\n            filters: true,\n            dropdownMenu: ['make_read_only', '---------', 'alignment', '---------', 'filter_by_condition', '---------', 'filter_operators', '---------', 'filter_by_condition2', '---------', 'filter_by_value', '---------', 'filter_action_bar']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn btn-sm btn-info\",\n          onClick: () => addRowPiping(),\n          style: {\n            marginRight: \"5px\",\n            fontSize: \"16px\",\n            width: \"60px\",\n            borderRadius: \"10px\",\n            backgroundColor: \"#338DF1\",\n            marginLeft: \"190px\"\n          },\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn btn-sm btn-success\",\n          onClick: () => submitChangesPiping(),\n          style: {\n            marginRight: \"5px\",\n            fontSize: \"16px\",\n            width: \"60px\",\n            borderRadius: \"10px\",\n            backgroundColor: \"#7BD36D\"\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"management__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"text\", {\n        className: \"materials__title\",\n        children: \"Project Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save__button\",\n        onClick: () => submitManagement(),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: SaveIcon,\n          alt: \"save\",\n          className: \"save__icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 84\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(HotTable, {\n          data: management,\n          colHeaders: [\"<b>Starting date</b>\", \"<b>Finishing date</b>\"],\n          rowHeaders: true,\n          width: \"500\",\n          height: \"120\",\n          settings: pipingSettings,\n          manualColumnResize: true,\n          manualRowResize: true,\n          columns: [{\n            data: \"Starting date\",\n            type: \"date\"\n          }, {\n            data: \"Finishing date\",\n            type: \"date\"\n          }],\n          filters: true,\n          dropdownMenu: ['make_read_only', '---------', 'alignment', '---------', 'filter_by_condition', '---------', 'filter_operators', '---------', 'filter_by_condition2', '---------', 'filter_by_value', '---------', 'filter_action_bar']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"materials__tables__container\",\n      children: tables\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 331,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PITRequests, \"rLT5MtRfziEsQPfoXvnfIuUJw/w=\", false, function () {\n  return [useHistory];\n});\n\n_c = PITRequests;\nexport default PITRequests;\n\nvar _c;\n\n$RefreshReg$(_c, \"PITRequests\");","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/pages/pipingProduction/pipingProduction.js"],"names":["NavBar","React","useState","useEffect","HotTable","IdleTimer","useHistory","AlertF","PITRequests","history","CryptoJS","require","SecureStorage","SECRET_KEY","secureStorage","localStorage","hash","key","SHA256","toString","encrypt","data","AES","decrypt","enc","Utf8","document","body","style","zoom","updateData","setUpdateData","updateRows","setUpdateRows","tables","setTables","materials","setMaterials","materialsList","setMaterialsList","piping","setPiping","management","setManagement","estimatedData","setEstimatedData","forecastData","setForecastData","success","setSuccess","spanAlert","setSpanAlert","pipingAlert","setPipingAlert","materialsAlert","setMaterialsAlert","handleOnIdle","user","getItem","options","method","headers","JSON","stringify","fetch","process","env","REACT_APP_SERVER","REACT_APP_NODE_PORT","then","response","json","clear","push","REACT_APP_PROJECT","estimated","forecast","material","material_id","settings","licenseKey","colWidths","rowHeaderWidth","weeks","est","sumEst","countEst","forc","col","sumEstCells","i","length","week","type","row","readOnly","name","toUpperCase","submitEstimatedForecast","SaveIcon","marginTop","mat","matList","id","piping_id","span","starting_date","substring","finishing_date","addRowMaterials","m","addRowPiping","p","submitChangesMaterials","submitChangesPiping","submitManagement","console","log","matSettings","pipingSettings","width","marginLeft","BackIcon","marginRight","marginBottom","fontSize","borderRadius","backgroundColor","strict","source"],"mappings":"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","sourcesContent":["import NavBar from '../../components/navBar/navBar';\r\nimport React, { useState , useEffect} from 'react'\r\nimport { HotTable } from '@handsontable/react';\r\n\r\nimport IdleTimer from 'react-idle-timer'\r\nimport {useHistory} from \"react-router\";\r\nimport BackIcon from \"../../assets/images/back.svg\"\r\n\r\nimport AlertF from \"../../components/alert/alert\"\r\n\r\nimport './pipingProduction.css'\r\nimport SaveIcon from \"../../assets/images/save.svg\"\r\n\r\n//Página de home con el menú para ir a las aplicaciones de isotracker\r\n\r\nconst PITRequests = () =>{\r\n\r\n    const history = useHistory();\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    document.body.style.zoom = 0.8\r\n\r\n    const [updateData, setUpdateData] = useState(false)\r\n    const [updateRows, setUpdateRows] = useState(false)\r\n    const [tables, setTables] = useState([])\r\n    const [materials, setMaterials] = useState()\r\n    const [materialsList, setMaterialsList] = useState([])\r\n    const [piping, setPiping] = useState()\r\n    const [management, setManagement] = useState([])\r\n\r\n    const [estimatedData, setEstimatedData] = useState()\r\n    const [forecastData, setForecastData] = useState()\r\n\r\n    const [success, setSuccess] = useState(false)\r\n    const [spanAlert, setSpanAlert] = useState(false)\r\n    const [pipingAlert, setPipingAlert] = useState(false)\r\n    const [materialsAlert, setMaterialsAlert] = useState(false)\r\n\r\n\r\n    function handleOnIdle(){\r\n        const body = {\r\n            user: secureStorage.getItem(\"user\"),\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/exitEditCSP\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n            })\r\n        secureStorage.clear()\r\n        history.push(\"/\" + process.env.REACT_APP_PROJECT)\r\n    }\r\n\r\n    useEffect(async() =>{\r\n    \r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getEstimatedMatWeek\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n\r\n                const estimated = json.estimated\r\n                fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getForecastMatWeek\", options)\r\n                    .then(response => response.json())\r\n                    .then(async json => {\r\n                        const forecast = json.forecast\r\n                        let tables = []\r\n                        let material = estimated[0].material_id\r\n                        const settings = {\r\n                            licenseKey: 'non-commercial-and-evaluation',\r\n                            colWidths: 40,\r\n                            rowHeaderWidth: 190\r\n                            //... other options\r\n                        }\r\n                        let weeks = []\r\n                        let est = {}\r\n                        let sumEst = {}\r\n                        let countEst = 0\r\n                        let forc = {}\r\n                        let col = []\r\n                        let sumEstCells = []\r\n                        for(let i = 0; i < estimated.length; i++){\r\n                            if(estimated[i].material_id === material){\r\n                                weeks.push(estimated[i].week.toString())\r\n                                est[estimated[i].week.toString()] = estimated[i].estimated\r\n                                forc[forecast[i].week.toString()] = forecast[i].estimated\r\n                                countEst += estimated[i].estimated\r\n                                sumEst[estimated[i].week.toString()] = countEst\r\n                                col.push({ data: estimated[i].week.toString(), type: \"numeric\"})\r\n                                sumEstCells.push({row: 2, col: i, readOnly:true})\r\n                            }else{\r\n                                let estimatedData = estimatedData\r\n                                \r\n                                await tables.push(<div id=\"hot-app\"><text className=\"materials__title\">{estimated[i-1].name.toUpperCase()} Isometrics</text><button className=\"save__button\" onClick={()=> submitEstimatedForecast(estimated[i-1].material_id, est, forc)}><img src={SaveIcon} alt=\"save\" className=\"save__icon\"></img></button>\r\n                                <div style={{marginTop:\"10px\"}}><HotTable\r\n                                data={[est, forc, sumEst]}\r\n                                colHeaders={weeks}\r\n                                rowHeaders={[\"Estimated\", \"Forecast\", \"Estimated progress\"]}\r\n                                width=\"2150\"\r\n                                height=\"200\"\r\n                                settings={settings} \r\n                                manualColumnResize={true}\r\n                                manualRowResize={true}\r\n                                columns= {col}\r\n                                filters={true}\r\n                                cell = {sumEstCells}\r\n                            /></div></div>)\r\n                            weeks = [estimated[i].week.toString()]\r\n                            est = {}\r\n                            forc = {}\r\n                            sumEst = {}\r\n                            countEst = estimated[i].estimated\r\n                            est[estimated[i].week.toString()] = estimated[i].estimated\r\n                            forc[forecast[i].week.toString()] = forecast[i].estimated\r\n                            sumEst[estimated[i].week.toString()] = countEst\r\n                            col = [{ data: estimated[i].week.toString(), type: \"numeric\"}]\r\n                            material = estimated[i].material_id\r\n                            }\r\n                        }\r\n                        let estimatedData = estimatedData\r\n                        estimatedData.push(est)\r\n                        await tables.push(<div id=\"hot-app\"><text className=\"materials__title\">{estimated[estimated.length-1].name.toUpperCase()} Isometrics</text><button className=\"save__button\" onClick={()=> submitEstimatedForecast(material, est, forc)}><img src={SaveIcon} alt=\"save\" className=\"save__icon\"></img></button>\r\n                        <div style={{marginTop:\"10px\"}}><HotTable\r\n                                data={[est, forc, sumEst]}\r\n                                colHeaders={weeks}\r\n                                rowHeaders={[\"Estimated\", \"Forecast\", \"Estimated progress\"]}\r\n                                width=\"2150\"\r\n                                height=\"200\"\r\n                                settings={settings} \r\n                                manualColumnResize={true}\r\n                                manualRowResize={true}\r\n                                columns= {col}\r\n                                filters={true}\r\n                                cell = {sumEstCells}\r\n                            /></div></div>)\r\n\r\n                        setTables(tables)\r\n                    })\r\n                })\r\n\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getMaterials\", options)\r\n                    .then(response => response.json())\r\n                    .then(async json => {\r\n                        const materials = json.materials\r\n                        let mat = []\r\n                        let matList = []\r\n                        for(let i = 0; i < materials.length; i++){\r\n                            mat.push({\"id\": materials[i].id, \"Material\": materials[i].name})\r\n                            matList.push(materials[i].name)\r\n                        }\r\n                        await setMaterials(mat)\r\n                        await setMaterialsList(matList)\r\n                    })\r\n\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getMaterialsPipingClass\", options)\r\n                    .then(response => response.json())\r\n                    .then(async json => {\r\n                        const materials = json.materials                        \r\n                        let piping = []\r\n                        for(let i = 0; i < materials.length; i++){\r\n                            piping.push({\"id\": materials[i].piping_id, \"PipingClass\": materials[i].piping, \"Material\": materials[i].material})\r\n                        }\r\n                        \r\n                        await setPiping(piping)\r\n                })\r\n\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getProjectSpan\", options)\r\n                    .then(response => response.json())\r\n                    .then(async json => {\r\n                        const span = json.span\r\n                        await setManagement({\"Starting date\": span[0].starting_date.toString().substring(8,10) + \"/\" + span[0].starting_date.toString().substring(5,7) + \"/\" + span[0].starting_date.toString().substring(0,4), \"Finishing date\": span[0].finishing_date.toString().substring(8,10) + \"/\" + span[0].finishing_date.toString().substring(5,7) + \"/\" + span[0].finishing_date.toString().substring(0,4)})\r\n                    })\r\n\r\n    }, [updateData])\r\n\r\n    async function addRowMaterials(){\r\n        let m = materials\r\n        m.push({\"id\": \"\", \"Material\": \"\"})\r\n        await setMaterials(m)\r\n        await setUpdateRows(!updateRows)\r\n    }\r\n\r\n    async function addRowPiping(){\r\n        let p = piping\r\n        p.push({\"id\": \"\", \"Material\": \"\"})\r\n        await setPiping(p)\r\n        await setUpdateRows(!updateRows)\r\n    }\r\n\r\n    async function submitChangesMaterials(){\r\n        const body ={\r\n            materials : materials\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submitMaterials\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            if(json.success){\r\n                await setMaterialsAlert(true)\r\n                await setUpdateData(!updateData)\r\n            }\r\n        })\r\n    }\r\n\r\n    async function submitChangesPiping(){\r\n        const body ={\r\n            piping : piping\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submitPipingClass\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            if(json.success){\r\n                await setPipingAlert(true)\r\n                await setUpdateData(!updateData)\r\n            }\r\n        })\r\n    }\r\n\r\n    async function submitManagement(){\r\n        const body ={\r\n            span : management\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submitProjectSpan\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            if(json.success){\r\n                await setSpanAlert(true)\r\n                await setUpdateData(!updateData)\r\n            }\r\n        })\r\n    }\r\n\r\n    async function submitEstimatedForecast(material_id, estimated, forecast){\r\n        console.log(estimated)\r\n        const body ={\r\n            material_id : material_id,\r\n            estimated: estimated,\r\n            forecast: forecast\r\n        }\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/submitEstimatedForecast\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n            if(json.success){\r\n                await setSuccess(true)\r\n                await setUpdateData(!updateData)\r\n            }\r\n        })        \r\n    }\r\n    \r\n    const matSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 450,\r\n        //... other options\r\n    }\r\n\r\n    const pipingSettings = {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        colWidths: 225,\r\n        //... other options\r\n    }\r\n\r\n    return(\r\n\r\n        <body>\r\n            {updateData}\r\n            {updateRows}\r\n            <IdleTimer\r\n                timeout={1000 * 60 * 15}\r\n                onIdle={handleOnIdle}\r\n                debounce={250}\r\n            />\r\n            <NavBar/>\r\n            <div className={`alert alert-success ${spanAlert ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setSpanAlert(false)}>\r\n                <AlertF type=\"success\" text=\"Project week span saved!\" margin=\"0px\"/>\r\n            </div>\r\n            <div className={`alert alert-success ${pipingAlert ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setPipingAlert(false)}>\r\n                <AlertF type=\"success\" text=\"Piping classes saved!\" margin=\"0px\"/>\r\n            </div>\r\n            <div className={`alert alert-success ${materialsAlert ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setMaterialsAlert(false)}>\r\n                <AlertF type=\"success\" text=\"Materials saved!\" margin=\"0px\"/>\r\n            </div>\r\n            <div className={`alert alert-success ${success ? 'alert-shown' : 'alert-hidden'}`} onTransitionEnd={() => setSuccess(false)}>\r\n                <AlertF type=\"success\" text=\"Changes saved!\" margin=\"0px\"/>\r\n            </div>\r\n            <button className=\"back__button\" onClick={()=>history.push('/'+process.env.REACT_APP_PROJECT+'/piping')} style={{width:\"175px\", marginLeft:\"100px\", marginTop: \"120px\"}}><img src={BackIcon} alt=\"hold\" className=\"navBar__icon\" style={{marginRight:\"0px\"}}></img><p className=\"back__button__text\">Back</p></button>\r\n            <div className=\"top__container\">\r\n                <div className=\"graph__container\">\r\n\r\n                </div>\r\n                <div className=\"materials__pc__container\">\r\n                <div id=\"hot-app\" style={{marginBottom:\"20px\"}}>\r\n                    <HotTable\r\n                        data={materials}\r\n                        colHeaders = {[\"<b>Material</b>\"]}\r\n                        rowHeaders={true}\r\n                        width=\"500\"\r\n                        height=\"225\"\r\n                        settings={matSettings} \r\n                        manualColumnResize={true}\r\n                        manualRowResize={true}\r\n                        columns= {[{ data: \"Material\"}]}\r\n                        filters={true}\r\n                        dropdownMenu= {[\r\n                            'make_read_only',\r\n                            '---------',\r\n                            'alignment',\r\n                            '---------',\r\n                            'filter_by_condition',\r\n                            '---------',\r\n                            'filter_operators',\r\n                            '---------',\r\n                            'filter_by_condition2',\r\n                            '---------',\r\n                            'filter_by_value',\r\n                            '---------',\r\n                            'filter_action_bar',\r\n                        ]}\r\n                    />\r\n                    </div>\r\n                        <button class=\"btn btn-sm btn-info\" onClick={() => addRowMaterials()} style={{marginRight:\"5px\", fontSize:\"16px\",width:\"60px\", borderRadius:\"10px\", backgroundColor:\"#338DF1\", marginLeft:\"190px\"}}>Add</button>\r\n                        <button class=\"btn btn-sm btn-success\" onClick={() => submitChangesMaterials()} style={{marginRight:\"5px\", fontSize:\"16px\", width:\"60px\", borderRadius:\"10px\", backgroundColor:\"#7BD36D\"}}>Save</button>\r\n                    <div id=\"hot-app\" style={{marginBottom:\"20px\", marginTop:\"40px\"}}>\r\n                    <HotTable\r\n                        data={piping}\r\n                        colHeaders = {[\"<b>Piping class</b>\", \"<b>Material</b>\"]}\r\n                        rowHeaders={true}\r\n                        width=\"500\"\r\n                        height=\"225\"\r\n                        settings={pipingSettings} \r\n                        manualColumnResize={true}\r\n                        manualRowResize={true}\r\n                        columns= {[{ data: \"PipingClass\"}, { data: \"Material\", type:\"dropdown\",strict:\"true\", source: materialsList}]}\r\n                        filters={true}\r\n                        dropdownMenu= {[\r\n                            'make_read_only',\r\n                            '---------',\r\n                            'alignment',\r\n                            '---------',\r\n                            'filter_by_condition',\r\n                            '---------',\r\n                            'filter_operators',\r\n                            '---------',\r\n                            'filter_by_condition2',\r\n                            '---------',\r\n                            'filter_by_value',\r\n                            '---------',\r\n                            'filter_action_bar',\r\n                        ]}\r\n                    />\r\n                    </div>\r\n                    <button class=\"btn btn-sm btn-info\" onClick={() => addRowPiping()} style={{marginRight:\"5px\", fontSize:\"16px\",width:\"60px\", borderRadius:\"10px\", backgroundColor:\"#338DF1\", marginLeft:\"190px\"}}>Add</button>\r\n                    <button class=\"btn btn-sm btn-success\" onClick={() => submitChangesPiping()} style={{marginRight:\"5px\", fontSize:\"16px\", width:\"60px\", borderRadius:\"10px\", backgroundColor:\"#7BD36D\"}}>Save</button>\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"management__container\">\r\n                <text className=\"materials__title\">Project Management</text>\r\n                <button className=\"save__button\" onClick={()=> submitManagement()}><img src={SaveIcon} alt=\"save\" className=\"save__icon\"></img></button>\r\n                \r\n                \r\n                <div style={{marginTop:\"10px\"}}>\r\n                    <HotTable\r\n                        data={management}\r\n                        colHeaders = {[\"<b>Starting date</b>\", \"<b>Finishing date</b>\"]}\r\n                        rowHeaders={true}\r\n                        width=\"500\"\r\n                        height=\"120\"\r\n                        settings={pipingSettings} \r\n                        manualColumnResize={true}\r\n                        manualRowResize={true}\r\n                        columns= {[{ data: \"Starting date\", type:\"date\"}, { data: \"Finishing date\", type:\"date\"}]}\r\n                        filters={true}\r\n                        dropdownMenu= {[\r\n                            'make_read_only',\r\n                            '---------',\r\n                            'alignment',\r\n                            '---------',\r\n                            'filter_by_condition',\r\n                            '---------',\r\n                            'filter_operators',\r\n                            '---------',\r\n                            'filter_by_condition2',\r\n                            '---------',\r\n                            'filter_by_value',\r\n                            '---------',\r\n                            'filter_action_bar',\r\n                        ]}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"materials__tables__container\">\r\n                \r\n                {tables}\r\n            </div>\r\n        </body>\r\n    );\r\n};\r\n\r\nexport default PITRequests;"]},"metadata":{},"sourceType":"module"}