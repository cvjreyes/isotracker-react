{"ast":null,"code":"import { checkSelectionConsistency, markLabelAsSelected } from \"../utils.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\nexport var KEY = 'make_read_only';\n/**\r\n * @returns {object}\r\n */\n\nexport default function readOnlyItem() {\n  return {\n    key: KEY,\n    name: function name() {\n      var _this = this;\n\n      var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_READ_ONLY);\n      var atLeastOneReadOnly = checkSelectionConsistency(this.getSelectedRange(), function (row, col) {\n        return _this.getCellMeta(row, col).readOnly;\n      });\n\n      if (atLeastOneReadOnly) {\n        label = markLabelAsSelected(label);\n      }\n\n      return label;\n    },\n    callback: function callback() {\n      var _this2 = this;\n\n      var ranges = this.getSelectedRange();\n      var atLeastOneReadOnly = checkSelectionConsistency(ranges, function (row, col) {\n        return _this2.getCellMeta(row, col).readOnly;\n      });\n      arrayEach(ranges, function (range) {\n        range.forAll(function (row, col) {\n          if (row >= 0 && col >= 0) {\n            _this2.setCellMeta(row, col, 'readOnly', !atLeastOneReadOnly);\n          }\n        });\n      });\n      this.render();\n    },\n    disabled: function disabled() {\n      if (this.selection.isSelectedByCorner()) {\n        return true;\n      }\n\n      if (this.countRows() === 0 || this.countCols() === 0) {\n        return true;\n      }\n\n      if (!this.getSelectedRange() || this.getSelectedRange().length === 0) {\n        return true;\n      }\n\n      return false;\n    }\n  };\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/contextMenu/predefinedItems/readOnly.mjs"],"names":["checkSelectionConsistency","markLabelAsSelected","arrayEach","C","KEY","readOnlyItem","key","name","_this","label","getTranslatedPhrase","CONTEXTMENU_ITEMS_READ_ONLY","atLeastOneReadOnly","getSelectedRange","row","col","getCellMeta","readOnly","callback","_this2","ranges","range","forAll","setCellMeta","render","disabled","selection","isSelectedByCorner","countRows","countCols","length"],"mappings":"AAAA,SAASA,yBAAT,EAAoCC,mBAApC,QAA+D,cAA/D;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,OAAO,KAAKC,CAAZ,MAAmB,6BAAnB;AACA,OAAO,IAAIC,GAAG,GAAG,gBAAV;AACP;AACA;AACA;;AAEA,eAAe,SAASC,YAAT,GAAwB;AACrC,SAAO;AACLC,IAAAA,GAAG,EAAEF,GADA;AAELG,IAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,UAAIC,KAAK,GAAG,IAAZ;;AAEA,UAAIC,KAAK,GAAG,KAAKC,mBAAL,CAAyBP,CAAC,CAACQ,2BAA3B,CAAZ;AACA,UAAIC,kBAAkB,GAAGZ,yBAAyB,CAAC,KAAKa,gBAAL,EAAD,EAA0B,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC9F,eAAOP,KAAK,CAACQ,WAAN,CAAkBF,GAAlB,EAAuBC,GAAvB,EAA4BE,QAAnC;AACD,OAFiD,CAAlD;;AAIA,UAAIL,kBAAJ,EAAwB;AACtBH,QAAAA,KAAK,GAAGR,mBAAmB,CAACQ,KAAD,CAA3B;AACD;;AAED,aAAOA,KAAP;AACD,KAfI;AAgBLS,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,UAAIC,MAAM,GAAG,IAAb;;AAEA,UAAIC,MAAM,GAAG,KAAKP,gBAAL,EAAb;AACA,UAAID,kBAAkB,GAAGZ,yBAAyB,CAACoB,MAAD,EAAS,UAAUN,GAAV,EAAeC,GAAf,EAAoB;AAC7E,eAAOI,MAAM,CAACH,WAAP,CAAmBF,GAAnB,EAAwBC,GAAxB,EAA6BE,QAApC;AACD,OAFiD,CAAlD;AAGAf,MAAAA,SAAS,CAACkB,MAAD,EAAS,UAAUC,KAAV,EAAiB;AACjCA,QAAAA,KAAK,CAACC,MAAN,CAAa,UAAUR,GAAV,EAAeC,GAAf,EAAoB;AAC/B,cAAID,GAAG,IAAI,CAAP,IAAYC,GAAG,IAAI,CAAvB,EAA0B;AACxBI,YAAAA,MAAM,CAACI,WAAP,CAAmBT,GAAnB,EAAwBC,GAAxB,EAA6B,UAA7B,EAAyC,CAACH,kBAA1C;AACD;AACF,SAJD;AAKD,OANQ,CAAT;AAOA,WAAKY,MAAL;AACD,KA/BI;AAgCLC,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,UAAI,KAAKC,SAAL,CAAeC,kBAAf,EAAJ,EAAyC;AACvC,eAAO,IAAP;AACD;;AAED,UAAI,KAAKC,SAAL,OAAqB,CAArB,IAA0B,KAAKC,SAAL,OAAqB,CAAnD,EAAsD;AACpD,eAAO,IAAP;AACD;;AAED,UAAI,CAAC,KAAKhB,gBAAL,EAAD,IAA4B,KAAKA,gBAAL,GAAwBiB,MAAxB,KAAmC,CAAnE,EAAsE;AACpE,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD;AA9CI,GAAP;AAgDD","sourcesContent":["import { checkSelectionConsistency, markLabelAsSelected } from \"../utils.mjs\";\r\nimport { arrayEach } from \"../../../helpers/array.mjs\";\r\nimport * as C from \"../../../i18n/constants.mjs\";\r\nexport var KEY = 'make_read_only';\r\n/**\r\n * @returns {object}\r\n */\r\n\r\nexport default function readOnlyItem() {\r\n  return {\r\n    key: KEY,\r\n    name: function name() {\r\n      var _this = this;\r\n\r\n      var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_READ_ONLY);\r\n      var atLeastOneReadOnly = checkSelectionConsistency(this.getSelectedRange(), function (row, col) {\r\n        return _this.getCellMeta(row, col).readOnly;\r\n      });\r\n\r\n      if (atLeastOneReadOnly) {\r\n        label = markLabelAsSelected(label);\r\n      }\r\n\r\n      return label;\r\n    },\r\n    callback: function callback() {\r\n      var _this2 = this;\r\n\r\n      var ranges = this.getSelectedRange();\r\n      var atLeastOneReadOnly = checkSelectionConsistency(ranges, function (row, col) {\r\n        return _this2.getCellMeta(row, col).readOnly;\r\n      });\r\n      arrayEach(ranges, function (range) {\r\n        range.forAll(function (row, col) {\r\n          if (row >= 0 && col >= 0) {\r\n            _this2.setCellMeta(row, col, 'readOnly', !atLeastOneReadOnly);\r\n          }\r\n        });\r\n      });\r\n      this.render();\r\n    },\r\n    disabled: function disabled() {\r\n      if (this.selection.isSelectedByCorner()) {\r\n        return true;\r\n      }\r\n\r\n      if (this.countRows() === 0 || this.countCols() === 0) {\r\n        return true;\r\n      }\r\n\r\n      if (!this.getSelectedRange() || this.getSelectedRange().length === 0) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}