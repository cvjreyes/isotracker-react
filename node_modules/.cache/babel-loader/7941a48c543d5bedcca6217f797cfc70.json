{"ast":null,"code":"import { arrayEach } from \"./../helpers/array.mjs\";\nimport { defineGetter } from \"./../helpers/object.mjs\";\nvar MIXIN_NAME = 'localHooks';\n/**\r\n * Mixin object to extend objects functionality for local hooks.\r\n *\r\n * @type {object}\r\n */\n\nvar localHooks = {\n  /**\r\n   * Internal hooks storage.\r\n   */\n  _localHooks: Object.create(null),\n\n  /**\r\n   * Add hook to the collection.\r\n   *\r\n   * @param {string} key The hook name.\r\n   * @param {Function} callback The hook callback.\r\n   * @returns {object}\r\n   */\n  addLocalHook: function addLocalHook(key, callback) {\n    if (!this._localHooks[key]) {\n      this._localHooks[key] = [];\n    }\n\n    this._localHooks[key].push(callback);\n\n    return this;\n  },\n\n  /**\r\n   * Run hooks.\r\n   *\r\n   * @param {string} key The hook name.\r\n   * @param {*} params Additional parameters passed to callback function.\r\n   */\n  runLocalHooks: function runLocalHooks(key) {\n    var _this = this;\n\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n\n    if (this._localHooks[key]) {\n      arrayEach(this._localHooks[key], function (callback) {\n        return callback.apply(_this, params);\n      });\n    }\n  },\n\n  /**\r\n   * Clear all added hooks.\r\n   *\r\n   * @returns {object}\r\n   */\n  clearLocalHooks: function clearLocalHooks() {\n    this._localHooks = {};\n    return this;\n  }\n};\ndefineGetter(localHooks, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default localHooks;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/mixins/localHooks.mjs"],"names":["arrayEach","defineGetter","MIXIN_NAME","localHooks","_localHooks","Object","create","addLocalHook","key","callback","push","runLocalHooks","_this","_len","arguments","length","params","Array","_key","apply","clearLocalHooks","writable","enumerable"],"mappings":"AAAA,SAASA,SAAT,QAA0B,wBAA1B;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,IAAIC,UAAU,GAAG,YAAjB;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,UAAU,GAAG;AACf;AACF;AACA;AACEC,EAAAA,WAAW,EAAEC,MAAM,CAACC,MAAP,CAAc,IAAd,CAJE;;AAMf;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBC,GAAtB,EAA2BC,QAA3B,EAAqC;AACjD,QAAI,CAAC,KAAKL,WAAL,CAAiBI,GAAjB,CAAL,EAA4B;AAC1B,WAAKJ,WAAL,CAAiBI,GAAjB,IAAwB,EAAxB;AACD;;AAED,SAAKJ,WAAL,CAAiBI,GAAjB,EAAsBE,IAAtB,CAA2BD,QAA3B;;AAEA,WAAO,IAAP;AACD,GArBc;;AAuBf;AACF;AACA;AACA;AACA;AACA;AACEE,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBH,GAAvB,EAA4B;AACzC,QAAII,KAAK,GAAG,IAAZ;;AAEA,SAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,MAAM,GAAG,IAAIC,KAAJ,CAAUJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAAtC,EAA0EK,IAAI,GAAG,CAAtF,EAAyFA,IAAI,GAAGL,IAAhG,EAAsGK,IAAI,EAA1G,EAA8G;AAC5GF,MAAAA,MAAM,CAACE,IAAI,GAAG,CAAR,CAAN,GAAmBJ,SAAS,CAACI,IAAD,CAA5B;AACD;;AAED,QAAI,KAAKd,WAAL,CAAiBI,GAAjB,CAAJ,EAA2B;AACzBR,MAAAA,SAAS,CAAC,KAAKI,WAAL,CAAiBI,GAAjB,CAAD,EAAwB,UAAUC,QAAV,EAAoB;AACnD,eAAOA,QAAQ,CAACU,KAAT,CAAeP,KAAf,EAAsBI,MAAtB,CAAP;AACD,OAFQ,CAAT;AAGD;AACF,GAzCc;;AA2Cf;AACF;AACA;AACA;AACA;AACEI,EAAAA,eAAe,EAAE,SAASA,eAAT,GAA2B;AAC1C,SAAKhB,WAAL,GAAmB,EAAnB;AACA,WAAO,IAAP;AACD;AAnDc,CAAjB;AAqDAH,YAAY,CAACE,UAAD,EAAa,YAAb,EAA2BD,UAA3B,EAAuC;AACjDmB,EAAAA,QAAQ,EAAE,KADuC;AAEjDC,EAAAA,UAAU,EAAE;AAFqC,CAAvC,CAAZ;AAIA,eAAenB,UAAf","sourcesContent":["import { arrayEach } from \"./../helpers/array.mjs\";\r\nimport { defineGetter } from \"./../helpers/object.mjs\";\r\nvar MIXIN_NAME = 'localHooks';\r\n/**\r\n * Mixin object to extend objects functionality for local hooks.\r\n *\r\n * @type {object}\r\n */\r\n\r\nvar localHooks = {\r\n  /**\r\n   * Internal hooks storage.\r\n   */\r\n  _localHooks: Object.create(null),\r\n\r\n  /**\r\n   * Add hook to the collection.\r\n   *\r\n   * @param {string} key The hook name.\r\n   * @param {Function} callback The hook callback.\r\n   * @returns {object}\r\n   */\r\n  addLocalHook: function addLocalHook(key, callback) {\r\n    if (!this._localHooks[key]) {\r\n      this._localHooks[key] = [];\r\n    }\r\n\r\n    this._localHooks[key].push(callback);\r\n\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Run hooks.\r\n   *\r\n   * @param {string} key The hook name.\r\n   * @param {*} params Additional parameters passed to callback function.\r\n   */\r\n  runLocalHooks: function runLocalHooks(key) {\r\n    var _this = this;\r\n\r\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n      params[_key - 1] = arguments[_key];\r\n    }\r\n\r\n    if (this._localHooks[key]) {\r\n      arrayEach(this._localHooks[key], function (callback) {\r\n        return callback.apply(_this, params);\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Clear all added hooks.\r\n   *\r\n   * @returns {object}\r\n   */\r\n  clearLocalHooks: function clearLocalHooks() {\r\n    this._localHooks = {};\r\n    return this;\r\n  }\r\n};\r\ndefineGetter(localHooks, 'MIXIN_NAME', MIXIN_NAME, {\r\n  writable: false,\r\n  enumerable: false\r\n});\r\nexport default localHooks;"]},"metadata":{},"sourceType":"module"}