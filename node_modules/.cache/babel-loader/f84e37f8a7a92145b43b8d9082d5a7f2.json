{"ast":null,"code":"/**\r\n * Adds appropriate CSS class to table cell, based on cellProperties.\r\n */\nimport { addClass, removeClass } from \"../../helpers/dom/element.mjs\";\nexport var RENDERER_TYPE = 'base';\n/**\r\n * @param {Core} instance The Handsontable instance.\r\n * @param {HTMLTableCellElement} TD The rendered cell element.\r\n * @param {number} row The visual row index.\r\n * @param {number} col The visual column index.\r\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\r\n * @param {*} value The rendered value.\r\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\r\n */\n\nexport function baseRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var classesToAdd = [];\n  var classesToRemove = [];\n\n  if (cellProperties.className) {\n    addClass(TD, cellProperties.className);\n  }\n\n  if (cellProperties.readOnly) {\n    classesToAdd.push(cellProperties.readOnlyCellClassName);\n  }\n\n  if (cellProperties.valid === false && cellProperties.invalidCellClassName) {\n    classesToAdd.push(cellProperties.invalidCellClassName);\n  } else {\n    classesToRemove.push(cellProperties.invalidCellClassName);\n  }\n\n  if (cellProperties.wordWrap === false && cellProperties.noWordWrapClassName) {\n    classesToAdd.push(cellProperties.noWordWrapClassName);\n  }\n\n  if (!value && cellProperties.placeholder) {\n    classesToAdd.push(cellProperties.placeholderCellClassName);\n  }\n\n  removeClass(TD, classesToRemove);\n  addClass(TD, classesToAdd);\n}\nbaseRenderer.RENDERER_TYPE = RENDERER_TYPE;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/renderers/baseRenderer/baseRenderer.mjs"],"names":["addClass","removeClass","RENDERER_TYPE","baseRenderer","instance","TD","row","col","prop","value","cellProperties","classesToAdd","classesToRemove","className","readOnly","push","readOnlyCellClassName","valid","invalidCellClassName","wordWrap","noWordWrapClassName","placeholder","placeholderCellClassName"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,+BAAtC;AACA,OAAO,IAAIC,aAAa,GAAG,MAApB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,EAAhC,EAAoCC,GAApC,EAAyCC,GAAzC,EAA8CC,IAA9C,EAAoDC,KAApD,EAA2DC,cAA3D,EAA2E;AAChF,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,eAAe,GAAG,EAAtB;;AAEA,MAAIF,cAAc,CAACG,SAAnB,EAA8B;AAC5Bb,IAAAA,QAAQ,CAACK,EAAD,EAAKK,cAAc,CAACG,SAApB,CAAR;AACD;;AAED,MAAIH,cAAc,CAACI,QAAnB,EAA6B;AAC3BH,IAAAA,YAAY,CAACI,IAAb,CAAkBL,cAAc,CAACM,qBAAjC;AACD;;AAED,MAAIN,cAAc,CAACO,KAAf,KAAyB,KAAzB,IAAkCP,cAAc,CAACQ,oBAArD,EAA2E;AACzEP,IAAAA,YAAY,CAACI,IAAb,CAAkBL,cAAc,CAACQ,oBAAjC;AACD,GAFD,MAEO;AACLN,IAAAA,eAAe,CAACG,IAAhB,CAAqBL,cAAc,CAACQ,oBAApC;AACD;;AAED,MAAIR,cAAc,CAACS,QAAf,KAA4B,KAA5B,IAAqCT,cAAc,CAACU,mBAAxD,EAA6E;AAC3ET,IAAAA,YAAY,CAACI,IAAb,CAAkBL,cAAc,CAACU,mBAAjC;AACD;;AAED,MAAI,CAACX,KAAD,IAAUC,cAAc,CAACW,WAA7B,EAA0C;AACxCV,IAAAA,YAAY,CAACI,IAAb,CAAkBL,cAAc,CAACY,wBAAjC;AACD;;AAEDrB,EAAAA,WAAW,CAACI,EAAD,EAAKO,eAAL,CAAX;AACAZ,EAAAA,QAAQ,CAACK,EAAD,EAAKM,YAAL,CAAR;AACD;AACDR,YAAY,CAACD,aAAb,GAA6BA,aAA7B","sourcesContent":["/**\r\n * Adds appropriate CSS class to table cell, based on cellProperties.\r\n */\r\nimport { addClass, removeClass } from \"../../helpers/dom/element.mjs\";\r\nexport var RENDERER_TYPE = 'base';\r\n/**\r\n * @param {Core} instance The Handsontable instance.\r\n * @param {HTMLTableCellElement} TD The rendered cell element.\r\n * @param {number} row The visual row index.\r\n * @param {number} col The visual column index.\r\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\r\n * @param {*} value The rendered value.\r\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\r\n */\r\n\r\nexport function baseRenderer(instance, TD, row, col, prop, value, cellProperties) {\r\n  var classesToAdd = [];\r\n  var classesToRemove = [];\r\n\r\n  if (cellProperties.className) {\r\n    addClass(TD, cellProperties.className);\r\n  }\r\n\r\n  if (cellProperties.readOnly) {\r\n    classesToAdd.push(cellProperties.readOnlyCellClassName);\r\n  }\r\n\r\n  if (cellProperties.valid === false && cellProperties.invalidCellClassName) {\r\n    classesToAdd.push(cellProperties.invalidCellClassName);\r\n  } else {\r\n    classesToRemove.push(cellProperties.invalidCellClassName);\r\n  }\r\n\r\n  if (cellProperties.wordWrap === false && cellProperties.noWordWrapClassName) {\r\n    classesToAdd.push(cellProperties.noWordWrapClassName);\r\n  }\r\n\r\n  if (!value && cellProperties.placeholder) {\r\n    classesToAdd.push(cellProperties.placeholderCellClassName);\r\n  }\r\n\r\n  removeClass(TD, classesToRemove);\r\n  addClass(TD, classesToAdd);\r\n}\r\nbaseRenderer.RENDERER_TYPE = RENDERER_TYPE;"]},"metadata":{},"sourceType":"module"}