{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\navisTable\\\\navisTable.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Table, Input, Button, Space } from 'antd';\nimport { SearchOutlined } from '@ant-design/icons';\nimport * as FileSaver from \"file-saver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NavisTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchText: '',\n      searchedColumn: '',\n      data: [],\n      selectedRows: [],\n      selectedRowsKeys: [],\n      updateData: this.props.updateData\n    };\n\n    this.getColumnSearchProps = dataIndex => ({\n      filterDropdown: ({\n        setSelectedKeys,\n        selectedKeys,\n        confirm,\n        clearFilters\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 8\n        },\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          ref: node => {\n            this.searchInput = node;\n          },\n          placeholder: `Search ${dataIndex}`,\n          value: selectedKeys[0],\n          onChange: e => setSelectedKeys(e.target.value ? [e.target.value] : []),\n          onPressEnter: () => this.handleSearch(selectedKeys, confirm, dataIndex),\n          style: {\n            width: 188,\n            marginBottom: 8,\n            display: 'block'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Space, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            onClick: () => this.handleSearch(selectedKeys, confirm, dataIndex),\n            icon: /*#__PURE__*/_jsxDEV(SearchOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 19\n            }, this),\n            size: \"small\",\n            style: {\n              width: 90\n            },\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => this.handleReset(clearFilters),\n            size: \"small\",\n            style: {\n              width: 90\n            },\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"link\",\n            size: \"small\",\n            onClick: () => {\n              confirm({\n                closeDropdown: false\n              });\n              this.setState({\n                searchText: selectedKeys[0],\n                searchedColumn: dataIndex\n              });\n            },\n            children: \"Filter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this),\n      filterIcon: filtered => /*#__PURE__*/_jsxDEV(SearchOutlined, {\n        style: {\n          color: filtered ? '#1890ff' : undefined\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }, this),\n      onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n      onFilterDropdownVisibleChange: visible => {\n        if (visible) {\n          setTimeout(() => this.searchInput.select(), 100);\n        }\n      },\n      render: text => text\n    });\n\n    this.handleSearch = (selectedKeys, confirm, dataIndex) => {\n      confirm();\n      this.setState({\n        searchText: selectedKeys[0],\n        searchedColumn: dataIndex\n      });\n    };\n\n    this.handleReset = clearFilters => {\n      clearFilters();\n      this.setState({\n        searchText: ''\n      });\n    };\n\n    this.onSelectChange = (selectedRowKeys, selectedRows) => {\n      this.setState({\n        selectedRowsKeys: selectedRowKeys,\n        selectedRows: selectedRows\n      }); //this.setState({ selectedRows: selectedRows });\n      //this.props.onChange(ids);\n    };\n  }\n\n  async componentDidMount() {\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/navis\", options).then(response => response.json()).then(json => {\n      let rows = [];\n\n      for (let i = 0; i < json.rows.length; i++) {\n        if (i % 2 === 0) {\n          rows.push({\n            key: i,\n            object: json.rows[i].object,\n            attribute: json.rows[i].value,\n            color: \"#fff\"\n          });\n        } else {\n          rows.push({\n            key: i,\n            object: json.rows[i].object,\n            attribute: json.rows[i].value,\n            color: \"#eee\"\n          });\n        }\n      }\n\n      this.setState({\n        data: rows\n      });\n    });\n  }\n\n  generateXML() {\n    let xml = \"<?xml version='1.0' encoding='UTF-8' ?>\\n    <exchange xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:noNamespaceSchemaLocation='http://download.autodesk.com/us/navisworks/schemas/nw-exchange-12.0.xsd'>\\n      <optionset name=''>\\n           <optionset name='interface'>\\n              <optionset name='smart_tags'>\\n                     <option name='enabled'>\\n                           <data type='bool'>true</data>\\n                     </option>\\n                     <option name='hide_category' flags='32'>\\n                           <data type='bool'>false</data>\\n                     </option>\\n                     <optionarray name='definitions'>\\n\";\n\n    for (let i = 0; i < this.state.selectedRows.length; i++) {\n      let option = this.state.selectedRows[i].attribute.toLowerCase();\n      xml += \"                                 <optionset name=''>\\n                                       <option name='category'>\\n                                          <data type='name'>\\n                                              <name internal='lcldrvm_props'>PDMS</name>\\n                                          </data>\\n                                       </option>\\n                                       <option name='property'>\\n                                          <data type='name'>\\n                                              <name internal='lcldrvm_prop \" + option + \"'>\" + option.toUpperCase() + \"</name>\\n                                          </data>\\n                                       </option>\\n                                </optionset>\\n\";\n    }\n\n    xml += \"                  </optionarray>\\n               </optionset>\\n         </optionset>\\n      </optionset>\\n  </exchange>\";\n    const data = new Blob([xml], {\n      type: 'txt'\n    });\n    FileSaver.saveAs(data, \"navis.xml\");\n  }\n\n  render() {\n    const rowSelection = {\n      onChange: (selectedRowKeys, selectedRows) => {\n        this.onSelectChange(selectedRowKeys, selectedRows);\n      },\n      getCheckboxProps: record => ({\n        // Column configuration not to be checked\n        name: record.name\n      })\n    };\n    const columns = [{\n      title: /*#__PURE__*/_jsxDEV(\"center\", {\n        className: \"dataTable__header__text\",\n        children: \"Object 3D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'object',\n      key: 'object',\n      width: '15%',\n      ...this.getColumnSearchProps('object'),\n      sorter: {\n        compare: (a, b) => a.object.localeCompare(b.object)\n      },\n      align: \"center\"\n    }, {\n      title: /*#__PURE__*/_jsxDEV(\"center\", {\n        className: \"dataTable__header__text\",\n        children: \"Attribute\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'attribute',\n      key: 'attribute',\n      ...this.getColumnSearchProps('attribute'),\n      sorter: {\n        compare: (a, b) => a.attribute.localeCompare(b.attribute)\n      }\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-warning\",\n        style: {\n          width: \"78%\",\n          fontSize: \"24px\",\n          top: \"0\",\n          left: \"11%\",\n          zIndex: \"999\",\n          backgroundColor: \"#CBB956\",\n          position: \"fixed\",\n          color: \"white\",\n          paddingTop: \"13px\",\n          paddingBottom: \"13px\"\n        },\n        onClick: () => this.generateXML(),\n        children: \"Generate XML\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"estimatedDataTable__container\",\n        style: {\n          marginTop: \"5px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          className: \"customTable\",\n          bordered: true,\n          columns: columns,\n          rowSelection: {\n            type: 'checkbox',\n            ...rowSelection\n          },\n          dataSource: this.state.data,\n          pagination: {\n            pageSize: this.state.data.length\n          },\n          size: \"small\",\n          rowClassName: record => record.color.replace('#', '')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default NavisTable;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/navisTable/navisTable.js"],"names":["React","Table","Input","Button","Space","SearchOutlined","FileSaver","NavisTable","Component","state","searchText","searchedColumn","data","selectedRows","selectedRowsKeys","updateData","props","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","node","searchInput","e","target","value","handleSearch","width","marginBottom","display","handleReset","closeDropdown","setState","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","onSelectChange","selectedRowKeys","componentDidMount","options","method","headers","fetch","process","env","REACT_APP_SERVER","REACT_APP_NODE_PORT","then","response","json","rows","i","length","push","key","object","attribute","generateXML","xml","option","toUpperCase","Blob","type","saveAs","rowSelection","onChange","getCheckboxProps","name","columns","title","sorter","compare","a","b","localeCompare","align","fontSize","top","left","zIndex","backgroundColor","position","paddingTop","paddingBottom","marginTop","pageSize","replace"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Table, Input, Button, Space } from 'antd';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport * as FileSaver from \"file-saver\";\r\n\r\n\r\nclass NavisTable extends React.Component{\r\n  state = {\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    data: [],\r\n    selectedRows: [],\r\n    selectedRowsKeys: [],\r\n    updateData: this.props.updateData,\r\n  };\r\n\r\n  async componentDidMount(){\r\n\r\n    const options = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n    }\r\n\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/navis\", options)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n        let rows = []\r\n        for(let i = 0; i < json.rows.length; i++){\r\n            if(i % 2 === 0){\r\n                rows.push({key:i, object: json.rows[i].object, attribute: json.rows[i].value, color:\"#fff\"})\r\n              }else{\r\n                rows.push({key:i, object: json.rows[i].object, attribute: json.rows[i].value, color:\"#eee\"})              }\r\n            \r\n        }\r\n        this.setState({data : rows});\r\n    })\r\n\r\n    \r\n  }\r\n\r\n  \r\n  getColumnSearchProps = dataIndex => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={node => {\r\n            this.searchInput = node;\r\n          }}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n            Reset\r\n          </Button>\r\n          <Button\r\n            type=\"link\"\r\n            size=\"small\"\r\n            onClick={() => {\r\n              confirm({ closeDropdown: false });\r\n              this.setState({\r\n                searchText: selectedKeys[0],\r\n                searchedColumn: dataIndex,\r\n              });\r\n            }}\r\n          >\r\n            Filter\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value, record) =>\r\n\r\n\r\n      \r\n        record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\r\n          \r\n\r\n\r\n    onFilterDropdownVisibleChange: visible => {\r\n      if (visible) {\r\n        setTimeout(() => this.searchInput.select(), 100);\r\n      }\r\n    },\r\n    render: text => \r\n      \r\n      text\r\n    \r\n      \r\n  });\r\n\r\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    this.setState({\r\n      searchText: selectedKeys[0],\r\n      searchedColumn: dataIndex,\r\n    });\r\n  };\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys, selectedRows) => {\r\n\r\n    this.setState({\r\n      selectedRowsKeys: selectedRowKeys,\r\n      selectedRows: selectedRows\r\n    })\r\n    //this.setState({ selectedRows: selectedRows });\r\n    //this.props.onChange(ids);\r\n    \r\n  };\r\n\r\n  generateXML(){\r\n    let xml = \"<?xml version='1.0' encoding='UTF-8' ?>\\n    <exchange xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:noNamespaceSchemaLocation='http://download.autodesk.com/us/navisworks/schemas/nw-exchange-12.0.xsd'>\\n      <optionset name=''>\\n           <optionset name='interface'>\\n              <optionset name='smart_tags'>\\n                     <option name='enabled'>\\n                           <data type='bool'>true</data>\\n                     </option>\\n                     <option name='hide_category' flags='32'>\\n                           <data type='bool'>false</data>\\n                     </option>\\n                     <optionarray name='definitions'>\\n\"\r\n    \r\n    for(let i = 0; i < this.state.selectedRows.length; i++){\r\n        let option = this.state.selectedRows[i].attribute.toLowerCase()\r\n        xml+= \"                                 <optionset name=''>\\n                                       <option name='category'>\\n                                          <data type='name'>\\n                                              <name internal='lcldrvm_props'>PDMS</name>\\n                                          </data>\\n                                       </option>\\n                                       <option name='property'>\\n                                          <data type='name'>\\n                                              <name internal='lcldrvm_prop \"+option+\"'>\"+option.toUpperCase()+\"</name>\\n                                          </data>\\n                                       </option>\\n                                </optionset>\\n\"\r\n    }\r\n    xml+=\"                  </optionarray>\\n               </optionset>\\n         </optionset>\\n      </optionset>\\n  </exchange>\"\r\n    const data = new Blob([xml], { type: 'txt' });\r\n    FileSaver.saveAs(data, \"navis.xml\");\r\n}\r\n  \r\n\r\n  render() {\r\n    \r\n    const rowSelection = {\r\n      onChange: (selectedRowKeys, selectedRows) => {\r\n        this.onSelectChange(selectedRowKeys, selectedRows);\r\n      },\r\n      getCheckboxProps: (record) => (      \r\n        {\r\n        \r\n        // Column configuration not to be checked\r\n        name: record.name,\r\n      }),\r\n    };\r\n\r\n\r\n    const columns = [\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Object 3D</center>,\r\n        dataIndex: 'object',\r\n        key: 'object',\r\n        width: '15%',\r\n        ...this.getColumnSearchProps('object'),\r\n        sorter:{\r\n          compare: (a, b) => a.object.localeCompare(b.object),\r\n        },\r\n        align: \"center\"\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Attribute</center>,\r\n        dataIndex: 'attribute',\r\n        key: 'attribute',\r\n        ...this.getColumnSearchProps('attribute'),\r\n        sorter:{\r\n          compare: (a, b) => a.attribute.localeCompare(b.attribute),\r\n        },\r\n      },\r\n      \r\n    ];\r\n    \r\n\r\n    return (\r\n      <div>\r\n\r\n          <button className=\"btn btn-warning\" style={{width:\"78%\", fontSize:\"24px\", top:\"0\",left:\"11%\",zIndex:\"999\", backgroundColor:\"#CBB956\", position:\"fixed\", color:\"white\", paddingTop:\"13px\", paddingBottom:\"13px\"}} onClick={()=> this.generateXML()}>Generate XML</button>\r\n\r\n        <div className=\"estimatedDataTable__container\" style={{marginTop:\"5px\"}}>\r\n        <Table className=\"customTable\" bordered = {true} columns={columns} rowSelection={{type: 'checkbox', ...rowSelection}} dataSource={this.state.data} pagination={{ pageSize: this.state.data.length  }} size=\"small\"\r\n         rowClassName= {(record) => record.color.replace('#', '')}/>\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavisTable;"]},"metadata":{},"sourceType":"module"}