{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { rangeEach } from \"../../../helpers/number.mjs\";\nimport { objectEach } from \"../../../helpers/object.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\n/**\n * Class responsible for making data operations.\n *\n * @class\n * @private\n */\n\nvar DataManager = /*#__PURE__*/function () {\n  function DataManager(nestedRowsPlugin, hotInstance) {\n    _classCallCheck(this, DataManager);\n    /**\n     * Main Handsontable instance reference.\n     *\n     * @type {object}\n     */\n\n\n    this.hot = hotInstance;\n    /**\n     * Reference to the source data object.\n     *\n     * @type {Handsontable.CellValue[][]|Handsontable.RowObject[]}\n     */\n\n    this.data = null;\n    /**\n     * Reference to the NestedRows plugin.\n     *\n     * @type {object}\n     */\n\n    this.plugin = nestedRowsPlugin;\n    /**\n     * Map of row object parents.\n     *\n     * @type {WeakMap}\n     */\n\n    this.parentReference = new WeakMap();\n    /**\n     * Nested structure cache.\n     *\n     * @type {object}\n     */\n\n    this.cache = {\n      levels: [],\n      levelCount: 0,\n      rows: [],\n      nodeInfo: new WeakMap()\n    };\n  }\n  /**\n   * Set the data for the manager.\n   *\n   * @param {Handsontable.CellValue[][]|Handsontable.RowObject[]} data Data for the manager.\n   */\n\n\n  _createClass(DataManager, [{\n    key: \"setData\",\n    value: function setData(data) {\n      this.data = data;\n    }\n    /**\n     * Get the data cached in the manager.\n     *\n     * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}\n     */\n\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.data;\n    }\n    /**\n     * Load the \"raw\" source data, without NestedRows' modifications.\n     *\n     * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}\n     */\n\n  }, {\n    key: \"getRawSourceData\",\n    value: function getRawSourceData() {\n      var rawSourceData = null;\n      this.plugin.disableCoreAPIModifiers();\n      rawSourceData = this.hot.getSourceData();\n      this.plugin.enableCoreAPIModifiers();\n      return rawSourceData;\n    }\n    /**\n     * Update the Data Manager with new data and refresh cache.\n     *\n     * @param {Handsontable.CellValue[][]|Handsontable.RowObject[]} data Data for the manager.\n     */\n\n  }, {\n    key: \"updateWithData\",\n    value: function updateWithData(data) {\n      this.setData(data);\n      this.rewriteCache();\n    }\n    /**\n     * Rewrite the nested structure cache.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"rewriteCache\",\n    value: function rewriteCache() {\n      var _this = this;\n\n      this.cache = {\n        levels: [],\n        levelCount: 0,\n        rows: [],\n        nodeInfo: new WeakMap()\n      };\n      rangeEach(0, this.data.length - 1, function (i) {\n        _this.cacheNode(_this.data[i], 0, null);\n      });\n    }\n    /**\n     * Cache a data node.\n     *\n     * @private\n     * @param {object} node Node to cache.\n     * @param {number} level Level of the node.\n     * @param {object} parent Parent of the node.\n     */\n\n  }, {\n    key: \"cacheNode\",\n    value: function cacheNode(node, level, parent) {\n      var _this2 = this;\n\n      if (!this.cache.levels[level]) {\n        this.cache.levels[level] = [];\n        this.cache.levelCount += 1;\n      }\n\n      this.cache.levels[level].push(node);\n      this.cache.rows.push(node);\n      this.cache.nodeInfo.set(node, {\n        parent: parent,\n        row: this.cache.rows.length - 1,\n        level: level\n      });\n\n      if (this.hasChildren(node)) {\n        arrayEach(node.__children, function (elem) {\n          _this2.cacheNode(elem, level + 1, node);\n        });\n      }\n    }\n    /**\n     * Get the date for the provided visual row number.\n     *\n     * @param {number} row Row index.\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getDataObject\",\n    value: function getDataObject(row) {\n      return row === null || row === void 0 ? null : this.cache.rows[row];\n    }\n    /**\n     * Read the row tree in search for a specific row index or row object.\n     *\n     * @private\n     * @param {object} parent The initial parent object.\n     * @param {number} readCount Number of read nodes.\n     * @param {number} neededIndex The row index we search for.\n     * @param {object} neededObject The row object we search for.\n     * @returns {number|object}\n     */\n\n  }, {\n    key: \"readTreeNodes\",\n    value: function readTreeNodes(parent, readCount, neededIndex, neededObject) {\n      var _this3 = this;\n\n      var rootLevel = false;\n      var readNodesCount = readCount;\n\n      if (isNaN(readNodesCount) && readNodesCount.end) {\n        return readNodesCount;\n      }\n\n      var parentObj = parent;\n\n      if (!parentObj) {\n        parentObj = {\n          __children: this.data\n        };\n        rootLevel = true;\n        readNodesCount -= 1;\n      }\n\n      if (neededIndex !== null && neededIndex !== void 0 && readNodesCount === neededIndex) {\n        return {\n          result: parentObj,\n          end: true\n        };\n      }\n\n      if (neededObject !== null && neededObject !== void 0 && parentObj === neededObject) {\n        return {\n          result: readNodesCount,\n          end: true\n        };\n      }\n\n      readNodesCount += 1;\n\n      if (parentObj.__children) {\n        arrayEach(parentObj.__children, function (val) {\n          _this3.parentReference.set(val, rootLevel ? null : parentObj);\n\n          readNodesCount = _this3.readTreeNodes(val, readNodesCount, neededIndex, neededObject);\n\n          if (isNaN(readNodesCount) && readNodesCount.end) {\n            return false;\n          }\n        });\n      }\n\n      return readNodesCount;\n    }\n    /**\n     * Mock a parent node.\n     *\n     * @private\n     * @returns {*}\n     */\n\n  }, {\n    key: \"mockParent\",\n    value: function mockParent() {\n      var fakeParent = this.mockNode();\n      fakeParent.__children = this.data;\n      return fakeParent;\n    }\n    /**\n     * Mock a data node.\n     *\n     * @private\n     * @returns {{}}\n     */\n\n  }, {\n    key: \"mockNode\",\n    value: function mockNode() {\n      var fakeNode = {};\n      objectEach(this.data[0], function (val, key) {\n        fakeNode[key] = null;\n      });\n      return fakeNode;\n    }\n    /**\n     * Get the row index for the provided row object.\n     *\n     * @param {object} rowObj The row object.\n     * @returns {number} Row index.\n     */\n\n  }, {\n    key: \"getRowIndex\",\n    value: function getRowIndex(rowObj) {\n      return rowObj === null || rowObj === void 0 ? null : this.cache.nodeInfo.get(rowObj).row;\n    }\n    /**\n     * Get the index of the provided row index/row object within its parent.\n     *\n     * @param {number|object} row Row index / row object.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getRowIndexWithinParent\",\n    value: function getRowIndexWithinParent(row) {\n      var rowObj = null;\n\n      if (isNaN(row)) {\n        rowObj = row;\n      } else {\n        rowObj = this.getDataObject(row);\n      }\n\n      var parent = this.getRowParent(row);\n\n      if (parent === null || parent === void 0) {\n        return this.data.indexOf(rowObj);\n      }\n\n      return parent.__children.indexOf(rowObj);\n    }\n    /**\n     * Count all rows (including all parents and children).\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"countAllRows\",\n    value: function countAllRows() {\n      var rootNodeMock = {\n        __children: this.data\n      };\n      return this.countChildren(rootNodeMock);\n    }\n    /**\n     * Count children of the provided parent.\n     *\n     * @param {object|number} parent Parent node.\n     * @returns {number} Children count.\n     */\n\n  }, {\n    key: \"countChildren\",\n    value: function countChildren(parent) {\n      var _this4 = this;\n\n      var rowCount = 0;\n      var parentNode = parent;\n\n      if (!isNaN(parentNode)) {\n        parentNode = this.getDataObject(parentNode);\n      }\n\n      if (!parentNode || !parentNode.__children) {\n        return 0;\n      }\n\n      arrayEach(parentNode.__children, function (elem) {\n        rowCount += 1;\n\n        if (elem.__children) {\n          rowCount += _this4.countChildren(elem);\n        }\n      });\n      return rowCount;\n    }\n    /**\n     * Get the parent of the row at the provided index.\n     *\n     * @param {number|object} row Physical row index.\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getRowParent\",\n    value: function getRowParent(row) {\n      var rowObject;\n\n      if (isNaN(row)) {\n        rowObject = row;\n      } else {\n        rowObject = this.getDataObject(row);\n      }\n\n      return this.getRowObjectParent(rowObject);\n    }\n    /**\n     * Get the parent of the provided row object.\n     *\n     * @private\n     * @param {object} rowObject The row object (tree node).\n     * @returns {object|null}\n     */\n\n  }, {\n    key: \"getRowObjectParent\",\n    value: function getRowObjectParent(rowObject) {\n      if (!rowObject || _typeof(rowObject) !== 'object') {\n        return null;\n      }\n\n      return this.cache.nodeInfo.get(rowObject).parent;\n    }\n    /**\n     * Get the nesting level for the row with the provided row index.\n     *\n     * @param {number} row Row index.\n     * @returns {number|null} Row level or null, when row doesn't exist.\n     */\n\n  }, {\n    key: \"getRowLevel\",\n    value: function getRowLevel(row) {\n      var rowObject = null;\n\n      if (isNaN(row)) {\n        rowObject = row;\n      } else {\n        rowObject = this.getDataObject(row);\n      }\n\n      return rowObject ? this.getRowObjectLevel(rowObject) : null;\n    }\n    /**\n     * Get the nesting level for the row with the provided row index.\n     *\n     * @private\n     * @param {object} rowObject Row object.\n     * @returns {number} Row level.\n     */\n\n  }, {\n    key: \"getRowObjectLevel\",\n    value: function getRowObjectLevel(rowObject) {\n      return rowObject === null || rowObject === void 0 ? null : this.cache.nodeInfo.get(rowObject).level;\n    }\n    /**\n     * Check if the provided row/row element has children.\n     *\n     * @param {number|object} row Row number or row element.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"hasChildren\",\n    value: function hasChildren(row) {\n      var rowObj = row;\n\n      if (!isNaN(rowObj)) {\n        rowObj = this.getDataObject(rowObj);\n      }\n\n      return !!(rowObj.__children && rowObj.__children.length);\n    }\n    /**\n     * Returns `true` if the row at the provided index has a parent.\n     *\n     * @param {number} index Row index.\n     * @returns {boolean} `true` if the row at the provided index has a parent, `false` otherwise.\n     */\n\n  }, {\n    key: \"isChild\",\n    value: function isChild(index) {\n      return this.getRowParent(index) !== null;\n    }\n    /**\n     * Return `true` of the row at the provided index is located at the topmost level.\n     *\n     * @param {number} index Row index.\n     * @returns {boolean} `true` of the row at the provided index is located at the topmost level, `false` otherwise.\n     */\n\n  }, {\n    key: \"isRowHighestLevel\",\n    value: function isRowHighestLevel(index) {\n      return !this.isChild(index);\n    }\n    /**\n     * Return `true` if the provided row index / row object represents a parent in the nested structure.\n     *\n     * @param {number|object} row Row index / row object.\n     * @returns {boolean} `true` if the row is a parent, `false` otherwise.\n     */\n\n  }, {\n    key: \"isParent\",\n    value: function isParent(row) {\n      var _rowObj$__children;\n\n      var rowObj = row;\n\n      if (!isNaN(rowObj)) {\n        rowObj = this.getDataObject(rowObj);\n      }\n\n      return rowObj && !!rowObj.__children && ((_rowObj$__children = rowObj.__children) === null || _rowObj$__children === void 0 ? void 0 : _rowObj$__children.length) !== 0;\n    }\n    /**\n     * Add a child to the provided parent. It's optional to add a row object as the \"element\".\n     *\n     * @param {object} parent The parent row object.\n     * @param {object} [element] The element to add as a child.\n     */\n\n  }, {\n    key: \"addChild\",\n    value: function addChild(parent, element) {\n      var childElement = element;\n      this.hot.runHooks('beforeAddChild', parent, childElement);\n      var parentIndex = null;\n\n      if (parent) {\n        parentIndex = this.getRowIndex(parent);\n      }\n\n      this.hot.runHooks('beforeCreateRow', parentIndex + this.countChildren(parent) + 1, 1);\n      var functionalParent = parent;\n\n      if (!parent) {\n        functionalParent = this.mockParent();\n      }\n\n      if (!functionalParent.__children) {\n        functionalParent.__children = [];\n      }\n\n      if (!childElement) {\n        childElement = this.mockNode();\n      }\n\n      functionalParent.__children.push(childElement);\n\n      this.rewriteCache();\n      var newRowIndex = this.getRowIndex(childElement);\n      this.hot.rowIndexMapper.insertIndexes(newRowIndex, 1);\n      this.hot.runHooks('afterCreateRow', newRowIndex, 1);\n      this.hot.runHooks('afterAddChild', parent, childElement);\n    }\n    /**\n     * Add a child node to the provided parent at a specified index.\n     *\n     * @param {object} parent Parent node.\n     * @param {number} index Index to insert the child element at.\n     * @param {object} [element] Element (node) to insert.\n     */\n\n  }, {\n    key: \"addChildAtIndex\",\n    value: function addChildAtIndex(parent, index, element) {\n      var childElement = element;\n\n      if (!childElement) {\n        childElement = this.mockNode();\n      }\n\n      this.hot.runHooks('beforeAddChild', parent, childElement, index);\n\n      if (parent) {\n        this.hot.runHooks('beforeCreateRow', index, 1);\n\n        parent.__children.splice(index, null, childElement);\n\n        this.plugin.disableCoreAPIModifiers();\n        this.hot.setSourceDataAtCell(this.getRowIndexWithinParent(parent), '__children', parent.__children, 'NestedRows.addChildAtIndex');\n        this.plugin.enableCoreAPIModifiers();\n        this.hot.runHooks('afterCreateRow', index, 1);\n      } else {\n        this.plugin.disableCoreAPIModifiers();\n        this.hot.alter('insert_row', index, 1, 'NestedRows.addChildAtIndex');\n        this.plugin.enableCoreAPIModifiers();\n      }\n\n      this.updateWithData(this.getRawSourceData()); // Workaround for refreshing cache losing the reference to the mocked row.\n\n      childElement = this.getDataObject(index);\n      this.hot.runHooks('afterAddChild', parent, childElement, index);\n    }\n    /**\n     * Add a sibling element at the specified index.\n     *\n     * @param {number} index New element sibling's index.\n     * @param {('above'|'below')} where Direction in which the sibling is to be created.\n     */\n\n  }, {\n    key: \"addSibling\",\n    value: function addSibling(index) {\n      var where = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'below';\n      var translatedIndex = this.translateTrimmedRow(index);\n      var parent = this.getRowParent(translatedIndex);\n      var indexWithinParent = this.getRowIndexWithinParent(translatedIndex);\n\n      switch (where) {\n        case 'below':\n          this.addChildAtIndex(parent, indexWithinParent + 1, null);\n          break;\n\n        case 'above':\n          this.addChildAtIndex(parent, indexWithinParent, null);\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\n     * Detach the provided element from its parent and add it right after it.\n     *\n     * @param {object|Array} elements Row object or an array of selected coordinates.\n     * @param {boolean} [forceRender=true] If true (default), it triggers render after finished.\n     */\n\n  }, {\n    key: \"detachFromParent\",\n    value: function detachFromParent(elements) {\n      var _this5 = this;\n\n      var forceRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var element = null;\n      var rowObjects = [];\n\n      if (Array.isArray(elements)) {\n        rangeEach(elements[0], elements[2], function (i) {\n          var translatedIndex = _this5.translateTrimmedRow(i);\n\n          rowObjects.push(_this5.getDataObject(translatedIndex));\n        });\n        rangeEach(0, rowObjects.length - 2, function (i) {\n          _this5.detachFromParent(rowObjects[i], false);\n        });\n        element = rowObjects[rowObjects.length - 1];\n      } else {\n        element = elements;\n      }\n\n      var childRowIndex = this.getRowIndex(element);\n      var indexWithinParent = this.getRowIndexWithinParent(element);\n      var parent = this.getRowParent(element);\n      var grandparent = this.getRowParent(parent);\n      var grandparentRowIndex = this.getRowIndex(grandparent);\n      var movedElementRowIndex = null;\n      this.hot.runHooks('beforeDetachChild', parent, element);\n\n      if (indexWithinParent !== null && indexWithinParent !== void 0) {\n        this.hot.runHooks('beforeRemoveRow', childRowIndex, 1, [childRowIndex], this.plugin.pluginName);\n\n        parent.__children.splice(indexWithinParent, 1);\n\n        this.rewriteCache();\n        this.hot.runHooks('afterRemoveRow', childRowIndex, 1, [childRowIndex], this.plugin.pluginName);\n\n        if (grandparent) {\n          movedElementRowIndex = grandparentRowIndex + this.countChildren(grandparent);\n          this.hot.runHooks('beforeCreateRow', movedElementRowIndex, 1, this.plugin.pluginName);\n\n          grandparent.__children.push(element);\n        } else {\n          movedElementRowIndex = this.hot.countRows() + 1;\n          this.hot.runHooks('beforeCreateRow', movedElementRowIndex, 1, this.plugin.pluginName);\n          this.data.push(element);\n        }\n      }\n\n      this.rewriteCache();\n      this.hot.runHooks('afterCreateRow', movedElementRowIndex, 1, this.plugin.pluginName);\n      this.hot.runHooks('afterDetachChild', parent, element);\n\n      if (forceRender) {\n        this.hot.render();\n      }\n    }\n    /**\n     * Filter the data by the `logicRows` array.\n     *\n     * @private\n     * @param {number} index Index of the first row to remove.\n     * @param {number} amount Number of elements to remove.\n     * @param {Array} logicRows Array of indexes to remove.\n     */\n\n  }, {\n    key: \"filterData\",\n    value: function filterData(index, amount, logicRows) {\n      var _this6 = this; // TODO: why are the first 2 arguments not used?\n\n\n      var elementsToRemove = [];\n      arrayEach(logicRows, function (elem) {\n        elementsToRemove.push(_this6.getDataObject(elem));\n      });\n      arrayEach(elementsToRemove, function (elem) {\n        var indexWithinParent = _this6.getRowIndexWithinParent(elem);\n\n        var tempParent = _this6.getRowParent(elem);\n\n        if (tempParent === null) {\n          _this6.data.splice(indexWithinParent, 1);\n        } else {\n          tempParent.__children.splice(indexWithinParent, 1);\n        }\n      });\n      this.rewriteCache();\n    }\n    /**\n     * Used to splice the source data. Needed to properly modify the nested structure, which wouldn't work with the\n     * default script.\n     *\n     * @private\n     * @param {number} index Physical index of the element at the splice beginning.\n     * @param {number} amount Number of elements to be removed.\n     * @param {object[]} elements Array of row objects to add.\n     */\n\n  }, {\n    key: \"spliceData\",\n    value: function spliceData(index, amount, elements) {\n      var previousElement = this.getDataObject(index - 1);\n      var newRowParent = null;\n      var indexWithinParent = index;\n\n      if (previousElement && previousElement.__children && previousElement.__children.length === 0) {\n        newRowParent = previousElement;\n        indexWithinParent = 0;\n      } else if (index < this.countAllRows()) {\n        newRowParent = this.getRowParent(index);\n        indexWithinParent = this.getRowIndexWithinParent(index);\n      }\n\n      if (newRowParent) {\n        if (elements) {\n          var _newRowParent$__child;\n\n          (_newRowParent$__child = newRowParent.__children).splice.apply(_newRowParent$__child, [indexWithinParent, amount].concat(_toConsumableArray(elements)));\n        } else {\n          newRowParent.__children.splice(indexWithinParent, amount);\n        }\n      } else if (elements) {\n        var _this$data;\n\n        (_this$data = this.data).splice.apply(_this$data, [indexWithinParent, amount].concat(_toConsumableArray(elements)));\n      } else {\n        this.data.splice(indexWithinParent, amount);\n      }\n\n      this.rewriteCache();\n    }\n    /**\n     * Update the `__children` key of the upmost parent of the provided row object.\n     *\n     * @private\n     * @param {object} rowElement Row object.\n     */\n\n  }, {\n    key: \"syncRowWithRawSource\",\n    value: function syncRowWithRawSource(rowElement) {\n      var upmostParent = rowElement;\n      var tempParent = null;\n\n      do {\n        tempParent = this.getRowParent(tempParent);\n\n        if (tempParent !== null) {\n          upmostParent = tempParent;\n        }\n      } while (tempParent !== null);\n\n      this.plugin.disableCoreAPIModifiers();\n      this.hot.setSourceDataAtCell(this.getRowIndex(upmostParent), '__children', upmostParent.__children, 'NestedRows.syncRowWithRawSource');\n      this.plugin.enableCoreAPIModifiers();\n    }\n    /* eslint-disable jsdoc/require-param */\n\n    /**\n     * Move a single row.\n     *\n     * @param {number} fromIndex Index of the row to be moved.\n     * @param {number} toIndex Index of the destination.\n     * @param {boolean} moveToCollapsed `true` if moving a row to a collapsed parent.\n     * @param {boolean} moveToLastChild `true` if moving a row to be a last child of the new parent.\n     */\n\n    /* eslint-enable jsdoc/require-param */\n\n  }, {\n    key: \"moveRow\",\n    value: function moveRow(fromIndex, toIndex, moveToCollapsed, moveToLastChild) {\n      var moveToLastRow = toIndex === this.hot.countRows();\n      var fromParent = this.getRowParent(fromIndex);\n      var indexInFromParent = this.getRowIndexWithinParent(fromIndex);\n\n      var elemToMove = fromParent.__children.slice(indexInFromParent, indexInFromParent + 1);\n\n      var movingUp = fromIndex > toIndex;\n      var toParent = moveToLastRow ? this.getRowParent(toIndex - 1) : this.getRowParent(toIndex);\n\n      if (toParent === null || toParent === void 0) {\n        toParent = this.getRowParent(toIndex - 1);\n      }\n\n      if (toParent === null || toParent === void 0) {\n        toParent = this.getDataObject(toIndex - 1);\n      }\n\n      if (!toParent) {\n        toParent = this.getDataObject(toIndex);\n        toParent.__children = [];\n      } else if (!toParent.__children) {\n        toParent.__children = [];\n      }\n\n      var indexInTargetParent = moveToLastRow || moveToCollapsed || moveToLastChild ? toParent.__children.length : this.getRowIndexWithinParent(toIndex);\n      var sameParent = fromParent === toParent;\n\n      toParent.__children.splice(indexInTargetParent, 0, elemToMove[0]);\n\n      fromParent.__children.splice(indexInFromParent + (movingUp && sameParent ? 1 : 0), 1); // Sync the changes in the cached data with the actual data stored in HOT.\n\n\n      this.syncRowWithRawSource(fromParent);\n\n      if (!sameParent) {\n        this.syncRowWithRawSource(toParent);\n      }\n    }\n    /**\n     * Translate the visual row index to the physical index, taking into consideration the state of collapsed rows.\n     *\n     * @private\n     * @param {number} row Row index.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"translateTrimmedRow\",\n    value: function translateTrimmedRow(row) {\n      if (this.plugin.collapsingUI) {\n        return this.plugin.collapsingUI.translateTrimmedRow(row);\n      }\n\n      return row;\n    }\n    /**\n     * Translate the physical row index to the visual index, taking into consideration the state of collapsed rows.\n     *\n     * @private\n     * @param {number} row Row index.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"untranslateTrimmedRow\",\n    value: function untranslateTrimmedRow(row) {\n      if (this.plugin.collapsingUI) {\n        return this.plugin.collapsingUI.untranslateTrimmedRow(row);\n      }\n\n      return row;\n    }\n  }]);\n\n  return DataManager;\n}();\n\nexport default DataManager;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/nestedRows/data/dataManager.mjs"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","_typeof","obj","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","rangeEach","objectEach","arrayEach","DataManager","nestedRowsPlugin","hotInstance","hot","data","plugin","parentReference","WeakMap","cache","levels","levelCount","rows","nodeInfo","value","setData","getData","getRawSourceData","rawSourceData","disableCoreAPIModifiers","getSourceData","enableCoreAPIModifiers","updateWithData","rewriteCache","_this","cacheNode","node","level","parent","_this2","push","set","row","hasChildren","__children","elem","getDataObject","readTreeNodes","readCount","neededIndex","neededObject","_this3","rootLevel","readNodesCount","isNaN","end","parentObj","result","val","mockParent","fakeParent","mockNode","fakeNode","getRowIndex","rowObj","get","getRowIndexWithinParent","getRowParent","indexOf","countAllRows","rootNodeMock","countChildren","_this4","rowCount","parentNode","rowObject","getRowObjectParent","getRowLevel","getRowObjectLevel","isChild","index","isRowHighestLevel","isParent","_rowObj$__children","addChild","element","childElement","runHooks","parentIndex","functionalParent","newRowIndex","rowIndexMapper","insertIndexes","addChildAtIndex","splice","setSourceDataAtCell","alter","addSibling","where","arguments","undefined","translatedIndex","translateTrimmedRow","indexWithinParent","detachFromParent","elements","_this5","forceRender","rowObjects","childRowIndex","grandparent","grandparentRowIndex","movedElementRowIndex","pluginName","countRows","render","filterData","amount","logicRows","_this6","elementsToRemove","tempParent","spliceData","previousElement","newRowParent","_newRowParent$__child","apply","concat","_this$data","syncRowWithRawSource","rowElement","upmostParent","moveRow","fromIndex","toIndex","moveToCollapsed","moveToLastChild","moveToLastRow","fromParent","indexInFromParent","elemToMove","movingUp","toParent","indexInTargetParent","sameParent","collapsingUI","untranslateTrimmedRow"],"mappings":"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","sourcesContent":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.function.name.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { rangeEach } from \"../../../helpers/number.mjs\";\nimport { objectEach } from \"../../../helpers/object.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\n/**\n * Class responsible for making data operations.\n *\n * @class\n * @private\n */\n\nvar DataManager = /*#__PURE__*/function () {\n  function DataManager(nestedRowsPlugin, hotInstance) {\n    _classCallCheck(this, DataManager);\n\n    /**\n     * Main Handsontable instance reference.\n     *\n     * @type {object}\n     */\n    this.hot = hotInstance;\n    /**\n     * Reference to the source data object.\n     *\n     * @type {Handsontable.CellValue[][]|Handsontable.RowObject[]}\n     */\n\n    this.data = null;\n    /**\n     * Reference to the NestedRows plugin.\n     *\n     * @type {object}\n     */\n\n    this.plugin = nestedRowsPlugin;\n    /**\n     * Map of row object parents.\n     *\n     * @type {WeakMap}\n     */\n\n    this.parentReference = new WeakMap();\n    /**\n     * Nested structure cache.\n     *\n     * @type {object}\n     */\n\n    this.cache = {\n      levels: [],\n      levelCount: 0,\n      rows: [],\n      nodeInfo: new WeakMap()\n    };\n  }\n  /**\n   * Set the data for the manager.\n   *\n   * @param {Handsontable.CellValue[][]|Handsontable.RowObject[]} data Data for the manager.\n   */\n\n\n  _createClass(DataManager, [{\n    key: \"setData\",\n    value: function setData(data) {\n      this.data = data;\n    }\n    /**\n     * Get the data cached in the manager.\n     *\n     * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}\n     */\n\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.data;\n    }\n    /**\n     * Load the \"raw\" source data, without NestedRows' modifications.\n     *\n     * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}\n     */\n\n  }, {\n    key: \"getRawSourceData\",\n    value: function getRawSourceData() {\n      var rawSourceData = null;\n      this.plugin.disableCoreAPIModifiers();\n      rawSourceData = this.hot.getSourceData();\n      this.plugin.enableCoreAPIModifiers();\n      return rawSourceData;\n    }\n    /**\n     * Update the Data Manager with new data and refresh cache.\n     *\n     * @param {Handsontable.CellValue[][]|Handsontable.RowObject[]} data Data for the manager.\n     */\n\n  }, {\n    key: \"updateWithData\",\n    value: function updateWithData(data) {\n      this.setData(data);\n      this.rewriteCache();\n    }\n    /**\n     * Rewrite the nested structure cache.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"rewriteCache\",\n    value: function rewriteCache() {\n      var _this = this;\n\n      this.cache = {\n        levels: [],\n        levelCount: 0,\n        rows: [],\n        nodeInfo: new WeakMap()\n      };\n      rangeEach(0, this.data.length - 1, function (i) {\n        _this.cacheNode(_this.data[i], 0, null);\n      });\n    }\n    /**\n     * Cache a data node.\n     *\n     * @private\n     * @param {object} node Node to cache.\n     * @param {number} level Level of the node.\n     * @param {object} parent Parent of the node.\n     */\n\n  }, {\n    key: \"cacheNode\",\n    value: function cacheNode(node, level, parent) {\n      var _this2 = this;\n\n      if (!this.cache.levels[level]) {\n        this.cache.levels[level] = [];\n        this.cache.levelCount += 1;\n      }\n\n      this.cache.levels[level].push(node);\n      this.cache.rows.push(node);\n      this.cache.nodeInfo.set(node, {\n        parent: parent,\n        row: this.cache.rows.length - 1,\n        level: level\n      });\n\n      if (this.hasChildren(node)) {\n        arrayEach(node.__children, function (elem) {\n          _this2.cacheNode(elem, level + 1, node);\n        });\n      }\n    }\n    /**\n     * Get the date for the provided visual row number.\n     *\n     * @param {number} row Row index.\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getDataObject\",\n    value: function getDataObject(row) {\n      return row === null || row === void 0 ? null : this.cache.rows[row];\n    }\n    /**\n     * Read the row tree in search for a specific row index or row object.\n     *\n     * @private\n     * @param {object} parent The initial parent object.\n     * @param {number} readCount Number of read nodes.\n     * @param {number} neededIndex The row index we search for.\n     * @param {object} neededObject The row object we search for.\n     * @returns {number|object}\n     */\n\n  }, {\n    key: \"readTreeNodes\",\n    value: function readTreeNodes(parent, readCount, neededIndex, neededObject) {\n      var _this3 = this;\n\n      var rootLevel = false;\n      var readNodesCount = readCount;\n\n      if (isNaN(readNodesCount) && readNodesCount.end) {\n        return readNodesCount;\n      }\n\n      var parentObj = parent;\n\n      if (!parentObj) {\n        parentObj = {\n          __children: this.data\n        };\n        rootLevel = true;\n        readNodesCount -= 1;\n      }\n\n      if (neededIndex !== null && neededIndex !== void 0 && readNodesCount === neededIndex) {\n        return {\n          result: parentObj,\n          end: true\n        };\n      }\n\n      if (neededObject !== null && neededObject !== void 0 && parentObj === neededObject) {\n        return {\n          result: readNodesCount,\n          end: true\n        };\n      }\n\n      readNodesCount += 1;\n\n      if (parentObj.__children) {\n        arrayEach(parentObj.__children, function (val) {\n          _this3.parentReference.set(val, rootLevel ? null : parentObj);\n\n          readNodesCount = _this3.readTreeNodes(val, readNodesCount, neededIndex, neededObject);\n\n          if (isNaN(readNodesCount) && readNodesCount.end) {\n            return false;\n          }\n        });\n      }\n\n      return readNodesCount;\n    }\n    /**\n     * Mock a parent node.\n     *\n     * @private\n     * @returns {*}\n     */\n\n  }, {\n    key: \"mockParent\",\n    value: function mockParent() {\n      var fakeParent = this.mockNode();\n      fakeParent.__children = this.data;\n      return fakeParent;\n    }\n    /**\n     * Mock a data node.\n     *\n     * @private\n     * @returns {{}}\n     */\n\n  }, {\n    key: \"mockNode\",\n    value: function mockNode() {\n      var fakeNode = {};\n      objectEach(this.data[0], function (val, key) {\n        fakeNode[key] = null;\n      });\n      return fakeNode;\n    }\n    /**\n     * Get the row index for the provided row object.\n     *\n     * @param {object} rowObj The row object.\n     * @returns {number} Row index.\n     */\n\n  }, {\n    key: \"getRowIndex\",\n    value: function getRowIndex(rowObj) {\n      return rowObj === null || rowObj === void 0 ? null : this.cache.nodeInfo.get(rowObj).row;\n    }\n    /**\n     * Get the index of the provided row index/row object within its parent.\n     *\n     * @param {number|object} row Row index / row object.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getRowIndexWithinParent\",\n    value: function getRowIndexWithinParent(row) {\n      var rowObj = null;\n\n      if (isNaN(row)) {\n        rowObj = row;\n      } else {\n        rowObj = this.getDataObject(row);\n      }\n\n      var parent = this.getRowParent(row);\n\n      if (parent === null || parent === void 0) {\n        return this.data.indexOf(rowObj);\n      }\n\n      return parent.__children.indexOf(rowObj);\n    }\n    /**\n     * Count all rows (including all parents and children).\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"countAllRows\",\n    value: function countAllRows() {\n      var rootNodeMock = {\n        __children: this.data\n      };\n      return this.countChildren(rootNodeMock);\n    }\n    /**\n     * Count children of the provided parent.\n     *\n     * @param {object|number} parent Parent node.\n     * @returns {number} Children count.\n     */\n\n  }, {\n    key: \"countChildren\",\n    value: function countChildren(parent) {\n      var _this4 = this;\n\n      var rowCount = 0;\n      var parentNode = parent;\n\n      if (!isNaN(parentNode)) {\n        parentNode = this.getDataObject(parentNode);\n      }\n\n      if (!parentNode || !parentNode.__children) {\n        return 0;\n      }\n\n      arrayEach(parentNode.__children, function (elem) {\n        rowCount += 1;\n\n        if (elem.__children) {\n          rowCount += _this4.countChildren(elem);\n        }\n      });\n      return rowCount;\n    }\n    /**\n     * Get the parent of the row at the provided index.\n     *\n     * @param {number|object} row Physical row index.\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getRowParent\",\n    value: function getRowParent(row) {\n      var rowObject;\n\n      if (isNaN(row)) {\n        rowObject = row;\n      } else {\n        rowObject = this.getDataObject(row);\n      }\n\n      return this.getRowObjectParent(rowObject);\n    }\n    /**\n     * Get the parent of the provided row object.\n     *\n     * @private\n     * @param {object} rowObject The row object (tree node).\n     * @returns {object|null}\n     */\n\n  }, {\n    key: \"getRowObjectParent\",\n    value: function getRowObjectParent(rowObject) {\n      if (!rowObject || _typeof(rowObject) !== 'object') {\n        return null;\n      }\n\n      return this.cache.nodeInfo.get(rowObject).parent;\n    }\n    /**\n     * Get the nesting level for the row with the provided row index.\n     *\n     * @param {number} row Row index.\n     * @returns {number|null} Row level or null, when row doesn't exist.\n     */\n\n  }, {\n    key: \"getRowLevel\",\n    value: function getRowLevel(row) {\n      var rowObject = null;\n\n      if (isNaN(row)) {\n        rowObject = row;\n      } else {\n        rowObject = this.getDataObject(row);\n      }\n\n      return rowObject ? this.getRowObjectLevel(rowObject) : null;\n    }\n    /**\n     * Get the nesting level for the row with the provided row index.\n     *\n     * @private\n     * @param {object} rowObject Row object.\n     * @returns {number} Row level.\n     */\n\n  }, {\n    key: \"getRowObjectLevel\",\n    value: function getRowObjectLevel(rowObject) {\n      return rowObject === null || rowObject === void 0 ? null : this.cache.nodeInfo.get(rowObject).level;\n    }\n    /**\n     * Check if the provided row/row element has children.\n     *\n     * @param {number|object} row Row number or row element.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"hasChildren\",\n    value: function hasChildren(row) {\n      var rowObj = row;\n\n      if (!isNaN(rowObj)) {\n        rowObj = this.getDataObject(rowObj);\n      }\n\n      return !!(rowObj.__children && rowObj.__children.length);\n    }\n    /**\n     * Returns `true` if the row at the provided index has a parent.\n     *\n     * @param {number} index Row index.\n     * @returns {boolean} `true` if the row at the provided index has a parent, `false` otherwise.\n     */\n\n  }, {\n    key: \"isChild\",\n    value: function isChild(index) {\n      return this.getRowParent(index) !== null;\n    }\n    /**\n     * Return `true` of the row at the provided index is located at the topmost level.\n     *\n     * @param {number} index Row index.\n     * @returns {boolean} `true` of the row at the provided index is located at the topmost level, `false` otherwise.\n     */\n\n  }, {\n    key: \"isRowHighestLevel\",\n    value: function isRowHighestLevel(index) {\n      return !this.isChild(index);\n    }\n    /**\n     * Return `true` if the provided row index / row object represents a parent in the nested structure.\n     *\n     * @param {number|object} row Row index / row object.\n     * @returns {boolean} `true` if the row is a parent, `false` otherwise.\n     */\n\n  }, {\n    key: \"isParent\",\n    value: function isParent(row) {\n      var _rowObj$__children;\n\n      var rowObj = row;\n\n      if (!isNaN(rowObj)) {\n        rowObj = this.getDataObject(rowObj);\n      }\n\n      return rowObj && !!rowObj.__children && ((_rowObj$__children = rowObj.__children) === null || _rowObj$__children === void 0 ? void 0 : _rowObj$__children.length) !== 0;\n    }\n    /**\n     * Add a child to the provided parent. It's optional to add a row object as the \"element\".\n     *\n     * @param {object} parent The parent row object.\n     * @param {object} [element] The element to add as a child.\n     */\n\n  }, {\n    key: \"addChild\",\n    value: function addChild(parent, element) {\n      var childElement = element;\n      this.hot.runHooks('beforeAddChild', parent, childElement);\n      var parentIndex = null;\n\n      if (parent) {\n        parentIndex = this.getRowIndex(parent);\n      }\n\n      this.hot.runHooks('beforeCreateRow', parentIndex + this.countChildren(parent) + 1, 1);\n      var functionalParent = parent;\n\n      if (!parent) {\n        functionalParent = this.mockParent();\n      }\n\n      if (!functionalParent.__children) {\n        functionalParent.__children = [];\n      }\n\n      if (!childElement) {\n        childElement = this.mockNode();\n      }\n\n      functionalParent.__children.push(childElement);\n\n      this.rewriteCache();\n      var newRowIndex = this.getRowIndex(childElement);\n      this.hot.rowIndexMapper.insertIndexes(newRowIndex, 1);\n      this.hot.runHooks('afterCreateRow', newRowIndex, 1);\n      this.hot.runHooks('afterAddChild', parent, childElement);\n    }\n    /**\n     * Add a child node to the provided parent at a specified index.\n     *\n     * @param {object} parent Parent node.\n     * @param {number} index Index to insert the child element at.\n     * @param {object} [element] Element (node) to insert.\n     */\n\n  }, {\n    key: \"addChildAtIndex\",\n    value: function addChildAtIndex(parent, index, element) {\n      var childElement = element;\n\n      if (!childElement) {\n        childElement = this.mockNode();\n      }\n\n      this.hot.runHooks('beforeAddChild', parent, childElement, index);\n\n      if (parent) {\n        this.hot.runHooks('beforeCreateRow', index, 1);\n\n        parent.__children.splice(index, null, childElement);\n\n        this.plugin.disableCoreAPIModifiers();\n        this.hot.setSourceDataAtCell(this.getRowIndexWithinParent(parent), '__children', parent.__children, 'NestedRows.addChildAtIndex');\n        this.plugin.enableCoreAPIModifiers();\n        this.hot.runHooks('afterCreateRow', index, 1);\n      } else {\n        this.plugin.disableCoreAPIModifiers();\n        this.hot.alter('insert_row', index, 1, 'NestedRows.addChildAtIndex');\n        this.plugin.enableCoreAPIModifiers();\n      }\n\n      this.updateWithData(this.getRawSourceData()); // Workaround for refreshing cache losing the reference to the mocked row.\n\n      childElement = this.getDataObject(index);\n      this.hot.runHooks('afterAddChild', parent, childElement, index);\n    }\n    /**\n     * Add a sibling element at the specified index.\n     *\n     * @param {number} index New element sibling's index.\n     * @param {('above'|'below')} where Direction in which the sibling is to be created.\n     */\n\n  }, {\n    key: \"addSibling\",\n    value: function addSibling(index) {\n      var where = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'below';\n      var translatedIndex = this.translateTrimmedRow(index);\n      var parent = this.getRowParent(translatedIndex);\n      var indexWithinParent = this.getRowIndexWithinParent(translatedIndex);\n\n      switch (where) {\n        case 'below':\n          this.addChildAtIndex(parent, indexWithinParent + 1, null);\n          break;\n\n        case 'above':\n          this.addChildAtIndex(parent, indexWithinParent, null);\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\n     * Detach the provided element from its parent and add it right after it.\n     *\n     * @param {object|Array} elements Row object or an array of selected coordinates.\n     * @param {boolean} [forceRender=true] If true (default), it triggers render after finished.\n     */\n\n  }, {\n    key: \"detachFromParent\",\n    value: function detachFromParent(elements) {\n      var _this5 = this;\n\n      var forceRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var element = null;\n      var rowObjects = [];\n\n      if (Array.isArray(elements)) {\n        rangeEach(elements[0], elements[2], function (i) {\n          var translatedIndex = _this5.translateTrimmedRow(i);\n\n          rowObjects.push(_this5.getDataObject(translatedIndex));\n        });\n        rangeEach(0, rowObjects.length - 2, function (i) {\n          _this5.detachFromParent(rowObjects[i], false);\n        });\n        element = rowObjects[rowObjects.length - 1];\n      } else {\n        element = elements;\n      }\n\n      var childRowIndex = this.getRowIndex(element);\n      var indexWithinParent = this.getRowIndexWithinParent(element);\n      var parent = this.getRowParent(element);\n      var grandparent = this.getRowParent(parent);\n      var grandparentRowIndex = this.getRowIndex(grandparent);\n      var movedElementRowIndex = null;\n      this.hot.runHooks('beforeDetachChild', parent, element);\n\n      if (indexWithinParent !== null && indexWithinParent !== void 0) {\n        this.hot.runHooks('beforeRemoveRow', childRowIndex, 1, [childRowIndex], this.plugin.pluginName);\n\n        parent.__children.splice(indexWithinParent, 1);\n\n        this.rewriteCache();\n        this.hot.runHooks('afterRemoveRow', childRowIndex, 1, [childRowIndex], this.plugin.pluginName);\n\n        if (grandparent) {\n          movedElementRowIndex = grandparentRowIndex + this.countChildren(grandparent);\n          this.hot.runHooks('beforeCreateRow', movedElementRowIndex, 1, this.plugin.pluginName);\n\n          grandparent.__children.push(element);\n        } else {\n          movedElementRowIndex = this.hot.countRows() + 1;\n          this.hot.runHooks('beforeCreateRow', movedElementRowIndex, 1, this.plugin.pluginName);\n          this.data.push(element);\n        }\n      }\n\n      this.rewriteCache();\n      this.hot.runHooks('afterCreateRow', movedElementRowIndex, 1, this.plugin.pluginName);\n      this.hot.runHooks('afterDetachChild', parent, element);\n\n      if (forceRender) {\n        this.hot.render();\n      }\n    }\n    /**\n     * Filter the data by the `logicRows` array.\n     *\n     * @private\n     * @param {number} index Index of the first row to remove.\n     * @param {number} amount Number of elements to remove.\n     * @param {Array} logicRows Array of indexes to remove.\n     */\n\n  }, {\n    key: \"filterData\",\n    value: function filterData(index, amount, logicRows) {\n      var _this6 = this;\n\n      // TODO: why are the first 2 arguments not used?\n      var elementsToRemove = [];\n      arrayEach(logicRows, function (elem) {\n        elementsToRemove.push(_this6.getDataObject(elem));\n      });\n      arrayEach(elementsToRemove, function (elem) {\n        var indexWithinParent = _this6.getRowIndexWithinParent(elem);\n\n        var tempParent = _this6.getRowParent(elem);\n\n        if (tempParent === null) {\n          _this6.data.splice(indexWithinParent, 1);\n        } else {\n          tempParent.__children.splice(indexWithinParent, 1);\n        }\n      });\n      this.rewriteCache();\n    }\n    /**\n     * Used to splice the source data. Needed to properly modify the nested structure, which wouldn't work with the\n     * default script.\n     *\n     * @private\n     * @param {number} index Physical index of the element at the splice beginning.\n     * @param {number} amount Number of elements to be removed.\n     * @param {object[]} elements Array of row objects to add.\n     */\n\n  }, {\n    key: \"spliceData\",\n    value: function spliceData(index, amount, elements) {\n      var previousElement = this.getDataObject(index - 1);\n      var newRowParent = null;\n      var indexWithinParent = index;\n\n      if (previousElement && previousElement.__children && previousElement.__children.length === 0) {\n        newRowParent = previousElement;\n        indexWithinParent = 0;\n      } else if (index < this.countAllRows()) {\n        newRowParent = this.getRowParent(index);\n        indexWithinParent = this.getRowIndexWithinParent(index);\n      }\n\n      if (newRowParent) {\n        if (elements) {\n          var _newRowParent$__child;\n\n          (_newRowParent$__child = newRowParent.__children).splice.apply(_newRowParent$__child, [indexWithinParent, amount].concat(_toConsumableArray(elements)));\n        } else {\n          newRowParent.__children.splice(indexWithinParent, amount);\n        }\n      } else if (elements) {\n        var _this$data;\n\n        (_this$data = this.data).splice.apply(_this$data, [indexWithinParent, amount].concat(_toConsumableArray(elements)));\n      } else {\n        this.data.splice(indexWithinParent, amount);\n      }\n\n      this.rewriteCache();\n    }\n    /**\n     * Update the `__children` key of the upmost parent of the provided row object.\n     *\n     * @private\n     * @param {object} rowElement Row object.\n     */\n\n  }, {\n    key: \"syncRowWithRawSource\",\n    value: function syncRowWithRawSource(rowElement) {\n      var upmostParent = rowElement;\n      var tempParent = null;\n\n      do {\n        tempParent = this.getRowParent(tempParent);\n\n        if (tempParent !== null) {\n          upmostParent = tempParent;\n        }\n      } while (tempParent !== null);\n\n      this.plugin.disableCoreAPIModifiers();\n      this.hot.setSourceDataAtCell(this.getRowIndex(upmostParent), '__children', upmostParent.__children, 'NestedRows.syncRowWithRawSource');\n      this.plugin.enableCoreAPIModifiers();\n    }\n    /* eslint-disable jsdoc/require-param */\n\n    /**\n     * Move a single row.\n     *\n     * @param {number} fromIndex Index of the row to be moved.\n     * @param {number} toIndex Index of the destination.\n     * @param {boolean} moveToCollapsed `true` if moving a row to a collapsed parent.\n     * @param {boolean} moveToLastChild `true` if moving a row to be a last child of the new parent.\n     */\n\n    /* eslint-enable jsdoc/require-param */\n\n  }, {\n    key: \"moveRow\",\n    value: function moveRow(fromIndex, toIndex, moveToCollapsed, moveToLastChild) {\n      var moveToLastRow = toIndex === this.hot.countRows();\n      var fromParent = this.getRowParent(fromIndex);\n      var indexInFromParent = this.getRowIndexWithinParent(fromIndex);\n\n      var elemToMove = fromParent.__children.slice(indexInFromParent, indexInFromParent + 1);\n\n      var movingUp = fromIndex > toIndex;\n      var toParent = moveToLastRow ? this.getRowParent(toIndex - 1) : this.getRowParent(toIndex);\n\n      if (toParent === null || toParent === void 0) {\n        toParent = this.getRowParent(toIndex - 1);\n      }\n\n      if (toParent === null || toParent === void 0) {\n        toParent = this.getDataObject(toIndex - 1);\n      }\n\n      if (!toParent) {\n        toParent = this.getDataObject(toIndex);\n        toParent.__children = [];\n      } else if (!toParent.__children) {\n        toParent.__children = [];\n      }\n\n      var indexInTargetParent = moveToLastRow || moveToCollapsed || moveToLastChild ? toParent.__children.length : this.getRowIndexWithinParent(toIndex);\n      var sameParent = fromParent === toParent;\n\n      toParent.__children.splice(indexInTargetParent, 0, elemToMove[0]);\n\n      fromParent.__children.splice(indexInFromParent + (movingUp && sameParent ? 1 : 0), 1); // Sync the changes in the cached data with the actual data stored in HOT.\n\n\n      this.syncRowWithRawSource(fromParent);\n\n      if (!sameParent) {\n        this.syncRowWithRawSource(toParent);\n      }\n    }\n    /**\n     * Translate the visual row index to the physical index, taking into consideration the state of collapsed rows.\n     *\n     * @private\n     * @param {number} row Row index.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"translateTrimmedRow\",\n    value: function translateTrimmedRow(row) {\n      if (this.plugin.collapsingUI) {\n        return this.plugin.collapsingUI.translateTrimmedRow(row);\n      }\n\n      return row;\n    }\n    /**\n     * Translate the physical row index to the visual index, taking into consideration the state of collapsed rows.\n     *\n     * @private\n     * @param {number} row Row index.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"untranslateTrimmedRow\",\n    value: function untranslateTrimmedRow(row) {\n      if (this.plugin.collapsingUI) {\n        return this.plugin.collapsingUI.untranslateTrimmedRow(row);\n      }\n\n      return row;\n    }\n  }]);\n\n  return DataManager;\n}();\n\nexport default DataManager;"]},"metadata":{},"sourceType":"module"}