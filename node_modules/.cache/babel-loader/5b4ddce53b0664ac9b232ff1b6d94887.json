{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from \"./constants.mjs\";\nvar privatePool = new WeakMap();\n/**\n * Calculates indexes of columns to render OR columns that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportColumnsCalculator\n */\n\nvar ViewportColumnsCalculator = /*#__PURE__*/function () {\n  /**\n   * @param {object} options Object with all options specified for column viewport calculation.\n   * @param {number} options.viewportSize Width of the viewport.\n   * @param {number} options.scrollOffset Current horizontal scroll position of the viewport.\n   * @param {number} options.totalItems Total number of columns.\n   * @param {Function} options.itemSizeFn Function that returns the width of the column at a given index (in px).\n   * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin).\n   * @param {string} options.calculationType String which describes types of calculation which will be performed.\n   * @param {string} [options.stretchMode] Stretch mode 'all' or 'last'.\n   * @param {Function} [options.stretchingItemWidthFn] Function that returns the new width of the stretched column.\n   */\n  function ViewportColumnsCalculator() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        viewportSize = _ref.viewportSize,\n        scrollOffset = _ref.scrollOffset,\n        totalItems = _ref.totalItems,\n        itemSizeFn = _ref.itemSizeFn,\n        overrideFn = _ref.overrideFn,\n        calculationType = _ref.calculationType,\n        stretchMode = _ref.stretchMode,\n        _ref$stretchingItemWi = _ref.stretchingItemWidthFn,\n        stretchingItemWidthFn = _ref$stretchingItemWi === void 0 ? function (width) {\n      return width;\n    } : _ref$stretchingItemWi;\n\n    _classCallCheck(this, ViewportColumnsCalculator);\n\n    privatePool.set(this, {\n      viewportWidth: viewportSize,\n      scrollOffset: scrollOffset,\n      totalColumns: totalItems,\n      columnWidthFn: itemSizeFn,\n      overrideFn: overrideFn,\n      calculationType: calculationType,\n      stretchingColumnWidthFn: stretchingItemWidthFn\n    });\n    /**\n     * Number of rendered/visible columns.\n     *\n     * @type {number}\n     */\n\n    this.count = 0;\n    /**\n     * Index of the first rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {number|null}\n     */\n\n    this.startColumn = null;\n    /**\n     * Index of the last rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {null}\n     */\n\n    this.endColumn = null;\n    /**\n     * Position of the first rendered/visible column (in px).\n     *\n     * @type {number|null}\n     */\n\n    this.startPosition = null;\n    this.stretchAllRatio = 0;\n    this.stretchLastWidth = 0;\n    this.stretch = stretchMode;\n    this.totalTargetWidth = 0;\n    this.needVerifyLastColumnWidth = true;\n    this.stretchAllColumnsWidth = [];\n    this.calculate();\n  }\n  /**\n   * Calculates viewport.\n   */\n\n\n  _createClass(ViewportColumnsCalculator, [{\n    key: \"calculate\",\n    value: function calculate() {\n      var sum = 0;\n      var needReverse = true;\n      var startPositions = [];\n      var columnWidth;\n      var priv = privatePool.get(this);\n      var calculationType = priv.calculationType;\n      var overrideFn = priv.overrideFn;\n      var scrollOffset = priv.scrollOffset;\n      var totalColumns = priv.totalColumns;\n      var viewportWidth = priv.viewportWidth;\n\n      for (var i = 0; i < totalColumns; i++) {\n        columnWidth = this._getColumnWidth(i);\n\n        if (sum <= scrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startColumn = i;\n        } // +1 pixel for row header width compensation for horizontal scroll > 0\n\n\n        var compensatedViewportWidth = scrollOffset > 0 ? viewportWidth + 1 : viewportWidth;\n\n        if (sum >= scrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? columnWidth : 0) <= scrollOffset + compensatedViewportWidth) {\n          // eslint-disable-line max-len\n          if (this.startColumn === null || this.startColumn === void 0) {\n            this.startColumn = i;\n          }\n\n          this.endColumn = i;\n        }\n\n        startPositions.push(sum);\n        sum += columnWidth;\n\n        if (calculationType !== FULLY_VISIBLE_TYPE) {\n          this.endColumn = i;\n        }\n\n        if (sum >= scrollOffset + viewportWidth) {\n          needReverse = false;\n          break;\n        }\n      }\n\n      if (this.endColumn === totalColumns - 1 && needReverse) {\n        this.startColumn = this.endColumn;\n\n        while (this.startColumn > 0) {\n          var viewportSum = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];\n\n          if (viewportSum <= viewportWidth || calculationType !== FULLY_VISIBLE_TYPE) {\n            this.startColumn -= 1;\n          }\n\n          if (viewportSum > viewportWidth) {\n            break;\n          }\n        }\n      }\n\n      if (calculationType === RENDER_TYPE && this.startColumn !== null && overrideFn) {\n        overrideFn(this);\n      }\n\n      this.startPosition = startPositions[this.startColumn];\n\n      if (this.startPosition === void 0) {\n        this.startPosition = null;\n      } // If totalColumns exceeded its total columns size set endColumn to the latest item\n\n\n      if (totalColumns < this.endColumn) {\n        this.endColumn = totalColumns - 1;\n      }\n\n      if (this.startColumn !== null) {\n        this.count = this.endColumn - this.startColumn + 1;\n      }\n    }\n    /**\n     * Recalculate columns stretching.\n     *\n     * @param {number} totalWidth The total width of the table.\n     */\n\n  }, {\n    key: \"refreshStretching\",\n    value: function refreshStretching(totalWidth) {\n      if (this.stretch === 'none') {\n        return;\n      }\n\n      var totalColumnsWidth = totalWidth;\n      this.totalTargetWidth = totalColumnsWidth;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      var sumAll = 0;\n\n      for (var i = 0; i < totalColumns; i++) {\n        var columnWidth = this._getColumnWidth(i);\n\n        var permanentColumnWidth = priv.stretchingColumnWidthFn(void 0, i);\n\n        if (typeof permanentColumnWidth === 'number') {\n          totalColumnsWidth -= permanentColumnWidth;\n        } else {\n          sumAll += columnWidth;\n        }\n      }\n\n      var remainingSize = totalColumnsWidth - sumAll;\n\n      if (this.stretch === 'all' && remainingSize > 0) {\n        this.stretchAllRatio = totalColumnsWidth / sumAll;\n        this.stretchAllColumnsWidth = [];\n        this.needVerifyLastColumnWidth = true;\n      } else if (this.stretch === 'last' && totalColumnsWidth !== Infinity) {\n        var _columnWidth = this._getColumnWidth(totalColumns - 1);\n\n        var lastColumnWidth = remainingSize + _columnWidth;\n        this.stretchLastWidth = lastColumnWidth >= 0 ? lastColumnWidth : _columnWidth;\n      }\n    }\n    /**\n     * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.\n     *\n     * @param {number} column The visual column index.\n     * @param {number} baseWidth The default column width.\n     * @returns {number|null}\n     */\n\n  }, {\n    key: \"getStretchedColumnWidth\",\n    value: function getStretchedColumnWidth(column, baseWidth) {\n      var result = null;\n\n      if (this.stretch === 'all' && this.stretchAllRatio !== 0) {\n        result = this._getStretchedAllColumnWidth(column, baseWidth);\n      } else if (this.stretch === 'last' && this.stretchLastWidth !== 0) {\n        result = this._getStretchedLastColumnWidth(column);\n      }\n\n      return result;\n    }\n    /**\n     * @param {number} column The visual column index.\n     * @param {number} baseWidth The default column width.\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: \"_getStretchedAllColumnWidth\",\n    value: function _getStretchedAllColumnWidth(column, baseWidth) {\n      var sumRatioWidth = 0;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n\n      if (!this.stretchAllColumnsWidth[column]) {\n        var stretchedWidth = Math.round(baseWidth * this.stretchAllRatio);\n        var newStretchedWidth = priv.stretchingColumnWidthFn(stretchedWidth, column);\n\n        if (newStretchedWidth === void 0) {\n          this.stretchAllColumnsWidth[column] = stretchedWidth;\n        } else {\n          this.stretchAllColumnsWidth[column] = isNaN(newStretchedWidth) ? this._getColumnWidth(column) : newStretchedWidth;\n        }\n      }\n\n      if (this.stretchAllColumnsWidth.length === totalColumns && this.needVerifyLastColumnWidth) {\n        this.needVerifyLastColumnWidth = false;\n\n        for (var i = 0; i < this.stretchAllColumnsWidth.length; i++) {\n          sumRatioWidth += this.stretchAllColumnsWidth[i];\n        }\n\n        if (sumRatioWidth !== this.totalTargetWidth) {\n          this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += this.totalTargetWidth - sumRatioWidth;\n        }\n      }\n\n      return this.stretchAllColumnsWidth[column];\n    }\n    /**\n     * @param {number} column The visual column index.\n     * @returns {number|null}\n     * @private\n     */\n\n  }, {\n    key: \"_getStretchedLastColumnWidth\",\n    value: function _getStretchedLastColumnWidth(column) {\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n\n      if (column === totalColumns - 1) {\n        return this.stretchLastWidth;\n      }\n\n      return null;\n    }\n    /**\n     * @param {number} column The visual column index.\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: \"_getColumnWidth\",\n    value: function _getColumnWidth(column) {\n      var width = privatePool.get(this).columnWidthFn(column);\n\n      if (isNaN(width)) {\n        width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n      }\n\n      return width;\n    }\n  }], [{\n    key: \"DEFAULT_WIDTH\",\n    get:\n    /**\n     * Default column width.\n     *\n     * @type {number}\n     */\n    function get() {\n      return 50;\n    }\n  }]);\n\n  return ViewportColumnsCalculator;\n}();\n\nexport default ViewportColumnsCalculator;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/3rdparty/walkontable/src/calculator/viewportColumns.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","RENDER_TYPE","FULLY_VISIBLE_TYPE","privatePool","WeakMap","ViewportColumnsCalculator","_ref","arguments","undefined","viewportSize","scrollOffset","totalItems","itemSizeFn","overrideFn","calculationType","stretchMode","_ref$stretchingItemWi","stretchingItemWidthFn","width","set","viewportWidth","totalColumns","columnWidthFn","stretchingColumnWidthFn","count","startColumn","endColumn","startPosition","stretchAllRatio","stretchLastWidth","stretch","totalTargetWidth","needVerifyLastColumnWidth","stretchAllColumnsWidth","calculate","value","sum","needReverse","startPositions","columnWidth","priv","get","_getColumnWidth","compensatedViewportWidth","push","viewportSum","refreshStretching","totalWidth","totalColumnsWidth","sumAll","permanentColumnWidth","remainingSize","Infinity","_columnWidth","lastColumnWidth","getStretchedColumnWidth","column","baseWidth","result","_getStretchedAllColumnWidth","_getStretchedLastColumnWidth","sumRatioWidth","stretchedWidth","Math","round","newStretchedWidth","isNaN","DEFAULT_WIDTH"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from \"./constants.mjs\";\nvar privatePool = new WeakMap();\n/**\n * Calculates indexes of columns to render OR columns that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportColumnsCalculator\n */\n\nvar ViewportColumnsCalculator = /*#__PURE__*/function () {\n  /**\n   * @param {object} options Object with all options specified for column viewport calculation.\n   * @param {number} options.viewportSize Width of the viewport.\n   * @param {number} options.scrollOffset Current horizontal scroll position of the viewport.\n   * @param {number} options.totalItems Total number of columns.\n   * @param {Function} options.itemSizeFn Function that returns the width of the column at a given index (in px).\n   * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin).\n   * @param {string} options.calculationType String which describes types of calculation which will be performed.\n   * @param {string} [options.stretchMode] Stretch mode 'all' or 'last'.\n   * @param {Function} [options.stretchingItemWidthFn] Function that returns the new width of the stretched column.\n   */\n  function ViewportColumnsCalculator() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        viewportSize = _ref.viewportSize,\n        scrollOffset = _ref.scrollOffset,\n        totalItems = _ref.totalItems,\n        itemSizeFn = _ref.itemSizeFn,\n        overrideFn = _ref.overrideFn,\n        calculationType = _ref.calculationType,\n        stretchMode = _ref.stretchMode,\n        _ref$stretchingItemWi = _ref.stretchingItemWidthFn,\n        stretchingItemWidthFn = _ref$stretchingItemWi === void 0 ? function (width) {\n      return width;\n    } : _ref$stretchingItemWi;\n\n    _classCallCheck(this, ViewportColumnsCalculator);\n\n    privatePool.set(this, {\n      viewportWidth: viewportSize,\n      scrollOffset: scrollOffset,\n      totalColumns: totalItems,\n      columnWidthFn: itemSizeFn,\n      overrideFn: overrideFn,\n      calculationType: calculationType,\n      stretchingColumnWidthFn: stretchingItemWidthFn\n    });\n    /**\n     * Number of rendered/visible columns.\n     *\n     * @type {number}\n     */\n\n    this.count = 0;\n    /**\n     * Index of the first rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {number|null}\n     */\n\n    this.startColumn = null;\n    /**\n     * Index of the last rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {null}\n     */\n\n    this.endColumn = null;\n    /**\n     * Position of the first rendered/visible column (in px).\n     *\n     * @type {number|null}\n     */\n\n    this.startPosition = null;\n    this.stretchAllRatio = 0;\n    this.stretchLastWidth = 0;\n    this.stretch = stretchMode;\n    this.totalTargetWidth = 0;\n    this.needVerifyLastColumnWidth = true;\n    this.stretchAllColumnsWidth = [];\n    this.calculate();\n  }\n  /**\n   * Calculates viewport.\n   */\n\n\n  _createClass(ViewportColumnsCalculator, [{\n    key: \"calculate\",\n    value: function calculate() {\n      var sum = 0;\n      var needReverse = true;\n      var startPositions = [];\n      var columnWidth;\n      var priv = privatePool.get(this);\n      var calculationType = priv.calculationType;\n      var overrideFn = priv.overrideFn;\n      var scrollOffset = priv.scrollOffset;\n      var totalColumns = priv.totalColumns;\n      var viewportWidth = priv.viewportWidth;\n\n      for (var i = 0; i < totalColumns; i++) {\n        columnWidth = this._getColumnWidth(i);\n\n        if (sum <= scrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startColumn = i;\n        } // +1 pixel for row header width compensation for horizontal scroll > 0\n\n\n        var compensatedViewportWidth = scrollOffset > 0 ? viewportWidth + 1 : viewportWidth;\n\n        if (sum >= scrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? columnWidth : 0) <= scrollOffset + compensatedViewportWidth) {\n          // eslint-disable-line max-len\n          if (this.startColumn === null || this.startColumn === void 0) {\n            this.startColumn = i;\n          }\n\n          this.endColumn = i;\n        }\n\n        startPositions.push(sum);\n        sum += columnWidth;\n\n        if (calculationType !== FULLY_VISIBLE_TYPE) {\n          this.endColumn = i;\n        }\n\n        if (sum >= scrollOffset + viewportWidth) {\n          needReverse = false;\n          break;\n        }\n      }\n\n      if (this.endColumn === totalColumns - 1 && needReverse) {\n        this.startColumn = this.endColumn;\n\n        while (this.startColumn > 0) {\n          var viewportSum = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];\n\n          if (viewportSum <= viewportWidth || calculationType !== FULLY_VISIBLE_TYPE) {\n            this.startColumn -= 1;\n          }\n\n          if (viewportSum > viewportWidth) {\n            break;\n          }\n        }\n      }\n\n      if (calculationType === RENDER_TYPE && this.startColumn !== null && overrideFn) {\n        overrideFn(this);\n      }\n\n      this.startPosition = startPositions[this.startColumn];\n\n      if (this.startPosition === void 0) {\n        this.startPosition = null;\n      } // If totalColumns exceeded its total columns size set endColumn to the latest item\n\n\n      if (totalColumns < this.endColumn) {\n        this.endColumn = totalColumns - 1;\n      }\n\n      if (this.startColumn !== null) {\n        this.count = this.endColumn - this.startColumn + 1;\n      }\n    }\n    /**\n     * Recalculate columns stretching.\n     *\n     * @param {number} totalWidth The total width of the table.\n     */\n\n  }, {\n    key: \"refreshStretching\",\n    value: function refreshStretching(totalWidth) {\n      if (this.stretch === 'none') {\n        return;\n      }\n\n      var totalColumnsWidth = totalWidth;\n      this.totalTargetWidth = totalColumnsWidth;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      var sumAll = 0;\n\n      for (var i = 0; i < totalColumns; i++) {\n        var columnWidth = this._getColumnWidth(i);\n\n        var permanentColumnWidth = priv.stretchingColumnWidthFn(void 0, i);\n\n        if (typeof permanentColumnWidth === 'number') {\n          totalColumnsWidth -= permanentColumnWidth;\n        } else {\n          sumAll += columnWidth;\n        }\n      }\n\n      var remainingSize = totalColumnsWidth - sumAll;\n\n      if (this.stretch === 'all' && remainingSize > 0) {\n        this.stretchAllRatio = totalColumnsWidth / sumAll;\n        this.stretchAllColumnsWidth = [];\n        this.needVerifyLastColumnWidth = true;\n      } else if (this.stretch === 'last' && totalColumnsWidth !== Infinity) {\n        var _columnWidth = this._getColumnWidth(totalColumns - 1);\n\n        var lastColumnWidth = remainingSize + _columnWidth;\n        this.stretchLastWidth = lastColumnWidth >= 0 ? lastColumnWidth : _columnWidth;\n      }\n    }\n    /**\n     * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.\n     *\n     * @param {number} column The visual column index.\n     * @param {number} baseWidth The default column width.\n     * @returns {number|null}\n     */\n\n  }, {\n    key: \"getStretchedColumnWidth\",\n    value: function getStretchedColumnWidth(column, baseWidth) {\n      var result = null;\n\n      if (this.stretch === 'all' && this.stretchAllRatio !== 0) {\n        result = this._getStretchedAllColumnWidth(column, baseWidth);\n      } else if (this.stretch === 'last' && this.stretchLastWidth !== 0) {\n        result = this._getStretchedLastColumnWidth(column);\n      }\n\n      return result;\n    }\n    /**\n     * @param {number} column The visual column index.\n     * @param {number} baseWidth The default column width.\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: \"_getStretchedAllColumnWidth\",\n    value: function _getStretchedAllColumnWidth(column, baseWidth) {\n      var sumRatioWidth = 0;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n\n      if (!this.stretchAllColumnsWidth[column]) {\n        var stretchedWidth = Math.round(baseWidth * this.stretchAllRatio);\n        var newStretchedWidth = priv.stretchingColumnWidthFn(stretchedWidth, column);\n\n        if (newStretchedWidth === void 0) {\n          this.stretchAllColumnsWidth[column] = stretchedWidth;\n        } else {\n          this.stretchAllColumnsWidth[column] = isNaN(newStretchedWidth) ? this._getColumnWidth(column) : newStretchedWidth;\n        }\n      }\n\n      if (this.stretchAllColumnsWidth.length === totalColumns && this.needVerifyLastColumnWidth) {\n        this.needVerifyLastColumnWidth = false;\n\n        for (var i = 0; i < this.stretchAllColumnsWidth.length; i++) {\n          sumRatioWidth += this.stretchAllColumnsWidth[i];\n        }\n\n        if (sumRatioWidth !== this.totalTargetWidth) {\n          this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += this.totalTargetWidth - sumRatioWidth;\n        }\n      }\n\n      return this.stretchAllColumnsWidth[column];\n    }\n    /**\n     * @param {number} column The visual column index.\n     * @returns {number|null}\n     * @private\n     */\n\n  }, {\n    key: \"_getStretchedLastColumnWidth\",\n    value: function _getStretchedLastColumnWidth(column) {\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n\n      if (column === totalColumns - 1) {\n        return this.stretchLastWidth;\n      }\n\n      return null;\n    }\n    /**\n     * @param {number} column The visual column index.\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: \"_getColumnWidth\",\n    value: function _getColumnWidth(column) {\n      var width = privatePool.get(this).columnWidthFn(column);\n\n      if (isNaN(width)) {\n        width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n      }\n\n      return width;\n    }\n  }], [{\n    key: \"DEFAULT_WIDTH\",\n    get:\n    /**\n     * Default column width.\n     *\n     * @type {number}\n     */\n    function get() {\n      return 50;\n    }\n  }]);\n\n  return ViewportColumnsCalculator;\n}();\n\nexport default ViewportColumnsCalculator;"]},"metadata":{},"sourceType":"module"}