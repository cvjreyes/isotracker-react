{"ast":null,"code":"import { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\nimport { compareFunctionFactory as defaultCompareFunctionFactory } from \"../sortFunction/default.mjs\";\nimport { isEmpty } from \"../../../helpers/mixed.mjs\";\n/**\n * Checkbox sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {object} columnMeta Column meta object.\n * @param {object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\n\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  var checkedTemplate = columnMeta.checkedTemplate;\n  var uncheckedTemplate = columnMeta.uncheckedTemplate;\n  var sortEmptyCells = columnPluginSettings.sortEmptyCells;\n  return function (value, nextValue) {\n    var isEmptyValue = isEmpty(value);\n    var isEmptyNextValue = isEmpty(nextValue);\n    var unifiedValue = isEmptyValue ? uncheckedTemplate : value;\n    var unifiedNextValue = isEmptyNextValue ? uncheckedTemplate : nextValue;\n    var isValueFromTemplate = unifiedValue === uncheckedTemplate || unifiedValue === checkedTemplate;\n    var isNextValueFromTemplate = unifiedNextValue === uncheckedTemplate || unifiedNextValue === checkedTemplate; // As an empty cell we recognize cells with undefined, null and '' values.\n\n    if (sortEmptyCells === false) {\n      if (isEmptyValue && isEmptyNextValue === false) {\n        return FIRST_AFTER_SECOND;\n      }\n\n      if (isEmptyValue === false && isEmptyNextValue) {\n        return FIRST_BEFORE_SECOND;\n      }\n    } // 1st value === #BAD_VALUE#\n\n\n    if (isValueFromTemplate === false && isNextValueFromTemplate) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    } // 2nd value === #BAD_VALUE#\n\n\n    if (isValueFromTemplate && isNextValueFromTemplate === false) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    } // 1st value === #BAD_VALUE# && 2nd value === #BAD_VALUE#\n\n\n    if (isValueFromTemplate === false && isNextValueFromTemplate === false) {\n      // Sorting by values (not just by visual representation).\n      return defaultCompareFunctionFactory(sortOrder, columnMeta, columnPluginSettings)(value, nextValue);\n    }\n\n    if (unifiedValue === uncheckedTemplate && unifiedNextValue === checkedTemplate) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    }\n\n    if (unifiedValue === checkedTemplate && unifiedNextValue === uncheckedTemplate) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n\n    return DO_NOT_SWAP;\n  };\n}\nexport var COLUMN_DATA_TYPE = 'checkbox';","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/columnSorting/sortFunction/checkbox.mjs"],"names":["DO_NOT_SWAP","FIRST_BEFORE_SECOND","FIRST_AFTER_SECOND","compareFunctionFactory","defaultCompareFunctionFactory","isEmpty","sortOrder","columnMeta","columnPluginSettings","checkedTemplate","uncheckedTemplate","sortEmptyCells","value","nextValue","isEmptyValue","isEmptyNextValue","unifiedValue","unifiedNextValue","isValueFromTemplate","isNextValueFromTemplate","COLUMN_DATA_TYPE"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,mBAAtB,EAA2CC,kBAA3C,QAAqE,0BAArE;AACA,SAASC,sBAAsB,IAAIC,6BAAnC,QAAwE,6BAAxE;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASF,sBAAT,CAAgCG,SAAhC,EAA2CC,UAA3C,EAAuDC,oBAAvD,EAA6E;AAClF,MAAIC,eAAe,GAAGF,UAAU,CAACE,eAAjC;AACA,MAAIC,iBAAiB,GAAGH,UAAU,CAACG,iBAAnC;AACA,MAAIC,cAAc,GAAGH,oBAAoB,CAACG,cAA1C;AACA,SAAO,UAAUC,KAAV,EAAiBC,SAAjB,EAA4B;AACjC,QAAIC,YAAY,GAAGT,OAAO,CAACO,KAAD,CAA1B;AACA,QAAIG,gBAAgB,GAAGV,OAAO,CAACQ,SAAD,CAA9B;AACA,QAAIG,YAAY,GAAGF,YAAY,GAAGJ,iBAAH,GAAuBE,KAAtD;AACA,QAAIK,gBAAgB,GAAGF,gBAAgB,GAAGL,iBAAH,GAAuBG,SAA9D;AACA,QAAIK,mBAAmB,GAAGF,YAAY,KAAKN,iBAAjB,IAAsCM,YAAY,KAAKP,eAAjF;AACA,QAAIU,uBAAuB,GAAGF,gBAAgB,KAAKP,iBAArB,IAA0CO,gBAAgB,KAAKR,eAA7F,CANiC,CAM6E;;AAE9G,QAAIE,cAAc,KAAK,KAAvB,EAA8B;AAC5B,UAAIG,YAAY,IAAIC,gBAAgB,KAAK,KAAzC,EAAgD;AAC9C,eAAOb,kBAAP;AACD;;AAED,UAAIY,YAAY,KAAK,KAAjB,IAA0BC,gBAA9B,EAAgD;AAC9C,eAAOd,mBAAP;AACD;AACF,KAhBgC,CAgB/B;;;AAGF,QAAIiB,mBAAmB,KAAK,KAAxB,IAAiCC,uBAArC,EAA8D;AAC5D,aAAOb,SAAS,KAAK,KAAd,GAAsBL,mBAAtB,GAA4CC,kBAAnD;AACD,KArBgC,CAqB/B;;;AAGF,QAAIgB,mBAAmB,IAAIC,uBAAuB,KAAK,KAAvD,EAA8D;AAC5D,aAAOb,SAAS,KAAK,KAAd,GAAsBJ,kBAAtB,GAA2CD,mBAAlD;AACD,KA1BgC,CA0B/B;;;AAGF,QAAIiB,mBAAmB,KAAK,KAAxB,IAAiCC,uBAAuB,KAAK,KAAjE,EAAwE;AACtE;AACA,aAAOf,6BAA6B,CAACE,SAAD,EAAYC,UAAZ,EAAwBC,oBAAxB,CAA7B,CAA2EI,KAA3E,EAAkFC,SAAlF,CAAP;AACD;;AAED,QAAIG,YAAY,KAAKN,iBAAjB,IAAsCO,gBAAgB,KAAKR,eAA/D,EAAgF;AAC9E,aAAOH,SAAS,KAAK,KAAd,GAAsBL,mBAAtB,GAA4CC,kBAAnD;AACD;;AAED,QAAIc,YAAY,KAAKP,eAAjB,IAAoCQ,gBAAgB,KAAKP,iBAA7D,EAAgF;AAC9E,aAAOJ,SAAS,KAAK,KAAd,GAAsBJ,kBAAtB,GAA2CD,mBAAlD;AACD;;AAED,WAAOD,WAAP;AACD,GA3CD;AA4CD;AACD,OAAO,IAAIoB,gBAAgB,GAAG,UAAvB","sourcesContent":["import { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\nimport { compareFunctionFactory as defaultCompareFunctionFactory } from \"../sortFunction/default.mjs\";\nimport { isEmpty } from \"../../../helpers/mixed.mjs\";\n/**\n * Checkbox sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {object} columnMeta Column meta object.\n * @param {object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\n\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  var checkedTemplate = columnMeta.checkedTemplate;\n  var uncheckedTemplate = columnMeta.uncheckedTemplate;\n  var sortEmptyCells = columnPluginSettings.sortEmptyCells;\n  return function (value, nextValue) {\n    var isEmptyValue = isEmpty(value);\n    var isEmptyNextValue = isEmpty(nextValue);\n    var unifiedValue = isEmptyValue ? uncheckedTemplate : value;\n    var unifiedNextValue = isEmptyNextValue ? uncheckedTemplate : nextValue;\n    var isValueFromTemplate = unifiedValue === uncheckedTemplate || unifiedValue === checkedTemplate;\n    var isNextValueFromTemplate = unifiedNextValue === uncheckedTemplate || unifiedNextValue === checkedTemplate; // As an empty cell we recognize cells with undefined, null and '' values.\n\n    if (sortEmptyCells === false) {\n      if (isEmptyValue && isEmptyNextValue === false) {\n        return FIRST_AFTER_SECOND;\n      }\n\n      if (isEmptyValue === false && isEmptyNextValue) {\n        return FIRST_BEFORE_SECOND;\n      }\n    } // 1st value === #BAD_VALUE#\n\n\n    if (isValueFromTemplate === false && isNextValueFromTemplate) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    } // 2nd value === #BAD_VALUE#\n\n\n    if (isValueFromTemplate && isNextValueFromTemplate === false) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    } // 1st value === #BAD_VALUE# && 2nd value === #BAD_VALUE#\n\n\n    if (isValueFromTemplate === false && isNextValueFromTemplate === false) {\n      // Sorting by values (not just by visual representation).\n      return defaultCompareFunctionFactory(sortOrder, columnMeta, columnPluginSettings)(value, nextValue);\n    }\n\n    if (unifiedValue === uncheckedTemplate && unifiedNextValue === checkedTemplate) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    }\n\n    if (unifiedValue === checkedTemplate && unifiedNextValue === uncheckedTemplate) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n\n    return DO_NOT_SWAP;\n  };\n}\nexport var COLUMN_DATA_TYPE = 'checkbox';"]},"metadata":{},"sourceType":"module"}