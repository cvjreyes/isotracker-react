{"ast":null,"code":"import _defineProperty from \"C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nexport function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\nexport function toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\nexport function convertLength(baseFontSize) {\n  return function (length, toUnit) {\n    var fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    var pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    } // Convert length in pixels to the output unit\n\n\n    var outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty(_ref) {\n  var size = _ref.size,\n      grid = _ref.grid;\n  var sizeBelow = size - size % grid;\n  var sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nexport function fontGrid(_ref2) {\n  var lineHeight = _ref2.lineHeight,\n      pixels = _ref2.pixels,\n      htmlFontSize = _ref2.htmlFontSize;\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\r\n * generate a responsive version of a given CSS property\r\n * @example\r\n * responsiveProperty({\r\n *   cssProperty: 'fontSize',\r\n *   min: 15,\r\n *   max: 20,\r\n *   unit: 'px',\r\n *   breakpoints: [300, 600],\r\n * })\r\n *\r\n * // this returns\r\n *\r\n * {\r\n *   fontSize: '15px',\r\n *   '@media (min-width:300px)': {\r\n *     fontSize: '17.5px',\r\n *   },\r\n *   '@media (min-width:600px)': {\r\n *     fontSize: '20px',\r\n *   },\r\n * }\r\n * @param {Object} params\r\n * @param {string} params.cssProperty - The CSS property to be made responsive\r\n * @param {number} params.min - The smallest value of the CSS property\r\n * @param {number} params.max - The largest value of the CSS property\r\n * @param {string} [params.unit] - The unit to be used for the CSS property\r\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\r\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\r\n * @returns {Object} responsive styles for {params.cssProperty}\r\n */\n\nexport function responsiveProperty(_ref3) {\n  var cssProperty = _ref3.cssProperty,\n      min = _ref3.min,\n      max = _ref3.max,\n      _ref3$unit = _ref3.unit,\n      unit = _ref3$unit === void 0 ? 'rem' : _ref3$unit,\n      _ref3$breakpoints = _ref3.breakpoints,\n      breakpoints = _ref3$breakpoints === void 0 ? [600, 900, 1200] : _ref3$breakpoints,\n      _ref3$transform = _ref3.transform,\n      transform = _ref3$transform === void 0 ? null : _ref3$transform;\n\n  var output = _defineProperty({}, cssProperty, \"\".concat(min).concat(unit));\n\n  var factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(function (breakpoint) {\n    var value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[\"@media (min-width:\".concat(breakpoint, \"px)\")] = _defineProperty({}, cssProperty, \"\".concat(Math.round(value * 10000) / 10000).concat(unit));\n  });\n  return output;\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/@mui/material/styles/cssUtils.js"],"names":["isUnitless","value","String","parseFloat","length","getUnit","input","match","toUnitless","convertLength","baseFontSize","toUnit","fromUnit","pxLength","outputLength","toFixed","alignProperty","size","grid","sizeBelow","sizeAbove","fontGrid","lineHeight","pixels","htmlFontSize","responsiveProperty","cssProperty","min","max","unit","breakpoints","transform","output","factor","forEach","breakpoint","Math","round"],"mappings":"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","sourcesContent":["export function isUnitless(value) {\r\n  return String(parseFloat(value)).length === String(value).length;\r\n} // Ported from Compass\r\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\r\n// Emulate the sass function \"unit\"\r\n\r\nexport function getUnit(input) {\r\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\r\n} // Emulate the sass function \"unitless\"\r\n\r\nexport function toUnitless(length) {\r\n  return parseFloat(length);\r\n} // Convert any CSS <length> or <percentage> value to any another.\r\n// From https://github.com/KyleAMathews/convert-css-length\r\n\r\nexport function convertLength(baseFontSize) {\r\n  return (length, toUnit) => {\r\n    const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\r\n\r\n    if (fromUnit === toUnit) {\r\n      return length;\r\n    } // Convert input length to pixels.\r\n\r\n\r\n    let pxLength = toUnitless(length);\r\n\r\n    if (fromUnit !== 'px') {\r\n      if (fromUnit === 'em') {\r\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\r\n      } else if (fromUnit === 'rem') {\r\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\r\n      }\r\n    } // Convert length in pixels to the output unit\r\n\r\n\r\n    let outputLength = pxLength;\r\n\r\n    if (toUnit !== 'px') {\r\n      if (toUnit === 'em') {\r\n        outputLength = pxLength / toUnitless(baseFontSize);\r\n      } else if (toUnit === 'rem') {\r\n        outputLength = pxLength / toUnitless(baseFontSize);\r\n      } else {\r\n        return length;\r\n      }\r\n    }\r\n\r\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\r\n  };\r\n}\r\nexport function alignProperty({\r\n  size,\r\n  grid\r\n}) {\r\n  const sizeBelow = size - size % grid;\r\n  const sizeAbove = sizeBelow + grid;\r\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\r\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\r\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\r\n// without changing the relative line height\r\n\r\nexport function fontGrid({\r\n  lineHeight,\r\n  pixels,\r\n  htmlFontSize\r\n}) {\r\n  return pixels / (lineHeight * htmlFontSize);\r\n}\r\n/**\r\n * generate a responsive version of a given CSS property\r\n * @example\r\n * responsiveProperty({\r\n *   cssProperty: 'fontSize',\r\n *   min: 15,\r\n *   max: 20,\r\n *   unit: 'px',\r\n *   breakpoints: [300, 600],\r\n * })\r\n *\r\n * // this returns\r\n *\r\n * {\r\n *   fontSize: '15px',\r\n *   '@media (min-width:300px)': {\r\n *     fontSize: '17.5px',\r\n *   },\r\n *   '@media (min-width:600px)': {\r\n *     fontSize: '20px',\r\n *   },\r\n * }\r\n * @param {Object} params\r\n * @param {string} params.cssProperty - The CSS property to be made responsive\r\n * @param {number} params.min - The smallest value of the CSS property\r\n * @param {number} params.max - The largest value of the CSS property\r\n * @param {string} [params.unit] - The unit to be used for the CSS property\r\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\r\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\r\n * @returns {Object} responsive styles for {params.cssProperty}\r\n */\r\n\r\nexport function responsiveProperty({\r\n  cssProperty,\r\n  min,\r\n  max,\r\n  unit = 'rem',\r\n  breakpoints = [600, 900, 1200],\r\n  transform = null\r\n}) {\r\n  const output = {\r\n    [cssProperty]: `${min}${unit}`\r\n  };\r\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\r\n  breakpoints.forEach(breakpoint => {\r\n    let value = min + factor * breakpoint;\r\n\r\n    if (transform !== null) {\r\n      value = transform(value);\r\n    }\r\n\r\n    output[`@media (min-width:${breakpoint}px)`] = {\r\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\r\n    };\r\n  });\r\n  return output;\r\n}"]},"metadata":{},"sourceType":"module"}