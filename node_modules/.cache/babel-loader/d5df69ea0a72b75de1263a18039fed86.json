{"ast":null,"code":"import CanvasJSObject from './canvasjs';\nimport TextBlock from './text_block';\nimport { extend } from '../helpers/utils';\n\nfunction Title(chart, options) {\n  Title.base.constructor.call(this, \"Title\", options, chart.theme);\n  this.chart = chart;\n  this.canvas = chart.canvas;\n  this.ctx = this.chart.ctx;\n\n  if (typeof this._options.fontSize === \"undefined\") {\n    this.fontSize = this.chart.getAutoFontSize(this.fontSize); //window.console.log(\"Chart Title fontSize: \" + this.fontSize);\n  }\n\n  this.width = null, //read only\n  this.height = null; //read only\n\n  this.bounds = {\n    x1: null,\n    y1: null,\n    x2: null,\n    y2: null\n  };\n}\n\nextend(Title, CanvasJSObject);\n\nTitle.prototype.render = function () {\n  if (!this.text) return;\n  var container = !this.dockInsidePlotArea ? this.chart : this.chart.plotArea;\n  var freespace = container.layoutManager.getFreeSpace();\n  var left = freespace.x1;\n  var top = freespace.y1;\n  var angle = 0;\n  var maxHeight = 0;\n  var containerMargin = 2; //Margin towards the container\n\n  var rightOffset = this.chart._menuButton && this.chart.exportEnabled && this.verticalAlign === \"top\" ? 22 : 0; //So that Title doesn't overlap menu button.\n\n  var textBlockHorizontalAlign;\n  var position;\n\n  if (this.verticalAlign === \"top\" || this.verticalAlign === \"bottom\") {\n    if (this.maxWidth === null) this.maxWidth = freespace.width - containerMargin * 2 - rightOffset * (this.horizontalAlign === \"center\" ? 2 : 1);\n    maxHeight = freespace.height * .5 - this.margin - containerMargin;\n    angle = 0;\n  } else if (this.verticalAlign === \"center\") {\n    if (this.horizontalAlign === \"left\" || this.horizontalAlign === \"right\") {\n      if (this.maxWidth === null) this.maxWidth = freespace.height - containerMargin * 2;\n      maxHeight = freespace.width * .5 - this.margin - containerMargin;\n    } else if (this.horizontalAlign === \"center\") {\n      if (this.maxWidth === null) this.maxWidth = freespace.width - containerMargin * 2;\n      maxHeight = freespace.height * .5 - containerMargin * 2;\n    }\n  }\n\n  if (!this.wrap) maxHeight = Math.min(maxHeight, Math.max(this.fontSize * 1.5, this.fontSize + this.padding * 2.5)); //console.log(this.maxWidth);\n\n  var textBlock = new TextBlock(this.ctx, {\n    fontSize: this.fontSize,\n    fontFamily: this.fontFamily,\n    fontColor: this.fontColor,\n    fontStyle: this.fontStyle,\n    fontWeight: this.fontWeight,\n    horizontalAlign: this.horizontalAlign,\n    verticalAlign: this.verticalAlign,\n    borderColor: this.borderColor,\n    borderThickness: this.borderThickness,\n    backgroundColor: this.backgroundColor,\n    maxWidth: this.maxWidth,\n    maxHeight: maxHeight,\n    cornerRadius: this.cornerRadius,\n    text: this.text,\n    padding: this.padding,\n    textBaseline: \"top\"\n  });\n  var textBlockSize = textBlock.measureText();\n\n  if (this.verticalAlign === \"top\" || this.verticalAlign === \"bottom\") {\n    if (this.verticalAlign === \"top\") {\n      top = freespace.y1 + containerMargin;\n      position = \"top\";\n    } else if (this.verticalAlign === \"bottom\") {\n      top = freespace.y2 - containerMargin - textBlockSize.height;\n      position = \"bottom\";\n    }\n\n    if (this.horizontalAlign === \"left\") {\n      left = freespace.x1 + containerMargin;\n    } else if (this.horizontalAlign === \"center\") {\n      left = freespace.x1 + freespace.width / 2 - textBlockSize.width / 2;\n    } else if (this.horizontalAlign === \"right\") {\n      left = freespace.x2 - containerMargin - textBlockSize.width - rightOffset;\n    }\n\n    textBlockHorizontalAlign = this.horizontalAlign;\n    this.width = textBlockSize.width;\n    this.height = textBlockSize.height;\n  } else if (this.verticalAlign === \"center\") {\n    if (this.horizontalAlign === \"left\") {\n      left = freespace.x1 + containerMargin;\n      top = freespace.y2 - containerMargin - (this.maxWidth / 2 - textBlockSize.width / 2);\n      angle = -90;\n      position = \"left\";\n      this.width = textBlockSize.height;\n      this.height = textBlockSize.width;\n    } else if (this.horizontalAlign === \"right\") {\n      left = freespace.x2 - containerMargin;\n      top = freespace.y1 + containerMargin + (this.maxWidth / 2 - textBlockSize.width / 2);\n      angle = 90;\n      position = \"right\";\n      this.width = textBlockSize.height;\n      this.height = textBlockSize.width;\n    } else if (this.horizontalAlign === \"center\") {\n      top = container.y1 + (container.height / 2 - textBlockSize.height / 2);\n      left = container.x1 + (container.width / 2 - textBlockSize.width / 2);\n      position = \"center\";\n      this.width = textBlockSize.width;\n      this.height = textBlockSize.height;\n    }\n\n    textBlockHorizontalAlign = \"center\";\n  }\n\n  textBlock.x = left;\n  textBlock.y = top;\n  textBlock.angle = angle;\n  textBlock.horizontalAlign = textBlockHorizontalAlign;\n  textBlock.render(true);\n  container.layoutManager.registerSpace(position, {\n    width: this.width + (position === \"left\" || position === \"right\" ? this.margin + containerMargin : 0),\n    height: this.height + (position === \"top\" || position === \"bottom\" ? this.margin + containerMargin : 0)\n  });\n  this.bounds = {\n    x1: left,\n    y1: top,\n    x2: left + this.width,\n    y2: top + this.height\n  };\n  this.ctx.textBaseline = \"top\";\n};\n\nexport default Title;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/canvasjs/src/core/title.js"],"names":["CanvasJSObject","TextBlock","extend","Title","chart","options","base","constructor","call","theme","canvas","ctx","_options","fontSize","getAutoFontSize","width","height","bounds","x1","y1","x2","y2","prototype","render","text","container","dockInsidePlotArea","plotArea","freespace","layoutManager","getFreeSpace","left","top","angle","maxHeight","containerMargin","rightOffset","_menuButton","exportEnabled","verticalAlign","textBlockHorizontalAlign","position","maxWidth","horizontalAlign","margin","wrap","Math","min","max","padding","textBlock","fontFamily","fontColor","fontStyle","fontWeight","borderColor","borderThickness","backgroundColor","cornerRadius","textBaseline","textBlockSize","measureText","x","y","registerSpace"],"mappings":"AACA,OAAOA,cAAP,MAA2B,YAA3B;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAAQC,MAAR,QAAqB,kBAArB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,OAAtB,EAA+B;AAC9BF,EAAAA,KAAK,CAACG,IAAN,CAAWC,WAAX,CAAuBC,IAAvB,CAA4B,IAA5B,EAAkC,OAAlC,EAA2CH,OAA3C,EAAoDD,KAAK,CAACK,KAA1D;AAEA,OAAKL,KAAL,GAAaA,KAAb;AACA,OAAKM,MAAL,GAAcN,KAAK,CAACM,MAApB;AACA,OAAKC,GAAL,GAAW,KAAKP,KAAL,CAAWO,GAAtB;;AAGA,MAAI,OAAQ,KAAKC,QAAL,CAAcC,QAAtB,KAAoC,WAAxC,EAAqD;AAEpD,SAAKA,QAAL,GAAgB,KAAKT,KAAL,CAAWU,eAAX,CAA2B,KAAKD,QAAhC,CAAhB,CAFoD,CAIpD;AACA;;AAED,OAAKE,KAAL,GAAa,IAAb,EAAkB;AAClB,OAAKC,MAAL,GAAc,IADd,CAf8B,CAgBZ;;AAClB,OAAKC,MAAL,GAAc;AACbC,IAAAA,EAAE,EAAE,IADS;AACHC,IAAAA,EAAE,EAAE,IADD;AACOC,IAAAA,EAAE,EAAE,IADX;AACiBC,IAAAA,EAAE,EAAE;AADrB,GAAd;AAGA;;AAEDnB,MAAM,CAACC,KAAD,EAAQH,cAAR,CAAN;;AAEAG,KAAK,CAACmB,SAAN,CAAgBC,MAAhB,GAAyB,YAAY;AAEpC,MAAI,CAAC,KAAKC,IAAV,EAAgB;AAEhB,MAAIC,SAAS,GAAI,CAAC,KAAKC,kBAAN,GAA2B,KAAKtB,KAAhC,GAAwC,KAAKA,KAAL,CAAWuB,QAApE;AACA,MAAIC,SAAS,GAAGH,SAAS,CAACI,aAAV,CAAwBC,YAAxB,EAAhB;AACA,MAAIC,IAAI,GAAGH,SAAS,CAACV,EAArB;AACA,MAAIc,GAAG,GAAGJ,SAAS,CAACT,EAApB;AACA,MAAIc,KAAK,GAAG,CAAZ;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,eAAe,GAAG,CAAtB,CAVoC,CAUX;;AACzB,MAAIC,WAAW,GAAG,KAAKhC,KAAL,CAAWiC,WAAX,IAA0B,KAAKjC,KAAL,CAAWkC,aAArC,IAAsD,KAAKC,aAAL,KAAuB,KAA7E,GAAqF,EAArF,GAA0F,CAA5G,CAXoC,CAW2E;;AAE/G,MAAIC,wBAAJ;AACA,MAAIC,QAAJ;;AAEA,MAAI,KAAKF,aAAL,KAAuB,KAAvB,IAAgC,KAAKA,aAAL,KAAuB,QAA3D,EAAqE;AACpE,QAAI,KAAKG,QAAL,KAAkB,IAAtB,EACC,KAAKA,QAAL,GAAgBd,SAAS,CAACb,KAAV,GAAkBoB,eAAe,GAAG,CAApC,GAAwCC,WAAW,IAAI,KAAKO,eAAL,KAAyB,QAAzB,GAAoC,CAApC,GAAwC,CAA5C,CAAnE;AAEDT,IAAAA,SAAS,GAAGN,SAAS,CAACZ,MAAV,GAAmB,EAAnB,GAAwB,KAAK4B,MAA7B,GAAsCT,eAAlD;AACAF,IAAAA,KAAK,GAAG,CAAR;AACA,GAND,MAOK,IAAI,KAAKM,aAAL,KAAuB,QAA3B,EAAqC;AAEzC,QAAI,KAAKI,eAAL,KAAyB,MAAzB,IAAmC,KAAKA,eAAL,KAAyB,OAAhE,EAAyE;AACxE,UAAI,KAAKD,QAAL,KAAkB,IAAtB,EACC,KAAKA,QAAL,GAAgBd,SAAS,CAACZ,MAAV,GAAmBmB,eAAe,GAAG,CAArD;AAEDD,MAAAA,SAAS,GAAGN,SAAS,CAACb,KAAV,GAAkB,EAAlB,GAAuB,KAAK6B,MAA5B,GAAqCT,eAAjD;AACA,KALD,MAKO,IAAI,KAAKQ,eAAL,KAAyB,QAA7B,EAAuC;AAC7C,UAAI,KAAKD,QAAL,KAAkB,IAAtB,EACC,KAAKA,QAAL,GAAgBd,SAAS,CAACb,KAAV,GAAkBoB,eAAe,GAAG,CAApD;AAEDD,MAAAA,SAAS,GAAGN,SAAS,CAACZ,MAAV,GAAmB,EAAnB,GAAwBmB,eAAe,GAAG,CAAtD;AACA;AACD;;AAED,MAAI,CAAC,KAAKU,IAAV,EACCX,SAAS,GAAGY,IAAI,CAACC,GAAL,CAASb,SAAT,EAAoBY,IAAI,CAACE,GAAL,CAAS,KAAKnC,QAAL,GAAgB,GAAzB,EAA8B,KAAKA,QAAL,GAAgB,KAAKoC,OAAL,GAAe,GAA7D,CAApB,CAAZ,CAvCmC,CAwCpC;;AAEA,MAAIC,SAAS,GAAG,IAAIjD,SAAJ,CAAc,KAAKU,GAAnB,EAAwB;AACvCE,IAAAA,QAAQ,EAAE,KAAKA,QADwB;AACdsC,IAAAA,UAAU,EAAE,KAAKA,UADH;AACeC,IAAAA,SAAS,EAAE,KAAKA,SAD/B;AAEvCC,IAAAA,SAAS,EAAE,KAAKA,SAFuB;AAEZC,IAAAA,UAAU,EAAE,KAAKA,UAFL;AAGvCX,IAAAA,eAAe,EAAE,KAAKA,eAHiB;AAGAJ,IAAAA,aAAa,EAAE,KAAKA,aAHpB;AAIvCgB,IAAAA,WAAW,EAAE,KAAKA,WAJqB;AAIRC,IAAAA,eAAe,EAAE,KAAKA,eAJd;AAKvCC,IAAAA,eAAe,EAAE,KAAKA,eALiB;AAMvCf,IAAAA,QAAQ,EAAE,KAAKA,QANwB;AAMdR,IAAAA,SAAS,EAAEA,SANG;AAOvCwB,IAAAA,YAAY,EAAE,KAAKA,YAPoB;AAQvClC,IAAAA,IAAI,EAAE,KAAKA,IAR4B;AASvCyB,IAAAA,OAAO,EAAE,KAAKA,OATyB;AAUvCU,IAAAA,YAAY,EAAE;AAVyB,GAAxB,CAAhB;AAaA,MAAIC,aAAa,GAAGV,SAAS,CAACW,WAAV,EAApB;;AAEA,MAAI,KAAKtB,aAAL,KAAuB,KAAvB,IAAgC,KAAKA,aAAL,KAAuB,QAA3D,EAAqE;AAEpE,QAAI,KAAKA,aAAL,KAAuB,KAA3B,EAAkC;AACjCP,MAAAA,GAAG,GAAGJ,SAAS,CAACT,EAAV,GAAegB,eAArB;AACAM,MAAAA,QAAQ,GAAG,KAAX;AACA,KAHD,MAIK,IAAI,KAAKF,aAAL,KAAuB,QAA3B,EAAqC;AACzCP,MAAAA,GAAG,GAAGJ,SAAS,CAACP,EAAV,GAAec,eAAf,GAAiCyB,aAAa,CAAC5C,MAArD;AACAyB,MAAAA,QAAQ,GAAG,QAAX;AACA;;AAED,QAAI,KAAKE,eAAL,KAAyB,MAA7B,EAAqC;AACpCZ,MAAAA,IAAI,GAAGH,SAAS,CAACV,EAAV,GAAeiB,eAAtB;AACA,KAFD,MAGK,IAAI,KAAKQ,eAAL,KAAyB,QAA7B,EAAuC;AAC3CZ,MAAAA,IAAI,GAAGH,SAAS,CAACV,EAAV,GAAeU,SAAS,CAACb,KAAV,GAAkB,CAAjC,GAAqC6C,aAAa,CAAC7C,KAAd,GAAsB,CAAlE;AACA,KAFI,MAGA,IAAI,KAAK4B,eAAL,KAAyB,OAA7B,EAAsC;AAC1CZ,MAAAA,IAAI,GAAGH,SAAS,CAACR,EAAV,GAAee,eAAf,GAAiCyB,aAAa,CAAC7C,KAA/C,GAAuDqB,WAA9D;AACA;;AAEDI,IAAAA,wBAAwB,GAAG,KAAKG,eAAhC;AAEA,SAAK5B,KAAL,GAAa6C,aAAa,CAAC7C,KAA3B;AACA,SAAKC,MAAL,GAAc4C,aAAa,CAAC5C,MAA5B;AACA,GAzBD,MA0BK,IAAI,KAAKuB,aAAL,KAAuB,QAA3B,EAAqC;AAEzC,QAAI,KAAKI,eAAL,KAAyB,MAA7B,EAAqC;AAEpCZ,MAAAA,IAAI,GAAGH,SAAS,CAACV,EAAV,GAAeiB,eAAtB;AACAH,MAAAA,GAAG,GAAGJ,SAAS,CAACP,EAAV,GAAec,eAAf,IAAkC,KAAKO,QAAL,GAAgB,CAAhB,GAAoBkB,aAAa,CAAC7C,KAAd,GAAsB,CAA5E,CAAN;AACAkB,MAAAA,KAAK,GAAG,CAAC,EAAT;AAEAQ,MAAAA,QAAQ,GAAG,MAAX;AACA,WAAK1B,KAAL,GAAa6C,aAAa,CAAC5C,MAA3B;AACA,WAAKA,MAAL,GAAc4C,aAAa,CAAC7C,KAA5B;AACA,KATD,MAUK,IAAI,KAAK4B,eAAL,KAAyB,OAA7B,EAAsC;AAC1CZ,MAAAA,IAAI,GAAGH,SAAS,CAACR,EAAV,GAAee,eAAtB;AACAH,MAAAA,GAAG,GAAGJ,SAAS,CAACT,EAAV,GAAegB,eAAf,IAAkC,KAAKO,QAAL,GAAgB,CAAhB,GAAoBkB,aAAa,CAAC7C,KAAd,GAAsB,CAA5E,CAAN;AACAkB,MAAAA,KAAK,GAAG,EAAR;AAEAQ,MAAAA,QAAQ,GAAG,OAAX;AACA,WAAK1B,KAAL,GAAa6C,aAAa,CAAC5C,MAA3B;AACA,WAAKA,MAAL,GAAc4C,aAAa,CAAC7C,KAA5B;AACA,KARI,MASA,IAAI,KAAK4B,eAAL,KAAyB,QAA7B,EAAuC;AAC3CX,MAAAA,GAAG,GAAGP,SAAS,CAACN,EAAV,IAAgBM,SAAS,CAACT,MAAV,GAAmB,CAAnB,GAAuB4C,aAAa,CAAC5C,MAAd,GAAuB,CAA9D,CAAN;AACAe,MAAAA,IAAI,GAAGN,SAAS,CAACP,EAAV,IAAgBO,SAAS,CAACV,KAAV,GAAkB,CAAlB,GAAsB6C,aAAa,CAAC7C,KAAd,GAAsB,CAA5D,CAAP;AAEA0B,MAAAA,QAAQ,GAAG,QAAX;AACA,WAAK1B,KAAL,GAAa6C,aAAa,CAAC7C,KAA3B;AACA,WAAKC,MAAL,GAAc4C,aAAa,CAAC5C,MAA5B;AACA;;AAEDwB,IAAAA,wBAAwB,GAAG,QAA3B;AACA;;AAEDU,EAAAA,SAAS,CAACY,CAAV,GAAc/B,IAAd;AACAmB,EAAAA,SAAS,CAACa,CAAV,GAAc/B,GAAd;AACAkB,EAAAA,SAAS,CAACjB,KAAV,GAAkBA,KAAlB;AACAiB,EAAAA,SAAS,CAACP,eAAV,GAA4BH,wBAA5B;AACAU,EAAAA,SAAS,CAAC3B,MAAV,CAAiB,IAAjB;AAEAE,EAAAA,SAAS,CAACI,aAAV,CAAwBmC,aAAxB,CAAsCvB,QAAtC,EAAgD;AAC/C1B,IAAAA,KAAK,EAAE,KAAKA,KAAL,IAAc0B,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,OAApC,GAA8C,KAAKG,MAAL,GAAcT,eAA5D,GAA8E,CAA5F,CADwC;AAE/CnB,IAAAA,MAAM,EAAE,KAAKA,MAAL,IAAeyB,QAAQ,KAAK,KAAb,IAAsBA,QAAQ,KAAK,QAAnC,GAA8C,KAAKG,MAAL,GAAcT,eAA5D,GAA8E,CAA7F;AAFuC,GAAhD;AAKA,OAAKlB,MAAL,GAAc;AACbC,IAAAA,EAAE,EAAEa,IADS;AACHZ,IAAAA,EAAE,EAAEa,GADD;AACMZ,IAAAA,EAAE,EAAEW,IAAI,GAAG,KAAKhB,KADtB;AAC6BM,IAAAA,EAAE,EAAEW,GAAG,GAAG,KAAKhB;AAD5C,GAAd;AAIA,OAAKL,GAAL,CAASgD,YAAT,GAAwB,KAAxB;AACA,CApID;;AAsIA,eAAexD,KAAf","sourcesContent":["\r\nimport CanvasJSObject from './canvasjs';\r\nimport TextBlock from './text_block';\r\nimport {extend} from '../helpers/utils';\r\n\r\nfunction Title(chart, options) {\r\n\tTitle.base.constructor.call(this, \"Title\", options, chart.theme);\r\n\r\n\tthis.chart = chart;\r\n\tthis.canvas = chart.canvas;\r\n\tthis.ctx = this.chart.ctx;\r\n\r\n\r\n\tif (typeof (this._options.fontSize) === \"undefined\") {\r\n\r\n\t\tthis.fontSize = this.chart.getAutoFontSize(this.fontSize);\r\n\r\n\t\t//window.console.log(\"Chart Title fontSize: \" + this.fontSize);\r\n\t}\r\n\r\n\tthis.width = null,//read only\r\n\tthis.height = null//read only\r\n\tthis.bounds = {\r\n\t\tx1: null, y1: null, x2: null, y2: null\r\n\t};\r\n}\r\n\r\nextend(Title, CanvasJSObject);\r\n\r\nTitle.prototype.render = function () {\r\n\r\n\tif (!this.text) return;\r\n\r\n\tvar container = (!this.dockInsidePlotArea ? this.chart : this.chart.plotArea);\r\n\tvar freespace = container.layoutManager.getFreeSpace();\r\n\tvar left = freespace.x1;\r\n\tvar top = freespace.y1;\r\n\tvar angle = 0;\r\n\tvar maxHeight = 0;\r\n\tvar containerMargin = 2; //Margin towards the container\r\n\tvar rightOffset = this.chart._menuButton && this.chart.exportEnabled && this.verticalAlign === \"top\" ? 22 : 0; //So that Title doesn't overlap menu button.\r\n\r\n\tvar textBlockHorizontalAlign;\r\n\tvar position;\r\n\r\n\tif (this.verticalAlign === \"top\" || this.verticalAlign === \"bottom\") {\r\n\t\tif (this.maxWidth === null)\r\n\t\t\tthis.maxWidth = freespace.width - containerMargin * 2 - rightOffset * (this.horizontalAlign === \"center\" ? 2 : 1);\r\n\r\n\t\tmaxHeight = freespace.height * .5 - this.margin - containerMargin;\r\n\t\tangle = 0;\r\n\t}\r\n\telse if (this.verticalAlign === \"center\") {\r\n\r\n\t\tif (this.horizontalAlign === \"left\" || this.horizontalAlign === \"right\") {\r\n\t\t\tif (this.maxWidth === null)\r\n\t\t\t\tthis.maxWidth = freespace.height - containerMargin * 2;\r\n\r\n\t\t\tmaxHeight = freespace.width * .5 - this.margin - containerMargin;\r\n\t\t} else if (this.horizontalAlign === \"center\") {\r\n\t\t\tif (this.maxWidth === null)\r\n\t\t\t\tthis.maxWidth = freespace.width - containerMargin * 2;\r\n\r\n\t\t\tmaxHeight = freespace.height * .5 - containerMargin * 2;\r\n\t\t}\r\n\t}\r\n\r\n\tif (!this.wrap)\r\n\t\tmaxHeight = Math.min(maxHeight, Math.max(this.fontSize * 1.5, this.fontSize + this.padding * 2.5));\r\n\t//console.log(this.maxWidth);\r\n\r\n\tvar textBlock = new TextBlock(this.ctx, {\r\n\t\tfontSize: this.fontSize, fontFamily: this.fontFamily, fontColor: this.fontColor,\r\n\t\tfontStyle: this.fontStyle, fontWeight: this.fontWeight,\r\n\t\thorizontalAlign: this.horizontalAlign, verticalAlign: this.verticalAlign,\r\n\t\tborderColor: this.borderColor, borderThickness: this.borderThickness,\r\n\t\tbackgroundColor: this.backgroundColor,\r\n\t\tmaxWidth: this.maxWidth, maxHeight: maxHeight,\r\n\t\tcornerRadius: this.cornerRadius,\r\n\t\ttext: this.text,\r\n\t\tpadding: this.padding,\r\n\t\ttextBaseline: \"top\"\r\n\t});\r\n\r\n\tvar textBlockSize = textBlock.measureText();\r\n\r\n\tif (this.verticalAlign === \"top\" || this.verticalAlign === \"bottom\") {\r\n\r\n\t\tif (this.verticalAlign === \"top\") {\r\n\t\t\ttop = freespace.y1 + containerMargin;\r\n\t\t\tposition = \"top\";\r\n\t\t}\r\n\t\telse if (this.verticalAlign === \"bottom\") {\r\n\t\t\ttop = freespace.y2 - containerMargin - textBlockSize.height;\r\n\t\t\tposition = \"bottom\";\r\n\t\t}\r\n\r\n\t\tif (this.horizontalAlign === \"left\") {\r\n\t\t\tleft = freespace.x1 + containerMargin;\r\n\t\t}\r\n\t\telse if (this.horizontalAlign === \"center\") {\r\n\t\t\tleft = freespace.x1 + freespace.width / 2 - textBlockSize.width / 2;\r\n\t\t}\r\n\t\telse if (this.horizontalAlign === \"right\") {\r\n\t\t\tleft = freespace.x2 - containerMargin - textBlockSize.width - rightOffset;\r\n\t\t}\r\n\r\n\t\ttextBlockHorizontalAlign = this.horizontalAlign;\r\n\r\n\t\tthis.width = textBlockSize.width;\r\n\t\tthis.height = textBlockSize.height;\r\n\t}\r\n\telse if (this.verticalAlign === \"center\") {\r\n\r\n\t\tif (this.horizontalAlign === \"left\") {\r\n\r\n\t\t\tleft = freespace.x1 + containerMargin;\r\n\t\t\ttop = freespace.y2 - containerMargin - (this.maxWidth / 2 - textBlockSize.width / 2);\r\n\t\t\tangle = -90;\r\n\r\n\t\t\tposition = \"left\";\r\n\t\t\tthis.width = textBlockSize.height;\r\n\t\t\tthis.height = textBlockSize.width;\r\n\t\t}\r\n\t\telse if (this.horizontalAlign === \"right\") {\r\n\t\t\tleft = freespace.x2 - containerMargin;\r\n\t\t\ttop = freespace.y1 + containerMargin + (this.maxWidth / 2 - textBlockSize.width / 2);\r\n\t\t\tangle = 90;\r\n\r\n\t\t\tposition = \"right\";\r\n\t\t\tthis.width = textBlockSize.height;\r\n\t\t\tthis.height = textBlockSize.width;\r\n\t\t}\r\n\t\telse if (this.horizontalAlign === \"center\") {\r\n\t\t\ttop = container.y1 + (container.height / 2 - textBlockSize.height / 2);\r\n\t\t\tleft = container.x1 + (container.width / 2 - textBlockSize.width / 2);\r\n\r\n\t\t\tposition = \"center\";\r\n\t\t\tthis.width = textBlockSize.width;\r\n\t\t\tthis.height = textBlockSize.height;\r\n\t\t}\r\n\r\n\t\ttextBlockHorizontalAlign = \"center\";\r\n\t}\r\n\r\n\ttextBlock.x = left;\r\n\ttextBlock.y = top;\r\n\ttextBlock.angle = angle;\r\n\ttextBlock.horizontalAlign = textBlockHorizontalAlign;\r\n\ttextBlock.render(true);\r\n\r\n\tcontainer.layoutManager.registerSpace(position, {\r\n\t\twidth: this.width + (position === \"left\" || position === \"right\" ? this.margin + containerMargin : 0),\r\n\t\theight: this.height + (position === \"top\" || position === \"bottom\" ? this.margin + containerMargin : 0)\r\n\t});\r\n\r\n\tthis.bounds = {\r\n\t\tx1: left, y1: top, x2: left + this.width, y2: top + this.height\r\n\t};\r\n\r\n\tthis.ctx.textBaseline = \"top\";\r\n}\r\n\r\nexport default Title;\r\n"]},"metadata":{},"sourceType":"module"}