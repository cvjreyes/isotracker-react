{"ast":null,"code":"import DataSeries from './data_series';\nimport CanvasJSObject from './canvasjs';\nimport TextBlock from './text_block';\nimport RenderHelper from '../helpers/render';\nimport { extend, getFontHeightInPixels } from '../helpers/utils';\n\nfunction Legend(chart, options, theme) {\n  Legend.base.constructor.call(this, \"Legend\", options, theme);\n  this.chart = chart;\n  this.canvas = chart.canvas;\n  this.ctx = this.chart.ctx;\n  this.ghostCtx = this.chart._eventManager.ghostCtx;\n  this.items = [];\n  this.width = 0, //this.fontSize = 12,\n  this.height = 0, this.orientation = null, this.dataSeries = [];\n  this.bounds = {\n    x1: null,\n    y1: null,\n    x2: null,\n    y2: null\n  };\n\n  if (typeof this._options.fontSize === \"undefined\") {\n    this.fontSize = this.chart.getAutoFontSize(this.fontSize); //window.console.log(\"fontSize: \" + this.fontSize);\n  }\n\n  this.lineHeight = getFontHeightInPixels(this.fontFamily, this.fontSize, this.fontWeight);\n  this.horizontalSpacing = this.fontSize;\n}\n\nextend(Legend, CanvasJSObject);\n\nLegend.prototype.render = function () {\n  var container = !this.dockInsidePlotArea ? this.chart : this.chart.plotArea;\n  var freeSpace = container.layoutManager.getFreeSpace();\n  var position = null;\n  var top = 0;\n  var left = 0;\n  var maxWidth = 0;\n  var maxHeight = 0;\n  var itemMargin = 5;\n  var items = [];\n  var rows = []; //this.ctx.font = getFontString(\"\", this, null);\n  //this.ctx.fontColor = this.fontColor;\n\n  if (this.verticalAlign === \"top\" || this.verticalAlign === \"bottom\") {\n    this.orientation = \"horizontal\";\n    position = this.verticalAlign;\n    maxWidth = this.maxWidth !== null ? this.maxWidth : freeSpace.width * .7;\n    maxHeight = this.maxHeight !== null ? this.maxHeight : freeSpace.height * .5;\n  } else if (this.verticalAlign === \"center\") {\n    this.orientation = \"vertical\";\n    position = this.horizontalAlign;\n    maxWidth = this.maxWidth !== null ? this.maxWidth : freeSpace.width * .5;\n    maxHeight = this.maxHeight !== null ? this.maxHeight : freeSpace.height * .7;\n  }\n\n  for (var i = 0; i < this.dataSeries.length; i++) {\n    var dataSeries = this.dataSeries[i];\n\n    if (dataSeries.type !== \"pie\" && dataSeries.type !== \"doughnut\" && dataSeries.type !== \"funnel\") {\n      var markerType = dataSeries.legendMarkerType ? dataSeries.legendMarkerType : (dataSeries.type === \"line\" || dataSeries.type === \"stepLine\" || dataSeries.type === \"spline\" || dataSeries.type === \"scatter\" || dataSeries.type === \"bubble\") && dataSeries.markerType ? dataSeries.markerType : DataSeries.getDefaultLegendMarker(dataSeries.type);\n      var legendText = dataSeries.legendText ? dataSeries.legendText : this.itemTextFormatter ? this.itemTextFormatter({\n        chart: this.chart,\n        legend: this._options,\n        dataSeries: dataSeries,\n        dataPoint: null\n      }) : dataSeries.name;\n      var markerColor = dataSeries.legendMarkerColor ? dataSeries.legendMarkerColor : dataSeries.markerColor ? dataSeries.markerColor : dataSeries._colorSet[0];\n      var markerSize = !dataSeries.markerSize && (dataSeries.type === \"line\" || dataSeries.type === \"stepLine\" || dataSeries.type === \"spline\") ? 0 : this.lineHeight * .6;\n      var markerBorderColor = dataSeries.legendMarkerBorderColor ? dataSeries.legendMarkerBorderColor : dataSeries.markerBorderColor;\n      var markerBorderThickness = dataSeries.legendMarkerBorderThickness ? dataSeries.legendMarkerBorderThickness : dataSeries.markerBorderThickness ? Math.max(1, Math.round(markerSize * .2)) : 0;\n      var lineColor = dataSeries._colorSet[0];\n      legendText = this.chart.replaceKeywordsWithValue(legendText, dataSeries.dataPoints[0], dataSeries, i);\n      var item = {\n        markerType: markerType,\n        markerColor: markerColor,\n        text: legendText,\n        textBlock: null,\n        chartType: dataSeries.type,\n        markerSize: markerSize,\n        lineColor: dataSeries._colorSet[0],\n        dataSeriesIndex: dataSeries.index,\n        dataPointIndex: null,\n        markerBorderColor: markerBorderColor,\n        markerBorderThickness: markerBorderThickness\n      };\n      items.push(item);\n    } else {\n      for (var dataPointIndex = 0; dataPointIndex < dataSeries.dataPoints.length; dataPointIndex++) {\n        var dataPoint = dataSeries.dataPoints[dataPointIndex];\n        var markerType = dataPoint.legendMarkerType ? dataPoint.legendMarkerType : dataSeries.legendMarkerType ? dataSeries.legendMarkerType : DataSeries.getDefaultLegendMarker(dataSeries.type);\n        var legendText = dataPoint.legendText ? dataPoint.legendText : dataSeries.legendText ? dataSeries.legendText : this.itemTextFormatter ? this.itemTextFormatter({\n          chart: this.chart,\n          legend: this._options,\n          dataSeries: dataSeries,\n          dataPoint: dataPoint\n        }) : dataPoint.name ? dataPoint.name : \"DataPoint: \" + (dataPointIndex + 1);\n        var markerColor = dataPoint.legendMarkerColor ? dataPoint.legendMarkerColor : dataSeries.legendMarkerColor ? dataSeries.legendMarkerColor : dataPoint.color ? dataPoint.color : dataSeries.color ? dataSeries.color : dataSeries._colorSet[dataPointIndex % dataSeries._colorSet.length];\n        var markerSize = this.lineHeight * .6;\n        var markerBorderColor = dataPoint.legendMarkerBorderColor ? dataPoint.legendMarkerBorderColor : dataSeries.legendMarkerBorderColor ? dataSeries.legendMarkerBorderColor : dataPoint.markerBorderColor ? dataPoint.markerBorderColor : dataSeries.markerBorderColor;\n        var markerBorderThickness = dataPoint.legendMarkerBorderThickness ? dataPoint.legendMarkerBorderThickness : dataSeries.legendMarkerBorderThickness ? dataSeries.legendMarkerBorderThickness : dataPoint.markerBorderThickness || dataSeries.markerBorderThickness ? Math.max(1, Math.round(markerSize * .2)) : 0;\n        legendText = this.chart.replaceKeywordsWithValue(legendText, dataPoint, dataSeries, dataPointIndex);\n        var item = {\n          markerType: markerType,\n          markerColor: markerColor,\n          text: legendText,\n          textBlock: null,\n          chartType: dataSeries.type,\n          markerSize: markerSize,\n          dataSeriesIndex: i,\n          dataPointIndex: dataPointIndex,\n          markerBorderColor: markerBorderColor,\n          markerBorderThickness: markerBorderThickness\n        };\n\n        if (dataPoint.showInLegend || dataSeries.showInLegend && dataPoint.showInLegend !== false) {\n          items.push(item);\n        }\n      }\n    }\n\n    item = null;\n  }\n\n  if (this.reversed === true) {\n    items.reverse();\n  } // Find out the required width and height of Legend and position the items relative to the container\n\n\n  if (items.length > 0) {\n    var row = null;\n    var rowIndex = 0; // required for vertical orientation\n\n    var textMaxWidth = 0;\n    var columnHeight = 0;\n\n    if (this.itemWidth !== null) {\n      if (this.itemMaxWidth !== null) {\n        textMaxWidth = Math.min(this.itemWidth, this.itemMaxWidth, maxWidth);\n      } else {\n        textMaxWidth = Math.min(this.itemWidth, maxWidth);\n      }\n    } else {\n      if (this.itemMaxWidth !== null) {\n        textMaxWidth = Math.min(this.itemMaxWidth, maxWidth);\n      } else {\n        textMaxWidth = maxWidth;\n      }\n    }\n\n    markerSize = markerSize === 0 ? this.lineHeight * .6 : markerSize;\n    textMaxWidth = textMaxWidth - (markerSize + this.horizontalSpacing * .1);\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n\n      if (item.chartType === \"line\" || item.chartType === \"spline\" || item.chartType === \"stepLine\") {\n        textMaxWidth = textMaxWidth - 2 * (this.lineHeight * .1);\n      }\n\n      if (maxHeight <= 0 || typeof maxHeight === \"undefined\" || textMaxWidth <= 0 || typeof textMaxWidth === \"undefined\") {\n        continue;\n      }\n\n      if (this.orientation === \"horizontal\") {\n        item.textBlock = new TextBlock(this.ctx, {\n          x: 0,\n          y: 0,\n          //TBI\n          maxWidth: textMaxWidth,\n          maxHeight: this.itemWrap ? maxHeight : this.lineHeight,\n          //TBI: FontSize\n          angle: 0,\n          text: item.text,\n          horizontalAlign: \"left\",\n          //left, center, right\n          fontSize: this.fontSize,\n          //in pixels\n          fontFamily: this.fontFamily,\n          fontWeight: this.fontWeight,\n          //normal, bold, bolder, lighter,\n          fontColor: this.fontColor,\n          fontStyle: this.fontStyle,\n          // normal, italic, oblique\n          textBaseline: \"top\"\n        });\n        item.textBlock.measureText();\n\n        if (this.itemWidth !== null) {\n          item.textBlock.width = this.itemWidth - (markerSize + this.horizontalSpacing * .1 + (item.chartType === \"line\" || item.chartType === \"spline\" || item.chartType === \"stepLine\" ? 2 * (this.lineHeight * .1) : 0));\n        }\n\n        if (!row || row.width + Math.round(item.textBlock.width + this.horizontalSpacing * .1 + markerSize + (row.width === 0 ? 0 : this.horizontalSpacing) + (item.chartType === \"line\" || item.chartType === \"spline\" || item.chartType === \"stepLine\" ? 2 * (this.lineHeight * .1) : 0)) > maxWidth) {\n          row = {\n            items: [],\n            width: 0\n          };\n          rows.push(row);\n          this.height += columnHeight;\n          columnHeight = 0;\n        }\n\n        columnHeight = Math.max(columnHeight, item.textBlock.height);\n        item.textBlock.x = row.width;\n        item.textBlock.y = 0;\n        row.width += Math.round(item.textBlock.width + this.horizontalSpacing * .1 + markerSize + (row.width === 0 ? 0 : this.horizontalSpacing) + (item.chartType === \"line\" || item.chartType === \"spline\" || item.chartType === \"stepLine\" ? 2 * (this.lineHeight * .1) : 0));\n        row.items.push(item);\n        this.width = Math.max(row.width, this.width);\n      } else {\n        item.textBlock = new TextBlock(this.ctx, {\n          x: 0,\n          y: 0,\n          //TBI\n          maxWidth: textMaxWidth,\n          maxHeight: this.itemWrap === true ? maxHeight : this.fontSize * 1.5,\n          //TBI: FontSize\n          angle: 0,\n          text: item.text,\n          horizontalAlign: \"left\",\n          //left, center, right\n          fontSize: this.fontSize,\n          //in pixels\n          fontFamily: this.fontFamily,\n          fontWeight: this.fontWeight,\n          //normal, bold, bolder, lighter,\n          fontColor: this.fontColor,\n          fontStyle: this.fontStyle,\n          // normal, italic, oblique\n          textBaseline: \"top\"\n        });\n        item.textBlock.measureText();\n\n        if (this.itemWidth !== null) {\n          item.textBlock.width = this.itemWidth - (markerSize + this.horizontalSpacing * .1 + (item.chartType === \"line\" || item.chartType === \"spline\" || item.chartType === \"stepLine\" ? 2 * (this.lineHeight * .1) : 0));\n        }\n\n        if (this.height <= maxHeight) {\n          row = {\n            items: [],\n            width: 0\n          };\n          rows.push(row);\n        } else {\n          row = rows[rowIndex];\n          rowIndex = (rowIndex + 1) % rows.length;\n        }\n\n        this.height += item.textBlock.height;\n        item.textBlock.x = row.width; // relative to the row\n\n        item.textBlock.y = 0; // relative to the row\n\n        row.width += Math.round(item.textBlock.width + this.horizontalSpacing * .1 + markerSize + (row.width === 0 ? 0 : this.horizontalSpacing) + (item.chartType === \"line\" || item.chartType === \"spline\" || item.chartType === \"stepLine\" ? 2 * (this.lineHeight * .1) : 0));\n        row.items.push(item);\n        this.width = Math.max(row.width, this.width);\n      }\n    }\n\n    if (this.itemWrap === false) {\n      this.height = rows.length * this.lineHeight;\n    } else {\n      this.height += columnHeight;\n    }\n\n    this.height = Math.min(maxHeight, this.height);\n    this.width = Math.min(maxWidth, this.width);\n  }\n\n  if (this.verticalAlign === \"top\") {\n    if (this.horizontalAlign === \"left\") left = freeSpace.x1;else if (this.horizontalAlign === \"right\") left = freeSpace.x2 - this.width;else left = freeSpace.x1 + freeSpace.width / 2 - this.width / 2;\n    top = freeSpace.y1;\n  } else if (this.verticalAlign === \"center\") {\n    if (this.horizontalAlign === \"left\") left = freeSpace.x1;else if (this.horizontalAlign === \"right\") left = freeSpace.x2 - this.width;else left = freeSpace.x1 + freeSpace.width / 2 - this.width / 2;\n    top = freeSpace.y1 + freeSpace.height / 2 - this.height / 2;\n  } else if (this.verticalAlign === \"bottom\") {\n    if (this.horizontalAlign === \"left\") left = freeSpace.x1;else if (this.horizontalAlign === \"right\") left = freeSpace.x2 - this.width;else left = freeSpace.x1 + freeSpace.width / 2 - this.width / 2;\n    top = freeSpace.y2 - this.height;\n  }\n\n  this.items = items; //Assign ids to all legendItems\n\n  for (var i = 0; i < this.items.length; i++) {\n    var item = items[i];\n    item.id = ++this.chart._eventManager.lastObjectId;\n    this.chart._eventManager.objectMap[item.id] = {\n      id: item.id,\n      objectType: \"legendItem\",\n      legendItemIndex: i,\n      dataSeriesIndex: item.dataSeriesIndex,\n      dataPointIndex: item.dataPointIndex\n    }; //delete item.textBlock;// Not Required anymore\n  }\n\n  var rowHeight = 0;\n\n  for (var i = 0; i < rows.length; i++) {\n    var row = rows[i];\n    var columnHeight = 0;\n\n    for (var itemIndex = 0; itemIndex < row.items.length; itemIndex++) {\n      var item = row.items[itemIndex];\n      var itemX = item.textBlock.x + left + (itemIndex === 0 ? markerSize * .2 : this.horizontalSpacing);\n      var itemY = top + rowHeight;\n      var ghostX = itemX;\n      if (!this.chart.data[item.dataSeriesIndex].visible) this.ctx.globalAlpha = .5;\n      this.ctx.save();\n      this.ctx.rect(left, top, maxWidth, maxHeight);\n      this.ctx.clip();\n\n      if (item.chartType === \"line\" || item.chartType === \"stepLine\" || item.chartType === \"spline\") {\n        this.ctx.strokeStyle = item.lineColor;\n        this.ctx.lineWidth = Math.ceil(this.lineHeight / 8);\n        this.ctx.beginPath();\n        this.ctx.moveTo(itemX - this.lineHeight * .1, itemY + this.lineHeight / 2);\n        this.ctx.lineTo(itemX + this.lineHeight * .7, itemY + this.lineHeight / 2);\n        this.ctx.stroke();\n        ghostX -= this.lineHeight * .1;\n      }\n\n      RenderHelper.drawMarker(itemX + markerSize / 2, itemY + this.lineHeight / 2, this.ctx, item.markerType, item.markerSize, item.markerColor, item.markerBorderColor, item.markerBorderThickness);\n      item.textBlock.x = itemX + this.horizontalSpacing * .1 + markerSize;\n\n      if (item.chartType === \"line\" || item.chartType === \"stepLine\" || item.chartType === \"spline\") {\n        item.textBlock.x = item.textBlock.x + this.lineHeight * .1;\n      }\n\n      item.textBlock.y = itemY;\n      item.textBlock.render(true);\n      this.ctx.restore();\n\n      if (itemIndex > 0) {\n        columnHeight = Math.max(columnHeight, item.textBlock.height);\n      } else {\n        columnHeight = item.textBlock.height;\n      }\n\n      if (!this.chart.data[item.dataSeriesIndex].visible) this.ctx.globalAlpha = 1;\n      var hexColor = intToHexColorString(item.id);\n      this.ghostCtx.fillStyle = hexColor;\n      this.ghostCtx.beginPath();\n      this.ghostCtx.fillRect(ghostX, item.textBlock.y, item.textBlock.x + item.textBlock.width - ghostX, item.textBlock.height);\n      item.x1 = this.chart._eventManager.objectMap[item.id].x1 = ghostX;\n      item.y1 = this.chart._eventManager.objectMap[item.id].y1 = item.textBlock.y;\n      item.x2 = this.chart._eventManager.objectMap[item.id].x2 = item.textBlock.x + item.textBlock.width;\n      item.y2 = this.chart._eventManager.objectMap[item.id].y2 = item.textBlock.y + item.textBlock.height;\n    }\n\n    rowHeight = rowHeight + columnHeight;\n  } //this.ctx.beginPath();\n  //this.ctx.lineWidth = 2;\n  //this.ctx.strokeStyle = \"red\";\n  //this.ctx.rect(left, top, this.width, this.height);\n  //this.ctx.stroke();\n\n\n  container.layoutManager.registerSpace(position, {\n    width: this.width + 2 + 2,\n    height: this.height + 5 + 5\n  });\n  this.bounds = {\n    x1: left,\n    y1: top,\n    x2: left + this.width,\n    y2: top + this.height\n  };\n};\n\nexport default Legend;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/canvasjs/src/core/legend.js"],"names":["DataSeries","CanvasJSObject","TextBlock","RenderHelper","extend","getFontHeightInPixels","Legend","chart","options","theme","base","constructor","call","canvas","ctx","ghostCtx","_eventManager","items","width","height","orientation","dataSeries","bounds","x1","y1","x2","y2","_options","fontSize","getAutoFontSize","lineHeight","fontFamily","fontWeight","horizontalSpacing","prototype","render","container","dockInsidePlotArea","plotArea","freeSpace","layoutManager","getFreeSpace","position","top","left","maxWidth","maxHeight","itemMargin","rows","verticalAlign","horizontalAlign","i","length","type","markerType","legendMarkerType","getDefaultLegendMarker","legendText","itemTextFormatter","legend","dataPoint","name","markerColor","legendMarkerColor","_colorSet","markerSize","markerBorderColor","legendMarkerBorderColor","markerBorderThickness","legendMarkerBorderThickness","Math","max","round","lineColor","replaceKeywordsWithValue","dataPoints","item","text","textBlock","chartType","dataSeriesIndex","index","dataPointIndex","push","color","showInLegend","reversed","reverse","row","rowIndex","textMaxWidth","columnHeight","itemWidth","itemMaxWidth","min","x","y","itemWrap","angle","fontColor","fontStyle","textBaseline","measureText","id","lastObjectId","objectMap","objectType","legendItemIndex","rowHeight","itemIndex","itemX","itemY","ghostX","data","visible","globalAlpha","save","rect","clip","strokeStyle","lineWidth","ceil","beginPath","moveTo","lineTo","stroke","drawMarker","restore","hexColor","intToHexColorString","fillStyle","fillRect","registerSpace"],"mappings":"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","sourcesContent":["\r\nimport DataSeries from './data_series';\r\nimport CanvasJSObject from './canvasjs';\r\nimport TextBlock from './text_block';\r\nimport RenderHelper from '../helpers/render';\r\nimport {extend, getFontHeightInPixels} from '../helpers/utils';\r\n\r\nfunction Legend(chart, options, theme) {\r\n  Legend.base.constructor.call(this, \"Legend\", options, theme);\r\n\r\n  this.chart = chart;\r\n  this.canvas = chart.canvas;\r\n  this.ctx = this.chart.ctx;\r\n  this.ghostCtx = this.chart._eventManager.ghostCtx;\r\n  this.items = [];\r\n\r\n  this.width = 0,\r\n  //this.fontSize = 12,\r\n  this.height = 0,\r\n  this.orientation = null,\r\n  this.dataSeries = [];\r\n  this.bounds = {\r\n    x1: null, y1: null, x2: null, y2: null\r\n  };\r\n\r\n  if (typeof (this._options.fontSize) === \"undefined\") {\r\n    this.fontSize = this.chart.getAutoFontSize(this.fontSize);\r\n    //window.console.log(\"fontSize: \" + this.fontSize);\r\n  }\r\n\r\n  this.lineHeight = getFontHeightInPixels(this.fontFamily, this.fontSize, this.fontWeight);\r\n\r\n  this.horizontalSpacing = this.fontSize;\r\n}\r\n\r\nextend(Legend, CanvasJSObject);\r\n\r\nLegend.prototype.render = function () {\r\n\r\n  var container = (!this.dockInsidePlotArea ? this.chart : this.chart.plotArea);\r\n  var freeSpace = container.layoutManager.getFreeSpace();\r\n  var position = null;\r\n  var top = 0;\r\n  var left = 0;\r\n  var maxWidth = 0;\r\n  var maxHeight = 0;\r\n  var itemMargin = 5;\r\n\r\n  var items = [];\r\n  var rows = [];\r\n\r\n  //this.ctx.font = getFontString(\"\", this, null);\r\n  //this.ctx.fontColor = this.fontColor;\r\n\r\n  if (this.verticalAlign === \"top\" || this.verticalAlign === \"bottom\") {\r\n    this.orientation = \"horizontal\";\r\n    position = this.verticalAlign;\r\n\r\n    maxWidth = this.maxWidth !== null ? this.maxWidth : freeSpace.width * .7;\r\n    maxHeight = this.maxHeight !== null ? this.maxHeight : freeSpace.height * .5;\r\n  }\r\n  else if (this.verticalAlign === \"center\") {\r\n    this.orientation = \"vertical\";\r\n    position = this.horizontalAlign;\r\n\r\n    maxWidth = this.maxWidth !== null ? this.maxWidth : freeSpace.width * .5;\r\n    maxHeight = this.maxHeight !== null ? this.maxHeight : freeSpace.height * .7;\r\n  }\r\n\r\n  for (var i = 0; i < this.dataSeries.length; i++) {\r\n    var dataSeries = this.dataSeries[i];\r\n\r\n\r\n    if (dataSeries.type !== \"pie\" && dataSeries.type !== \"doughnut\" && dataSeries.type !== \"funnel\") {\r\n\r\n      var markerType = dataSeries.legendMarkerType ? dataSeries.legendMarkerType : (dataSeries.type === \"line\" || dataSeries.type === \"stepLine\" || dataSeries.type === \"spline\" || dataSeries.type === \"scatter\" || dataSeries.type === \"bubble\") && dataSeries.markerType ? dataSeries.markerType : DataSeries.getDefaultLegendMarker(dataSeries.type);\r\n      var legendText = dataSeries.legendText ? dataSeries.legendText : this.itemTextFormatter ? this.itemTextFormatter({ chart: this.chart, legend: this._options, dataSeries: dataSeries, dataPoint: null })\r\n        : dataSeries.name;\r\n      var markerColor = dataSeries.legendMarkerColor ? dataSeries.legendMarkerColor : dataSeries.markerColor ? dataSeries.markerColor : dataSeries._colorSet[0];\r\n      var markerSize = (!dataSeries.markerSize && (dataSeries.type === \"line\" || dataSeries.type === \"stepLine\" || dataSeries.type === \"spline\")) ? 0 : this.lineHeight * .6;\r\n      var markerBorderColor = dataSeries.legendMarkerBorderColor ? dataSeries.legendMarkerBorderColor : dataSeries.markerBorderColor;\r\n      var markerBorderThickness = dataSeries.legendMarkerBorderThickness ? dataSeries.legendMarkerBorderThickness : dataSeries.markerBorderThickness ? Math.max(1, Math.round(markerSize * .2)) : 0;\r\n      var lineColor = dataSeries._colorSet[0];\r\n\r\n      legendText = this.chart.replaceKeywordsWithValue(legendText, dataSeries.dataPoints[0], dataSeries, i);\r\n      var item = {\r\n        markerType: markerType, markerColor: markerColor, text: legendText, textBlock: null, chartType: dataSeries.type, markerSize: markerSize, lineColor: dataSeries._colorSet[0],\r\n        dataSeriesIndex: dataSeries.index, dataPointIndex: null, markerBorderColor: markerBorderColor, markerBorderThickness: markerBorderThickness\r\n      };\r\n\r\n      items.push(item);\r\n    } else {\r\n      for (var dataPointIndex = 0; dataPointIndex < dataSeries.dataPoints.length; dataPointIndex++) {\r\n\r\n        var dataPoint = dataSeries.dataPoints[dataPointIndex];\r\n\r\n        var markerType = dataPoint.legendMarkerType ? dataPoint.legendMarkerType : dataSeries.legendMarkerType ? dataSeries.legendMarkerType : DataSeries.getDefaultLegendMarker(dataSeries.type);\r\n        var legendText = dataPoint.legendText ? dataPoint.legendText : dataSeries.legendText ? dataSeries.legendText : this.itemTextFormatter ? this.itemTextFormatter({ chart: this.chart, legend: this._options, dataSeries: dataSeries, dataPoint: dataPoint })\r\n          : dataPoint.name ? dataPoint.name : \"DataPoint: \" + (dataPointIndex + 1);\r\n        var markerColor = dataPoint.legendMarkerColor ? dataPoint.legendMarkerColor : dataSeries.legendMarkerColor ? dataSeries.legendMarkerColor : dataPoint.color ? dataPoint.color : dataSeries.color ? dataSeries.color : dataSeries._colorSet[dataPointIndex % dataSeries._colorSet.length];\r\n        var markerSize = this.lineHeight * .6;\r\n        var markerBorderColor = dataPoint.legendMarkerBorderColor ? dataPoint.legendMarkerBorderColor : dataSeries.legendMarkerBorderColor ? dataSeries.legendMarkerBorderColor : dataPoint.markerBorderColor ? dataPoint.markerBorderColor : dataSeries.markerBorderColor;\r\n        var markerBorderThickness = dataPoint.legendMarkerBorderThickness ? dataPoint.legendMarkerBorderThickness : dataSeries.legendMarkerBorderThickness ? dataSeries.legendMarkerBorderThickness : dataPoint.markerBorderThickness || dataSeries.markerBorderThickness ? Math.max(1, Math.round(markerSize * .2)) : 0;\r\n\r\n        legendText = this.chart.replaceKeywordsWithValue(legendText, dataPoint, dataSeries, dataPointIndex);\r\n\r\n        var item = {\r\n          markerType: markerType, markerColor: markerColor, text: legendText, textBlock: null, chartType: dataSeries.type, markerSize: markerSize,\r\n          dataSeriesIndex: i, dataPointIndex: dataPointIndex, markerBorderColor: markerBorderColor, markerBorderThickness: markerBorderThickness\r\n        };\r\n\r\n        if (dataPoint.showInLegend || (dataSeries.showInLegend && dataPoint.showInLegend !== false)) {\r\n          items.push(item);\r\n        }\r\n      }\r\n    }\r\n    item = null;\r\n  }\r\n  if (this.reversed === true) {\r\n    items.reverse();\r\n  }\r\n\r\n  // Find out the required width and height of Legend and position the items relative to the container\r\n  if (items.length > 0) {\r\n    var row = null;\r\n    var rowIndex = 0; // required for vertical orientation\r\n    var textMaxWidth = 0;\r\n    var columnHeight = 0;\r\n\r\n    if (this.itemWidth !== null) {\r\n      if (this.itemMaxWidth !== null) {\r\n        textMaxWidth = Math.min(this.itemWidth, this.itemMaxWidth, maxWidth);\r\n      } else {\r\n        textMaxWidth = Math.min(this.itemWidth, maxWidth);\r\n      }\r\n    } else {\r\n      if (this.itemMaxWidth !== null) {\r\n        textMaxWidth = Math.min(this.itemMaxWidth, maxWidth);\r\n      } else {\r\n        textMaxWidth = maxWidth;\r\n      }\r\n    }\r\n\r\n    markerSize = (markerSize === 0 ? this.lineHeight * .6 : markerSize);\r\n    textMaxWidth = textMaxWidth - (markerSize + this.horizontalSpacing * .1);\r\n\r\n    for (var i = 0; i < items.length; i++) {\r\n      var item = items[i];\r\n\r\n      if (item.chartType === \"line\" || item.chartType === \"spline\" || item.chartType === \"stepLine\") {\r\n        textMaxWidth = textMaxWidth - 2 * (this.lineHeight * .1);\r\n      }\r\n\r\n      if (maxHeight <= 0 || typeof (maxHeight) === \"undefined\" || textMaxWidth <= 0 || typeof (textMaxWidth) === \"undefined\") {\r\n        continue;\r\n      }\r\n\r\n      if (this.orientation === \"horizontal\") {\r\n\r\n        item.textBlock = new TextBlock(this.ctx, {\r\n          x: 0,\r\n          y: 0,//TBI\r\n          maxWidth: textMaxWidth,\r\n          maxHeight: this.itemWrap ? maxHeight : this.lineHeight, //TBI: FontSize\r\n          angle: 0,\r\n          text: item.text,\r\n          horizontalAlign: \"left\",//left, center, right\r\n          fontSize: this.fontSize,//in pixels\r\n          fontFamily: this.fontFamily,\r\n          fontWeight: this.fontWeight, //normal, bold, bolder, lighter,\r\n          fontColor: this.fontColor,\r\n          fontStyle: this.fontStyle, // normal, italic, oblique\r\n          textBaseline: \"top\"\r\n        });\r\n        item.textBlock.measureText();\r\n\r\n        if (this.itemWidth !== null) {\r\n          item.textBlock.width = this.itemWidth - (markerSize + this.horizontalSpacing * .1 + ((item.chartType === \"line\" || item.chartType === \"spline\" || item.chartType === \"stepLine\") ? 2 * (this.lineHeight * .1) : 0));\r\n        }\r\n\r\n        if (!row || row.width + Math.round(item.textBlock.width + this.horizontalSpacing * .1 + markerSize + (row.width === 0 ? 0 : (this.horizontalSpacing)) + ((item.chartType === \"line\" || item.chartType === \"spline\" || item.chartType === \"stepLine\") ? 2 * (this.lineHeight * .1) : 0)) > maxWidth) {\r\n          row = {\r\n            items: [], width: 0\r\n          };\r\n          rows.push(row);\r\n          this.height += columnHeight;\r\n          columnHeight = 0;\r\n        }\r\n\r\n        columnHeight = Math.max(columnHeight, item.textBlock.height);\r\n\r\n        item.textBlock.x = row.width;\r\n        item.textBlock.y = 0;\r\n\r\n        row.width += Math.round(item.textBlock.width + this.horizontalSpacing * .1 + markerSize + (row.width === 0 ? 0 : this.horizontalSpacing) + ((item.chartType === \"line\" || item.chartType === \"spline\" || item.chartType === \"stepLine\") ? 2 * (this.lineHeight * .1) : 0));\r\n        row.items.push(item);\r\n\r\n        this.width = Math.max(row.width, this.width);\r\n      } else {\r\n\r\n        item.textBlock = new TextBlock(this.ctx, {\r\n          x: 0,\r\n          y: 0,//TBI\r\n          maxWidth: textMaxWidth,\r\n          maxHeight: this.itemWrap === true ? maxHeight : this.fontSize * 1.5, //TBI: FontSize\r\n          angle: 0,\r\n          text: item.text,\r\n          horizontalAlign: \"left\",//left, center, right\r\n          fontSize: this.fontSize,//in pixels\r\n          fontFamily: this.fontFamily,\r\n          fontWeight: this.fontWeight, //normal, bold, bolder, lighter,\r\n          fontColor: this.fontColor,\r\n          fontStyle: this.fontStyle, // normal, italic, oblique\r\n          textBaseline: \"top\"\r\n        });\r\n\r\n        item.textBlock.measureText();\r\n\r\n        if (this.itemWidth !== null) {\r\n          item.textBlock.width = this.itemWidth - (markerSize + this.horizontalSpacing * .1 + ((item.chartType === \"line\" || item.chartType === \"spline\" || item.chartType === \"stepLine\") ? 2 * (this.lineHeight * .1) : 0));\r\n        }\r\n\r\n        if (this.height <= maxHeight) {\r\n          row = {\r\n            items: [], width: 0\r\n          };\r\n          rows.push(row);\r\n        } else {\r\n          row = rows[rowIndex];\r\n          rowIndex = (rowIndex + 1) % rows.length;\r\n        }\r\n\r\n        this.height += item.textBlock.height;\r\n\r\n        item.textBlock.x = row.width; // relative to the row\r\n        item.textBlock.y = 0; // relative to the row\r\n\r\n        row.width += Math.round(item.textBlock.width + this.horizontalSpacing * .1 + markerSize + (row.width === 0 ? 0 : this.horizontalSpacing) + ((item.chartType === \"line\" || item.chartType === \"spline\" || item.chartType === \"stepLine\") ? 2 * (this.lineHeight * .1) : 0));\r\n        row.items.push(item);\r\n\r\n        this.width = Math.max(row.width, this.width);\r\n      }\r\n    }\r\n\r\n    if (this.itemWrap === false) {\r\n      this.height = rows.length * (this.lineHeight);\r\n    } else {\r\n      this.height += columnHeight;\r\n    }\r\n\r\n    this.height = Math.min(maxHeight, this.height);\r\n    this.width = Math.min(maxWidth, this.width);\r\n  }\r\n\r\n  if (this.verticalAlign === \"top\") {\r\n    if (this.horizontalAlign === \"left\")\r\n      left = freeSpace.x1;\r\n    else if (this.horizontalAlign === \"right\")\r\n      left = freeSpace.x2 - this.width;\r\n    else\r\n      left = freeSpace.x1 + freeSpace.width / 2 - this.width / 2;\r\n\r\n    top = freeSpace.y1;\r\n  } else if (this.verticalAlign === \"center\") {\r\n    if (this.horizontalAlign === \"left\")\r\n      left = freeSpace.x1;\r\n    else if (this.horizontalAlign === \"right\")\r\n      left = freeSpace.x2 - this.width;\r\n    else\r\n      left = freeSpace.x1 + freeSpace.width / 2 - this.width / 2;\r\n\r\n    top = freeSpace.y1 + freeSpace.height / 2 - this.height / 2;\r\n  } else if (this.verticalAlign === \"bottom\") {\r\n    if (this.horizontalAlign === \"left\")\r\n      left = freeSpace.x1;\r\n    else if (this.horizontalAlign === \"right\")\r\n      left = freeSpace.x2 - this.width;\r\n    else\r\n      left = freeSpace.x1 + freeSpace.width / 2 - this.width / 2;\r\n\r\n    top = freeSpace.y2 - this.height;\r\n  }\r\n\r\n  this.items = items;\r\n\r\n  //Assign ids to all legendItems\r\n  for (var i = 0; i < this.items.length; i++) {\r\n\r\n    var item = items[i];\r\n\r\n    item.id = ++this.chart._eventManager.lastObjectId;\r\n    this.chart._eventManager.objectMap[item.id] = {\r\n      id: item.id, objectType: \"legendItem\", legendItemIndex: i, dataSeriesIndex: item.dataSeriesIndex, dataPointIndex: item.dataPointIndex\r\n    };\r\n    //delete item.textBlock;// Not Required anymore\r\n  }\r\n\r\n  var rowHeight = 0;\r\n  for (var i = 0; i < rows.length; i++) {\r\n    var row = rows[i];\r\n    var columnHeight = 0;\r\n    for (var itemIndex = 0; itemIndex < row.items.length; itemIndex++) {\r\n      var item = row.items[itemIndex];\r\n\r\n      var itemX = item.textBlock.x + left + (itemIndex === 0 ? markerSize * .2 : this.horizontalSpacing);\r\n      var itemY = top + rowHeight;\r\n\r\n      var ghostX = itemX;\r\n\r\n      if (!this.chart.data[item.dataSeriesIndex].visible)\r\n        this.ctx.globalAlpha = .5;\r\n\r\n      this.ctx.save();\r\n      this.ctx.rect(left, top, maxWidth, maxHeight);\r\n      this.ctx.clip();\r\n\r\n      if (item.chartType === \"line\" || item.chartType === \"stepLine\" || item.chartType === \"spline\") {\r\n        this.ctx.strokeStyle = item.lineColor;\r\n        this.ctx.lineWidth = Math.ceil(this.lineHeight / 8);\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(itemX - this.lineHeight * .1, itemY + this.lineHeight / 2);\r\n        this.ctx.lineTo(itemX + this.lineHeight * .7, itemY + this.lineHeight / 2);\r\n        this.ctx.stroke();\r\n\r\n        ghostX -= this.lineHeight * .1;\r\n      }\r\n\r\n      RenderHelper.drawMarker(itemX + markerSize / 2, itemY + (this.lineHeight / 2), this.ctx, item.markerType, item.markerSize, item.markerColor, item.markerBorderColor, item.markerBorderThickness);\r\n\r\n      item.textBlock.x = itemX + this.horizontalSpacing * .1 + markerSize;\r\n\r\n      if (item.chartType === \"line\" || item.chartType === \"stepLine\" || item.chartType === \"spline\") {\r\n        item.textBlock.x = item.textBlock.x + this.lineHeight * .1;\r\n      }\r\n\r\n      item.textBlock.y = itemY;\r\n\r\n      item.textBlock.render(true);\r\n\r\n      this.ctx.restore();\r\n\r\n      if (itemIndex > 0) {\r\n        columnHeight = Math.max(columnHeight, item.textBlock.height);\r\n      } else {\r\n        columnHeight = item.textBlock.height;\r\n      }\r\n\r\n      if (!this.chart.data[item.dataSeriesIndex].visible)\r\n        this.ctx.globalAlpha = 1;\r\n\r\n      var hexColor = intToHexColorString(item.id);\r\n      this.ghostCtx.fillStyle = hexColor;\r\n      this.ghostCtx.beginPath();\r\n      this.ghostCtx.fillRect(ghostX, item.textBlock.y, item.textBlock.x + item.textBlock.width - ghostX, item.textBlock.height);\r\n\r\n      item.x1 = this.chart._eventManager.objectMap[item.id].x1 = ghostX;\r\n      item.y1 = this.chart._eventManager.objectMap[item.id].y1 = item.textBlock.y;\r\n      item.x2 = this.chart._eventManager.objectMap[item.id].x2 = item.textBlock.x + item.textBlock.width;\r\n      item.y2 = this.chart._eventManager.objectMap[item.id].y2 = item.textBlock.y + item.textBlock.height;\r\n    }\r\n    rowHeight = rowHeight + columnHeight;\r\n  }\r\n\r\n  //this.ctx.beginPath();\r\n  //this.ctx.lineWidth = 2;\r\n  //this.ctx.strokeStyle = \"red\";\r\n  //this.ctx.rect(left, top, this.width, this.height);\r\n  //this.ctx.stroke();\r\n\r\n  container.layoutManager.registerSpace(position, { width: this.width + 2 + 2, height: this.height + 5 + 5 });\r\n\r\n  this.bounds = {\r\n    x1: left, y1: top, x2: left + this.width, y2: top + this.height\r\n  };\r\n}\r\n\r\nexport default Legend;\r\n"]},"metadata":{},"sourceType":"module"}