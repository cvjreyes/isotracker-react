{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"variant\"];\nimport { unstable_capitalize as capitalize } from '@mui/utils';\n\nfunction isEmpty(string) {\n  return string.length === 0;\n}\n/**\r\n * Generates string classKey based on the properties provided. It starts with the\r\n * variant if defined, and then it appends all other properties in alphabetical order.\r\n * @param {object} props - the properties for which the classKey should be created.\r\n */\n\n\nexport default function propsToClassKey(props) {\n  var variant = props.variant,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classKey = variant || '';\n  Object.keys(other).sort().forEach(function (key) {\n    if (key === 'color') {\n      classKey += isEmpty(classKey) ? props[key] : capitalize(props[key]);\n    } else {\n      classKey += \"\".concat(isEmpty(classKey) ? key : capitalize(key)).concat(capitalize(props[key].toString()));\n    }\n  });\n  return classKey;\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/@mui/system/esm/propsToClassKey.js"],"names":["_objectWithoutPropertiesLoose","_excluded","unstable_capitalize","capitalize","isEmpty","string","length","propsToClassKey","props","variant","other","classKey","Object","keys","sort","forEach","key","toString"],"mappings":"AAAA,OAAOA,6BAAP,MAA0C,yDAA1C;AACA,IAAMC,SAAS,GAAG,CAAC,SAAD,CAAlB;AACA,SAASC,mBAAmB,IAAIC,UAAhC,QAAkD,YAAlD;;AAEA,SAASC,OAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAOA,MAAM,CAACC,MAAP,KAAkB,CAAzB;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AACvC,MACJC,OADI,GAEFD,KAFE,CACJC,OADI;AAAA,MAGAC,KAHA,GAGQV,6BAA6B,CAACQ,KAAD,EAAQP,SAAR,CAHrC;;AAKN,MAAIU,QAAQ,GAAGF,OAAO,IAAI,EAA1B;AACAG,EAAAA,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,IAAnB,GAA0BC,OAA1B,CAAkC,UAAAC,GAAG,EAAI;AACvC,QAAIA,GAAG,KAAK,OAAZ,EAAqB;AACnBL,MAAAA,QAAQ,IAAIP,OAAO,CAACO,QAAD,CAAP,GAAoBH,KAAK,CAACQ,GAAD,CAAzB,GAAiCb,UAAU,CAACK,KAAK,CAACQ,GAAD,CAAN,CAAvD;AACD,KAFD,MAEO;AACLL,MAAAA,QAAQ,cAAOP,OAAO,CAACO,QAAD,CAAP,GAAoBK,GAApB,GAA0Bb,UAAU,CAACa,GAAD,CAA3C,SAAmDb,UAAU,CAACK,KAAK,CAACQ,GAAD,CAAL,CAAWC,QAAX,EAAD,CAA7D,CAAR;AACD;AACF,GAND;AAOA,SAAON,QAAP;AACD","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nconst _excluded = [\"variant\"];\r\nimport { unstable_capitalize as capitalize } from '@mui/utils';\r\n\r\nfunction isEmpty(string) {\r\n  return string.length === 0;\r\n}\r\n/**\r\n * Generates string classKey based on the properties provided. It starts with the\r\n * variant if defined, and then it appends all other properties in alphabetical order.\r\n * @param {object} props - the properties for which the classKey should be created.\r\n */\r\n\r\n\r\nexport default function propsToClassKey(props) {\r\n  const {\r\n    variant\r\n  } = props,\r\n        other = _objectWithoutPropertiesLoose(props, _excluded);\r\n\r\n  let classKey = variant || '';\r\n  Object.keys(other).sort().forEach(key => {\r\n    if (key === 'color') {\r\n      classKey += isEmpty(classKey) ? props[key] : capitalize(props[key]);\r\n    } else {\r\n      classKey += `${isEmpty(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;\r\n    }\r\n  });\r\n  return classKey;\r\n}"]},"metadata":{},"sourceType":"module"}