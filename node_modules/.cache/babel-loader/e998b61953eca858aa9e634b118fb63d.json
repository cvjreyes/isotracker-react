{"ast":null,"code":"import { CLONE_TYPES } from \"./constants.mjs\";\nvar registeredOverlays = {};\n/**\r\n * Register overlay class. If the Overlay under the same name is already registered\r\n * the class won't be registered.\r\n *\r\n * @param {Overlay} overlayClass Overlay class extended from base overlay class {@link Overlay}.\r\n */\n\nexport function registerOverlayOnce(overlayClass) {\n  var overlayName = overlayClass.OVERLAY_NAME;\n\n  if (CLONE_TYPES.indexOf(overlayName) === -1) {\n    throw new Error(\"Unsupported overlay (\".concat(overlayName, \").\"));\n  }\n\n  if (!hasOverlay(overlayName)) {\n    registeredOverlays[overlayName] = overlayClass;\n  }\n}\n/**\r\n * Create new instance of overlay type.\r\n *\r\n * @param {string} type Overlay type, one of the CLONE_TYPES value.\r\n * @param {Walkontable} wot The Walkontable instance.\r\n * @returns {Overlay}\r\n */\n\nexport function createOverlay(type, wot) {\n  return new registeredOverlays[type](wot);\n}\n/**\r\n * Check if specified overlay was registered.\r\n *\r\n * @param {string} type Overlay type, one of the CLONE_TYPES value.\r\n * @returns {boolean}\r\n */\n\nexport function hasOverlay(type) {\n  return registeredOverlays[type] !== void 0;\n}\n/**\r\n * Checks if overlay object (`overlay`) is instance of overlay type (`type`).\r\n *\r\n * @param {Overlay} overlay Overlay object.\r\n * @param {string} type Overlay type, one of the CLONE_TYPES value.\r\n * @returns {boolean}\r\n */\n\nexport function isOverlayTypeOf(overlay, type) {\n  if (!overlay || !registeredOverlays[type]) {\n    return false;\n  }\n\n  return overlay instanceof registeredOverlays[type];\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/3rdparty/walkontable/src/overlay/registerer.mjs"],"names":["CLONE_TYPES","registeredOverlays","registerOverlayOnce","overlayClass","overlayName","OVERLAY_NAME","indexOf","Error","concat","hasOverlay","createOverlay","type","wot","isOverlayTypeOf","overlay"],"mappings":"AACA,SAASA,WAAT,QAA4B,iBAA5B;AACA,IAAIC,kBAAkB,GAAG,EAAzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,mBAAT,CAA6BC,YAA7B,EAA2C;AAChD,MAAIC,WAAW,GAAGD,YAAY,CAACE,YAA/B;;AAEA,MAAIL,WAAW,CAACM,OAAZ,CAAoBF,WAApB,MAAqC,CAAC,CAA1C,EAA6C;AAC3C,UAAM,IAAIG,KAAJ,CAAU,wBAAwBC,MAAxB,CAA+BJ,WAA/B,EAA4C,IAA5C,CAAV,CAAN;AACD;;AAED,MAAI,CAACK,UAAU,CAACL,WAAD,CAAf,EAA8B;AAC5BH,IAAAA,kBAAkB,CAACG,WAAD,CAAlB,GAAkCD,YAAlC;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASO,aAAT,CAAuBC,IAAvB,EAA6BC,GAA7B,EAAkC;AACvC,SAAO,IAAIX,kBAAkB,CAACU,IAAD,CAAtB,CAA6BC,GAA7B,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASH,UAAT,CAAoBE,IAApB,EAA0B;AAC/B,SAAOV,kBAAkB,CAACU,IAAD,CAAlB,KAA6B,KAAK,CAAzC;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,eAAT,CAAyBC,OAAzB,EAAkCH,IAAlC,EAAwC;AAC7C,MAAI,CAACG,OAAD,IAAY,CAACb,kBAAkB,CAACU,IAAD,CAAnC,EAA2C;AACzC,WAAO,KAAP;AACD;;AAED,SAAOG,OAAO,YAAYb,kBAAkB,CAACU,IAAD,CAA5C;AACD","sourcesContent":["import \"core-js/modules/es.array.index-of.js\";\r\nimport { CLONE_TYPES } from \"./constants.mjs\";\r\nvar registeredOverlays = {};\r\n/**\r\n * Register overlay class. If the Overlay under the same name is already registered\r\n * the class won't be registered.\r\n *\r\n * @param {Overlay} overlayClass Overlay class extended from base overlay class {@link Overlay}.\r\n */\r\n\r\nexport function registerOverlayOnce(overlayClass) {\r\n  var overlayName = overlayClass.OVERLAY_NAME;\r\n\r\n  if (CLONE_TYPES.indexOf(overlayName) === -1) {\r\n    throw new Error(\"Unsupported overlay (\".concat(overlayName, \").\"));\r\n  }\r\n\r\n  if (!hasOverlay(overlayName)) {\r\n    registeredOverlays[overlayName] = overlayClass;\r\n  }\r\n}\r\n/**\r\n * Create new instance of overlay type.\r\n *\r\n * @param {string} type Overlay type, one of the CLONE_TYPES value.\r\n * @param {Walkontable} wot The Walkontable instance.\r\n * @returns {Overlay}\r\n */\r\n\r\nexport function createOverlay(type, wot) {\r\n  return new registeredOverlays[type](wot);\r\n}\r\n/**\r\n * Check if specified overlay was registered.\r\n *\r\n * @param {string} type Overlay type, one of the CLONE_TYPES value.\r\n * @returns {boolean}\r\n */\r\n\r\nexport function hasOverlay(type) {\r\n  return registeredOverlays[type] !== void 0;\r\n}\r\n/**\r\n * Checks if overlay object (`overlay`) is instance of overlay type (`type`).\r\n *\r\n * @param {Overlay} overlay Overlay object.\r\n * @param {string} type Overlay type, one of the CLONE_TYPES value.\r\n * @returns {boolean}\r\n */\r\n\r\nexport function isOverlayTypeOf(overlay, type) {\r\n  if (!overlay || !registeredOverlays[type]) {\r\n    return false;\r\n  }\r\n\r\n  return overlay instanceof registeredOverlays[type];\r\n}"]},"metadata":{},"sourceType":"module"}