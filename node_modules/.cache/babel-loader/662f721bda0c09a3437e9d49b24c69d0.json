{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\n/**\r\n * Map for storing mappings from an index to a value.\r\n */\n\nexport var IndexMap = /*#__PURE__*/function () {\n  function IndexMap() {\n    var initValueOrFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _classCallCheck(this, IndexMap);\n    /**\r\n     * List of values for particular indexes.\r\n     *\r\n     * @private\r\n     * @type {Array}\r\n     */\n\n\n    this.indexedValues = [];\n    /**\r\n     * Initial value or function for each existing index.\r\n     *\r\n     * @private\r\n     * @type {*}\r\n     */\n\n    this.initValueOrFn = initValueOrFn;\n  }\n  /**\r\n   * Get full list of values for particular indexes.\r\n   *\r\n   * @returns {Array}\r\n   */\n\n\n  _createClass(IndexMap, [{\n    key: \"getValues\",\n    value: function getValues() {\n      return this.indexedValues;\n    }\n    /**\r\n     * Get value for the particular index.\r\n     *\r\n     * @param {number} index Index for which value is got.\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: \"getValueAtIndex\",\n    value: function getValueAtIndex(index) {\n      var values = this.indexedValues;\n\n      if (index < values.length) {\n        return values[index];\n      }\n    }\n    /**\r\n     * Set new values for particular indexes.\r\n     *\r\n     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\r\n     *\r\n     * @param {Array} values List of set values.\r\n     */\n\n  }, {\n    key: \"setValues\",\n    value: function setValues(values) {\n      this.indexedValues = values.slice();\n      this.runLocalHooks('change');\n    }\n    /**\r\n     * Set new value for the particular index.\r\n     *\r\n     * @param {number} index The index.\r\n     * @param {*} value The value to save.\r\n     *\r\n     * Note: Please keep in mind that it is not possible to set value beyond the map (not respecting already set\r\n     * map's size). Please use the `setValues` method when you would like to extend the map.\r\n     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"setValueAtIndex\",\n    value: function setValueAtIndex(index, value) {\n      if (index < this.indexedValues.length) {\n        this.indexedValues[index] = value;\n        this.runLocalHooks('change');\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * Clear all values to the defaults.\r\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.setDefaultValues();\n    }\n    /**\r\n     * Get length of the index map.\r\n     *\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.getValues().length;\n    }\n    /**\r\n     * Set default values for elements from `0` to `n`, where `n` is equal to the handled variable.\r\n     *\r\n     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\r\n     *\r\n     * @private\r\n     * @param {number} [length] Length of list.\r\n     */\n\n  }, {\n    key: \"setDefaultValues\",\n    value: function setDefaultValues() {\n      var _this = this;\n\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.indexedValues.length;\n      this.indexedValues.length = 0;\n\n      if (isFunction(this.initValueOrFn)) {\n        rangeEach(length - 1, function (index) {\n          return _this.indexedValues.push(_this.initValueOrFn(index));\n        });\n      } else {\n        rangeEach(length - 1, function () {\n          return _this.indexedValues.push(_this.initValueOrFn);\n        });\n      }\n\n      this.runLocalHooks('change');\n    }\n    /**\r\n     * Initialize list with default values for particular indexes.\r\n     *\r\n     * @private\r\n     * @param {number} length New length of indexed list.\r\n     * @returns {IndexMap}\r\n     */\n\n  }, {\n    key: \"init\",\n    value: function init(length) {\n      this.setDefaultValues(length);\n      this.runLocalHooks('init');\n      return this;\n    }\n    /**\r\n     * Add values to the list.\r\n     *\r\n     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert() {\n      this.runLocalHooks('change');\n    }\n    /**\r\n     * Remove values from the list.\r\n     *\r\n     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.runLocalHooks('change');\n    }\n    /**\r\n     * Destroys the Map instance.\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.clearLocalHooks();\n      this.indexedValues = null;\n      this.initValueOrFn = null;\n    }\n  }]);\n\n  return IndexMap;\n}();\nmixin(IndexMap, localHooks);","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/translations/maps/indexMap.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","rangeEach","mixin","isFunction","localHooks","IndexMap","initValueOrFn","arguments","undefined","indexedValues","value","getValues","getValueAtIndex","index","values","setValues","slice","runLocalHooks","setValueAtIndex","clear","setDefaultValues","getLength","_this","push","init","insert","remove","destroy","clearLocalHooks"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.slice.js\";\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nimport { rangeEach } from \"../../helpers/number.mjs\";\r\nimport { mixin } from \"../../helpers/object.mjs\";\r\nimport { isFunction } from \"../../helpers/function.mjs\";\r\nimport localHooks from \"../../mixins/localHooks.mjs\";\r\n/**\r\n * Map for storing mappings from an index to a value.\r\n */\r\n\r\nexport var IndexMap = /*#__PURE__*/function () {\r\n  function IndexMap() {\r\n    var initValueOrFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\r\n\r\n    _classCallCheck(this, IndexMap);\r\n\r\n    /**\r\n     * List of values for particular indexes.\r\n     *\r\n     * @private\r\n     * @type {Array}\r\n     */\r\n    this.indexedValues = [];\r\n    /**\r\n     * Initial value or function for each existing index.\r\n     *\r\n     * @private\r\n     * @type {*}\r\n     */\r\n\r\n    this.initValueOrFn = initValueOrFn;\r\n  }\r\n  /**\r\n   * Get full list of values for particular indexes.\r\n   *\r\n   * @returns {Array}\r\n   */\r\n\r\n\r\n  _createClass(IndexMap, [{\r\n    key: \"getValues\",\r\n    value: function getValues() {\r\n      return this.indexedValues;\r\n    }\r\n    /**\r\n     * Get value for the particular index.\r\n     *\r\n     * @param {number} index Index for which value is got.\r\n     * @returns {*}\r\n     */\r\n\r\n  }, {\r\n    key: \"getValueAtIndex\",\r\n    value: function getValueAtIndex(index) {\r\n      var values = this.indexedValues;\r\n\r\n      if (index < values.length) {\r\n        return values[index];\r\n      }\r\n    }\r\n    /**\r\n     * Set new values for particular indexes.\r\n     *\r\n     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\r\n     *\r\n     * @param {Array} values List of set values.\r\n     */\r\n\r\n  }, {\r\n    key: \"setValues\",\r\n    value: function setValues(values) {\r\n      this.indexedValues = values.slice();\r\n      this.runLocalHooks('change');\r\n    }\r\n    /**\r\n     * Set new value for the particular index.\r\n     *\r\n     * @param {number} index The index.\r\n     * @param {*} value The value to save.\r\n     *\r\n     * Note: Please keep in mind that it is not possible to set value beyond the map (not respecting already set\r\n     * map's size). Please use the `setValues` method when you would like to extend the map.\r\n     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"setValueAtIndex\",\r\n    value: function setValueAtIndex(index, value) {\r\n      if (index < this.indexedValues.length) {\r\n        this.indexedValues[index] = value;\r\n        this.runLocalHooks('change');\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n    /**\r\n     * Clear all values to the defaults.\r\n     */\r\n\r\n  }, {\r\n    key: \"clear\",\r\n    value: function clear() {\r\n      this.setDefaultValues();\r\n    }\r\n    /**\r\n     * Get length of the index map.\r\n     *\r\n     * @returns {number}\r\n     */\r\n\r\n  }, {\r\n    key: \"getLength\",\r\n    value: function getLength() {\r\n      return this.getValues().length;\r\n    }\r\n    /**\r\n     * Set default values for elements from `0` to `n`, where `n` is equal to the handled variable.\r\n     *\r\n     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\r\n     *\r\n     * @private\r\n     * @param {number} [length] Length of list.\r\n     */\r\n\r\n  }, {\r\n    key: \"setDefaultValues\",\r\n    value: function setDefaultValues() {\r\n      var _this = this;\r\n\r\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.indexedValues.length;\r\n      this.indexedValues.length = 0;\r\n\r\n      if (isFunction(this.initValueOrFn)) {\r\n        rangeEach(length - 1, function (index) {\r\n          return _this.indexedValues.push(_this.initValueOrFn(index));\r\n        });\r\n      } else {\r\n        rangeEach(length - 1, function () {\r\n          return _this.indexedValues.push(_this.initValueOrFn);\r\n        });\r\n      }\r\n\r\n      this.runLocalHooks('change');\r\n    }\r\n    /**\r\n     * Initialize list with default values for particular indexes.\r\n     *\r\n     * @private\r\n     * @param {number} length New length of indexed list.\r\n     * @returns {IndexMap}\r\n     */\r\n\r\n  }, {\r\n    key: \"init\",\r\n    value: function init(length) {\r\n      this.setDefaultValues(length);\r\n      this.runLocalHooks('init');\r\n      return this;\r\n    }\r\n    /**\r\n     * Add values to the list.\r\n     *\r\n     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\r\n     *\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"insert\",\r\n    value: function insert() {\r\n      this.runLocalHooks('change');\r\n    }\r\n    /**\r\n     * Remove values from the list.\r\n     *\r\n     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\r\n     *\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"remove\",\r\n    value: function remove() {\r\n      this.runLocalHooks('change');\r\n    }\r\n    /**\r\n     * Destroys the Map instance.\r\n     */\r\n\r\n  }, {\r\n    key: \"destroy\",\r\n    value: function destroy() {\r\n      this.clearLocalHooks();\r\n      this.indexedValues = null;\r\n      this.initValueOrFn = null;\r\n    }\r\n  }]);\r\n\r\n  return IndexMap;\r\n}();\r\nmixin(IndexMap, localHooks);"]},"metadata":{},"sourceType":"module"}