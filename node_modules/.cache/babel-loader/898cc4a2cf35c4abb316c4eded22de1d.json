{"ast":null,"code":"/**\n * @typedef {object} DefaultHeaderSettings\n * @property {string} label The name/label of the column header.\n * @property {number} colspan Current calculated colspan value of the rendered column header element.\n * @property {number} origColspan Original colspan value, set once while parsing user-defined nested header settings.\n * @property {boolean} collapsible The flag determines whether the node is collapsible (can be collpased/expanded).\n * @property {number[]} crossHiddenColumns The list of visual column indexes which indicates that the specified columns within\n *                                         the header settings are hidden.\n * @property {boolean} isCollapsed The flag determines whether the node is collapsed.\n * @property {boolean} isHidden The flag determines whether the column header at specified index is hidden. If true\n *                              the TH element will be rendered as hidden (display: none).\n * @property {boolean} isRoot The flag which determines whether the column header settings is accually not renderable. That kind\n *                            of objects are generated after colspaned header to fill an array to correct size.\n *\n *                            For example for header with colspan = 8 the 7 blank objects are generated to fill the array settings\n *                            to length = 8.\n * @property {boolean} isPlaceholder The flag determines whether the column header at the specified index is non-renderable.\n */\n\n/**\n * Creates the header settings object with default values.\n *\n * @param {DefaultHeaderSettings} initialValues The initial values for the header settings object.\n * @returns {DefaultHeaderSettings}\n */\nexport function createDefaultHeaderSettings() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$label = _ref.label,\n      label = _ref$label === void 0 ? '' : _ref$label,\n      _ref$colspan = _ref.colspan,\n      colspan = _ref$colspan === void 0 ? 1 : _ref$colspan,\n      _ref$origColspan = _ref.origColspan,\n      origColspan = _ref$origColspan === void 0 ? 1 : _ref$origColspan,\n      _ref$collapsible = _ref.collapsible,\n      collapsible = _ref$collapsible === void 0 ? false : _ref$collapsible,\n      _ref$crossHiddenColum = _ref.crossHiddenColumns,\n      crossHiddenColumns = _ref$crossHiddenColum === void 0 ? [] : _ref$crossHiddenColum,\n      _ref$isCollapsed = _ref.isCollapsed,\n      isCollapsed = _ref$isCollapsed === void 0 ? false : _ref$isCollapsed,\n      _ref$isHidden = _ref.isHidden,\n      isHidden = _ref$isHidden === void 0 ? false : _ref$isHidden,\n      _ref$isRoot = _ref.isRoot,\n      isRoot = _ref$isRoot === void 0 ? false : _ref$isRoot,\n      _ref$isPlaceholder = _ref.isPlaceholder,\n      isPlaceholder = _ref$isPlaceholder === void 0 ? false : _ref$isPlaceholder;\n\n  return {\n    label: label,\n    colspan: colspan,\n    origColspan: origColspan,\n    collapsible: collapsible,\n    isCollapsed: isCollapsed,\n    crossHiddenColumns: crossHiddenColumns,\n    isHidden: isHidden,\n    isRoot: isRoot,\n    isPlaceholder: isPlaceholder\n  };\n}\n/**\n * Creates the header settings placeholder object. Those settings tell the header renderers\n * that this TH element should not be rendered (the node will be overlapped by the previously\n * created node with colspan bigger than 1).\n *\n * @returns {object}\n */\n\nexport function createPlaceholderHeaderSettings() {\n  return {\n    label: '',\n    isPlaceholder: true\n  };\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/nestedHeaders/stateManager/utils.mjs"],"names":["createDefaultHeaderSettings","_ref","arguments","length","undefined","_ref$label","label","_ref$colspan","colspan","_ref$origColspan","origColspan","_ref$collapsible","collapsible","_ref$crossHiddenColum","crossHiddenColumns","_ref$isCollapsed","isCollapsed","_ref$isHidden","isHidden","_ref$isRoot","isRoot","_ref$isPlaceholder","isPlaceholder","createPlaceholderHeaderSettings"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,2BAAT,GAAuC;AAC5C,MAAIC,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AAAA,MACIG,UAAU,GAAGJ,IAAI,CAACK,KADtB;AAAA,MAEIA,KAAK,GAAGD,UAAU,KAAK,KAAK,CAApB,GAAwB,EAAxB,GAA6BA,UAFzC;AAAA,MAGIE,YAAY,GAAGN,IAAI,CAACO,OAHxB;AAAA,MAIIA,OAAO,GAAGD,YAAY,KAAK,KAAK,CAAtB,GAA0B,CAA1B,GAA8BA,YAJ5C;AAAA,MAKIE,gBAAgB,GAAGR,IAAI,CAACS,WAL5B;AAAA,MAMIA,WAAW,GAAGD,gBAAgB,KAAK,KAAK,CAA1B,GAA8B,CAA9B,GAAkCA,gBANpD;AAAA,MAOIE,gBAAgB,GAAGV,IAAI,CAACW,WAP5B;AAAA,MAQIA,WAAW,GAAGD,gBAAgB,KAAK,KAAK,CAA1B,GAA8B,KAA9B,GAAsCA,gBARxD;AAAA,MASIE,qBAAqB,GAAGZ,IAAI,CAACa,kBATjC;AAAA,MAUIA,kBAAkB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,EAAnC,GAAwCA,qBAVjE;AAAA,MAWIE,gBAAgB,GAAGd,IAAI,CAACe,WAX5B;AAAA,MAYIA,WAAW,GAAGD,gBAAgB,KAAK,KAAK,CAA1B,GAA8B,KAA9B,GAAsCA,gBAZxD;AAAA,MAaIE,aAAa,GAAGhB,IAAI,CAACiB,QAbzB;AAAA,MAcIA,QAAQ,GAAGD,aAAa,KAAK,KAAK,CAAvB,GAA2B,KAA3B,GAAmCA,aAdlD;AAAA,MAeIE,WAAW,GAAGlB,IAAI,CAACmB,MAfvB;AAAA,MAgBIA,MAAM,GAAGD,WAAW,KAAK,KAAK,CAArB,GAAyB,KAAzB,GAAiCA,WAhB9C;AAAA,MAiBIE,kBAAkB,GAAGpB,IAAI,CAACqB,aAjB9B;AAAA,MAkBIA,aAAa,GAAGD,kBAAkB,KAAK,KAAK,CAA5B,GAAgC,KAAhC,GAAwCA,kBAlB5D;;AAoBA,SAAO;AACLf,IAAAA,KAAK,EAAEA,KADF;AAELE,IAAAA,OAAO,EAAEA,OAFJ;AAGLE,IAAAA,WAAW,EAAEA,WAHR;AAILE,IAAAA,WAAW,EAAEA,WAJR;AAKLI,IAAAA,WAAW,EAAEA,WALR;AAMLF,IAAAA,kBAAkB,EAAEA,kBANf;AAOLI,IAAAA,QAAQ,EAAEA,QAPL;AAQLE,IAAAA,MAAM,EAAEA,MARH;AASLE,IAAAA,aAAa,EAAEA;AATV,GAAP;AAWD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,+BAAT,GAA2C;AAChD,SAAO;AACLjB,IAAAA,KAAK,EAAE,EADF;AAELgB,IAAAA,aAAa,EAAE;AAFV,GAAP;AAID","sourcesContent":["/**\n * @typedef {object} DefaultHeaderSettings\n * @property {string} label The name/label of the column header.\n * @property {number} colspan Current calculated colspan value of the rendered column header element.\n * @property {number} origColspan Original colspan value, set once while parsing user-defined nested header settings.\n * @property {boolean} collapsible The flag determines whether the node is collapsible (can be collpased/expanded).\n * @property {number[]} crossHiddenColumns The list of visual column indexes which indicates that the specified columns within\n *                                         the header settings are hidden.\n * @property {boolean} isCollapsed The flag determines whether the node is collapsed.\n * @property {boolean} isHidden The flag determines whether the column header at specified index is hidden. If true\n *                              the TH element will be rendered as hidden (display: none).\n * @property {boolean} isRoot The flag which determines whether the column header settings is accually not renderable. That kind\n *                            of objects are generated after colspaned header to fill an array to correct size.\n *\n *                            For example for header with colspan = 8 the 7 blank objects are generated to fill the array settings\n *                            to length = 8.\n * @property {boolean} isPlaceholder The flag determines whether the column header at the specified index is non-renderable.\n */\n\n/**\n * Creates the header settings object with default values.\n *\n * @param {DefaultHeaderSettings} initialValues The initial values for the header settings object.\n * @returns {DefaultHeaderSettings}\n */\nexport function createDefaultHeaderSettings() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$label = _ref.label,\n      label = _ref$label === void 0 ? '' : _ref$label,\n      _ref$colspan = _ref.colspan,\n      colspan = _ref$colspan === void 0 ? 1 : _ref$colspan,\n      _ref$origColspan = _ref.origColspan,\n      origColspan = _ref$origColspan === void 0 ? 1 : _ref$origColspan,\n      _ref$collapsible = _ref.collapsible,\n      collapsible = _ref$collapsible === void 0 ? false : _ref$collapsible,\n      _ref$crossHiddenColum = _ref.crossHiddenColumns,\n      crossHiddenColumns = _ref$crossHiddenColum === void 0 ? [] : _ref$crossHiddenColum,\n      _ref$isCollapsed = _ref.isCollapsed,\n      isCollapsed = _ref$isCollapsed === void 0 ? false : _ref$isCollapsed,\n      _ref$isHidden = _ref.isHidden,\n      isHidden = _ref$isHidden === void 0 ? false : _ref$isHidden,\n      _ref$isRoot = _ref.isRoot,\n      isRoot = _ref$isRoot === void 0 ? false : _ref$isRoot,\n      _ref$isPlaceholder = _ref.isPlaceholder,\n      isPlaceholder = _ref$isPlaceholder === void 0 ? false : _ref$isPlaceholder;\n\n  return {\n    label: label,\n    colspan: colspan,\n    origColspan: origColspan,\n    collapsible: collapsible,\n    isCollapsed: isCollapsed,\n    crossHiddenColumns: crossHiddenColumns,\n    isHidden: isHidden,\n    isRoot: isRoot,\n    isPlaceholder: isPlaceholder\n  };\n}\n/**\n * Creates the header settings placeholder object. Those settings tell the header renderers\n * that this TH element should not be rendered (the node will be overlapped by the previously\n * created node with colspan bigger than 1).\n *\n * @returns {object}\n */\n\nexport function createPlaceholderHeaderSettings() {\n  return {\n    label: '',\n    isPlaceholder: true\n  };\n}"]},"metadata":{},"sourceType":"module"}