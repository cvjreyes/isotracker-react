{"ast":null,"code":"export var conditions = {};\n/**\r\n * Get condition closure with pre-bound arguments.\r\n *\r\n * @param {string} name Condition name.\r\n * @param {Array} args Condition arguments.\r\n * @returns {Function}\r\n */\n\nexport function getCondition(name, args) {\n  if (!conditions[name]) {\n    throw Error(\"Filter condition \\\"\".concat(name, \"\\\" does not exist.\"));\n  }\n\n  var _conditions$name = conditions[name],\n      condition = _conditions$name.condition,\n      descriptor = _conditions$name.descriptor;\n  var conditionArguments = args;\n\n  if (descriptor.inputValuesDecorator) {\n    conditionArguments = descriptor.inputValuesDecorator(conditionArguments);\n  }\n\n  return function (dataRow) {\n    return condition.apply(dataRow.meta.instance, [].concat([dataRow], [conditionArguments]));\n  };\n}\n/**\r\n * Get condition object descriptor which defines some additional informations about this condition.\r\n *\r\n * @param {string} name Condition name.\r\n * @returns {object}\r\n */\n\nexport function getConditionDescriptor(name) {\n  if (!conditions[name]) {\n    throw Error(\"Filter condition \\\"\".concat(name, \"\\\" does not exist.\"));\n  }\n\n  return conditions[name].descriptor;\n}\n/**\r\n * Condition registerer.\r\n *\r\n * @param {string} name Condition name.\r\n * @param {Function} condition Condition function.\r\n * @param {object} descriptor Condition descriptor.\r\n */\n\nexport function registerCondition(name, condition, descriptor) {\n  descriptor.key = name;\n  conditions[name] = {\n    condition: condition,\n    descriptor: descriptor\n  };\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/filters/conditionRegisterer.mjs"],"names":["conditions","getCondition","name","args","Error","concat","_conditions$name","condition","descriptor","conditionArguments","inputValuesDecorator","dataRow","apply","meta","instance","getConditionDescriptor","registerCondition","key"],"mappings":"AACA,OAAO,IAAIA,UAAU,GAAG,EAAjB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,IAA5B,EAAkC;AACvC,MAAI,CAACH,UAAU,CAACE,IAAD,CAAf,EAAuB;AACrB,UAAME,KAAK,CAAC,sBAAsBC,MAAtB,CAA6BH,IAA7B,EAAmC,oBAAnC,CAAD,CAAX;AACD;;AAED,MAAII,gBAAgB,GAAGN,UAAU,CAACE,IAAD,CAAjC;AAAA,MACIK,SAAS,GAAGD,gBAAgB,CAACC,SADjC;AAAA,MAEIC,UAAU,GAAGF,gBAAgB,CAACE,UAFlC;AAGA,MAAIC,kBAAkB,GAAGN,IAAzB;;AAEA,MAAIK,UAAU,CAACE,oBAAf,EAAqC;AACnCD,IAAAA,kBAAkB,GAAGD,UAAU,CAACE,oBAAX,CAAgCD,kBAAhC,CAArB;AACD;;AAED,SAAO,UAAUE,OAAV,EAAmB;AACxB,WAAOJ,SAAS,CAACK,KAAV,CAAgBD,OAAO,CAACE,IAAR,CAAaC,QAA7B,EAAuC,GAAGT,MAAH,CAAU,CAACM,OAAD,CAAV,EAAqB,CAACF,kBAAD,CAArB,CAAvC,CAAP;AACD,GAFD;AAGD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASM,sBAAT,CAAgCb,IAAhC,EAAsC;AAC3C,MAAI,CAACF,UAAU,CAACE,IAAD,CAAf,EAAuB;AACrB,UAAME,KAAK,CAAC,sBAAsBC,MAAtB,CAA6BH,IAA7B,EAAmC,oBAAnC,CAAD,CAAX;AACD;;AAED,SAAOF,UAAU,CAACE,IAAD,CAAV,CAAiBM,UAAxB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASQ,iBAAT,CAA2Bd,IAA3B,EAAiCK,SAAjC,EAA4CC,UAA5C,EAAwD;AAC7DA,EAAAA,UAAU,CAACS,GAAX,GAAiBf,IAAjB;AACAF,EAAAA,UAAU,CAACE,IAAD,CAAV,GAAmB;AACjBK,IAAAA,SAAS,EAAEA,SADM;AAEjBC,IAAAA,UAAU,EAAEA;AAFK,GAAnB;AAID","sourcesContent":["import \"core-js/modules/es.array.concat.js\";\r\nexport var conditions = {};\r\n/**\r\n * Get condition closure with pre-bound arguments.\r\n *\r\n * @param {string} name Condition name.\r\n * @param {Array} args Condition arguments.\r\n * @returns {Function}\r\n */\r\n\r\nexport function getCondition(name, args) {\r\n  if (!conditions[name]) {\r\n    throw Error(\"Filter condition \\\"\".concat(name, \"\\\" does not exist.\"));\r\n  }\r\n\r\n  var _conditions$name = conditions[name],\r\n      condition = _conditions$name.condition,\r\n      descriptor = _conditions$name.descriptor;\r\n  var conditionArguments = args;\r\n\r\n  if (descriptor.inputValuesDecorator) {\r\n    conditionArguments = descriptor.inputValuesDecorator(conditionArguments);\r\n  }\r\n\r\n  return function (dataRow) {\r\n    return condition.apply(dataRow.meta.instance, [].concat([dataRow], [conditionArguments]));\r\n  };\r\n}\r\n/**\r\n * Get condition object descriptor which defines some additional informations about this condition.\r\n *\r\n * @param {string} name Condition name.\r\n * @returns {object}\r\n */\r\n\r\nexport function getConditionDescriptor(name) {\r\n  if (!conditions[name]) {\r\n    throw Error(\"Filter condition \\\"\".concat(name, \"\\\" does not exist.\"));\r\n  }\r\n\r\n  return conditions[name].descriptor;\r\n}\r\n/**\r\n * Condition registerer.\r\n *\r\n * @param {string} name Condition name.\r\n * @param {Function} condition Condition function.\r\n * @param {object} descriptor Condition descriptor.\r\n */\r\n\r\nexport function registerCondition(name, condition, descriptor) {\r\n  descriptor.key = name;\r\n  conditions[name] = {\r\n    condition: condition,\r\n    descriptor: descriptor\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}