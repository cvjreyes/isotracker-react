{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * CellCoords holds cell coordinates (row, column) and few method to validate them and retrieve as an array or an object.\n *\n * @util\n */\n\n\nvar CellCoords = /*#__PURE__*/function () {\n  function CellCoords(row, column) {\n    _classCallCheck(this, CellCoords);\n    /**\n     * Row index.\n     *\n     * @type {number}\n     */\n\n\n    this.row = null;\n    /**\n     * Column index.\n     *\n     * @type {number}\n     */\n\n    this.col = null;\n\n    if (typeof row !== 'undefined' && typeof column !== 'undefined') {\n      this.row = row;\n      this.col = column;\n    }\n  }\n  /**\n   * Checks if given set of coordinates is valid in context of a given Walkontable instance.\n   *\n   * @param {Walkontable} wot A Walkontable instance.\n   * @returns {boolean}\n   */\n\n\n  _createClass(CellCoords, [{\n    key: \"isValid\",\n    value: function isValid(wot) {\n      // is it a valid cell index (0 or higher)\n      if (this.row < 0 || this.col < 0) {\n        return false;\n      } // is selection within total rows and columns\n\n\n      if (this.row >= wot.getSetting('totalRows') || this.col >= wot.getSetting('totalColumns')) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * Checks if this cell coordinates are the same as cell coordinates given as an argument.\n     *\n     * @param {CellCoords} cellCoords Cell coordinates to equal.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(cellCoords) {\n      if (cellCoords === this) {\n        return true;\n      }\n\n      return this.row === cellCoords.row && this.col === cellCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in south-east from this cell coordinates.\n     *\n     * @param {object} testedCoords Cell coordinates to check.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isSouthEastOf\",\n    value: function isSouthEastOf(testedCoords) {\n      return this.row >= testedCoords.row && this.col >= testedCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in north-east from this cell coordinates.\n     *\n     * @param {object} testedCoords Cell coordinates to check.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isNorthWestOf\",\n    value: function isNorthWestOf(testedCoords) {\n      return this.row <= testedCoords.row && this.col <= testedCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in south-west from this cell coordinates.\n     *\n     * @param {object} testedCoords Cell coordinates to check.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isSouthWestOf\",\n    value: function isSouthWestOf(testedCoords) {\n      return this.row >= testedCoords.row && this.col <= testedCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in north-east from this cell coordinates.\n     *\n     * @param {object} testedCoords Cell coordinates to check.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isNorthEastOf\",\n    value: function isNorthEastOf(testedCoords) {\n      return this.row <= testedCoords.row && this.col >= testedCoords.col;\n    }\n    /**\n     * Normalizes the coordinates to the nearest valid position. The coordinates that point\n     * to the headers (negative values) are normalized to 0.\n     *\n     * @returns {CellCoords}\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      this.row = this.row === null ? this.row : Math.max(this.row, 0);\n      this.col = this.col === null ? this.col : Math.max(this.col, 0);\n      return this;\n    }\n    /**\n     * Clones the coordinates.\n     *\n     * @returns {CellCoords}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new CellCoords(this.row, this.col);\n    }\n    /**\n     * Converts CellCoords to literal object with `row` and `col` properties.\n     *\n     * @returns {object} Returns a literal object with `row` and `col` properties.\n     */\n\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      return {\n        row: this.row,\n        col: this.col\n      };\n    }\n  }]);\n\n  return CellCoords;\n}();\n\nexport default CellCoords;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/3rdparty/walkontable/src/cell/coords.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","CellCoords","row","column","col","value","isValid","wot","getSetting","isEqual","cellCoords","isSouthEastOf","testedCoords","isNorthWestOf","isSouthWestOf","isNorthEastOf","normalize","Math","max","clone","toObject"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * CellCoords holds cell coordinates (row, column) and few method to validate them and retrieve as an array or an object.\n *\n * @util\n */\nvar CellCoords = /*#__PURE__*/function () {\n  function CellCoords(row, column) {\n    _classCallCheck(this, CellCoords);\n\n    /**\n     * Row index.\n     *\n     * @type {number}\n     */\n    this.row = null;\n    /**\n     * Column index.\n     *\n     * @type {number}\n     */\n\n    this.col = null;\n\n    if (typeof row !== 'undefined' && typeof column !== 'undefined') {\n      this.row = row;\n      this.col = column;\n    }\n  }\n  /**\n   * Checks if given set of coordinates is valid in context of a given Walkontable instance.\n   *\n   * @param {Walkontable} wot A Walkontable instance.\n   * @returns {boolean}\n   */\n\n\n  _createClass(CellCoords, [{\n    key: \"isValid\",\n    value: function isValid(wot) {\n      // is it a valid cell index (0 or higher)\n      if (this.row < 0 || this.col < 0) {\n        return false;\n      } // is selection within total rows and columns\n\n\n      if (this.row >= wot.getSetting('totalRows') || this.col >= wot.getSetting('totalColumns')) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * Checks if this cell coordinates are the same as cell coordinates given as an argument.\n     *\n     * @param {CellCoords} cellCoords Cell coordinates to equal.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(cellCoords) {\n      if (cellCoords === this) {\n        return true;\n      }\n\n      return this.row === cellCoords.row && this.col === cellCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in south-east from this cell coordinates.\n     *\n     * @param {object} testedCoords Cell coordinates to check.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isSouthEastOf\",\n    value: function isSouthEastOf(testedCoords) {\n      return this.row >= testedCoords.row && this.col >= testedCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in north-east from this cell coordinates.\n     *\n     * @param {object} testedCoords Cell coordinates to check.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isNorthWestOf\",\n    value: function isNorthWestOf(testedCoords) {\n      return this.row <= testedCoords.row && this.col <= testedCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in south-west from this cell coordinates.\n     *\n     * @param {object} testedCoords Cell coordinates to check.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isSouthWestOf\",\n    value: function isSouthWestOf(testedCoords) {\n      return this.row >= testedCoords.row && this.col <= testedCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in north-east from this cell coordinates.\n     *\n     * @param {object} testedCoords Cell coordinates to check.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isNorthEastOf\",\n    value: function isNorthEastOf(testedCoords) {\n      return this.row <= testedCoords.row && this.col >= testedCoords.col;\n    }\n    /**\n     * Normalizes the coordinates to the nearest valid position. The coordinates that point\n     * to the headers (negative values) are normalized to 0.\n     *\n     * @returns {CellCoords}\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      this.row = this.row === null ? this.row : Math.max(this.row, 0);\n      this.col = this.col === null ? this.col : Math.max(this.col, 0);\n      return this;\n    }\n    /**\n     * Clones the coordinates.\n     *\n     * @returns {CellCoords}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new CellCoords(this.row, this.col);\n    }\n    /**\n     * Converts CellCoords to literal object with `row` and `col` properties.\n     *\n     * @returns {object} Returns a literal object with `row` and `col` properties.\n     */\n\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      return {\n        row: this.row,\n        col: this.col\n      };\n    }\n  }]);\n\n  return CellCoords;\n}();\n\nexport default CellCoords;"]},"metadata":{},"sourceType":"module"}