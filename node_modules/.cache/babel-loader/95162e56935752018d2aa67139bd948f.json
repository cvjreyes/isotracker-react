{"ast":null,"code":"var _TYPES;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { clone } from \"../../helpers/object.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { SEPARATOR } from \"../contextMenu/predefinedItems.mjs\";\nimport { getConditionDescriptor } from \"./conditionRegisterer.mjs\";\nimport { CONDITION_NAME as CONDITION_NONE } from \"./condition/none.mjs\";\nimport { CONDITION_NAME as CONDITION_EMPTY } from \"./condition/empty.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_EMPTY } from \"./condition/notEmpty.mjs\";\nimport { CONDITION_NAME as CONDITION_EQUAL } from \"./condition/equal.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_EQUAL } from \"./condition/notEqual.mjs\";\nimport { CONDITION_NAME as CONDITION_GREATER_THAN } from \"./condition/greaterThan.mjs\";\nimport { CONDITION_NAME as CONDITION_GREATER_THAN_OR_EQUAL } from \"./condition/greaterThanOrEqual.mjs\";\nimport { CONDITION_NAME as CONDITION_LESS_THAN } from \"./condition/lessThan.mjs\";\nimport { CONDITION_NAME as CONDITION_LESS_THAN_OR_EQUAL } from \"./condition/lessThanOrEqual.mjs\";\nimport { CONDITION_NAME as CONDITION_BETWEEN } from \"./condition/between.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_BETWEEN } from \"./condition/notBetween.mjs\";\nimport { CONDITION_NAME as CONDITION_BEGINS_WITH } from \"./condition/beginsWith.mjs\";\nimport { CONDITION_NAME as CONDITION_ENDS_WITH } from \"./condition/endsWith.mjs\";\nimport { CONDITION_NAME as CONDITION_CONTAINS } from \"./condition/contains.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_CONTAINS } from \"./condition/notContains.mjs\";\nimport { CONDITION_NAME as CONDITION_DATE_BEFORE } from \"./condition/date/before.mjs\";\nimport { CONDITION_NAME as CONDITION_DATE_AFTER } from \"./condition/date/after.mjs\";\nimport { CONDITION_NAME as CONDITION_TOMORROW } from \"./condition/date/tomorrow.mjs\";\nimport { CONDITION_NAME as CONDITION_TODAY } from \"./condition/date/today.mjs\";\nimport { CONDITION_NAME as CONDITION_YESTERDAY } from \"./condition/date/yesterday.mjs\";\nimport { CONDITION_NAME as CONDITION_BY_VALUE } from \"./condition/byValue.mjs\";\nimport { CONDITION_NAME as CONDITION_TRUE } from \"./condition/true.mjs\";\nimport { CONDITION_NAME as CONDITION_FALSE } from \"./condition/false.mjs\";\nimport { OPERATION_ID as OPERATION_AND } from \"./logicalOperations/conjunction.mjs\";\nimport { OPERATION_ID as OPERATION_OR } from \"./logicalOperations/disjunction.mjs\";\nimport { OPERATION_ID as OPERATION_OR_THEN_VARIABLE } from \"./logicalOperations/disjunctionWithExtraCondition.mjs\";\nexport { CONDITION_NONE, CONDITION_EMPTY, CONDITION_NOT_EMPTY, CONDITION_EQUAL, CONDITION_NOT_EQUAL, CONDITION_GREATER_THAN, CONDITION_GREATER_THAN_OR_EQUAL, CONDITION_LESS_THAN, CONDITION_LESS_THAN_OR_EQUAL, CONDITION_BETWEEN, CONDITION_NOT_BETWEEN, CONDITION_BEGINS_WITH, CONDITION_ENDS_WITH, CONDITION_CONTAINS, CONDITION_NOT_CONTAINS, CONDITION_DATE_BEFORE, CONDITION_DATE_AFTER, CONDITION_TOMORROW, CONDITION_TODAY, CONDITION_YESTERDAY, CONDITION_BY_VALUE, CONDITION_TRUE, CONDITION_FALSE, OPERATION_AND, OPERATION_OR, OPERATION_OR_THEN_VARIABLE };\nexport var TYPE_NUMERIC = 'numeric';\nexport var TYPE_TEXT = 'text';\nexport var TYPE_DATE = 'date';\n/**\r\n * Default types and order for filter conditions.\r\n *\r\n * @type {object}\r\n */\n\nexport var TYPES = (_TYPES = {}, _defineProperty(_TYPES, TYPE_NUMERIC, [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_GREATER_THAN, CONDITION_GREATER_THAN_OR_EQUAL, CONDITION_LESS_THAN, CONDITION_LESS_THAN_OR_EQUAL, CONDITION_BETWEEN, CONDITION_NOT_BETWEEN]), _defineProperty(_TYPES, TYPE_TEXT, [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_BEGINS_WITH, CONDITION_ENDS_WITH, SEPARATOR, CONDITION_CONTAINS, CONDITION_NOT_CONTAINS]), _defineProperty(_TYPES, TYPE_DATE, [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_DATE_BEFORE, CONDITION_DATE_AFTER, CONDITION_BETWEEN, SEPARATOR, CONDITION_TOMORROW, CONDITION_TODAY, CONDITION_YESTERDAY]), _TYPES);\n/**\r\n * Get options list for conditional filter by data type (e.q: `'text'`, `'numeric'`, `'date'`).\r\n *\r\n * @param {string} type The data type.\r\n * @returns {object}\r\n */\n\nexport default function getOptionsList(type) {\n  var items = [];\n  var typeName = type;\n\n  if (!TYPES[typeName]) {\n    typeName = TYPE_TEXT;\n  }\n\n  arrayEach(TYPES[typeName], function (typeValue) {\n    var option;\n\n    if (typeValue === SEPARATOR) {\n      option = {\n        name: SEPARATOR\n      };\n    } else {\n      option = clone(getConditionDescriptor(typeValue));\n    }\n\n    items.push(option);\n  });\n  return items;\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/filters/constants.mjs"],"names":["_TYPES","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","clone","arrayEach","SEPARATOR","getConditionDescriptor","CONDITION_NAME","CONDITION_NONE","CONDITION_EMPTY","CONDITION_NOT_EMPTY","CONDITION_EQUAL","CONDITION_NOT_EQUAL","CONDITION_GREATER_THAN","CONDITION_GREATER_THAN_OR_EQUAL","CONDITION_LESS_THAN","CONDITION_LESS_THAN_OR_EQUAL","CONDITION_BETWEEN","CONDITION_NOT_BETWEEN","CONDITION_BEGINS_WITH","CONDITION_ENDS_WITH","CONDITION_CONTAINS","CONDITION_NOT_CONTAINS","CONDITION_DATE_BEFORE","CONDITION_DATE_AFTER","CONDITION_TOMORROW","CONDITION_TODAY","CONDITION_YESTERDAY","CONDITION_BY_VALUE","CONDITION_TRUE","CONDITION_FALSE","OPERATION_ID","OPERATION_AND","OPERATION_OR","OPERATION_OR_THEN_VARIABLE","TYPE_NUMERIC","TYPE_TEXT","TYPE_DATE","TYPES","getOptionsList","type","items","typeName","typeValue","option","name","push"],"mappings":"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","sourcesContent":["var _TYPES;\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\nimport { clone } from \"../../helpers/object.mjs\";\r\nimport { arrayEach } from \"../../helpers/array.mjs\";\r\nimport { SEPARATOR } from \"../contextMenu/predefinedItems.mjs\";\r\nimport { getConditionDescriptor } from \"./conditionRegisterer.mjs\";\r\nimport { CONDITION_NAME as CONDITION_NONE } from \"./condition/none.mjs\";\r\nimport { CONDITION_NAME as CONDITION_EMPTY } from \"./condition/empty.mjs\";\r\nimport { CONDITION_NAME as CONDITION_NOT_EMPTY } from \"./condition/notEmpty.mjs\";\r\nimport { CONDITION_NAME as CONDITION_EQUAL } from \"./condition/equal.mjs\";\r\nimport { CONDITION_NAME as CONDITION_NOT_EQUAL } from \"./condition/notEqual.mjs\";\r\nimport { CONDITION_NAME as CONDITION_GREATER_THAN } from \"./condition/greaterThan.mjs\";\r\nimport { CONDITION_NAME as CONDITION_GREATER_THAN_OR_EQUAL } from \"./condition/greaterThanOrEqual.mjs\";\r\nimport { CONDITION_NAME as CONDITION_LESS_THAN } from \"./condition/lessThan.mjs\";\r\nimport { CONDITION_NAME as CONDITION_LESS_THAN_OR_EQUAL } from \"./condition/lessThanOrEqual.mjs\";\r\nimport { CONDITION_NAME as CONDITION_BETWEEN } from \"./condition/between.mjs\";\r\nimport { CONDITION_NAME as CONDITION_NOT_BETWEEN } from \"./condition/notBetween.mjs\";\r\nimport { CONDITION_NAME as CONDITION_BEGINS_WITH } from \"./condition/beginsWith.mjs\";\r\nimport { CONDITION_NAME as CONDITION_ENDS_WITH } from \"./condition/endsWith.mjs\";\r\nimport { CONDITION_NAME as CONDITION_CONTAINS } from \"./condition/contains.mjs\";\r\nimport { CONDITION_NAME as CONDITION_NOT_CONTAINS } from \"./condition/notContains.mjs\";\r\nimport { CONDITION_NAME as CONDITION_DATE_BEFORE } from \"./condition/date/before.mjs\";\r\nimport { CONDITION_NAME as CONDITION_DATE_AFTER } from \"./condition/date/after.mjs\";\r\nimport { CONDITION_NAME as CONDITION_TOMORROW } from \"./condition/date/tomorrow.mjs\";\r\nimport { CONDITION_NAME as CONDITION_TODAY } from \"./condition/date/today.mjs\";\r\nimport { CONDITION_NAME as CONDITION_YESTERDAY } from \"./condition/date/yesterday.mjs\";\r\nimport { CONDITION_NAME as CONDITION_BY_VALUE } from \"./condition/byValue.mjs\";\r\nimport { CONDITION_NAME as CONDITION_TRUE } from \"./condition/true.mjs\";\r\nimport { CONDITION_NAME as CONDITION_FALSE } from \"./condition/false.mjs\";\r\nimport { OPERATION_ID as OPERATION_AND } from \"./logicalOperations/conjunction.mjs\";\r\nimport { OPERATION_ID as OPERATION_OR } from \"./logicalOperations/disjunction.mjs\";\r\nimport { OPERATION_ID as OPERATION_OR_THEN_VARIABLE } from \"./logicalOperations/disjunctionWithExtraCondition.mjs\";\r\nexport { CONDITION_NONE, CONDITION_EMPTY, CONDITION_NOT_EMPTY, CONDITION_EQUAL, CONDITION_NOT_EQUAL, CONDITION_GREATER_THAN, CONDITION_GREATER_THAN_OR_EQUAL, CONDITION_LESS_THAN, CONDITION_LESS_THAN_OR_EQUAL, CONDITION_BETWEEN, CONDITION_NOT_BETWEEN, CONDITION_BEGINS_WITH, CONDITION_ENDS_WITH, CONDITION_CONTAINS, CONDITION_NOT_CONTAINS, CONDITION_DATE_BEFORE, CONDITION_DATE_AFTER, CONDITION_TOMORROW, CONDITION_TODAY, CONDITION_YESTERDAY, CONDITION_BY_VALUE, CONDITION_TRUE, CONDITION_FALSE, OPERATION_AND, OPERATION_OR, OPERATION_OR_THEN_VARIABLE };\r\nexport var TYPE_NUMERIC = 'numeric';\r\nexport var TYPE_TEXT = 'text';\r\nexport var TYPE_DATE = 'date';\r\n/**\r\n * Default types and order for filter conditions.\r\n *\r\n * @type {object}\r\n */\r\n\r\nexport var TYPES = (_TYPES = {}, _defineProperty(_TYPES, TYPE_NUMERIC, [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_GREATER_THAN, CONDITION_GREATER_THAN_OR_EQUAL, CONDITION_LESS_THAN, CONDITION_LESS_THAN_OR_EQUAL, CONDITION_BETWEEN, CONDITION_NOT_BETWEEN]), _defineProperty(_TYPES, TYPE_TEXT, [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_BEGINS_WITH, CONDITION_ENDS_WITH, SEPARATOR, CONDITION_CONTAINS, CONDITION_NOT_CONTAINS]), _defineProperty(_TYPES, TYPE_DATE, [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_DATE_BEFORE, CONDITION_DATE_AFTER, CONDITION_BETWEEN, SEPARATOR, CONDITION_TOMORROW, CONDITION_TODAY, CONDITION_YESTERDAY]), _TYPES);\r\n/**\r\n * Get options list for conditional filter by data type (e.q: `'text'`, `'numeric'`, `'date'`).\r\n *\r\n * @param {string} type The data type.\r\n * @returns {object}\r\n */\r\n\r\nexport default function getOptionsList(type) {\r\n  var items = [];\r\n  var typeName = type;\r\n\r\n  if (!TYPES[typeName]) {\r\n    typeName = TYPE_TEXT;\r\n  }\r\n\r\n  arrayEach(TYPES[typeName], function (typeValue) {\r\n    var option;\r\n\r\n    if (typeValue === SEPARATOR) {\r\n      option = {\r\n        name: SEPARATOR\r\n      };\r\n    } else {\r\n      option = clone(getConditionDescriptor(typeValue));\r\n    }\r\n\r\n    items.push(option);\r\n  });\r\n  return items;\r\n}"]},"metadata":{},"sourceType":"module"}