{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\dragAndDrop\\\\dragAndDrop.js\";\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Dropzone from 'react-dropzone-uploader';\nimport React from 'react';\nimport { message } from 'antd';\nimport Alert from '@material-ui/lab/Alert';\nimport Collapse from '@material-ui/core/Collapse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Layout = ({\n  input,\n  previews,\n  submitButton,\n  dropzoneProps,\n  files,\n  extra: {\n    maxFiles\n  }\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [submitButton, /*#__PURE__*/_jsxDEV(\"div\", { ...dropzoneProps,\n      children: [previews, files.length < maxFiles && input]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Layout;\n\nclass DragAndDrop extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileList: [],\n      success: false,\n      error: false,\n      pipeError: false,\n      uploaded: false,\n      errorAlerts: [],\n      pipeErrorAlerts: [],\n      max: 0,\n      uploadingPreview: false,\n      uploading: false\n    };\n\n    this.handleSubmit = async (files, allFiles) => {\n      this.setState({\n        success: false,\n        uploaded: false,\n        error: false,\n        pipeError: false,\n        errorAlerts: [],\n        pipeErrorAlerts: [],\n        counter: 0,\n        max: files.length,\n        uploading: true\n      });\n      await allFiles.forEach(file => {\n        console.log(\"Empiezo el upload de \", file);\n        const formData = new FormData();\n        formData.append('file', file.file);\n\n        if (this.props.mode === \"upload\") {\n          if (process.env.REACT_APP_PROGRESS === \"0\") {\n            this.uploadFile(formData);\n          } else {\n            console.log(file.file.name);\n            fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/checkPipe/\" + file.file.name).then(response => response.json()).then(async json => {\n              console.log(json);\n\n              if (json.exists) {\n                console.log(\"existe\");\n                this.uploadFile(formData);\n              } else {\n                let joined = this.state.pipeErrorAlerts.concat(file.file.name);\n                this.setState({\n                  pipeErrorAlerts: joined,\n                  pipeError: true\n                });\n                let max = this.state.max - 1;\n                this.setState({\n                  max: max\n                });\n\n                if (max === 0) {\n                  this.setState({\n                    uploaded: true,\n                    uploading: false\n                  });\n                }\n              }\n            });\n          }\n        } else {\n          if (String(this.props.iso).trim() === String(file.file.name.split('.').slice(0, -1)).trim() || String(this.props.iso + '-CL').trim() === String(file.file.name.split('.').slice(0, -1)).trim()) {\n            this.updateFile(formData);\n          } else {\n            let joined = this.state.errorAlerts.concat(file.file.name);\n            this.setState({\n              errorAlerts: joined,\n              error: true,\n              uploading: false\n            });\n          }\n        }\n\n        file.remove();\n      });\n      this.setState({\n        uploaded: true\n      });\n      this.props.uploaded();\n    };\n  }\n\n  async uploadFile(file) {\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/upload\", {\n      // content-type header should not be specified!\n      method: 'POST',\n      body: file\n    }).then(response => {\n      // Do something with the successful response\n      if (response.status === 200) {\n        if (!this.state.success) {\n          this.setState({\n            success: true\n          });\n        }\n\n        let filename = null;\n\n        for (let value of file.values()) {\n          filename = value.name;\n        }\n\n        let extension = \"\";\n        let i = filename.lastIndexOf('.');\n        let cl = false;\n\n        if (i > 0) {\n          extension = filename.substring(i + 1);\n\n          if (filename.substring(i - 2) === 'CL.pdf') {\n            cl = true;\n          }\n        }\n\n        if (extension === \"pdf\" && !cl) {\n          let body = {\n            fileName: filename,\n            user: this.props.user\n          };\n          fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/uploadHis\", {\n            // content-type header should not be specified!\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n          }).catch(error => console.log(error));\n        }\n      } else {\n        for (let value of file.values()) {\n          let joined = this.state.errorAlerts.concat(value.name);\n          this.setState({\n            errorAlerts: joined,\n            error: true\n          });\n        }\n      }\n\n      let max = this.state.max - 1;\n      this.setState({\n        max: max\n      });\n      console.log(max);\n\n      if (max === 0) {\n        this.setState({\n          uploaded: true,\n          uploading: false\n        });\n      }\n    }).catch(error => message.error(error));\n    this.props.uploaded();\n  }\n\n  async updateFile(file) {\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/update\", {\n      // content-type header should not be specified!\n      method: 'POST',\n      body: file\n    }).then(response => {\n      // Do something with the successful response\n      if (response.status === 200) {\n        if (!this.state.success) {\n          this.setState({\n            success: true\n          });\n        }\n\n        let filename = null;\n\n        for (let value of file.values()) {\n          filename = value.name;\n        }\n\n        let extension = \"\";\n        let i = filename.lastIndexOf('.');\n\n        if (i > 0) {\n          extension = filename.substring(i + 1);\n        }\n\n        if (extension === \"pdf\") {\n          let body = {\n            file: filename,\n            user: this.props.user\n          };\n          fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/updateHis\", {\n            // content-type header should not be specified!\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n          }).then(response => console.log(response.json())).catch(error => message.error(error));\n        }\n      } else {\n        for (let value of file.values()) {\n          let joined = this.state.errorAlerts.concat(value.name);\n          this.setState({\n            errorAlerts: joined,\n            error: true\n          });\n        }\n      }\n\n      let max = this.state.max - 1;\n      this.setState({\n        max: max\n      });\n\n      if (max === 0) {\n        this.setState({\n          uploaded: true,\n          uploading: false\n        });\n      }\n    }).catch(error => message.error(error));\n  }\n\n  render() {\n    const errorAlerts = this.state.errorAlerts;\n    const pipeErrorAlerts = this.state.pipeErrorAlerts;\n    let errors = [];\n    let pipeErrors = [];\n\n    if (errorAlerts.length > 0) {\n      for (let i = 0; i < errorAlerts.length; i++) {\n        if (this.props.mode === \"upload\") {\n          errors.push( /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            children: [\"The file \", errorAlerts[i], \" already exists!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 23\n          }, this));\n        } else {\n          errors.push( /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            children: [\"The file \", errorAlerts[i], \" doesn't belong to this isometric!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 23\n          }, this));\n        }\n      }\n    }\n\n    if (pipeErrorAlerts.length > 0) {\n      for (let i = 0; i < pipeErrorAlerts.length; i++) {\n        pipeErrors.push( /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          children: [\"The file \", pipeErrorAlerts[i], \" doesn't belong to this project!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 27\n        }, this));\n      }\n    }\n\n    let inputContent = null;\n    let styles = null;\n\n    if (this.props.mode === \"upload\") {\n      inputContent = \"Drop isometrics here\";\n      styles = {\n        dropzone: {\n          maxHeight: '400px'\n        }\n      };\n    } else {\n      inputContent = \"Drop the files to update\";\n      styles = {\n        dropzone: {\n          height: '250px'\n        },\n        dropzoneActive: {\n          height: '300px'\n        },\n        previewContainer: {\n          height: '2px'\n        }\n      };\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Dropzone, {\n        LayoutComponent: Layout,\n        onSubmit: this.handleSubmit,\n        inputContent: inputContent,\n        styles: styles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: this.state.success,\n        children: /*#__PURE__*/_jsxDEV(Collapse, {\n          in: this.state.uploaded,\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            children: \"The files have been uploaded!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: this.state.error,\n        children: /*#__PURE__*/_jsxDEV(Collapse, {\n          in: this.state.uploaded,\n          children: errors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: this.state.pipeError,\n        children: /*#__PURE__*/_jsxDEV(Collapse, {\n          in: this.state.uploaded,\n          children: pipeErrors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: this.state.uploading,\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"info\",\n          children: \"The files are uploading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default DragAndDrop;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/dragAndDrop/dragAndDrop.js"],"names":["Dropzone","React","message","Alert","Collapse","Layout","input","previews","submitButton","dropzoneProps","files","extra","maxFiles","length","DragAndDrop","Component","state","fileList","success","error","pipeError","uploaded","errorAlerts","pipeErrorAlerts","max","uploadingPreview","uploading","handleSubmit","allFiles","setState","counter","forEach","file","console","log","formData","FormData","append","props","mode","process","env","REACT_APP_PROGRESS","uploadFile","name","fetch","REACT_APP_SERVER","REACT_APP_NODE_PORT","then","response","json","exists","joined","concat","String","iso","trim","split","slice","updateFile","remove","method","body","status","filename","value","values","extension","i","lastIndexOf","cl","substring","fileName","user","headers","JSON","stringify","catch","render","errors","pipeErrors","push","inputContent","styles","dropzone","maxHeight","height","dropzoneActive","previewContainer"],"mappings":"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","sourcesContent":["import 'react-dropzone-uploader/dist/styles.css'\r\nimport Dropzone from 'react-dropzone-uploader'\r\nimport React from 'react'\r\nimport {message} from'antd'\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse'\r\n\r\nconst Layout = ({ input, previews, submitButton, dropzoneProps, files, extra: { maxFiles } }) => {\r\n  return (\r\n    <div>\r\n      \r\n      {submitButton}\r\n      <div {...dropzoneProps}>\r\n      \r\n      {previews}\r\n      {files.length < maxFiles && input}\r\n        \r\n      </div>\r\n\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nclass DragAndDrop extends React.Component{\r\n\r\n  state = {\r\n    fileList: [],\r\n    success: false,\r\n    error: false,\r\n    pipeError: false,\r\n    uploaded: false,\r\n    errorAlerts: [],\r\n    pipeErrorAlerts: [],\r\n    max: 0,\r\n    uploadingPreview: false,\r\n    uploading: false\r\n  };\r\n\r\n  async uploadFile(file) {\r\n    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/upload\", {\r\n      // content-type header should not be specified!\r\n      method: 'POST',\r\n      body: file,\r\n    })\r\n      .then(response => {\r\n        // Do something with the successful response\r\n        if (response.status === 200){\r\n          if(!this.state.success){\r\n              this.setState({\r\n                success : true,\r\n              })\r\n          }\r\n\r\n          let filename = null;\r\n          for (let value of file.values()){\r\n            filename = value.name\r\n          }\r\n          let extension = \"\";\r\n          let i = filename.lastIndexOf('.');\r\n          let cl = false\r\n          if (i > 0) {\r\n            extension = filename.substring(i+1);\r\n            if(filename.substring(i-2) === 'CL.pdf'){\r\n              cl = true\r\n            }\r\n          }\r\n          if(extension === \"pdf\" && !cl){\r\n            let body =  {\r\n              fileName: filename,\r\n              user: this.props.user,\r\n            }\r\n            fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/uploadHis\", {\r\n              // content-type header should not be specified!\r\n              method: 'POST',\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\"\r\n              },\r\n              body: JSON.stringify(body)\r\n            }).catch(error =>console.log(error))\r\n          }\r\n        }else{\r\n          for (let value of file.values()) {\r\n            let joined = this.state.errorAlerts.concat(value.name);\r\n            this.setState({\r\n              errorAlerts : joined,\r\n              error: true\r\n            })\r\n          }\r\n        }\r\n        let max = this.state.max - 1\r\n        this.setState({\r\n          max: max\r\n        })\r\n        console.log(max)\r\n        if (max === 0){\r\n          this.setState({\r\n            uploaded: true,\r\n            uploading: false\r\n          })\r\n        }\r\n        \r\n      })\r\n      .catch(error => message.error(error)\r\n    );\r\n    this.props.uploaded()\r\n  }\r\n\r\n  async updateFile(file) {\r\n\r\n    \r\n    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/update\", {\r\n      // content-type header should not be specified!\r\n      method: 'POST',\r\n      body: file,\r\n    })\r\n      .then(response => {\r\n        // Do something with the successful response\r\n        if (response.status === 200){\r\n          if(!this.state.success){\r\n              this.setState({\r\n                success : true,\r\n              })\r\n          }\r\n\r\n          let filename = null;\r\n          for (let value of file.values()){\r\n            filename = value.name\r\n          }\r\n          let extension = \"\";\r\n          let i = filename.lastIndexOf('.');\r\n          if (i > 0) {\r\n            extension = filename.substring(i+1);\r\n          }\r\n          if(extension === \"pdf\"){\r\n            let body =  {\r\n              file: filename,\r\n              user: this.props.user,\r\n            }\r\n            fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/updateHis\", {\r\n              // content-type header should not be specified!\r\n              method: 'POST',\r\n              headers: {\r\n                \"Content-Type\": \"application/json\"\r\n              },\r\n              body: JSON.stringify(body)\r\n            }).then(response => console.log(response.json()))\r\n            .catch(error => message.error(error))\r\n          }\r\n        }else{\r\n          for (let value of file.values()) {\r\n            let joined = this.state.errorAlerts.concat(value.name);\r\n            this.setState({\r\n              errorAlerts : joined,\r\n              error: true\r\n            })\r\n          }\r\n        }\r\n        let max = this.state.max - 1\r\n        this.setState({\r\n          max: max\r\n        })\r\n        if (max === 0){\r\n          this.setState({\r\n            uploaded: true,\r\n            uploading: false\r\n          })\r\n        }\r\n        \r\n      })\r\n      .catch(error => message.error(error)\r\n    );\r\n  }\r\n\r\n\r\n  handleSubmit = async (files, allFiles) => {\r\n\r\n    this.setState({\r\n      success: false,\r\n      uploaded: false,\r\n      error: false,\r\n      pipeError: false,\r\n      errorAlerts: [],\r\n      pipeErrorAlerts: [],\r\n      counter: 0,\r\n      max: files.length,\r\n      uploading: true\r\n    })\r\n\r\n    await allFiles.forEach(file => {\r\n      console.log(\"Empiezo el upload de \", file)\r\n      const formData  = new FormData(); \r\n      formData.append('file', file.file);  \r\n      if(this.props.mode === \"upload\"){\r\n        if(process.env.REACT_APP_PROGRESS === \"0\"){\r\n          this.uploadFile(formData);\r\n        }else{\r\n          console.log(file.file.name)\r\n          fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/checkPipe/\"+file.file.name)\r\n          .then(response => response.json())\r\n          .then(async json =>{\r\n            console.log(json)\r\n            if(json.exists){\r\n              console.log(\"existe\")\r\n              this.uploadFile(formData);\r\n            }else{\r\n              let joined = this.state.pipeErrorAlerts.concat(file.file.name);\r\n              this.setState({\r\n                pipeErrorAlerts : joined,\r\n                pipeError: true\r\n              })\r\n              let max = this.state.max - 1\r\n              this.setState({\r\n                max: max\r\n              })\r\n              if (max === 0){\r\n                this.setState({\r\n                  uploaded: true,\r\n                  uploading: false\r\n                })\r\n              }\r\n            }\r\n          })\r\n        }\r\n        \r\n      }else{\r\n        if(String(this.props.iso).trim() === String(file.file.name.split('.').slice(0, -1)).trim() || \r\n           String(this.props.iso+'-CL').trim() === String(file.file.name.split('.').slice(0, -1)).trim() ){\r\n          this.updateFile(formData);\r\n        }else{\r\n          let joined = this.state.errorAlerts.concat(file.file.name);\r\n            this.setState({\r\n              errorAlerts : joined,\r\n              error: true,\r\n              uploading: false\r\n            })\r\n        }\r\n      }\r\n      file.remove();\r\n    });    \r\n    this.setState({\r\n      uploaded: true\r\n    })\r\n\r\n    this.props.uploaded()\r\n    \r\n\r\n  }\r\n\r\n  render(){\r\n\r\n    const errorAlerts = this.state.errorAlerts;\r\n    const pipeErrorAlerts = this.state.pipeErrorAlerts;\r\n    let errors = []\r\n    let pipeErrors = []\r\n    if(errorAlerts.length > 0){\r\n      for(let i = 0; i < errorAlerts.length; i++){\r\n        \r\n        if (this.props.mode === \"upload\"){\r\n          errors.push(<Alert severity=\"error\"\r\n          >\r\n            The file {errorAlerts[i]} already exists!\r\n\r\n          </Alert>)\r\n        }else{\r\n          errors.push(<Alert severity=\"error\"\r\n          >\r\n            The file {errorAlerts[i]} doesn't belong to this isometric!\r\n\r\n          </Alert>)\r\n        }\r\n      }\r\n    }\r\n\r\n    if(pipeErrorAlerts.length > 0){\r\n      for(let i = 0; i < pipeErrorAlerts.length; i++){\r\n        \r\n          pipeErrors.push(<Alert severity=\"error\"\r\n          >\r\n            The file {pipeErrorAlerts[i]} doesn't belong to this project!\r\n\r\n          </Alert>)\r\n      }\r\n    }\r\n    \r\n\r\n    let inputContent = null\r\n    let styles = null\r\n\r\n    if(this.props.mode === \"upload\"){\r\n      inputContent = \"Drop isometrics here\"\r\n      styles = {\r\n        dropzone: {\r\n          maxHeight: '400px',\r\n        },\r\n      }\r\n    }else{\r\n      inputContent = \"Drop the files to update\"\r\n      styles = {\r\n        dropzone: {\r\n          height: '250px'\r\n        },\r\n        dropzoneActive: {\r\n          height: '300px'\r\n        },\r\n        previewContainer:{\r\n          height: '2px'\r\n        }\r\n    }\r\n    \r\n  }\r\n\r\n    return (\r\n      <div>\r\n        <Dropzone\r\n          LayoutComponent={Layout}\r\n          onSubmit={this.handleSubmit}\r\n          inputContent= {inputContent}\r\n          styles={styles}\r\n        />\r\n\r\n        <Collapse in={this.state.success}>\r\n          <Collapse in={this.state.uploaded}>\r\n            <Alert\r\n            >\r\n              The files have been uploaded!\r\n\r\n            </Alert>\r\n          </Collapse>\r\n        </Collapse>\r\n\r\n        <Collapse in={this.state.error}>\r\n          <Collapse in={this.state.uploaded}>\r\n            {errors}\r\n          </Collapse>\r\n          \r\n        </Collapse>\r\n        <Collapse in={this.state.pipeError}>\r\n          <Collapse in={this.state.uploaded}>\r\n            {pipeErrors}\r\n          </Collapse>\r\n          \r\n        </Collapse>\r\n        <Collapse in={this.state.uploading}>\r\n          <Alert severity=\"info\"\r\n            >\r\n              The files are uploading...\r\n\r\n            </Alert>\r\n        </Collapse>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DragAndDrop;"]},"metadata":{},"sourceType":"module"}