{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { CellRange } from \"./../3rdparty/walkontable/src/index.mjs\";\nimport { arrayEach, arrayReduce } from \"./../helpers/array.mjs\";\nimport { isUndefined } from \"./../helpers/mixed.mjs\";\nexport var SELECTION_TYPE_UNRECOGNIZED = 0;\nexport var SELECTION_TYPE_EMPTY = 1;\nexport var SELECTION_TYPE_ARRAY = 2;\nexport var SELECTION_TYPE_OBJECT = 3;\nexport var SELECTION_TYPES = [SELECTION_TYPE_OBJECT, SELECTION_TYPE_ARRAY];\nvar ARRAY_TYPE_PATTERN = [['number'], ['number', 'string'], ['number', 'undefined'], ['number', 'string', 'undefined']];\nvar rootCall = Symbol('root');\nvar childCall = Symbol('child');\n/**\r\n * Detect selection schema structure.\r\n *\r\n * @param {*} selectionRanges The selected range or and array of selected ranges. This type of data is produced by\r\n * `hot.getSelected()`, `hot.getSelectedLast()`, `hot.getSelectedRange()`\r\n * and `hot.getSelectedRangeLast()` methods.\r\n * @param {symbol} _callSymbol The symbol object which indicates source of the helper invocation.\r\n * @returns {number} Returns a number that specifies the type of detected selection schema. If selection schema type\r\n * is unrecognized than it returns `0`.\r\n */\n\nexport function detectSelectionType(selectionRanges) {\n  var _callSymbol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rootCall;\n\n  if (_callSymbol !== rootCall && _callSymbol !== childCall) {\n    throw new Error('The second argument is used internally only and cannot be overwritten.');\n  }\n\n  var isArray = Array.isArray(selectionRanges);\n  var isRootCall = _callSymbol === rootCall;\n  var result = SELECTION_TYPE_UNRECOGNIZED;\n\n  if (isArray) {\n    var firstItem = selectionRanges[0];\n\n    if (selectionRanges.length === 0) {\n      result = SELECTION_TYPE_EMPTY;\n    } else if (isRootCall && firstItem instanceof CellRange) {\n      result = SELECTION_TYPE_OBJECT;\n    } else if (isRootCall && Array.isArray(firstItem)) {\n      result = detectSelectionType(firstItem, childCall);\n    } else if (selectionRanges.length >= 2 && selectionRanges.length <= 4) {\n      var isArrayType = !selectionRanges.some(function (value, index) {\n        return !ARRAY_TYPE_PATTERN[index].includes(_typeof(value));\n      });\n\n      if (isArrayType) {\n        result = SELECTION_TYPE_ARRAY;\n      }\n    }\n  }\n\n  return result;\n}\n/**\r\n * Factory function designed for normalization data schema from different data structures of the selection ranges.\r\n *\r\n * @param {string} type Selection type which will be processed.\r\n * @param {object} [options] The normalization options.\r\n * @param {boolean} [options.keepDirection=false] If `true`, the coordinates which contain the direction of the\r\n *                                                selected cells won't be changed. Otherwise, the selection will be\r\n *                                                normalized to values starting from top-left to bottom-right.\r\n * @param {Function} [options.propToCol] Pass the converting function (usually `datamap.propToCol`) if the column\r\n *                                       defined as props should be normalized to the numeric values.\r\n * @returns {number[]} Returns normalized data about selected range as an array (`[rowStart, columnStart, rowEnd, columnEnd]`).\r\n */\n\nexport function normalizeSelectionFactory(type) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$keepDirection = _ref.keepDirection,\n      keepDirection = _ref$keepDirection === void 0 ? false : _ref$keepDirection,\n      propToCol = _ref.propToCol;\n\n  if (!SELECTION_TYPES.includes(type)) {\n    throw new Error('Unsupported selection ranges schema type was provided.');\n  }\n\n  return function (selection) {\n    var isObjectType = type === SELECTION_TYPE_OBJECT;\n    var rowStart = isObjectType ? selection.from.row : selection[0];\n    var columnStart = isObjectType ? selection.from.col : selection[1];\n    var rowEnd = isObjectType ? selection.to.row : selection[2];\n    var columnEnd = isObjectType ? selection.to.col : selection[3];\n\n    if (typeof propToCol === 'function') {\n      if (typeof columnStart === 'string') {\n        columnStart = propToCol(columnStart);\n      }\n\n      if (typeof columnEnd === 'string') {\n        columnEnd = propToCol(columnEnd);\n      }\n    }\n\n    if (isUndefined(rowEnd)) {\n      rowEnd = rowStart;\n    }\n\n    if (isUndefined(columnEnd)) {\n      columnEnd = columnStart;\n    }\n\n    if (!keepDirection) {\n      var origRowStart = rowStart;\n      var origColumnStart = columnStart;\n      var origRowEnd = rowEnd;\n      var origColumnEnd = columnEnd;\n      rowStart = Math.min(origRowStart, origRowEnd);\n      columnStart = Math.min(origColumnStart, origColumnEnd);\n      rowEnd = Math.max(origRowStart, origRowEnd);\n      columnEnd = Math.max(origColumnStart, origColumnEnd);\n    }\n\n    return [rowStart, columnStart, rowEnd, columnEnd];\n  };\n}\n/**\r\n * Function transform selection ranges (produced by `hot.getSelected()` and `hot.getSelectedRange()`) to normalized\r\n * data structure. It merges repeated ranges into consecutive coordinates. The returned structure\r\n * contains an array of arrays. The single item contains at index 0 visual column index from the selection was\r\n * started and at index 1 distance as a count of selected columns.\r\n *\r\n * @param {Array[]|CellRange[]} selectionRanges Selection ranges produced by Handsontable.\r\n * @returns {Array[]} Returns an array of arrays with ranges defines in that schema:\r\n *                   `[[visualColumnStart, distance], [visualColumnStart, distance], ...]`.\r\n *                   The column distances are always created starting from the left (zero index) to the\r\n *                   right (the latest column index).\r\n */\n\nexport function transformSelectionToColumnDistance(selectionRanges) {\n  var selectionType = detectSelectionType(selectionRanges);\n\n  if (selectionType === SELECTION_TYPE_UNRECOGNIZED || selectionType === SELECTION_TYPE_EMPTY) {\n    return [];\n  }\n\n  var selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);\n  var unorderedIndexes = new Set(); // Iterate through all ranges and collect all column indexes which are not saved yet.\n\n  arrayEach(selectionRanges, function (selection) {\n    var _selectionSchemaNorma = selectionSchemaNormalizer(selection),\n        _selectionSchemaNorma2 = _slicedToArray(_selectionSchemaNorma, 4),\n        columnStart = _selectionSchemaNorma2[1],\n        columnEnd = _selectionSchemaNorma2[3];\n\n    var columnNonHeaderStart = Math.max(columnStart, 0);\n    var amount = columnEnd - columnNonHeaderStart + 1;\n    arrayEach(Array.from(new Array(amount), function (_, i) {\n      return columnNonHeaderStart + i;\n    }), function (index) {\n      if (!unorderedIndexes.has(index)) {\n        unorderedIndexes.add(index);\n      }\n    });\n  }); // Sort indexes in ascending order to easily detecting non-consecutive columns.\n\n  var orderedIndexes = Array.from(unorderedIndexes).sort(function (a, b) {\n    return a - b;\n  });\n  var normalizedColumnRanges = arrayReduce(orderedIndexes, function (acc, visualColumnIndex, index, array) {\n    if (index !== 0 && visualColumnIndex === array[index - 1] + 1) {\n      acc[acc.length - 1][1] += 1;\n    } else {\n      acc.push([visualColumnIndex, 1]);\n    }\n\n    return acc;\n  }, []);\n  return normalizedColumnRanges;\n}\n/**\r\n * Function transform selection ranges (produced by `hot.getSelected()` and `hot.getSelectedRange()`) to normalized\r\n * data structure. It merges repeated ranges into consecutive coordinates. The returned structure\r\n * contains an array of arrays. The single item contains at index 0 visual column index from the selection was\r\n * started and at index 1 distance as a count of selected columns.\r\n *\r\n * @param {Array[]|CellRange[]} selectionRanges Selection ranges produced by Handsontable.\r\n * @returns {Array[]} Returns an array of arrays with ranges defines in that schema:\r\n *                   `[[visualColumnStart, distance], [visualColumnStart, distance], ...]`.\r\n *                   The column distances are always created starting from the left (zero index) to the\r\n *                   right (the latest column index).\r\n */\n\nexport function transformSelectionToRowDistance(selectionRanges) {\n  var selectionType = detectSelectionType(selectionRanges);\n\n  if (selectionType === SELECTION_TYPE_UNRECOGNIZED || selectionType === SELECTION_TYPE_EMPTY) {\n    return [];\n  }\n\n  var selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);\n  var unorderedIndexes = new Set(); // Iterate through all ranges and collect all column indexes which are not saved yet.\n\n  arrayEach(selectionRanges, function (selection) {\n    var _selectionSchemaNorma3 = selectionSchemaNormalizer(selection),\n        _selectionSchemaNorma4 = _slicedToArray(_selectionSchemaNorma3, 3),\n        rowStart = _selectionSchemaNorma4[0],\n        rowEnd = _selectionSchemaNorma4[2];\n\n    var rowNonHeaderStart = Math.max(rowStart, 0);\n    var amount = rowEnd - rowNonHeaderStart + 1;\n    arrayEach(Array.from(new Array(amount), function (_, i) {\n      return rowNonHeaderStart + i;\n    }), function (index) {\n      if (!unorderedIndexes.has(index)) {\n        unorderedIndexes.add(index);\n      }\n    });\n  }); // Sort indexes in ascending order to easily detecting non-consecutive columns.\n\n  var orderedIndexes = Array.from(unorderedIndexes).sort(function (a, b) {\n    return a - b;\n  });\n  var normalizedRowRanges = arrayReduce(orderedIndexes, function (acc, rowIndex, index, array) {\n    if (index !== 0 && rowIndex === array[index - 1] + 1) {\n      acc[acc.length - 1][1] += 1;\n    } else {\n      acc.push([rowIndex, 1]);\n    }\n\n    return acc;\n  }, []);\n  return normalizedRowRanges;\n}\n/**\r\n * Check if passed value can be treated as valid cell coordinate. The second argument is\r\n * used to check if the value doesn't exceed the defined max table rows/columns count.\r\n *\r\n * @param {number} coord The coordinate to validate (row index or column index).\r\n * @param {number} maxTableItemsCount The value that declares the maximum coordinate that is still validatable.\r\n * @returns {boolean}\r\n */\n\nexport function isValidCoord(coord) {\n  var maxTableItemsCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  return typeof coord === 'number' && coord >= 0 && coord < maxTableItemsCount;\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/selection/utils.mjs"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","_typeof","obj","CellRange","arrayEach","arrayReduce","isUndefined","SELECTION_TYPE_UNRECOGNIZED","SELECTION_TYPE_EMPTY","SELECTION_TYPE_ARRAY","SELECTION_TYPE_OBJECT","SELECTION_TYPES","ARRAY_TYPE_PATTERN","rootCall","childCall","detectSelectionType","selectionRanges","_callSymbol","arguments","undefined","Error","isRootCall","result","firstItem","isArrayType","some","index","includes","normalizeSelectionFactory","type","_ref","_ref$keepDirection","keepDirection","propToCol","selection","isObjectType","rowStart","row","columnStart","col","rowEnd","to","columnEnd","origRowStart","origColumnStart","origRowEnd","origColumnEnd","Math","min","max","transformSelectionToColumnDistance","selectionType","selectionSchemaNormalizer","unorderedIndexes","Set","_selectionSchemaNorma","_selectionSchemaNorma2","columnNonHeaderStart","amount","_","has","add","orderedIndexes","sort","a","b","normalizedColumnRanges","acc","visualColumnIndex","array","transformSelectionToRowDistance","_selectionSchemaNorma3","_selectionSchemaNorma4","rowNonHeaderStart","normalizedRowRanges","rowIndex","isValidCoord","coord","maxTableItemsCount","Infinity"],"mappings":"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","sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\r\n\r\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\r\n\r\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\r\n\r\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\r\n\r\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nimport \"core-js/modules/es.symbol.js\";\r\nimport \"core-js/modules/es.symbol.description.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.array.includes.js\";\r\nimport \"core-js/modules/es.string.includes.js\";\r\nimport \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.set.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\nimport \"core-js/modules/es.array.from.js\";\r\nimport \"core-js/modules/es.array.sort.js\";\r\nimport \"core-js/modules/es.symbol.iterator.js\";\r\nimport \"core-js/modules/es.array.slice.js\";\r\nimport \"core-js/modules/es.function.name.js\";\r\nimport { CellRange } from \"./../3rdparty/walkontable/src/index.mjs\";\r\nimport { arrayEach, arrayReduce } from \"./../helpers/array.mjs\";\r\nimport { isUndefined } from \"./../helpers/mixed.mjs\";\r\nexport var SELECTION_TYPE_UNRECOGNIZED = 0;\r\nexport var SELECTION_TYPE_EMPTY = 1;\r\nexport var SELECTION_TYPE_ARRAY = 2;\r\nexport var SELECTION_TYPE_OBJECT = 3;\r\nexport var SELECTION_TYPES = [SELECTION_TYPE_OBJECT, SELECTION_TYPE_ARRAY];\r\nvar ARRAY_TYPE_PATTERN = [['number'], ['number', 'string'], ['number', 'undefined'], ['number', 'string', 'undefined']];\r\nvar rootCall = Symbol('root');\r\nvar childCall = Symbol('child');\r\n/**\r\n * Detect selection schema structure.\r\n *\r\n * @param {*} selectionRanges The selected range or and array of selected ranges. This type of data is produced by\r\n * `hot.getSelected()`, `hot.getSelectedLast()`, `hot.getSelectedRange()`\r\n * and `hot.getSelectedRangeLast()` methods.\r\n * @param {symbol} _callSymbol The symbol object which indicates source of the helper invocation.\r\n * @returns {number} Returns a number that specifies the type of detected selection schema. If selection schema type\r\n * is unrecognized than it returns `0`.\r\n */\r\n\r\nexport function detectSelectionType(selectionRanges) {\r\n  var _callSymbol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rootCall;\r\n\r\n  if (_callSymbol !== rootCall && _callSymbol !== childCall) {\r\n    throw new Error('The second argument is used internally only and cannot be overwritten.');\r\n  }\r\n\r\n  var isArray = Array.isArray(selectionRanges);\r\n  var isRootCall = _callSymbol === rootCall;\r\n  var result = SELECTION_TYPE_UNRECOGNIZED;\r\n\r\n  if (isArray) {\r\n    var firstItem = selectionRanges[0];\r\n\r\n    if (selectionRanges.length === 0) {\r\n      result = SELECTION_TYPE_EMPTY;\r\n    } else if (isRootCall && firstItem instanceof CellRange) {\r\n      result = SELECTION_TYPE_OBJECT;\r\n    } else if (isRootCall && Array.isArray(firstItem)) {\r\n      result = detectSelectionType(firstItem, childCall);\r\n    } else if (selectionRanges.length >= 2 && selectionRanges.length <= 4) {\r\n      var isArrayType = !selectionRanges.some(function (value, index) {\r\n        return !ARRAY_TYPE_PATTERN[index].includes(_typeof(value));\r\n      });\r\n\r\n      if (isArrayType) {\r\n        result = SELECTION_TYPE_ARRAY;\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n/**\r\n * Factory function designed for normalization data schema from different data structures of the selection ranges.\r\n *\r\n * @param {string} type Selection type which will be processed.\r\n * @param {object} [options] The normalization options.\r\n * @param {boolean} [options.keepDirection=false] If `true`, the coordinates which contain the direction of the\r\n *                                                selected cells won't be changed. Otherwise, the selection will be\r\n *                                                normalized to values starting from top-left to bottom-right.\r\n * @param {Function} [options.propToCol] Pass the converting function (usually `datamap.propToCol`) if the column\r\n *                                       defined as props should be normalized to the numeric values.\r\n * @returns {number[]} Returns normalized data about selected range as an array (`[rowStart, columnStart, rowEnd, columnEnd]`).\r\n */\r\n\r\nexport function normalizeSelectionFactory(type) {\r\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n      _ref$keepDirection = _ref.keepDirection,\r\n      keepDirection = _ref$keepDirection === void 0 ? false : _ref$keepDirection,\r\n      propToCol = _ref.propToCol;\r\n\r\n  if (!SELECTION_TYPES.includes(type)) {\r\n    throw new Error('Unsupported selection ranges schema type was provided.');\r\n  }\r\n\r\n  return function (selection) {\r\n    var isObjectType = type === SELECTION_TYPE_OBJECT;\r\n    var rowStart = isObjectType ? selection.from.row : selection[0];\r\n    var columnStart = isObjectType ? selection.from.col : selection[1];\r\n    var rowEnd = isObjectType ? selection.to.row : selection[2];\r\n    var columnEnd = isObjectType ? selection.to.col : selection[3];\r\n\r\n    if (typeof propToCol === 'function') {\r\n      if (typeof columnStart === 'string') {\r\n        columnStart = propToCol(columnStart);\r\n      }\r\n\r\n      if (typeof columnEnd === 'string') {\r\n        columnEnd = propToCol(columnEnd);\r\n      }\r\n    }\r\n\r\n    if (isUndefined(rowEnd)) {\r\n      rowEnd = rowStart;\r\n    }\r\n\r\n    if (isUndefined(columnEnd)) {\r\n      columnEnd = columnStart;\r\n    }\r\n\r\n    if (!keepDirection) {\r\n      var origRowStart = rowStart;\r\n      var origColumnStart = columnStart;\r\n      var origRowEnd = rowEnd;\r\n      var origColumnEnd = columnEnd;\r\n      rowStart = Math.min(origRowStart, origRowEnd);\r\n      columnStart = Math.min(origColumnStart, origColumnEnd);\r\n      rowEnd = Math.max(origRowStart, origRowEnd);\r\n      columnEnd = Math.max(origColumnStart, origColumnEnd);\r\n    }\r\n\r\n    return [rowStart, columnStart, rowEnd, columnEnd];\r\n  };\r\n}\r\n/**\r\n * Function transform selection ranges (produced by `hot.getSelected()` and `hot.getSelectedRange()`) to normalized\r\n * data structure. It merges repeated ranges into consecutive coordinates. The returned structure\r\n * contains an array of arrays. The single item contains at index 0 visual column index from the selection was\r\n * started and at index 1 distance as a count of selected columns.\r\n *\r\n * @param {Array[]|CellRange[]} selectionRanges Selection ranges produced by Handsontable.\r\n * @returns {Array[]} Returns an array of arrays with ranges defines in that schema:\r\n *                   `[[visualColumnStart, distance], [visualColumnStart, distance], ...]`.\r\n *                   The column distances are always created starting from the left (zero index) to the\r\n *                   right (the latest column index).\r\n */\r\n\r\nexport function transformSelectionToColumnDistance(selectionRanges) {\r\n  var selectionType = detectSelectionType(selectionRanges);\r\n\r\n  if (selectionType === SELECTION_TYPE_UNRECOGNIZED || selectionType === SELECTION_TYPE_EMPTY) {\r\n    return [];\r\n  }\r\n\r\n  var selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);\r\n  var unorderedIndexes = new Set(); // Iterate through all ranges and collect all column indexes which are not saved yet.\r\n\r\n  arrayEach(selectionRanges, function (selection) {\r\n    var _selectionSchemaNorma = selectionSchemaNormalizer(selection),\r\n        _selectionSchemaNorma2 = _slicedToArray(_selectionSchemaNorma, 4),\r\n        columnStart = _selectionSchemaNorma2[1],\r\n        columnEnd = _selectionSchemaNorma2[3];\r\n\r\n    var columnNonHeaderStart = Math.max(columnStart, 0);\r\n    var amount = columnEnd - columnNonHeaderStart + 1;\r\n    arrayEach(Array.from(new Array(amount), function (_, i) {\r\n      return columnNonHeaderStart + i;\r\n    }), function (index) {\r\n      if (!unorderedIndexes.has(index)) {\r\n        unorderedIndexes.add(index);\r\n      }\r\n    });\r\n  }); // Sort indexes in ascending order to easily detecting non-consecutive columns.\r\n\r\n  var orderedIndexes = Array.from(unorderedIndexes).sort(function (a, b) {\r\n    return a - b;\r\n  });\r\n  var normalizedColumnRanges = arrayReduce(orderedIndexes, function (acc, visualColumnIndex, index, array) {\r\n    if (index !== 0 && visualColumnIndex === array[index - 1] + 1) {\r\n      acc[acc.length - 1][1] += 1;\r\n    } else {\r\n      acc.push([visualColumnIndex, 1]);\r\n    }\r\n\r\n    return acc;\r\n  }, []);\r\n  return normalizedColumnRanges;\r\n}\r\n/**\r\n * Function transform selection ranges (produced by `hot.getSelected()` and `hot.getSelectedRange()`) to normalized\r\n * data structure. It merges repeated ranges into consecutive coordinates. The returned structure\r\n * contains an array of arrays. The single item contains at index 0 visual column index from the selection was\r\n * started and at index 1 distance as a count of selected columns.\r\n *\r\n * @param {Array[]|CellRange[]} selectionRanges Selection ranges produced by Handsontable.\r\n * @returns {Array[]} Returns an array of arrays with ranges defines in that schema:\r\n *                   `[[visualColumnStart, distance], [visualColumnStart, distance], ...]`.\r\n *                   The column distances are always created starting from the left (zero index) to the\r\n *                   right (the latest column index).\r\n */\r\n\r\nexport function transformSelectionToRowDistance(selectionRanges) {\r\n  var selectionType = detectSelectionType(selectionRanges);\r\n\r\n  if (selectionType === SELECTION_TYPE_UNRECOGNIZED || selectionType === SELECTION_TYPE_EMPTY) {\r\n    return [];\r\n  }\r\n\r\n  var selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);\r\n  var unorderedIndexes = new Set(); // Iterate through all ranges and collect all column indexes which are not saved yet.\r\n\r\n  arrayEach(selectionRanges, function (selection) {\r\n    var _selectionSchemaNorma3 = selectionSchemaNormalizer(selection),\r\n        _selectionSchemaNorma4 = _slicedToArray(_selectionSchemaNorma3, 3),\r\n        rowStart = _selectionSchemaNorma4[0],\r\n        rowEnd = _selectionSchemaNorma4[2];\r\n\r\n    var rowNonHeaderStart = Math.max(rowStart, 0);\r\n    var amount = rowEnd - rowNonHeaderStart + 1;\r\n    arrayEach(Array.from(new Array(amount), function (_, i) {\r\n      return rowNonHeaderStart + i;\r\n    }), function (index) {\r\n      if (!unorderedIndexes.has(index)) {\r\n        unorderedIndexes.add(index);\r\n      }\r\n    });\r\n  }); // Sort indexes in ascending order to easily detecting non-consecutive columns.\r\n\r\n  var orderedIndexes = Array.from(unorderedIndexes).sort(function (a, b) {\r\n    return a - b;\r\n  });\r\n  var normalizedRowRanges = arrayReduce(orderedIndexes, function (acc, rowIndex, index, array) {\r\n    if (index !== 0 && rowIndex === array[index - 1] + 1) {\r\n      acc[acc.length - 1][1] += 1;\r\n    } else {\r\n      acc.push([rowIndex, 1]);\r\n    }\r\n\r\n    return acc;\r\n  }, []);\r\n  return normalizedRowRanges;\r\n}\r\n/**\r\n * Check if passed value can be treated as valid cell coordinate. The second argument is\r\n * used to check if the value doesn't exceed the defined max table rows/columns count.\r\n *\r\n * @param {number} coord The coordinate to validate (row index or column index).\r\n * @param {number} maxTableItemsCount The value that declares the maximum coordinate that is still validatable.\r\n * @returns {boolean}\r\n */\r\n\r\nexport function isValidCoord(coord) {\r\n  var maxTableItemsCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\r\n  return typeof coord === 'number' && coord >= 0 && coord < maxTableItemsCount;\r\n}"]},"metadata":{},"sourceType":"module"}