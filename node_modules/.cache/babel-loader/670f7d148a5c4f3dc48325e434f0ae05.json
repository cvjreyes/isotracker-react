{"ast":null,"code":"/**\n * Utility to register editors and common namespace for keeping reference to all editor classes.\n */\nimport Hooks from \"../pluginHooks.mjs\";\nimport staticRegister from \"../utils/staticRegister.mjs\";\nvar registeredEditorClasses = new WeakMap();\n\nvar _staticRegister = staticRegister('editors'),\n    register = _staticRegister.register,\n    getItem = _staticRegister.getItem,\n    hasItem = _staticRegister.hasItem,\n    getNames = _staticRegister.getNames,\n    getValues = _staticRegister.getValues;\n/**\n * @param {BaseEditor} editorClass The editor constructor.\n */\n\n\nexport function RegisteredEditor(editorClass) {\n  var instances = {};\n  var Clazz = editorClass;\n\n  this.getConstructor = function () {\n    return editorClass;\n  };\n\n  this.getInstance = function (hotInstance) {\n    if (!(hotInstance.guid in instances)) {\n      instances[hotInstance.guid] = new Clazz(hotInstance);\n    }\n\n    return instances[hotInstance.guid];\n  };\n\n  Hooks.getSingleton().add('afterDestroy', function () {\n    instances[this.guid] = null;\n  });\n}\n/**\n * Returns instance (singleton) of editor class.\n *\n * @param {string} name Name of an editor under which it has been stored.\n * @param {object} hotInstance Instance of Handsontable.\n * @returns {Function} Returns instance of editor.\n */\n\nexport function _getEditorInstance(name, hotInstance) {\n  var editor;\n\n  if (typeof name === 'function') {\n    if (!registeredEditorClasses.get(name)) {\n      _register(null, name);\n    }\n\n    editor = registeredEditorClasses.get(name);\n  } else if (typeof name === 'string') {\n    editor = getItem(name);\n  } else {\n    throw Error('Only strings and functions can be passed as \"editor\" parameter');\n  }\n\n  if (!editor) {\n    throw Error(\"No editor registered under name \\\"\".concat(name, \"\\\"\"));\n  }\n\n  return editor.getInstance(hotInstance);\n}\n/**\n * Retrieve editor class.\n *\n * @param {string} name Editor identification.\n * @returns {Function} Returns editor class.\n */\n\nfunction _getItem(name) {\n  if (!hasItem(name)) {\n    throw Error(\"No registered editor found under \\\"\".concat(name, \"\\\" name\"));\n  }\n\n  return getItem(name).getConstructor();\n}\n/**\n * Register editor class under specified name.\n *\n * @param {string} name Editor identification.\n * @param {Function} editorClass Editor class.\n */\n\n\nfunction _register(name, editorClass) {\n  if (name && typeof name !== 'string') {\n    editorClass = name;\n    name = editorClass.EDITOR_TYPE;\n  }\n\n  var editorWrapper = new RegisteredEditor(editorClass);\n\n  if (typeof name === 'string') {\n    register(name, editorWrapper);\n  }\n\n  registeredEditorClasses.set(editorClass, editorWrapper);\n}\n\nexport { _register as registerEditor, _getItem as getEditor, _getEditorInstance as getEditorInstance, hasItem as hasEditor, getNames as getRegisteredEditorNames, getValues as getRegisteredEditors };","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/editors/registry.mjs"],"names":["Hooks","staticRegister","registeredEditorClasses","WeakMap","_staticRegister","register","getItem","hasItem","getNames","getValues","RegisteredEditor","editorClass","instances","Clazz","getConstructor","getInstance","hotInstance","guid","getSingleton","add","_getEditorInstance","name","editor","get","_register","Error","concat","_getItem","EDITOR_TYPE","editorWrapper","set","registerEditor","getEditor","getEditorInstance","hasEditor","getRegisteredEditorNames","getRegisteredEditors"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\n/**\n * Utility to register editors and common namespace for keeping reference to all editor classes.\n */\nimport Hooks from \"../pluginHooks.mjs\";\nimport staticRegister from \"../utils/staticRegister.mjs\";\nvar registeredEditorClasses = new WeakMap();\n\nvar _staticRegister = staticRegister('editors'),\n    register = _staticRegister.register,\n    getItem = _staticRegister.getItem,\n    hasItem = _staticRegister.hasItem,\n    getNames = _staticRegister.getNames,\n    getValues = _staticRegister.getValues;\n/**\n * @param {BaseEditor} editorClass The editor constructor.\n */\n\n\nexport function RegisteredEditor(editorClass) {\n  var instances = {};\n  var Clazz = editorClass;\n\n  this.getConstructor = function () {\n    return editorClass;\n  };\n\n  this.getInstance = function (hotInstance) {\n    if (!(hotInstance.guid in instances)) {\n      instances[hotInstance.guid] = new Clazz(hotInstance);\n    }\n\n    return instances[hotInstance.guid];\n  };\n\n  Hooks.getSingleton().add('afterDestroy', function () {\n    instances[this.guid] = null;\n  });\n}\n/**\n * Returns instance (singleton) of editor class.\n *\n * @param {string} name Name of an editor under which it has been stored.\n * @param {object} hotInstance Instance of Handsontable.\n * @returns {Function} Returns instance of editor.\n */\n\nexport function _getEditorInstance(name, hotInstance) {\n  var editor;\n\n  if (typeof name === 'function') {\n    if (!registeredEditorClasses.get(name)) {\n      _register(null, name);\n    }\n\n    editor = registeredEditorClasses.get(name);\n  } else if (typeof name === 'string') {\n    editor = getItem(name);\n  } else {\n    throw Error('Only strings and functions can be passed as \"editor\" parameter');\n  }\n\n  if (!editor) {\n    throw Error(\"No editor registered under name \\\"\".concat(name, \"\\\"\"));\n  }\n\n  return editor.getInstance(hotInstance);\n}\n/**\n * Retrieve editor class.\n *\n * @param {string} name Editor identification.\n * @returns {Function} Returns editor class.\n */\n\nfunction _getItem(name) {\n  if (!hasItem(name)) {\n    throw Error(\"No registered editor found under \\\"\".concat(name, \"\\\" name\"));\n  }\n\n  return getItem(name).getConstructor();\n}\n/**\n * Register editor class under specified name.\n *\n * @param {string} name Editor identification.\n * @param {Function} editorClass Editor class.\n */\n\n\nfunction _register(name, editorClass) {\n  if (name && typeof name !== 'string') {\n    editorClass = name;\n    name = editorClass.EDITOR_TYPE;\n  }\n\n  var editorWrapper = new RegisteredEditor(editorClass);\n\n  if (typeof name === 'string') {\n    register(name, editorWrapper);\n  }\n\n  registeredEditorClasses.set(editorClass, editorWrapper);\n}\n\nexport { _register as registerEditor, _getItem as getEditor, _getEditorInstance as getEditorInstance, hasItem as hasEditor, getNames as getRegisteredEditorNames, getValues as getRegisteredEditors };"]},"metadata":{},"sourceType":"module"}