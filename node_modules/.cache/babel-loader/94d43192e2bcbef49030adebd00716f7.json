{"ast":null,"code":"import * as C from \"../../../i18n/constants.mjs\";\nimport MergedCellCoords from \"../cellCoords.mjs\";\n/**\r\n * @param {*} plugin The plugin instance.\r\n * @returns {object}\r\n */\n\nexport default function toggleMergeItem(plugin) {\n  return {\n    key: 'mergeCells',\n    name: function name() {\n      var sel = this.getSelectedLast();\n\n      if (sel) {\n        var info = plugin.mergedCellsCollection.get(sel[0], sel[1]);\n\n        if (info.row === sel[0] && info.col === sel[1] && info.row + info.rowspan - 1 === sel[2] && info.col + info.colspan - 1 === sel[3]) {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_UNMERGE_CELLS);\n        }\n      }\n\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_MERGE_CELLS);\n    },\n    callback: function callback() {\n      plugin.toggleMergeOnSelection();\n    },\n    disabled: function disabled() {\n      var sel = this.getSelectedLast();\n\n      if (!sel) {\n        return true;\n      }\n\n      var isSingleCell = MergedCellCoords.isSingleCell({\n        row: sel[0],\n        col: sel[1],\n        rowspan: sel[2] - sel[0] + 1,\n        colspan: sel[3] - sel[1] + 1\n      });\n      return isSingleCell || this.selection.isSelectedByCorner();\n    },\n    hidden: false\n  };\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/mergeCells/contextMenuItem/toggleMerge.mjs"],"names":["C","MergedCellCoords","toggleMergeItem","plugin","key","name","sel","getSelectedLast","info","mergedCellsCollection","get","row","col","rowspan","colspan","getTranslatedPhrase","CONTEXTMENU_ITEMS_UNMERGE_CELLS","CONTEXTMENU_ITEMS_MERGE_CELLS","callback","toggleMergeOnSelection","disabled","isSingleCell","selection","isSelectedByCorner","hidden"],"mappings":"AAAA,OAAO,KAAKA,CAAZ,MAAmB,6BAAnB;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;AAC9C,SAAO;AACLC,IAAAA,GAAG,EAAE,YADA;AAELC,IAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,UAAIC,GAAG,GAAG,KAAKC,eAAL,EAAV;;AAEA,UAAID,GAAJ,EAAS;AACP,YAAIE,IAAI,GAAGL,MAAM,CAACM,qBAAP,CAA6BC,GAA7B,CAAiCJ,GAAG,CAAC,CAAD,CAApC,EAAyCA,GAAG,CAAC,CAAD,CAA5C,CAAX;;AAEA,YAAIE,IAAI,CAACG,GAAL,KAAaL,GAAG,CAAC,CAAD,CAAhB,IAAuBE,IAAI,CAACI,GAAL,KAAaN,GAAG,CAAC,CAAD,CAAvC,IAA8CE,IAAI,CAACG,GAAL,GAAWH,IAAI,CAACK,OAAhB,GAA0B,CAA1B,KAAgCP,GAAG,CAAC,CAAD,CAAjF,IAAwFE,IAAI,CAACI,GAAL,GAAWJ,IAAI,CAACM,OAAhB,GAA0B,CAA1B,KAAgCR,GAAG,CAAC,CAAD,CAA/H,EAAoI;AAClI,iBAAO,KAAKS,mBAAL,CAAyBf,CAAC,CAACgB,+BAA3B,CAAP;AACD;AACF;;AAED,aAAO,KAAKD,mBAAL,CAAyBf,CAAC,CAACiB,6BAA3B,CAAP;AACD,KAdI;AAeLC,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5Bf,MAAAA,MAAM,CAACgB,sBAAP;AACD,KAjBI;AAkBLC,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,UAAId,GAAG,GAAG,KAAKC,eAAL,EAAV;;AAEA,UAAI,CAACD,GAAL,EAAU;AACR,eAAO,IAAP;AACD;;AAED,UAAIe,YAAY,GAAGpB,gBAAgB,CAACoB,YAAjB,CAA8B;AAC/CV,QAAAA,GAAG,EAAEL,GAAG,CAAC,CAAD,CADuC;AAE/CM,QAAAA,GAAG,EAAEN,GAAG,CAAC,CAAD,CAFuC;AAG/CO,QAAAA,OAAO,EAAEP,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAZ,GAAkB,CAHoB;AAI/CQ,QAAAA,OAAO,EAAER,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAZ,GAAkB;AAJoB,OAA9B,CAAnB;AAMA,aAAOe,YAAY,IAAI,KAAKC,SAAL,CAAeC,kBAAf,EAAvB;AACD,KAhCI;AAiCLC,IAAAA,MAAM,EAAE;AAjCH,GAAP;AAmCD","sourcesContent":["import * as C from \"../../../i18n/constants.mjs\";\r\nimport MergedCellCoords from \"../cellCoords.mjs\";\r\n/**\r\n * @param {*} plugin The plugin instance.\r\n * @returns {object}\r\n */\r\n\r\nexport default function toggleMergeItem(plugin) {\r\n  return {\r\n    key: 'mergeCells',\r\n    name: function name() {\r\n      var sel = this.getSelectedLast();\r\n\r\n      if (sel) {\r\n        var info = plugin.mergedCellsCollection.get(sel[0], sel[1]);\r\n\r\n        if (info.row === sel[0] && info.col === sel[1] && info.row + info.rowspan - 1 === sel[2] && info.col + info.colspan - 1 === sel[3]) {\r\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_UNMERGE_CELLS);\r\n        }\r\n      }\r\n\r\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_MERGE_CELLS);\r\n    },\r\n    callback: function callback() {\r\n      plugin.toggleMergeOnSelection();\r\n    },\r\n    disabled: function disabled() {\r\n      var sel = this.getSelectedLast();\r\n\r\n      if (!sel) {\r\n        return true;\r\n      }\r\n\r\n      var isSingleCell = MergedCellCoords.isSingleCell({\r\n        row: sel[0],\r\n        col: sel[1],\r\n        rowspan: sel[2] - sel[0] + 1,\r\n        colspan: sel[3] - sel[1] + 1\r\n      });\r\n      return isSingleCell || this.selection.isSelectedByCorner();\r\n    },\r\n    hidden: false\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}