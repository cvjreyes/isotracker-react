{"ast":null,"code":"!function (e) {\n  if (\"object\" == typeof exports && \"undefined\" != typeof module) module.exports = e();else if (\"function\" == typeof define && define.amd) define([], e);else {\n    (\"undefined\" != typeof window ? window : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : this).numbro = e();\n  }\n}(function () {\n  return function a(o, u, c) {\n    function s(t, e) {\n      if (!u[t]) {\n        if (!o[t]) {\n          var r = \"function\" == typeof require && require;\n          if (!e && r) return r(t, !0);\n          if (l) return l(t, !0);\n          var n = new Error(\"Cannot find module '\" + t + \"'\");\n          throw n.code = \"MODULE_NOT_FOUND\", n;\n        }\n\n        var i = u[t] = {\n          exports: {}\n        };\n        o[t][0].call(i.exports, function (e) {\n          return s(o[t][1][e] || e);\n        }, i, i.exports, a, o, u, c);\n      }\n\n      return u[t].exports;\n    }\n\n    for (var l = \"function\" == typeof require && require, e = 0; e < c.length; e++) s(c[e]);\n\n    return s;\n  }({\n    1: [function (e, r, t) {\n      !function (e) {\n        \"use strict\";\n\n        var t,\n            k = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n            _ = Math.ceil,\n            L = Math.floor,\n            T = \"[BigNumber Error] \",\n            P = T + \"Number primitive has more than 15 significant digits: \",\n            U = 1e14,\n            j = 14,\n            C = 9007199254740991,\n            R = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n            I = 1e7,\n            $ = 1e9;\n\n        function G(e) {\n          var t = 0 | e;\n          return 0 < e || e === t ? t : t - 1;\n        }\n\n        function V(e) {\n          for (var t, r, n = 1, i = e.length, a = e[0] + \"\"; n < i;) {\n            for (t = e[n++] + \"\", r = j - t.length; r--; t = \"0\" + t);\n\n            a += t;\n          }\n\n          for (i = a.length; 48 === a.charCodeAt(--i););\n\n          return a.slice(0, i + 1 || 1);\n        }\n\n        function q(e, t) {\n          var r,\n              n,\n              i = e.c,\n              a = t.c,\n              o = e.s,\n              u = t.s,\n              c = e.e,\n              s = t.e;\n          if (!o || !u) return null;\n          if (r = i && !i[0], n = a && !a[0], r || n) return r ? n ? 0 : -u : o;\n          if (o != u) return o;\n          if (r = o < 0, n = c == s, !i || !a) return n ? 0 : !i ^ r ? 1 : -1;\n          if (!n) return s < c ^ r ? 1 : -1;\n\n          for (u = (c = i.length) < (s = a.length) ? c : s, o = 0; o < u; o++) if (i[o] != a[o]) return i[o] > a[o] ^ r ? 1 : -1;\n\n          return c == s ? 0 : s < c ^ r ? 1 : -1;\n        }\n\n        function Z(e, t, r, n) {\n          if (e < t || r < e || e !== (e < 0 ? _(e) : L(e))) throw Error(T + (n || \"Argument\") + (\"number\" == typeof e ? e < t || r < e ? \" out of range: \" : \" not an integer: \" : \" not a primitive number: \") + String(e));\n        }\n\n        function z(e) {\n          var t = e.c.length - 1;\n          return G(e.e / j) == t && e.c[t] % 2 != 0;\n        }\n\n        function W(e, t) {\n          return (1 < e.length ? e.charAt(0) + \".\" + e.slice(1) : e) + (t < 0 ? \"e\" : \"e+\") + t;\n        }\n\n        function H(e, t, r) {\n          var n, i;\n\n          if (t < 0) {\n            for (i = r + \".\"; ++t; i += r);\n\n            e = i + e;\n          } else if (++t > (n = e.length)) {\n            for (i = r, t -= n; --t; i += r);\n\n            e += i;\n          } else t < n && (e = e.slice(0, t) + \".\" + e.slice(t));\n\n          return e;\n        }\n\n        (t = function e(t) {\n          var y,\n              f,\n              p,\n              r,\n              s,\n              o,\n              u,\n              c,\n              l,\n              g,\n              n = A.prototype = {\n            constructor: A,\n            toString: null,\n            valueOf: null\n          },\n              d = new A(1),\n              b = 20,\n              w = 4,\n              h = -7,\n              v = 21,\n              m = -1e7,\n              O = 1e7,\n              x = !1,\n              a = 1,\n              S = 0,\n              N = {\n            prefix: \"\",\n            groupSize: 3,\n            secondaryGroupSize: 0,\n            groupSeparator: \",\",\n            decimalSeparator: \".\",\n            fractionGroupSize: 0,\n            fractionGroupSeparator: \"Â \",\n            suffix: \"\"\n          },\n              M = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n\n          function A(e, t) {\n            var r,\n                n,\n                i,\n                a,\n                o,\n                u,\n                c,\n                s,\n                l = this;\n            if (!(l instanceof A)) return new A(e, t);\n\n            if (null == t) {\n              if (e instanceof A) return l.s = e.s, l.e = e.e, void (l.c = (e = e.c) ? e.slice() : e);\n\n              if ((u = \"number\" == typeof e) && 0 * e == 0) {\n                if (l.s = 1 / e < 0 ? (e = -e, -1) : 1, e === ~~e) {\n                  for (a = 0, o = e; 10 <= o; o /= 10, a++);\n\n                  return l.e = a, void (l.c = [e]);\n                }\n\n                s = String(e);\n              } else {\n                if (s = String(e), !k.test(s)) return p(l, s, u);\n                l.s = 45 == s.charCodeAt(0) ? (s = s.slice(1), -1) : 1;\n              }\n\n              -1 < (a = s.indexOf(\".\")) && (s = s.replace(\".\", \"\")), 0 < (o = s.search(/e/i)) ? (a < 0 && (a = o), a += +s.slice(o + 1), s = s.substring(0, o)) : a < 0 && (a = s.length);\n            } else {\n              if (Z(t, 2, M.length, \"Base\"), s = String(e), 10 == t) return E(l = new A(e instanceof A ? e : s), b + l.e + 1, w);\n\n              if (u = \"number\" == typeof e) {\n                if (0 * e != 0) return p(l, s, u, t);\n                if (l.s = 1 / e < 0 ? (s = s.slice(1), -1) : 1, A.DEBUG && 15 < s.replace(/^0\\.0*|\\./, \"\").length) throw Error(P + e);\n                u = !1;\n              } else l.s = 45 === s.charCodeAt(0) ? (s = s.slice(1), -1) : 1;\n\n              for (r = M.slice(0, t), a = o = 0, c = s.length; o < c; o++) if (r.indexOf(n = s.charAt(o)) < 0) {\n                if (\".\" == n) {\n                  if (a < o) {\n                    a = c;\n                    continue;\n                  }\n                } else if (!i && (s == s.toUpperCase() && (s = s.toLowerCase()) || s == s.toLowerCase() && (s = s.toUpperCase()))) {\n                  i = !0, o = -1, a = 0;\n                  continue;\n                }\n\n                return p(l, String(e), u, t);\n              }\n\n              -1 < (a = (s = f(s, t, 10, l.s)).indexOf(\".\")) ? s = s.replace(\".\", \"\") : a = s.length;\n            }\n\n            for (o = 0; 48 === s.charCodeAt(o); o++);\n\n            for (c = s.length; 48 === s.charCodeAt(--c););\n\n            if (s = s.slice(o, ++c)) {\n              if (c -= o, u && A.DEBUG && 15 < c && (C < e || e !== L(e))) throw Error(P + l.s * e);\n              if (O < (a = a - o - 1)) l.c = l.e = null;else if (a < m) l.c = [l.e = 0];else {\n                if (l.e = a, l.c = [], o = (a + 1) % j, a < 0 && (o += j), o < c) {\n                  for (o && l.c.push(+s.slice(0, o)), c -= j; o < c;) l.c.push(+s.slice(o, o += j));\n\n                  s = s.slice(o), o = j - s.length;\n                } else o -= c;\n\n                for (; o--; s += \"0\");\n\n                l.c.push(+s);\n              }\n            } else l.c = [l.e = 0];\n          }\n\n          function i(e, t, r, n) {\n            var i, a, o, u, c;\n            if (null == r ? r = w : Z(r, 0, 8), !e.c) return e.toString();\n            if (i = e.c[0], o = e.e, null == t) c = V(e.c), c = 1 == n || 2 == n && (o <= h || v <= o) ? W(c, o) : H(c, o, \"0\");else if (a = (e = E(new A(e), t, r)).e, u = (c = V(e.c)).length, 1 == n || 2 == n && (t <= a || a <= h)) {\n              for (; u < t; c += \"0\", u++);\n\n              c = W(c, a);\n            } else if (t -= o, c = H(c, a, \"0\"), u < a + 1) {\n              if (0 < --t) for (c += \".\"; t--; c += \"0\");\n            } else if (0 < (t += a - u)) for (a + 1 == u && (c += \".\"); t--; c += \"0\");\n            return e.s < 0 && i ? \"-\" + c : c;\n          }\n\n          function B(e, t) {\n            for (var r, n = 1, i = new A(e[0]); n < e.length; n++) {\n              if (!(r = new A(e[n])).s) {\n                i = r;\n                break;\n              }\n\n              t.call(i, r) && (i = r);\n            }\n\n            return i;\n          }\n\n          function D(e, t, r) {\n            for (var n = 1, i = t.length; !t[--i]; t.pop());\n\n            for (i = t[0]; 10 <= i; i /= 10, n++);\n\n            return (r = n + r * j - 1) > O ? e.c = e.e = null : e.c = r < m ? [e.e = 0] : (e.e = r, t), e;\n          }\n\n          function E(e, t, r, n) {\n            var i,\n                a,\n                o,\n                u,\n                c,\n                s,\n                l,\n                f = e.c,\n                p = R;\n\n            if (f) {\n              e: {\n                for (i = 1, u = f[0]; 10 <= u; u /= 10, i++);\n\n                if ((a = t - i) < 0) a += j, o = t, l = (c = f[s = 0]) / p[i - o - 1] % 10 | 0;else if ((s = _((a + 1) / j)) >= f.length) {\n                  if (!n) break e;\n\n                  for (; f.length <= s; f.push(0));\n\n                  c = l = 0, o = (a %= j) - j + (i = 1);\n                } else {\n                  for (c = u = f[s], i = 1; 10 <= u; u /= 10, i++);\n\n                  l = (o = (a %= j) - j + i) < 0 ? 0 : c / p[i - o - 1] % 10 | 0;\n                }\n                if (n = n || t < 0 || null != f[s + 1] || (o < 0 ? c : c % p[i - o - 1]), n = r < 4 ? (l || n) && (0 == r || r == (e.s < 0 ? 3 : 2)) : 5 < l || 5 == l && (4 == r || n || 6 == r && (0 < a ? 0 < o ? c / p[i - o] : 0 : f[s - 1]) % 10 & 1 || r == (e.s < 0 ? 8 : 7)), t < 1 || !f[0]) return f.length = 0, n ? (t -= e.e + 1, f[0] = p[(j - t % j) % j], e.e = -t || 0) : f[0] = e.e = 0, e;\n                if (0 == a ? (f.length = s, u = 1, s--) : (f.length = s + 1, u = p[j - a], f[s] = 0 < o ? L(c / p[i - o] % p[o]) * u : 0), n) for (;;) {\n                  if (0 == s) {\n                    for (a = 1, o = f[0]; 10 <= o; o /= 10, a++);\n\n                    for (o = f[0] += u, u = 1; 10 <= o; o /= 10, u++);\n\n                    a != u && (e.e++, f[0] == U && (f[0] = 1));\n                    break;\n                  }\n\n                  if (f[s] += u, f[s] != U) break;\n                  f[s--] = 0, u = 1;\n                }\n\n                for (a = f.length; 0 === f[--a]; f.pop());\n              }\n\n              e.e > O ? e.c = e.e = null : e.e < m && (e.c = [e.e = 0]);\n            }\n\n            return e;\n          }\n\n          function F(e) {\n            var t,\n                r = e.e;\n            return null === r ? e.toString() : (t = V(e.c), t = r <= h || v <= r ? W(t, r) : H(t, r, \"0\"), e.s < 0 ? \"-\" + t : t);\n          }\n\n          return A.clone = e, A.ROUND_UP = 0, A.ROUND_DOWN = 1, A.ROUND_CEIL = 2, A.ROUND_FLOOR = 3, A.ROUND_HALF_UP = 4, A.ROUND_HALF_DOWN = 5, A.ROUND_HALF_EVEN = 6, A.ROUND_HALF_CEIL = 7, A.ROUND_HALF_FLOOR = 8, A.EUCLID = 9, A.config = A.set = function (e) {\n            var t, r;\n\n            if (null != e) {\n              if (\"object\" != typeof e) throw Error(T + \"Object expected: \" + e);\n              if (e.hasOwnProperty(t = \"DECIMAL_PLACES\") && (Z(r = e[t], 0, $, t), b = r), e.hasOwnProperty(t = \"ROUNDING_MODE\") && (Z(r = e[t], 0, 8, t), w = r), e.hasOwnProperty(t = \"EXPONENTIAL_AT\") && ((r = e[t]) && r.pop ? (Z(r[0], -$, 0, t), Z(r[1], 0, $, t), h = r[0], v = r[1]) : (Z(r, -$, $, t), h = -(v = r < 0 ? -r : r))), e.hasOwnProperty(t = \"RANGE\")) if ((r = e[t]) && r.pop) Z(r[0], -$, -1, t), Z(r[1], 1, $, t), m = r[0], O = r[1];else {\n                if (Z(r, -$, $, t), !r) throw Error(T + t + \" cannot be zero: \" + r);\n                m = -(O = r < 0 ? -r : r);\n              }\n\n              if (e.hasOwnProperty(t = \"CRYPTO\")) {\n                if ((r = e[t]) !== !!r) throw Error(T + t + \" not true or false: \" + r);\n\n                if (r) {\n                  if (\"undefined\" == typeof crypto || !crypto || !crypto.getRandomValues && !crypto.randomBytes) throw x = !r, Error(T + \"crypto unavailable\");\n                  x = r;\n                } else x = r;\n              }\n\n              if (e.hasOwnProperty(t = \"MODULO_MODE\") && (Z(r = e[t], 0, 9, t), a = r), e.hasOwnProperty(t = \"POW_PRECISION\") && (Z(r = e[t], 0, $, t), S = r), e.hasOwnProperty(t = \"FORMAT\")) {\n                if (\"object\" != typeof (r = e[t])) throw Error(T + t + \" not an object: \" + r);\n                N = r;\n              }\n\n              if (e.hasOwnProperty(t = \"ALPHABET\")) {\n                if (\"string\" != typeof (r = e[t]) || /^.$|[+-.\\s]|(.).*\\1/.test(r)) throw Error(T + t + \" invalid: \" + r);\n                M = r;\n              }\n            }\n\n            return {\n              DECIMAL_PLACES: b,\n              ROUNDING_MODE: w,\n              EXPONENTIAL_AT: [h, v],\n              RANGE: [m, O],\n              CRYPTO: x,\n              MODULO_MODE: a,\n              POW_PRECISION: S,\n              FORMAT: N,\n              ALPHABET: M\n            };\n          }, A.isBigNumber = function (e) {\n            return e instanceof A || e && !0 === e._isBigNumber || !1;\n          }, A.maximum = A.max = function () {\n            return B(arguments, n.lt);\n          }, A.minimum = A.min = function () {\n            return B(arguments, n.gt);\n          }, A.random = (r = 9007199254740992, s = Math.random() * r & 2097151 ? function () {\n            return L(Math.random() * r);\n          } : function () {\n            return 8388608 * (1073741824 * Math.random() | 0) + (8388608 * Math.random() | 0);\n          }, function (e) {\n            var t,\n                r,\n                n,\n                i,\n                a,\n                o = 0,\n                u = [],\n                c = new A(d);\n            if (null == e ? e = b : Z(e, 0, $), i = _(e / j), x) if (crypto.getRandomValues) {\n              for (t = crypto.getRandomValues(new Uint32Array(i *= 2)); o < i;) 9e15 <= (a = 131072 * t[o] + (t[o + 1] >>> 11)) ? (r = crypto.getRandomValues(new Uint32Array(2)), t[o] = r[0], t[o + 1] = r[1]) : (u.push(a % 1e14), o += 2);\n\n              o = i / 2;\n            } else {\n              if (!crypto.randomBytes) throw x = !1, Error(T + \"crypto unavailable\");\n\n              for (t = crypto.randomBytes(i *= 7); o < i;) 9e15 <= (a = 281474976710656 * (31 & t[o]) + 1099511627776 * t[o + 1] + 4294967296 * t[o + 2] + 16777216 * t[o + 3] + (t[o + 4] << 16) + (t[o + 5] << 8) + t[o + 6]) ? crypto.randomBytes(7).copy(t, o) : (u.push(a % 1e14), o += 7);\n\n              o = i / 7;\n            }\n            if (!x) for (; o < i;) (a = s()) < 9e15 && (u[o++] = a % 1e14);\n\n            for (i = u[--o], e %= j, i && e && (a = R[j - e], u[o] = L(i / a) * a); 0 === u[o]; u.pop(), o--);\n\n            if (o < 0) u = [n = 0];else {\n              for (n = -1; 0 === u[0]; u.splice(0, 1), n -= j);\n\n              for (o = 1, a = u[0]; 10 <= a; a /= 10, o++);\n\n              o < j && (n -= j - o);\n            }\n            return c.e = n, c.c = u, c;\n          }), A.sum = function () {\n            for (var e = 1, t = arguments, r = new A(t[0]); e < t.length;) r = r.plus(t[e++]);\n\n            return r;\n          }, f = function () {\n            var v = \"0123456789\";\n\n            function m(e, t, r, n) {\n              for (var i, a, o = [0], u = 0, c = e.length; u < c;) {\n                for (a = o.length; a--; o[a] *= t);\n\n                for (o[0] += n.indexOf(e.charAt(u++)), i = 0; i < o.length; i++) o[i] > r - 1 && (null == o[i + 1] && (o[i + 1] = 0), o[i + 1] += o[i] / r | 0, o[i] %= r);\n              }\n\n              return o.reverse();\n            }\n\n            return function (e, t, r, n, i) {\n              var a,\n                  o,\n                  u,\n                  c,\n                  s,\n                  l,\n                  f,\n                  p,\n                  g = e.indexOf(\".\"),\n                  h = b,\n                  d = w;\n\n              for (0 <= g && (c = S, S = 0, e = e.replace(\".\", \"\"), l = (p = new A(t)).pow(e.length - g), S = c, p.c = m(H(V(l.c), l.e, \"0\"), 10, r, v), p.e = p.c.length), u = c = (f = m(e, t, r, i ? (a = M, v) : (a = v, M))).length; 0 == f[--c]; f.pop());\n\n              if (!f[0]) return a.charAt(0);\n              if (g < 0 ? --u : (l.c = f, l.e = u, l.s = n, f = (l = y(l, p, h, d, r)).c, s = l.r, u = l.e), g = f[o = u + h + 1], c = r / 2, s = s || o < 0 || null != f[o + 1], s = d < 4 ? (null != g || s) && (0 == d || d == (l.s < 0 ? 3 : 2)) : c < g || g == c && (4 == d || s || 6 == d && 1 & f[o - 1] || d == (l.s < 0 ? 8 : 7)), o < 1 || !f[0]) e = s ? H(a.charAt(1), -h, a.charAt(0)) : a.charAt(0);else {\n                if (f.length = o, s) for (--r; ++f[--o] > r;) f[o] = 0, o || (++u, f = [1].concat(f));\n\n                for (c = f.length; !f[--c];);\n\n                for (g = 0, e = \"\"; g <= c; e += a.charAt(f[g++]));\n\n                e = H(e, u, a.charAt(0));\n              }\n              return e;\n            };\n          }(), y = function () {\n            function M(e, t, r) {\n              var n,\n                  i,\n                  a,\n                  o,\n                  u = 0,\n                  c = e.length,\n                  s = t % I,\n                  l = t / I | 0;\n\n              for (e = e.slice(); c--;) u = ((i = s * (a = e[c] % I) + (n = l * a + (o = e[c] / I | 0) * s) % I * I + u) / r | 0) + (n / I | 0) + l * o, e[c] = i % r;\n\n              return u && (e = [u].concat(e)), e;\n            }\n\n            function B(e, t, r, n) {\n              var i, a;\n              if (r != n) a = n < r ? 1 : -1;else for (i = a = 0; i < r; i++) if (e[i] != t[i]) {\n                a = e[i] > t[i] ? 1 : -1;\n                break;\n              }\n              return a;\n            }\n\n            function D(e, t, r, n) {\n              for (var i = 0; r--;) e[r] -= i, i = e[r] < t[r] ? 1 : 0, e[r] = i * n + e[r] - t[r];\n\n              for (; !e[0] && 1 < e.length; e.splice(0, 1));\n            }\n\n            return function (e, t, r, n, i) {\n              var a,\n                  o,\n                  u,\n                  c,\n                  s,\n                  l,\n                  f,\n                  p,\n                  g,\n                  h,\n                  d,\n                  v,\n                  m,\n                  y,\n                  b,\n                  w,\n                  O,\n                  x = e.s == t.s ? 1 : -1,\n                  S = e.c,\n                  N = t.c;\n              if (!(S && S[0] && N && N[0])) return new A(e.s && t.s && (S ? !N || S[0] != N[0] : N) ? S && 0 == S[0] || !N ? 0 * x : x / 0 : NaN);\n\n              for (g = (p = new A(x)).c = [], x = r + (o = e.e - t.e) + 1, i || (i = U, o = G(e.e / j) - G(t.e / j), x = x / j | 0), u = 0; N[u] == (S[u] || 0); u++);\n\n              if (N[u] > (S[u] || 0) && o--, x < 0) g.push(1), c = !0;else {\n                for (y = S.length, w = N.length, x += 2, 1 < (s = L(i / (N[u = 0] + 1))) && (N = M(N, s, i), S = M(S, s, i), w = N.length, y = S.length), m = w, d = (h = S.slice(0, w)).length; d < w; h[d++] = 0);\n\n                O = N.slice(), O = [0].concat(O), b = N[0], N[1] >= i / 2 && b++;\n\n                do {\n                  if (s = 0, (a = B(N, h, w, d)) < 0) {\n                    if (v = h[0], w != d && (v = v * i + (h[1] || 0)), 1 < (s = L(v / b))) for (i <= s && (s = i - 1), f = (l = M(N, s, i)).length, d = h.length; 1 == B(l, h, f, d);) s--, D(l, w < f ? O : N, f, i), f = l.length, a = 1;else 0 == s && (a = s = 1), f = (l = N.slice()).length;\n                    if (f < d && (l = [0].concat(l)), D(h, l, d, i), d = h.length, -1 == a) for (; B(N, h, w, d) < 1;) s++, D(h, w < d ? O : N, d, i), d = h.length;\n                  } else 0 === a && (s++, h = [0]);\n\n                  g[u++] = s, h[0] ? h[d++] = S[m] || 0 : (h = [S[m]], d = 1);\n                } while ((m++ < y || null != h[0]) && x--);\n\n                c = null != h[0], g[0] || g.splice(0, 1);\n              }\n\n              if (i == U) {\n                for (u = 1, x = g[0]; 10 <= x; x /= 10, u++);\n\n                E(p, r + (p.e = u + o * j - 1) + 1, n, c);\n              } else p.e = o, p.r = +c;\n\n              return p;\n            };\n          }(), o = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i, u = /^([^.]+)\\.$/, c = /^\\.([^.]+)$/, l = /^-?(Infinity|NaN)$/, g = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g, p = function (e, t, r, n) {\n            var i,\n                a = r ? t : t.replace(g, \"\");\n            if (l.test(a)) e.s = isNaN(a) ? null : a < 0 ? -1 : 1, e.c = e.e = null;else {\n              if (!r && (a = a.replace(o, function (e, t, r) {\n                return i = \"x\" == (r = r.toLowerCase()) ? 16 : \"b\" == r ? 2 : 8, n && n != i ? e : t;\n              }), n && (i = n, a = a.replace(u, \"$1\").replace(c, \"0.$1\")), t != a)) return new A(a, i);\n              if (A.DEBUG) throw Error(T + \"Not a\" + (n ? \" base \" + n : \"\") + \" number: \" + t);\n              e.c = e.e = e.s = null;\n            }\n          }, n.absoluteValue = n.abs = function () {\n            var e = new A(this);\n            return e.s < 0 && (e.s = 1), e;\n          }, n.comparedTo = function (e, t) {\n            return q(this, new A(e, t));\n          }, n.decimalPlaces = n.dp = function (e, t) {\n            var r, n, i;\n            if (null != e) return Z(e, 0, $), null == t ? t = w : Z(t, 0, 8), E(new A(this), e + this.e + 1, t);\n            if (!(r = this.c)) return null;\n            if (n = ((i = r.length - 1) - G(this.e / j)) * j, i = r[i]) for (; i % 10 == 0; i /= 10, n--);\n            return n < 0 && (n = 0), n;\n          }, n.dividedBy = n.div = function (e, t) {\n            return y(this, new A(e, t), b, w);\n          }, n.dividedToIntegerBy = n.idiv = function (e, t) {\n            return y(this, new A(e, t), 0, 1);\n          }, n.exponentiatedBy = n.pow = function (e, t) {\n            var r,\n                n,\n                i,\n                a,\n                o,\n                u,\n                c,\n                s,\n                l = this;\n            if ((e = new A(e)).c && !e.isInteger()) throw Error(T + \"Exponent not an integer: \" + F(e));\n            if (null != t && (t = new A(t)), o = 14 < e.e, !l.c || !l.c[0] || 1 == l.c[0] && !l.e && 1 == l.c.length || !e.c || !e.c[0]) return s = new A(Math.pow(+F(l), o ? 2 - z(e) : +F(e))), t ? s.mod(t) : s;\n\n            if (u = e.s < 0, t) {\n              if (t.c ? !t.c[0] : !t.s) return new A(NaN);\n              (n = !u && l.isInteger() && t.isInteger()) && (l = l.mod(t));\n            } else {\n              if (9 < e.e && (0 < l.e || l.e < -1 || (0 == l.e ? 1 < l.c[0] || o && 24e7 <= l.c[1] : l.c[0] < 8e13 || o && l.c[0] <= 9999975e7))) return a = l.s < 0 && z(e) ? -0 : 0, -1 < l.e && (a = 1 / a), new A(u ? 1 / a : a);\n              S && (a = _(S / j + 2));\n            }\n\n            for (c = o ? (r = new A(.5), u && (e.s = 1), z(e)) : (i = Math.abs(+F(e))) % 2, s = new A(d);;) {\n              if (c) {\n                if (!(s = s.times(l)).c) break;\n                a ? s.c.length > a && (s.c.length = a) : n && (s = s.mod(t));\n              }\n\n              if (i) {\n                if (0 === (i = L(i / 2))) break;\n                c = i % 2;\n              } else if (E(e = e.times(r), e.e + 1, 1), 14 < e.e) c = z(e);else {\n                if (0 == (i = +F(e))) break;\n                c = i % 2;\n              }\n\n              l = l.times(l), a ? l.c && l.c.length > a && (l.c.length = a) : n && (l = l.mod(t));\n            }\n\n            return n ? s : (u && (s = d.div(s)), t ? s.mod(t) : a ? E(s, S, w, void 0) : s);\n          }, n.integerValue = function (e) {\n            var t = new A(this);\n            return null == e ? e = w : Z(e, 0, 8), E(t, t.e + 1, e);\n          }, n.isEqualTo = n.eq = function (e, t) {\n            return 0 === q(this, new A(e, t));\n          }, n.isFinite = function () {\n            return !!this.c;\n          }, n.isGreaterThan = n.gt = function (e, t) {\n            return 0 < q(this, new A(e, t));\n          }, n.isGreaterThanOrEqualTo = n.gte = function (e, t) {\n            return 1 === (t = q(this, new A(e, t))) || 0 === t;\n          }, n.isInteger = function () {\n            return !!this.c && G(this.e / j) > this.c.length - 2;\n          }, n.isLessThan = n.lt = function (e, t) {\n            return q(this, new A(e, t)) < 0;\n          }, n.isLessThanOrEqualTo = n.lte = function (e, t) {\n            return -1 === (t = q(this, new A(e, t))) || 0 === t;\n          }, n.isNaN = function () {\n            return !this.s;\n          }, n.isNegative = function () {\n            return this.s < 0;\n          }, n.isPositive = function () {\n            return 0 < this.s;\n          }, n.isZero = function () {\n            return !!this.c && 0 == this.c[0];\n          }, n.minus = function (e, t) {\n            var r,\n                n,\n                i,\n                a,\n                o = this,\n                u = o.s;\n            if (t = (e = new A(e, t)).s, !u || !t) return new A(NaN);\n            if (u != t) return e.s = -t, o.plus(e);\n            var c = o.e / j,\n                s = e.e / j,\n                l = o.c,\n                f = e.c;\n\n            if (!c || !s) {\n              if (!l || !f) return l ? (e.s = -t, e) : new A(f ? o : NaN);\n              if (!l[0] || !f[0]) return f[0] ? (e.s = -t, e) : new A(l[0] ? o : 3 == w ? -0 : 0);\n            }\n\n            if (c = G(c), s = G(s), l = l.slice(), u = c - s) {\n              for ((i = (a = u < 0) ? (u = -u, l) : (s = c, f)).reverse(), t = u; t--; i.push(0));\n\n              i.reverse();\n            } else for (n = (a = (u = l.length) < (t = f.length)) ? u : t, u = t = 0; t < n; t++) if (l[t] != f[t]) {\n              a = l[t] < f[t];\n              break;\n            }\n\n            if (a && (i = l, l = f, f = i, e.s = -e.s), 0 < (t = (n = f.length) - (r = l.length))) for (; t--; l[r++] = 0);\n\n            for (t = U - 1; u < n;) {\n              if (l[--n] < f[n]) {\n                for (r = n; r && !l[--r]; l[r] = t);\n\n                --l[r], l[n] += U;\n              }\n\n              l[n] -= f[n];\n            }\n\n            for (; 0 == l[0]; l.splice(0, 1), --s);\n\n            return l[0] ? D(e, l, s) : (e.s = 3 == w ? -1 : 1, e.c = [e.e = 0], e);\n          }, n.modulo = n.mod = function (e, t) {\n            var r,\n                n,\n                i = this;\n            return e = new A(e, t), !i.c || !e.s || e.c && !e.c[0] ? new A(NaN) : !e.c || i.c && !i.c[0] ? new A(i) : (9 == a ? (n = e.s, e.s = 1, r = y(i, e, 0, 3), e.s = n, r.s *= n) : r = y(i, e, 0, a), (e = i.minus(r.times(e))).c[0] || 1 != a || (e.s = i.s), e);\n          }, n.multipliedBy = n.times = function (e, t) {\n            var r,\n                n,\n                i,\n                a,\n                o,\n                u,\n                c,\n                s,\n                l,\n                f,\n                p,\n                g,\n                h,\n                d,\n                v,\n                m = this,\n                y = m.c,\n                b = (e = new A(e, t)).c;\n            if (!(y && b && y[0] && b[0])) return !m.s || !e.s || y && !y[0] && !b || b && !b[0] && !y ? e.c = e.e = e.s = null : (e.s *= m.s, y && b ? (e.c = [0], e.e = 0) : e.c = e.e = null), e;\n\n            for (n = G(m.e / j) + G(e.e / j), e.s *= m.s, (c = y.length) < (f = b.length) && (h = y, y = b, b = h, i = c, c = f, f = i), i = c + f, h = []; i--; h.push(0));\n\n            for (d = U, v = I, i = f; 0 <= --i;) {\n              for (r = 0, p = b[i] % v, g = b[i] / v | 0, a = i + (o = c); i < a;) r = ((s = p * (s = y[--o] % v) + (u = g * s + (l = y[o] / v | 0) * p) % v * v + h[a] + r) / d | 0) + (u / v | 0) + g * l, h[a--] = s % d;\n\n              h[a] = r;\n            }\n\n            return r ? ++n : h.splice(0, 1), D(e, h, n);\n          }, n.negated = function () {\n            var e = new A(this);\n            return e.s = -e.s || null, e;\n          }, n.plus = function (e, t) {\n            var r,\n                n = this,\n                i = n.s;\n            if (t = (e = new A(e, t)).s, !i || !t) return new A(NaN);\n            if (i != t) return e.s = -t, n.minus(e);\n            var a = n.e / j,\n                o = e.e / j,\n                u = n.c,\n                c = e.c;\n\n            if (!a || !o) {\n              if (!u || !c) return new A(i / 0);\n              if (!u[0] || !c[0]) return c[0] ? e : new A(u[0] ? n : 0 * i);\n            }\n\n            if (a = G(a), o = G(o), u = u.slice(), i = a - o) {\n              for ((r = 0 < i ? (o = a, c) : (i = -i, u)).reverse(); i--; r.push(0));\n\n              r.reverse();\n            }\n\n            for ((i = u.length) - (t = c.length) < 0 && (r = c, c = u, u = r, t = i), i = 0; t;) i = (u[--t] = u[t] + c[t] + i) / U | 0, u[t] = U === u[t] ? 0 : u[t] % U;\n\n            return i && (u = [i].concat(u), ++o), D(e, u, o);\n          }, n.precision = n.sd = function (e, t) {\n            var r, n, i;\n            if (null != e && e !== !!e) return Z(e, 1, $), null == t ? t = w : Z(t, 0, 8), E(new A(this), e, t);\n            if (!(r = this.c)) return null;\n\n            if (n = (i = r.length - 1) * j + 1, i = r[i]) {\n              for (; i % 10 == 0; i /= 10, n--);\n\n              for (i = r[0]; 10 <= i; i /= 10, n++);\n            }\n\n            return e && this.e + 1 > n && (n = this.e + 1), n;\n          }, n.shiftedBy = function (e) {\n            return Z(e, -C, C), this.times(\"1e\" + e);\n          }, n.squareRoot = n.sqrt = function () {\n            var e,\n                t,\n                r,\n                n,\n                i,\n                a = this,\n                o = a.c,\n                u = a.s,\n                c = a.e,\n                s = b + 4,\n                l = new A(\"0.5\");\n            if (1 !== u || !o || !o[0]) return new A(!u || u < 0 && (!o || o[0]) ? NaN : o ? a : 1 / 0);\n            if ((r = 0 == (u = Math.sqrt(+F(a))) || u == 1 / 0 ? (((t = V(o)).length + c) % 2 == 0 && (t += \"0\"), u = Math.sqrt(+t), c = G((c + 1) / 2) - (c < 0 || c % 2), new A(t = u == 1 / 0 ? \"1e\" + c : (t = u.toExponential()).slice(0, t.indexOf(\"e\") + 1) + c)) : new A(u + \"\")).c[0]) for ((u = (c = r.e) + s) < 3 && (u = 0);;) if (i = r, r = l.times(i.plus(y(a, i, s, 1))), V(i.c).slice(0, u) === (t = V(r.c)).slice(0, u)) {\n              if (r.e < c && --u, \"9999\" != (t = t.slice(u - 3, u + 1)) && (n || \"4999\" != t)) {\n                +t && (+t.slice(1) || \"5\" != t.charAt(0)) || (E(r, r.e + b + 2, 1), e = !r.times(r).eq(a));\n                break;\n              }\n\n              if (!n && (E(i, i.e + b + 2, 0), i.times(i).eq(a))) {\n                r = i;\n                break;\n              }\n\n              s += 4, u += 4, n = 1;\n            }\n            return E(r, r.e + b + 1, w, e);\n          }, n.toExponential = function (e, t) {\n            return null != e && (Z(e, 0, $), e++), i(this, e, t, 1);\n          }, n.toFixed = function (e, t) {\n            return null != e && (Z(e, 0, $), e = e + this.e + 1), i(this, e, t);\n          }, n.toFormat = function (e, t, r) {\n            var n;\n            if (null == r) null != e && t && \"object\" == typeof t ? (r = t, t = null) : e && \"object\" == typeof e ? (r = e, e = t = null) : r = N;else if (\"object\" != typeof r) throw Error(T + \"Argument not an object: \" + r);\n\n            if (n = this.toFixed(e, t), this.c) {\n              var i,\n                  a = n.split(\".\"),\n                  o = +r.groupSize,\n                  u = +r.secondaryGroupSize,\n                  c = r.groupSeparator || \"\",\n                  s = a[0],\n                  l = a[1],\n                  f = this.s < 0,\n                  p = f ? s.slice(1) : s,\n                  g = p.length;\n\n              if (u && (i = o, o = u, g -= u = i), 0 < o && 0 < g) {\n                for (i = g % o || o, s = p.substr(0, i); i < g; i += o) s += c + p.substr(i, o);\n\n                0 < u && (s += c + p.slice(i)), f && (s = \"-\" + s);\n              }\n\n              n = l ? s + (r.decimalSeparator || \"\") + ((u = +r.fractionGroupSize) ? l.replace(new RegExp(\"\\\\d{\" + u + \"}\\\\B\", \"g\"), \"$&\" + (r.fractionGroupSeparator || \"\")) : l) : s;\n            }\n\n            return (r.prefix || \"\") + n + (r.suffix || \"\");\n          }, n.toFraction = function (e) {\n            var t,\n                r,\n                n,\n                i,\n                a,\n                o,\n                u,\n                c,\n                s,\n                l,\n                f,\n                p,\n                g = this,\n                h = g.c;\n            if (null != e && (!(u = new A(e)).isInteger() && (u.c || 1 !== u.s) || u.lt(d))) throw Error(T + \"Argument \" + (u.isInteger() ? \"out of range: \" : \"not an integer: \") + F(u));\n            if (!h) return new A(g);\n\n            for (t = new A(d), s = r = new A(d), n = c = new A(d), p = V(h), a = t.e = p.length - g.e - 1, t.c[0] = R[(o = a % j) < 0 ? j + o : o], e = !e || 0 < u.comparedTo(t) ? 0 < a ? t : s : u, o = O, O = 1 / 0, u = new A(p), c.c[0] = 0; l = y(u, t, 0, 1), 1 != (i = r.plus(l.times(n))).comparedTo(e);) r = n, n = i, s = c.plus(l.times(i = s)), c = i, t = u.minus(l.times(i = t)), u = i;\n\n            return i = y(e.minus(r), n, 0, 1), c = c.plus(i.times(s)), r = r.plus(i.times(n)), c.s = s.s = g.s, f = y(s, n, a *= 2, w).minus(g).abs().comparedTo(y(c, r, a, w).minus(g).abs()) < 1 ? [s, n] : [c, r], O = o, f;\n          }, n.toNumber = function () {\n            return +F(this);\n          }, n.toPrecision = function (e, t) {\n            return null != e && Z(e, 1, $), i(this, e, t, 2);\n          }, n.toString = function (e) {\n            var t,\n                r = this,\n                n = r.s,\n                i = r.e;\n            return null === i ? n ? (t = \"Infinity\", n < 0 && (t = \"-\" + t)) : t = \"NaN\" : (t = null == e ? i <= h || v <= i ? W(V(r.c), i) : H(V(r.c), i, \"0\") : 10 === e ? H(V((r = E(new A(r), b + i + 1, w)).c), r.e, \"0\") : (Z(e, 2, M.length, \"Base\"), f(H(V(r.c), i, \"0\"), 10, e, n, !0)), n < 0 && r.c[0] && (t = \"-\" + t)), t;\n          }, n.valueOf = n.toJSON = function () {\n            return F(this);\n          }, n._isBigNumber = !0, \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator && (n[Symbol.toStringTag] = \"BigNumber\", n[Symbol.for(\"nodejs.util.inspect.custom\")] = n.valueOf), null != t && A.set(t), A;\n        }()).default = t.BigNumber = t, void 0 !== r && r.exports ? r.exports = t : (e || (e = \"undefined\" != typeof self && self ? self : window), e.BigNumber = t);\n      }(this);\n    }, {}],\n    2: [function (e, t, r) {\n      \"use strict\";\n\n      t.exports = {\n        languageTag: \"en-US\",\n        delimiters: {\n          thousands: \",\",\n          decimal: \".\"\n        },\n        abbreviations: {\n          thousand: \"k\",\n          million: \"m\",\n          billion: \"b\",\n          trillion: \"t\"\n        },\n        spaceSeparated: !1,\n        ordinal: function (e) {\n          var t = e % 10;\n          return 1 == ~~(e % 100 / 10) ? \"th\" : 1 === t ? \"st\" : 2 === t ? \"nd\" : 3 === t ? \"rd\" : \"th\";\n        },\n        currency: {\n          symbol: \"$\",\n          position: \"prefix\",\n          code: \"USD\"\n        },\n        currencyFormat: {\n          thousandSeparated: !0,\n          totalLength: 4,\n          spaceSeparated: !0\n        },\n        formats: {\n          fourDigits: {\n            totalLength: 4,\n            spaceSeparated: !0\n          },\n          fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: !0,\n            mantissa: 2\n          },\n          fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: !0,\n            mantissa: 2\n          },\n          fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: !0,\n            mantissa: 0\n          }\n        }\n      };\n    }, {}],\n    3: [function (e, t, r) {\n      \"use strict\";\n\n      function C(e, t) {\n        return function (e) {\n          if (Array.isArray(e)) return e;\n        }(e) || function (e, t) {\n          var r = [],\n              n = !0,\n              i = !1,\n              a = void 0;\n\n          try {\n            for (var o, u = e[Symbol.iterator](); !(n = (o = u.next()).done) && (r.push(o.value), !t || r.length !== t); n = !0);\n          } catch (e) {\n            i = !0, a = e;\n          } finally {\n            try {\n              n || null == u.return || u.return();\n            } finally {\n              if (i) throw a;\n            }\n          }\n\n          return r;\n        }(e, t) || function () {\n          throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n        }();\n      }\n\n      var R = e(\"./globalState\"),\n          o = e(\"./validating\"),\n          u = e(\"./parsing\"),\n          n = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"],\n          M = {\n        general: {\n          scale: 1024,\n          suffixes: n,\n          marker: \"bd\"\n        },\n        binary: {\n          scale: 1024,\n          suffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n          marker: \"b\"\n        },\n        decimal: {\n          scale: 1e3,\n          suffixes: n,\n          marker: \"d\"\n        }\n      },\n          I = {\n        totalLength: 0,\n        characteristic: 0,\n        forceAverage: !1,\n        average: !1,\n        mantissa: -1,\n        optionalMantissa: !0,\n        thousandSeparated: !1,\n        spaceSeparated: !1,\n        negative: \"sign\",\n        forceSign: !1\n      };\n\n      function i(e) {\n        var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},\n            r = 2 < arguments.length ? arguments[2] : void 0;\n        if (\"string\" == typeof t && (t = u.parseFormat(t)), !o.validateFormat(t)) return \"ERROR: invalid format\";\n\n        var n = t.prefix || \"\",\n            i = t.postfix || \"\",\n            a = function (e, t, r) {\n          switch (t.output) {\n            case \"currency\":\n              return t = A(t, R.currentCurrencyDefaultFormat()), function (e, t, r) {\n                var n = r.currentCurrency(),\n                    i = Object.assign({}, I, t),\n                    a = void 0,\n                    o = \"\",\n                    u = !!i.totalLength || !!i.forceAverage || i.average,\n                    c = t.currencyPosition || n.position,\n                    s = t.currencySymbol || n.symbol;\n                i.spaceSeparated && (o = \" \");\n                \"infix\" === c && (a = o + s + o);\n                var l = D({\n                  instance: e,\n                  providedFormat: t,\n                  state: r,\n                  decimalSeparator: a\n                });\n                \"prefix\" === c && (l = e._value < 0 && \"sign\" === i.negative ? \"-\".concat(o).concat(s).concat(l.slice(1)) : s + o + l);\n                c && \"postfix\" !== c || (l = l + (o = u ? \"\" : o) + s);\n                return l;\n              }(e, t, R);\n\n            case \"percent\":\n              return t = A(t, R.currentPercentageDefaultFormat()), function (e, t, r, n) {\n                var i = t.prefixSymbol,\n                    a = D({\n                  instance: n(100 * e._value),\n                  providedFormat: t,\n                  state: r\n                }),\n                    o = Object.assign({}, I, t);\n                if (i) return \"%\".concat(o.spaceSeparated ? \" \" : \"\").concat(a);\n                return \"\".concat(a).concat(o.spaceSeparated ? \" \" : \"\", \"%\");\n              }(e, t, R, r);\n\n            case \"byte\":\n              return t = A(t, R.currentByteDefaultFormat()), h = e, v = R, m = r, y = (d = t).base || \"binary\", b = M[y], w = B(h._value, b.suffixes, b.scale), O = w.value, x = w.suffix, S = D({\n                instance: m(O),\n                providedFormat: d,\n                state: v,\n                defaults: v.currentByteDefaultFormat()\n              }), N = v.currentAbbreviations(), \"\".concat(S).concat(N.spaced ? \" \" : \"\").concat(x);\n\n            case \"time\":\n              return t = A(t, R.currentTimeDefaultFormat()), l = e, f = Math.floor(l._value / 60 / 60), p = Math.floor((l._value - 60 * f * 60) / 60), g = Math.round(l._value - 60 * f * 60 - 60 * p), \"\".concat(f, \":\").concat(p < 10 ? \"0\" : \"\").concat(p, \":\").concat(g < 10 ? \"0\" : \"\").concat(g);\n\n            case \"ordinal\":\n              return t = A(t, R.currentOrdinalDefaultFormat()), n = e, i = t, o = (a = R).currentOrdinal(), u = Object.assign({}, I, i), c = D({\n                instance: n,\n                providedFormat: i,\n                state: a\n              }), s = o(n._value), \"\".concat(c).concat(u.spaceSeparated ? \" \" : \"\").concat(s);\n\n            case \"number\":\n            default:\n              return D({\n                instance: e,\n                providedFormat: t,\n                numbro: r\n              });\n          }\n\n          var n, i, a, o, u, c, s;\n          var l, f, p, g;\n          var h, d, v, m, y, b, w, O, x, S, N;\n        }(e, t, r);\n\n        return a = (a = n + a) + i;\n      }\n\n      function B(e, t, r) {\n        var n = t[0],\n            i = Math.abs(e);\n\n        if (r <= i) {\n          for (var a = 1; a < t.length; ++a) {\n            var o = Math.pow(r, a),\n                u = Math.pow(r, a + 1);\n\n            if (o <= i && i < u) {\n              n = t[a], e /= o;\n              break;\n            }\n          }\n\n          n === t[0] && (e /= Math.pow(r, t.length - 1), n = t[t.length - 1]);\n        }\n\n        return {\n          value: e,\n          suffix: n\n        };\n      }\n\n      function p(e) {\n        for (var t = \"\", r = 0; r < e; r++) t += \"0\";\n\n        return t;\n      }\n\n      function $(e, t) {\n        return -1 !== e.toString().indexOf(\"e\") ? function (e, t) {\n          var r = e.toString(),\n              n = C(r.split(\"e\"), 2),\n              i = n[0],\n              a = n[1],\n              o = C(i.split(\".\"), 2),\n              u = o[0],\n              c = o[1],\n              s = void 0 === c ? \"\" : c;\n          if (0 < +a) r = u + s + p(a - s.length);else {\n            var l = \".\";\n            l = +u < 0 ? \"-0\".concat(l) : \"0\".concat(l);\n            var f = (p(-a - 1) + Math.abs(u) + s).substr(0, t);\n            f.length < t && (f += p(t - f.length)), r = l + f;\n          }\n          return 0 < +a && 0 < t && (r += \".\".concat(p(t))), r;\n        }(e, t) : (Math.round(+\"\".concat(e, \"e+\").concat(t)) / Math.pow(10, t)).toFixed(t);\n      }\n\n      function D(e) {\n        var t = e.instance,\n            r = e.providedFormat,\n            n = e.state,\n            i = void 0 === n ? R : n,\n            a = e.decimalSeparator,\n            o = e.defaults,\n            u = void 0 === o ? i.currentDefaults() : o,\n            c = t._value;\n        if (0 === c && i.hasZeroFormat()) return i.getZeroFormat();\n        if (!isFinite(c)) return c.toString();\n        var s,\n            l,\n            f,\n            p,\n            g,\n            h,\n            d,\n            v,\n            m = Object.assign({}, I, u, r),\n            y = m.totalLength,\n            b = y ? 0 : m.characteristic,\n            w = m.optionalCharacteristic,\n            O = m.forceAverage,\n            x = !!y || !!O || m.average,\n            S = y ? -1 : x && void 0 === r.mantissa ? 0 : m.mantissa,\n            N = !y && (void 0 === r.optionalMantissa ? -1 === S : m.optionalMantissa),\n            M = m.trimMantissa,\n            B = m.thousandSeparated,\n            D = m.spaceSeparated,\n            A = m.negative,\n            E = m.forceSign,\n            F = m.exponential,\n            k = \"\";\n\n        if (x) {\n          var _ = function (e) {\n            var t = e.value,\n                r = e.forceAverage,\n                n = e.abbreviations,\n                i = e.spaceSeparated,\n                a = void 0 !== i && i,\n                o = e.totalLength,\n                u = void 0 === o ? 0 : o,\n                c = \"\",\n                s = Math.abs(t),\n                l = -1;\n\n            if (s >= Math.pow(10, 12) && !r || \"trillion\" === r ? (c = n.trillion, t /= Math.pow(10, 12)) : s < Math.pow(10, 12) && s >= Math.pow(10, 9) && !r || \"billion\" === r ? (c = n.billion, t /= Math.pow(10, 9)) : s < Math.pow(10, 9) && s >= Math.pow(10, 6) && !r || \"million\" === r ? (c = n.million, t /= Math.pow(10, 6)) : (s < Math.pow(10, 6) && s >= Math.pow(10, 3) && !r || \"thousand\" === r) && (c = n.thousand, t /= Math.pow(10, 3)), c && (c = (a ? \" \" : \"\") + c), u) {\n              var f = t.toString().split(\".\")[0];\n              l = Math.max(u - f.length, 0);\n            }\n\n            return {\n              value: t,\n              abbreviation: c,\n              mantissaPrecision: l\n            };\n          }({\n            value: c,\n            forceAverage: O,\n            abbreviations: i.currentAbbreviations(),\n            spaceSeparated: D,\n            totalLength: y\n          });\n\n          c = _.value, k += _.abbreviation, y && (S = _.mantissaPrecision);\n        }\n\n        if (F) {\n          var L = (l = (s = {\n            value: c,\n            characteristicPrecision: b\n          }).value, f = s.characteristicPrecision, p = void 0 === f ? 0 : f, g = C(l.toExponential().split(\"e\"), 2), h = g[0], d = g[1], v = +h, p && 1 < p && (v *= Math.pow(10, p - 1), d = 0 <= (d = +d - (p - 1)) ? \"+\".concat(d) : d), {\n            value: v,\n            abbreviation: \"e\".concat(d)\n          });\n          c = L.value, k = L.abbreviation + k;\n        }\n\n        var T,\n            P,\n            U,\n            j = function (e, t, r, n, i) {\n          if (-1 === n) return e;\n          var a = $(t, n),\n              o = C(a.toString().split(\".\"), 2),\n              u = o[0],\n              c = o[1],\n              s = void 0 === c ? \"\" : c;\n          if (s.match(/^0+$/) && (r || i)) return u;\n          var l = s.match(/0+$/);\n          return i && l ? \"\".concat(u, \".\").concat(s.toString().slice(0, l.index)) : a.toString();\n        }(c.toString(), c, N, S, M);\n\n        return j = function (e, t, r, n, i) {\n          var a = n.currentDelimiters(),\n              o = a.thousands;\n          i = i || a.decimal;\n          var u = a.thousandsSize || 3,\n              c = e.toString(),\n              s = c.split(\".\")[0],\n              l = c.split(\".\")[1];\n          return r && (t < 0 && (s = s.slice(1)), function (e, t) {\n            for (var r = [], n = 0, i = e; 0 < i; i--) n === t && (r.unshift(i), n = 0), n++;\n\n            return r;\n          }(s.length, u).forEach(function (e, t) {\n            s = s.slice(0, e + t) + o + s.slice(e + t);\n          }), t < 0 && (s = \"-\".concat(s))), c = l ? s + i + l : s;\n        }(j = function (e, t, r, n) {\n          var i = e,\n              a = C(i.toString().split(\".\"), 2),\n              o = a[0],\n              u = a[1];\n          if (o.match(/^-?0$/) && r) return u ? \"\".concat(o.replace(\"0\", \"\"), \".\").concat(u) : o.replace(\"0\", \"\");\n          if (o.length < n) for (var c = n - o.length, s = 0; s < c; s++) i = \"0\".concat(i);\n          return i.toString();\n        }(j, 0, w, b), c, B, i, a), (x || F) && (j = j + k), (E || c < 0) && (T = j, U = A, j = 0 === (P = c) ? T : 0 == +T ? T.replace(\"-\", \"\") : 0 < P ? \"+\".concat(T) : \"sign\" === U ? T : \"(\".concat(T.replace(\"-\", \"\"), \")\")), j;\n      }\n\n      function A(e, t) {\n        if (!e) return t;\n        var r = Object.keys(e);\n        return 1 === r.length && \"output\" === r[0] ? t : e;\n      }\n\n      t.exports = function (n) {\n        return {\n          format: function () {\n            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];\n\n            return i.apply(void 0, t.concat([n]));\n          },\n          getByteUnit: function () {\n            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];\n\n            return function (e) {\n              var t = M.general;\n              return B(e._value, t.suffixes, t.scale).suffix;\n            }.apply(void 0, t.concat([n]));\n          },\n          getBinaryByteUnit: function () {\n            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];\n\n            return function (e) {\n              var t = M.binary;\n              return B(e._value, t.suffixes, t.scale).suffix;\n            }.apply(void 0, t.concat([n]));\n          },\n          getDecimalByteUnit: function () {\n            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];\n\n            return function (e) {\n              var t = M.decimal;\n              return B(e._value, t.suffixes, t.scale).suffix;\n            }.apply(void 0, t.concat([n]));\n          },\n          formatOrDefault: A\n        };\n      };\n    }, {\n      \"./globalState\": 4,\n      \"./parsing\": 8,\n      \"./validating\": 10\n    }],\n    4: [function (e, t, r) {\n      \"use strict\";\n\n      var i = e(\"./en-US\"),\n          n = e(\"./validating\"),\n          a = e(\"./parsing\"),\n          o = {},\n          u = void 0,\n          c = {},\n          s = null,\n          l = {};\n\n      function f(e) {\n        u = e;\n      }\n\n      function p() {\n        return c[u];\n      }\n\n      o.languages = function () {\n        return Object.assign({}, c);\n      }, o.currentLanguage = function () {\n        return u;\n      }, o.currentCurrency = function () {\n        return p().currency;\n      }, o.currentAbbreviations = function () {\n        return p().abbreviations;\n      }, o.currentDelimiters = function () {\n        return p().delimiters;\n      }, o.currentOrdinal = function () {\n        return p().ordinal;\n      }, o.currentDefaults = function () {\n        return Object.assign({}, p().defaults, l);\n      }, o.currentOrdinalDefaultFormat = function () {\n        return Object.assign({}, o.currentDefaults(), p().ordinalFormat);\n      }, o.currentByteDefaultFormat = function () {\n        return Object.assign({}, o.currentDefaults(), p().byteFormat);\n      }, o.currentPercentageDefaultFormat = function () {\n        return Object.assign({}, o.currentDefaults(), p().percentageFormat);\n      }, o.currentCurrencyDefaultFormat = function () {\n        return Object.assign({}, o.currentDefaults(), p().currencyFormat);\n      }, o.currentTimeDefaultFormat = function () {\n        return Object.assign({}, o.currentDefaults(), p().timeFormat);\n      }, o.setDefaults = function (e) {\n        e = a.parseFormat(e), n.validateFormat(e) && (l = e);\n      }, o.getZeroFormat = function () {\n        return s;\n      }, o.setZeroFormat = function (e) {\n        return s = \"string\" == typeof e ? e : null;\n      }, o.hasZeroFormat = function () {\n        return null !== s;\n      }, o.languageData = function (e) {\n        if (e) {\n          if (c[e]) return c[e];\n          throw new Error('Unknown tag \"'.concat(e, '\"'));\n        }\n\n        return p();\n      }, o.registerLanguage = function (e) {\n        var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];\n        if (!n.validateLanguage(e)) throw new Error(\"Invalid language data\");\n        c[e.languageTag] = e, t && f(e.languageTag);\n      }, o.setLanguage = function (e) {\n        var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : i.languageTag;\n\n        if (!c[e]) {\n          var r = e.split(\"-\")[0],\n              n = Object.keys(c).find(function (e) {\n            return e.split(\"-\")[0] === r;\n          });\n          return c[n] ? void f(n) : void f(t);\n        }\n\n        f(e);\n      }, o.registerLanguage(i), u = i.languageTag, t.exports = o;\n    }, {\n      \"./en-US\": 2,\n      \"./parsing\": 8,\n      \"./validating\": 10\n    }],\n    5: [function (n, e, t) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        return {\n          loadLanguagesInNode: function (e) {\n            return r = t, void e.forEach(function (t) {\n              var e = void 0;\n\n              try {\n                e = n(\"../languages/\".concat(t));\n              } catch (e) {\n                console.error('Unable to load \"'.concat(t, '\". No matching language file found.'));\n              }\n\n              e && r.registerLanguage(e);\n            });\n            var r;\n          }\n        };\n      };\n    }, {}],\n    6: [function (e, t, r) {\n      \"use strict\";\n\n      var c = e(\"bignumber.js\");\n\n      function a(e, t, r) {\n        var n = new c(e._value),\n            i = t;\n        return r.isNumbro(t) && (i = t._value), i = new c(i), e._value = n.minus(i).toNumber(), e;\n      }\n\n      t.exports = function (u) {\n        return {\n          add: function (e, t) {\n            return n = t, i = u, a = new c((r = e)._value), o = n, i.isNumbro(n) && (o = n._value), o = new c(o), r._value = a.plus(o).toNumber(), r;\n            var r, n, i, a, o;\n          },\n          subtract: function (e, t) {\n            return a(e, t, u);\n          },\n          multiply: function (e, t) {\n            return n = t, i = u, a = new c((r = e)._value), o = n, i.isNumbro(n) && (o = n._value), o = new c(o), r._value = a.times(o).toNumber(), r;\n            var r, n, i, a, o;\n          },\n          divide: function (e, t) {\n            return n = t, i = u, a = new c((r = e)._value), o = n, i.isNumbro(n) && (o = n._value), o = new c(o), r._value = a.dividedBy(o).toNumber(), r;\n            var r, n, i, a, o;\n          },\n          set: function (e, t) {\n            return r = e, i = n = t, u.isNumbro(n) && (i = n._value), r._value = i, r;\n            var r, n, i;\n          },\n          difference: function (e, t) {\n            return r = t, a(i = (n = u)(e._value), r, n), Math.abs(i._value);\n            var r, n, i;\n          }\n        };\n      };\n    }, {\n      \"bignumber.js\": 1\n    }],\n    7: [function (e, t, r) {\n      \"use strict\";\n\n      function i(e, t) {\n        for (var r = 0; r < t.length; r++) {\n          var n = t[r];\n          n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n        }\n      }\n\n      var a = e(\"./globalState\"),\n          n = e(\"./validating\"),\n          o = e(\"./loading\")(g),\n          u = e(\"./unformatting\"),\n          c = e(\"./formatting\")(g),\n          s = e(\"./manipulating\")(g),\n          l = e(\"./parsing\"),\n          f = function () {\n        function t(e) {\n          !function (e, t) {\n            if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n          }(this, t), this._value = e;\n        }\n\n        var e, r, n;\n        return e = t, (r = [{\n          key: \"clone\",\n          value: function () {\n            return g(this._value);\n          }\n        }, {\n          key: \"format\",\n          value: function () {\n            var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};\n            return c.format(this, e);\n          }\n        }, {\n          key: \"formatCurrency\",\n          value: function (e) {\n            return \"string\" == typeof e && (e = l.parseFormat(e)), (e = c.formatOrDefault(e, a.currentCurrencyDefaultFormat())).output = \"currency\", c.format(this, e);\n          }\n        }, {\n          key: \"formatTime\",\n          value: function () {\n            var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};\n            return e.output = \"time\", c.format(this, e);\n          }\n        }, {\n          key: \"binaryByteUnits\",\n          value: function () {\n            return c.getBinaryByteUnit(this);\n          }\n        }, {\n          key: \"decimalByteUnits\",\n          value: function () {\n            return c.getDecimalByteUnit(this);\n          }\n        }, {\n          key: \"byteUnits\",\n          value: function () {\n            return c.getByteUnit(this);\n          }\n        }, {\n          key: \"difference\",\n          value: function (e) {\n            return s.difference(this, e);\n          }\n        }, {\n          key: \"add\",\n          value: function (e) {\n            return s.add(this, e);\n          }\n        }, {\n          key: \"subtract\",\n          value: function (e) {\n            return s.subtract(this, e);\n          }\n        }, {\n          key: \"multiply\",\n          value: function (e) {\n            return s.multiply(this, e);\n          }\n        }, {\n          key: \"divide\",\n          value: function (e) {\n            return s.divide(this, e);\n          }\n        }, {\n          key: \"set\",\n          value: function (e) {\n            return s.set(this, p(e));\n          }\n        }, {\n          key: \"value\",\n          value: function () {\n            return this._value;\n          }\n        }, {\n          key: \"valueOf\",\n          value: function () {\n            return this._value;\n          }\n        }]) && i(e.prototype, r), n && i(e, n), t;\n      }();\n\n      function p(e) {\n        var t = e;\n        return g.isNumbro(e) ? t = e._value : \"string\" == typeof e ? t = g.unformat(e) : isNaN(e) && (t = NaN), t;\n      }\n\n      function g(e) {\n        return new f(p(e));\n      }\n\n      g.version = \"2.1.2\", g.isNumbro = function (e) {\n        return e instanceof f;\n      }, g.language = a.currentLanguage, g.registerLanguage = a.registerLanguage, g.setLanguage = a.setLanguage, g.languages = a.languages, g.languageData = a.languageData, g.zeroFormat = a.setZeroFormat, g.defaultFormat = a.currentDefaults, g.setDefaults = a.setDefaults, g.defaultCurrencyFormat = a.currentCurrencyDefaultFormat, g.validate = n.validate, g.loadLanguagesInNode = o.loadLanguagesInNode, g.unformat = u.unformat, t.exports = g;\n    }, {\n      \"./formatting\": 3,\n      \"./globalState\": 4,\n      \"./loading\": 5,\n      \"./manipulating\": 6,\n      \"./parsing\": 8,\n      \"./unformatting\": 9,\n      \"./validating\": 10\n    }],\n    8: [function (e, t, r) {\n      \"use strict\";\n\n      t.exports = {\n        parseFormat: function (e) {\n          var t,\n              r,\n              n,\n              i,\n              a,\n              o,\n              u,\n              c,\n              s,\n              l,\n              f,\n              p,\n              g,\n              h,\n              d,\n              v,\n              m,\n              y,\n              b,\n              w,\n              O = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};\n          return \"string\" != typeof e ? e : (r = O, e = (n = (t = e).match(/^{([^}]*)}/)) ? (r.prefix = n[1], t.slice(n[0].length)) : t, a = O, function (e, t) {\n            if (-1 === e.indexOf(\"$\")) {\n              if (-1 === e.indexOf(\"%\")) return -1 !== e.indexOf(\"bd\") ? (t.output = \"byte\", t.base = \"general\") : -1 !== e.indexOf(\"b\") ? (t.output = \"byte\", t.base = \"binary\") : -1 !== e.indexOf(\"d\") ? (t.output = \"byte\", t.base = \"decimal\") : -1 === e.indexOf(\":\") ? -1 !== e.indexOf(\"o\") && (t.output = \"ordinal\") : t.output = \"time\";\n              t.output = \"percent\";\n            } else t.output = \"currency\";\n          }(e = (o = (i = e).match(/{([^}]*)}$/)) ? (a.postfix = o[1], i.slice(0, -o[0].length)) : i, O), u = O, (c = e.match(/[1-9]+[0-9]*/)) && (u.totalLength = +c[0]), s = O, (l = e.split(\".\")[0].match(/0+/)) && (s.characteristic = l[0].length), function (e, t) {\n            if (-1 !== e.indexOf(\".\")) {\n              var r = e.split(\".\")[0];\n              t.optionalCharacteristic = -1 === r.indexOf(\"0\");\n            }\n          }(e, O), f = O, -1 !== e.indexOf(\"a\") && (f.average = !0), g = O, -1 !== (p = e).indexOf(\"K\") ? g.forceAverage = \"thousand\" : -1 !== p.indexOf(\"M\") ? g.forceAverage = \"million\" : -1 !== p.indexOf(\"B\") ? g.forceAverage = \"billion\" : -1 !== p.indexOf(\"T\") && (g.forceAverage = \"trillion\"), function (e, t) {\n            var r = e.split(\".\")[1];\n\n            if (r) {\n              var n = r.match(/0+/);\n              n && (t.mantissa = n[0].length);\n            }\n          }(e, O), d = O, (h = e).match(/\\[\\.]/) ? d.optionalMantissa = !0 : h.match(/\\./) && (d.optionalMantissa = !1), v = O, -1 !== e.indexOf(\",\") && (v.thousandSeparated = !0), m = O, -1 !== e.indexOf(\" \") && (m.spaceSeparated = !0), b = O, (y = e).match(/^\\+?\\([^)]*\\)$/) && (b.negative = \"parenthesis\"), y.match(/^\\+?-/) && (b.negative = \"sign\"), w = O, e.match(/^\\+/) && (w.forceSign = !0), O);\n        }\n      };\n    }, {}],\n    9: [function (p, e, t) {\n      \"use strict\";\n\n      var O = [{\n        key: \"ZiB\",\n        factor: Math.pow(1024, 7)\n      }, {\n        key: \"ZB\",\n        factor: Math.pow(1e3, 7)\n      }, {\n        key: \"YiB\",\n        factor: Math.pow(1024, 8)\n      }, {\n        key: \"YB\",\n        factor: Math.pow(1e3, 8)\n      }, {\n        key: \"TiB\",\n        factor: Math.pow(1024, 4)\n      }, {\n        key: \"TB\",\n        factor: Math.pow(1e3, 4)\n      }, {\n        key: \"PiB\",\n        factor: Math.pow(1024, 5)\n      }, {\n        key: \"PB\",\n        factor: Math.pow(1e3, 5)\n      }, {\n        key: \"MiB\",\n        factor: Math.pow(1024, 2)\n      }, {\n        key: \"MB\",\n        factor: Math.pow(1e3, 2)\n      }, {\n        key: \"KiB\",\n        factor: Math.pow(1024, 1)\n      }, {\n        key: \"KB\",\n        factor: Math.pow(1e3, 1)\n      }, {\n        key: \"GiB\",\n        factor: Math.pow(1024, 3)\n      }, {\n        key: \"GB\",\n        factor: Math.pow(1e3, 3)\n      }, {\n        key: \"EiB\",\n        factor: Math.pow(1024, 6)\n      }, {\n        key: \"EB\",\n        factor: Math.pow(1e3, 6)\n      }, {\n        key: \"B\",\n        factor: 1\n      }];\n\n      function x(e) {\n        return e.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n      }\n\n      function g(e, t) {\n        var r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : \"\",\n            n = 3 < arguments.length ? arguments[3] : void 0,\n            i = 4 < arguments.length ? arguments[4] : void 0,\n            a = 5 < arguments.length ? arguments[5] : void 0,\n            o = 6 < arguments.length ? arguments[6] : void 0;\n        if (\"\" !== e) return e === i ? 0 : function e(t, r) {\n          var n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : \"\",\n              i = 3 < arguments.length ? arguments[3] : void 0,\n              a = 4 < arguments.length ? arguments[4] : void 0,\n              o = 5 < arguments.length ? arguments[5] : void 0,\n              u = 6 < arguments.length ? arguments[6] : void 0;\n          if (!isNaN(+t)) return +t;\n          var c = \"\",\n              s = t.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n          if (s !== t) return -1 * e(s, r, n, i, a, o, u);\n\n          for (var l = 0; l < O.length; l++) {\n            var f = O[l];\n            if ((c = t.replace(f.key, \"\")) !== t) return e(c, r, n, i, a, o, u) * f.factor;\n          }\n\n          if ((c = t.replace(\"%\", \"\")) !== t) return e(c, r, n, i, a, o, u) / 100;\n          var p = parseFloat(t);\n\n          if (!isNaN(p)) {\n            var g = i(p);\n            if (g && \".\" !== g && (c = t.replace(new RegExp(\"\".concat(x(g), \"$\")), \"\")) !== t) return e(c, r, n, i, a, o, u);\n            var h = {};\n            Object.keys(o).forEach(function (e) {\n              h[o[e]] = e;\n            });\n\n            for (var d = Object.keys(h).sort().reverse(), v = d.length, m = 0; m < v; m++) {\n              var y = d[m],\n                  b = h[y];\n\n              if ((c = t.replace(y, \"\")) !== t) {\n                var w = void 0;\n\n                switch (b) {\n                  case \"thousand\":\n                    w = Math.pow(10, 3);\n                    break;\n\n                  case \"million\":\n                    w = Math.pow(10, 6);\n                    break;\n\n                  case \"billion\":\n                    w = Math.pow(10, 9);\n                    break;\n\n                  case \"trillion\":\n                    w = Math.pow(10, 12);\n                }\n\n                return e(c, r, n, i, a, o, u) * w;\n              }\n            }\n          }\n        }(function (e, t) {\n          var r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : \"\",\n              n = e.replace(r, \"\");\n          return n = (n = n.replace(new RegExp(\"([0-9])\".concat(x(t.thousands), \"([0-9])\"), \"g\"), \"$1$2\")).replace(t.decimal, \".\");\n        }(e, t, r), t, r, n, i, a, o);\n      }\n\n      e.exports = {\n        unformat: function (e, t) {\n          var r,\n              n,\n              i,\n              a = p(\"./globalState\"),\n              o = a.currentDelimiters(),\n              u = a.currentCurrency().symbol,\n              c = a.currentOrdinal(),\n              s = a.getZeroFormat(),\n              l = a.currentAbbreviations(),\n              f = void 0;\n          if (\"string\" == typeof e) f = function (e, t) {\n            if (!e.indexOf(\":\") || \":\" === t.thousands) return !1;\n            var r = e.split(\":\");\n            if (3 !== r.length) return !1;\n            var n = +r[0],\n                i = +r[1],\n                a = +r[2];\n            return !isNaN(n) && !isNaN(i) && !isNaN(a);\n          }(e, o) ? (r = e.split(\":\"), n = +r[0], i = +r[1], +r[2] + 60 * i + 3600 * n) : g(e, o, u, c, s, l, t);else {\n            if (\"number\" != typeof e) return;\n            f = e;\n          }\n          if (void 0 !== f) return f;\n        }\n      };\n    }, {\n      \"./globalState\": 4\n    }],\n    10: [function (e, t, r) {\n      \"use strict\";\n\n      function n(e) {\n        return function (e) {\n          if (Array.isArray(e)) {\n            for (var t = 0, r = new Array(e.length); t < e.length; t++) r[t] = e[t];\n\n            return r;\n          }\n        }(e) || function (e) {\n          if (Symbol.iterator in Object(e) || \"[object Arguments]\" === Object.prototype.toString.call(e)) return Array.from(e);\n        }(e) || function () {\n          throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n        }();\n      }\n\n      function f(e) {\n        return (f = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (e) {\n          return typeof e;\n        } : function (e) {\n          return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e;\n        })(e);\n      }\n\n      var i = e(\"./unformatting\"),\n          a = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/,\n          p = {\n        output: {\n          type: \"string\",\n          validValues: [\"currency\", \"percent\", \"byte\", \"time\", \"ordinal\", \"number\"]\n        },\n        base: {\n          type: \"string\",\n          validValues: [\"decimal\", \"binary\", \"general\"],\n          restriction: function (e, t) {\n            return \"byte\" === t.output;\n          },\n          message: \"`base` must be provided only when the output is `byte`\",\n          mandatory: function (e) {\n            return \"byte\" === e.output;\n          }\n        },\n        characteristic: {\n          type: \"number\",\n          restriction: function (e) {\n            return 0 <= e;\n          },\n          message: \"value must be positive\"\n        },\n        prefix: \"string\",\n        postfix: \"string\",\n        forceAverage: {\n          type: \"string\",\n          validValues: [\"trillion\", \"billion\", \"million\", \"thousand\"]\n        },\n        average: \"boolean\",\n        currencyPosition: {\n          type: \"string\",\n          validValues: [\"prefix\", \"infix\", \"postfix\"]\n        },\n        currencySymbol: \"string\",\n        totalLength: {\n          type: \"number\",\n          restrictions: [{\n            restriction: function (e) {\n              return 0 <= e;\n            },\n            message: \"value must be positive\"\n          }, {\n            restriction: function (e, t) {\n              return !t.exponential;\n            },\n            message: \"`totalLength` is incompatible with `exponential`\"\n          }]\n        },\n        mantissa: {\n          type: \"number\",\n          restriction: function (e) {\n            return 0 <= e;\n          },\n          message: \"value must be positive\"\n        },\n        optionalMantissa: \"boolean\",\n        trimMantissa: \"boolean\",\n        optionalCharacteristic: \"boolean\",\n        thousandSeparated: \"boolean\",\n        spaceSeparated: \"boolean\",\n        abbreviations: {\n          type: \"object\",\n          children: {\n            thousand: \"string\",\n            million: \"string\",\n            billion: \"string\",\n            trillion: \"string\"\n          }\n        },\n        negative: {\n          type: \"string\",\n          validValues: [\"sign\", \"parenthesis\"]\n        },\n        forceSign: \"boolean\",\n        exponential: {\n          type: \"boolean\"\n        },\n        prefixSymbol: {\n          type: \"boolean\",\n          restriction: function (e, t) {\n            return \"percent\" === t.output;\n          },\n          message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n        }\n      },\n          o = {\n        languageTag: {\n          type: \"string\",\n          mandatory: !0,\n          restriction: function (e) {\n            return e.match(a);\n          },\n          message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n        },\n        delimiters: {\n          type: \"object\",\n          children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n          },\n          mandatory: !0\n        },\n        abbreviations: {\n          type: \"object\",\n          children: {\n            thousand: {\n              type: \"string\",\n              mandatory: !0\n            },\n            million: {\n              type: \"string\",\n              mandatory: !0\n            },\n            billion: {\n              type: \"string\",\n              mandatory: !0\n            },\n            trillion: {\n              type: \"string\",\n              mandatory: !0\n            }\n          },\n          mandatory: !0\n        },\n        spaceSeparated: \"boolean\",\n        ordinal: {\n          type: \"function\",\n          mandatory: !0\n        },\n        currency: {\n          type: \"object\",\n          children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n          },\n          mandatory: !0\n        },\n        defaults: \"format\",\n        ordinalFormat: \"format\",\n        byteFormat: \"format\",\n        percentageFormat: \"format\",\n        currencyFormat: \"format\",\n        timeDefaults: \"format\",\n        formats: {\n          type: \"object\",\n          children: {\n            fourDigits: {\n              type: \"format\",\n              mandatory: !0\n            },\n            fullWithTwoDecimals: {\n              type: \"format\",\n              mandatory: !0\n            },\n            fullWithTwoDecimalsNoCurrency: {\n              type: \"format\",\n              mandatory: !0\n            },\n            fullWithNoDecimals: {\n              type: \"format\",\n              mandatory: !0\n            }\n          }\n        }\n      };\n\n      function u(e) {\n        return !!i.unformat(e);\n      }\n\n      function g(c, s, l) {\n        var e = 3 < arguments.length && void 0 !== arguments[3] && arguments[3],\n            t = Object.keys(c).map(function (e) {\n          if (!s[e]) return console.error(\"\".concat(l, \" Invalid key: \").concat(e)), !1;\n          var t = c[e],\n              r = s[e];\n\n          if (\"string\" == typeof r && (r = {\n            type: r\n          }), \"format\" === r.type) {\n            if (!g(t, p, \"[Validate \".concat(e, \"]\"), !0)) return !1;\n          } else if (f(t) !== r.type) return console.error(\"\".concat(l, \" \").concat(e, ' type mismatched: \"').concat(r.type, '\" expected, \"').concat(f(t), '\" provided')), !1;\n\n          if (r.restrictions && r.restrictions.length) for (var n = r.restrictions.length, i = 0; i < n; i++) {\n            var a = r.restrictions[i],\n                o = a.restriction,\n                u = a.message;\n            if (!o(t, c)) return console.error(\"\".concat(l, \" \").concat(e, \" invalid value: \").concat(u)), !1;\n          }\n          if (r.restriction && !r.restriction(t, c)) return console.error(\"\".concat(l, \" \").concat(e, \" invalid value: \").concat(r.message)), !1;\n          if (r.validValues && -1 === r.validValues.indexOf(t)) return console.error(\"\".concat(l, \" \").concat(e, \" invalid value: must be among \").concat(JSON.stringify(r.validValues), ', \"').concat(t, '\" provided')), !1;\n          if (r.children && !g(t, r.children, \"[Validate \".concat(e, \"]\"))) return !1;\n          return !0;\n        });\n        return e || t.push.apply(t, n(Object.keys(s).map(function (e) {\n          var t = s[e];\n\n          if (\"string\" == typeof t && (t = {\n            type: t\n          }), t.mandatory) {\n            var r = t.mandatory;\n            if (\"function\" == typeof r && (r = r(c)), r && void 0 === c[e]) return console.error(\"\".concat(l, ' Missing mandatory key \"').concat(e, '\"')), !1;\n          }\n\n          return !0;\n        }))), t.reduce(function (e, t) {\n          return e && t;\n        }, !0);\n      }\n\n      function c(e) {\n        return g(e, p, \"[Validate format]\");\n      }\n\n      t.exports = {\n        validate: function (e, t) {\n          var r = u(e),\n              n = c(t);\n          return r && n;\n        },\n        validateFormat: c,\n        validateInput: u,\n        validateLanguage: function (e) {\n          return g(e, o, \"[Validate language]\");\n        }\n      };\n    }, {\n      \"./unformatting\": 9\n    }]\n  }, {}, [7])(7);\n});","map":{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/bignumber.js/bignumber.js","src/en-US.js","src/formatting.js","src/globalState.js","src/loading.js","src/manipulating.js","src/numbro.js","src/parsing.js","src/unformatting.js","src/validating.js"],"names":["isNumeric","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","P","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","x","isNum","str","e","intCheck","alphabet","caseChanged","i","len","BigNumber","obj","v","crypto","EXPONENTIAL_AT","RANGE","pow2_53","random53bitInt","c","rand","k","a","b","dp","args","sum","convertBase","arr","arrL","rm","y","xc","r","d","div","carry","klo","khi","xlo","xhi","m","temp","cmp","yL","s","yc","q","qc","base","more","xL","n","xi","rem","remL","yz","yc0","rem0","prod","prodL","subtract","round","c0","ne","toExponential","toFixedPoint","method","j","parseNumeric","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","pows10","out","rd","ni","sd","this","nIsBig","nIsNeg","isModExp","half","nIsOdd","ye","xe","xLTy","t","reverse","normalise","xcL","ycL","zc","sqrtBase","ylo","yhi","length","slice","rep","format","g1","g2","intPart","fractionPart","isNeg","intDigits","isInteger","n1","d1","md","exp","n0","d2","d0","z","l","module","globalObject","exports","languageTag","delimiters","thousands","decimal","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","number","currency","symbol","position","code","currencyFormat","thousandSeparated","totalLength","formats","fourDigits","fullWithTwoDecimals","output","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","globalState","require","validating","parsing","decimalSuffixes","bytes","general","scale","suffixes","marker","binary","defaultOptions","characteristic","forceAverage","average","optionalMantissa","negative","forceSign","_format","instance","providedFormat","numbro","parseFormat","validateFormat","postfix","formatNumbro","formatOrDefault","currentCurrencyDefaultFormat","formatCurrency","currentPercentageDefaultFormat","formatPercentage","currentByteDefaultFormat","currentTimeDefaultFormat","currentOrdinalDefaultFormat","formatNumber","data","getFormatByteUnits","_value","value","abs","Math","power","min","pow","max","state","_getFormatByteUnits","baseInfo","defaults","currentAbbreviations","spaced","ordinalFn","currentOrdinal","options","Object","assign","hours","floor","minutes","seconds","prefixSymbol","currentCurrency","undefined","space","currencyPosition","currencySymbol","abbreviation","mantissaPrecision","toString","split","_ref2","characteristicPrecision","_ref2$characteristicP","numberString","exponential","zeroes","result","precision","_result$split2","substr","toFixed","indexOf","toFixedLarge","trim","_result$toString$spli2","currentCharacteristic","currentMantissa","match","hasTrailingZeroes","index","optionalCharacteristic","_result$toString$spli5","replace","missingZeros","counter","unshift","currentDelimiters","thousandSeparator","thousandsSize","indexesOfGroupSpaces","forEach","currentDefaults","hasZeroFormat","getZeroFormat","isFinite","trimMantissa","computeAverage","_data","setMantissaPrecision","setCharacteristicPrecision","replaceDelimiters","defaultFormat","keys","apply","getByteUnit","getBinaryByteUnit","getDecimalByteUnit","enUS","currentLanguageTag","languages","zeroFormat","globalDefaults","chooseLanguage","tag","currentLanguageData","currentLanguage","ordinalFormat","byteFormat","percentageFormat","timeFormat","setDefaults","setZeroFormat","string","languageData","Error","registerLanguage","useLanguage","validateLanguage","setLanguage","fallbackTag","matchingLanguageTag","find","each","console","error","loadLanguagesInNode","tags","other","otherValue","isNumbro","plus","toNumber","_subtract","minus","times","dividedBy","clone","add","multiply","divide","set","difference","validator","loader","unformatter","formatter","manipulate","Numbro","_classCallCheck","input","normalizeInput","unformat","isNaN","NaN","version","object","language","defaultCurrencyFormat","validate","parseOutput","parseOptionalCharacteristic","parseMantissa","allSuffixes","key","factor","escapeRegExp","computeUnformattedValue","inputString","stripped","newInput","possibleOrdinalValue","parseFloat","ordinalString","RegExp","inversedAbbreviations","abbreviationValues","sort","numberOfAbbreviations","_i","unformatValue","removeFormattingSymbols","segments","matchesTime","bcp47RegExp","type","children","mandatory","validFormat","validValues","restriction","message","restrictions","validLanguage","timeDefaults","validInput","validateInput","isFormatValid","validateSpec","toValidate","spec","skipMandatoryCheck","results","map","_typeof","JSON","stringify","_toConsumableArray","push","reduce","acc","current"],"mappings":"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","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.0.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * n {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(n, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof BigNumber)) {\r\n\r\n        // Don't throw on constructor call without new (#81).\r\n        // '[BigNumber Error] Constructor call without new: {n}'\r\n        //throw Error(bignumberError + ' Constructor call without new: ' + n);\r\n        return new BigNumber(n, b);\r\n      }\r\n\r\n      if (b == null) {\r\n\r\n        // Duplicate.\r\n        if (n instanceof BigNumber) {\r\n          x.s = n.s;\r\n          x.e = n.e;\r\n          x.c = (n = n.c) ? n.slice() : n;\r\n          return;\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum && n * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / n < 0 ? (n = -n, -1) : 1;\r\n\r\n          // Faster path for integers.\r\n          if (n === ~~n) {\r\n            for (e = 0, i = n; i >= 10; i /= 10, e++);\r\n            x.e = e;\r\n            x.c = [n];\r\n            return;\r\n          }\r\n\r\n          str = String(n);\r\n        } else {\r\n          str = String(n);\r\n          if (!isNumeric.test(str)) return parseNumeric(x, str, isNum);\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = String(n);\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(n instanceof BigNumber ? n : str);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum) {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + n);\r\n          }\r\n\r\n          // Prevent later check for length on converted number.\r\n          isNum = false;\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(n), isNum, b);\r\n          }\r\n        }\r\n\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      str = str.slice(i, ++len);\r\n\r\n      if (str) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * n));\r\n        }\r\n\r\n        e = e - i - 1;\r\n\r\n         // Overflow?\r\n        if (e > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            str = str.slice(i);\r\n            i = LOG_BASE - str.length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * v {any}\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      return v instanceof BigNumber || v && v._isBigNumber === true || false;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return Â±0 if x is Â±0 or y is Â±Infinity, or return Â±Infinity as y is Â±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on Â±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n          x.c = x.e = null;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.c = x.e = x.s = null;\r\n        }\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is Â±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and Â±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, Â±Infinity, Â±0 or Â±1, or n is Â±Infinity, NaN or Â±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to Â±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to Â±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to Â±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = Â±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return Â±0, else return Â±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, Â±Infinity or Â±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return Â±Infinity if either is Â±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return Â±0 if either is Â±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return Â±Infinity if either Â±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is Â±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nconst binarySuffixes = [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"];\nconst decimalSuffixes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\nconst bytes = {\n    general: {scale: 1024, suffixes: decimalSuffixes, marker: \"bd\"},\n    binary: {scale: 1024, suffixes: binarySuffixes, marker: \"b\"},\n    decimal: {scale: 1000, suffixes: decimalSuffixes, marker: \"d\"}\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return {value, suffix};\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let baseInfo = bytes[base];\n\n    let {value, suffix} = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n    let abbreviations = state.currentAbbreviations();\n    return `${output}${abbreviations.spaced ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = providedFormat.currencyPosition || currentCurrency.position;\n    let symbol = providedFormat.currencySymbol || currentCurrency.symbol;\n\n    if (options.spaceSeparated) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({value, forceAverage, abbreviations, spaceSeparated = false, totalLength = 0}) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if ((abs >= Math.pow(10, 12) && !forceAverage) || (forceAverage === \"trillion\")) {\n        // trillion\n        abbreviation = abbreviations.trillion;\n        value = value / Math.pow(10, 12);\n    } else if ((abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !forceAverage) || (forceAverage === \"billion\")) {\n        // billion\n        abbreviation = abbreviations.billion;\n        value = value / Math.pow(10, 9);\n    } else if ((abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !forceAverage) || (forceAverage === \"million\")) {\n        // million\n        abbreviation = abbreviations.million;\n        value = value / Math.pow(10, 6);\n    } else if ((abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !forceAverage) || (forceAverage === \"thousand\")) {\n        // thousand\n        abbreviation = abbreviations.thousand;\n        value = value / Math.pow(10, 3);\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let characteristic = value.toString().split(\".\")[0];\n        mantissaPrecision = Math.max(totalLength - characteristic.length, 0);\n    }\n\n    return {value, abbreviation, mantissaPrecision};\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({value, characteristicPrecision = 0}) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixed(value, precision) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    return (Math.round(+`${value}e+${precision}`) / (Math.pow(10, precision))).toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n\n    if (thousandSeparated) {\n        if (value < 0) {\n            // Remove the minus sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (value < 0) {\n            // Add back the minus sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults()}) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n\n    let abbreviation = \"\";\n\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated: spaceSeparated,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * Use first uses the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * Use first uses the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * Use first uses the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * Use first uses the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * Use first uses the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * Use first uses the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.1.2\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(suffix.key, \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return !!value;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n"]},"metadata":{},"sourceType":"script"}