{"ast":null,"code":"import { textRenderer } from \"../textRenderer/index.mjs\";\nimport { fastInnerHTML } from \"../../helpers/dom/element.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nexport var RENDERER_TYPE = 'password';\n/**\r\n * @private\r\n * @param {Core} instance The Handsontable instance.\r\n * @param {HTMLTableCellElement} TD The rendered cell element.\r\n * @param {number} row The visual row index.\r\n * @param {number} col The visual column index.\r\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\r\n * @param {*} value The rendered value.\r\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\r\n */\n\nexport function passwordRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  textRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  var hashLength = cellProperties.hashLength || TD.innerHTML.length;\n  var hashSymbol = cellProperties.hashSymbol || '*';\n  var hash = '';\n  rangeEach(hashLength - 1, function () {\n    hash += hashSymbol;\n  });\n  fastInnerHTML(TD, hash);\n}\npasswordRenderer.RENDERER_TYPE = RENDERER_TYPE;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/renderers/passwordRenderer/passwordRenderer.mjs"],"names":["textRenderer","fastInnerHTML","rangeEach","RENDERER_TYPE","passwordRenderer","instance","TD","row","col","prop","value","cellProperties","apply","hashLength","innerHTML","length","hashSymbol","hash"],"mappings":"AAAA,SAASA,YAAT,QAA6B,2BAA7B;AACA,SAASC,aAAT,QAA8B,+BAA9B;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAO,IAAIC,aAAa,GAAG,UAApB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCC,EAApC,EAAwCC,GAAxC,EAA6CC,GAA7C,EAAkDC,IAAlD,EAAwDC,KAAxD,EAA+DC,cAA/D,EAA+E;AACpFX,EAAAA,YAAY,CAACY,KAAb,CAAmB,IAAnB,EAAyB,CAACP,QAAD,EAAWC,EAAX,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,cAAtC,CAAzB;AACA,MAAIE,UAAU,GAAGF,cAAc,CAACE,UAAf,IAA6BP,EAAE,CAACQ,SAAH,CAAaC,MAA3D;AACA,MAAIC,UAAU,GAAGL,cAAc,CAACK,UAAf,IAA6B,GAA9C;AACA,MAAIC,IAAI,GAAG,EAAX;AACAf,EAAAA,SAAS,CAACW,UAAU,GAAG,CAAd,EAAiB,YAAY;AACpCI,IAAAA,IAAI,IAAID,UAAR;AACD,GAFQ,CAAT;AAGAf,EAAAA,aAAa,CAACK,EAAD,EAAKW,IAAL,CAAb;AACD;AACDb,gBAAgB,CAACD,aAAjB,GAAiCA,aAAjC","sourcesContent":["import { textRenderer } from \"../textRenderer/index.mjs\";\r\nimport { fastInnerHTML } from \"../../helpers/dom/element.mjs\";\r\nimport { rangeEach } from \"../../helpers/number.mjs\";\r\nexport var RENDERER_TYPE = 'password';\r\n/**\r\n * @private\r\n * @param {Core} instance The Handsontable instance.\r\n * @param {HTMLTableCellElement} TD The rendered cell element.\r\n * @param {number} row The visual row index.\r\n * @param {number} col The visual column index.\r\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\r\n * @param {*} value The rendered value.\r\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\r\n */\r\n\r\nexport function passwordRenderer(instance, TD, row, col, prop, value, cellProperties) {\r\n  textRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\r\n  var hashLength = cellProperties.hashLength || TD.innerHTML.length;\r\n  var hashSymbol = cellProperties.hashSymbol || '*';\r\n  var hash = '';\r\n  rangeEach(hashLength - 1, function () {\r\n    hash += hashSymbol;\r\n  });\r\n  fastInnerHTML(TD, hash);\r\n}\r\npasswordRenderer.RENDERER_TYPE = RENDERER_TYPE;"]},"metadata":{},"sourceType":"module"}