{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { CellCoords } from \"../../3rdparty/walkontable/src/index.mjs\";\nimport { stringify } from \"../../helpers/mixed.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport hooksRefRegisterer from \"../../mixins/hooksRefRegisterer.mjs\";\nexport var EDITOR_TYPE = 'base';\nexport var EDITOR_STATE = Object.freeze({\n  VIRGIN: 'STATE_VIRGIN',\n  // before editing\n  EDITING: 'STATE_EDITING',\n  WAITING: 'STATE_WAITING',\n  // waiting for async validation\n  FINISHED: 'STATE_FINISHED'\n});\n/**\n * @util\n * @class BaseEditor\n */\n\nexport var BaseEditor = /*#__PURE__*/function () {\n  /**\n   * @param {Handsontable} instance A reference to the source instance of the Handsontable.\n   */\n  function BaseEditor(instance) {\n    _classCallCheck(this, BaseEditor);\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @type {Handsontable}\n     */\n\n\n    this.hot = instance;\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @deprecated\n     *\n     * @type {Handsontable}\n     */\n\n    this.instance = instance;\n    /**\n     * Editor's state.\n     *\n     * @type {string}\n     */\n\n    this.state = EDITOR_STATE.VIRGIN;\n    /**\n     * Flag to store information about editor's opening status.\n     *\n     * @private\n     *\n     * @type {boolean}\n     */\n\n    this._opened = false;\n    /**\n     * Defines the editor's editing mode. When false, then an editor works in fast editing mode.\n     *\n     * @private\n     *\n     * @type {boolean}\n     */\n\n    this._fullEditMode = false;\n    /**\n     * Callback to call after closing editor.\n     *\n     * @type {Function}\n     */\n\n    this._closeCallback = null;\n    /**\n     * Currently rendered cell's TD element.\n     *\n     * @type {HTMLTableCellElement}\n     */\n\n    this.TD = null;\n    /**\n     * Visual row index.\n     *\n     * @type {number}\n     */\n\n    this.row = null;\n    /**\n     * Visual column index.\n     *\n     * @type {number}\n     */\n\n    this.col = null;\n    /**\n     * Column property name or a column index, if datasource is an array of arrays.\n     *\n     * @type {number|string}\n     */\n\n    this.prop = null;\n    /**\n     * Original cell's value.\n     *\n     * @type {*}\n     */\n\n    this.originalValue = null;\n    /**\n     * Object containing the cell's properties.\n     *\n     * @type {object}\n     */\n\n    this.cellProperties = null;\n    this.init();\n  }\n  /**\n   * Fires callback after closing editor.\n   *\n   * @private\n   * @param {boolean} result The editor value.\n   */\n\n\n  _createClass(BaseEditor, [{\n    key: \"_fireCallbacks\",\n    value: function _fireCallbacks(result) {\n      if (this._closeCallback) {\n        this._closeCallback(result);\n\n        this._closeCallback = null;\n      }\n    }\n    /**\n     * Initializes an editor's intance.\n     */\n\n  }, {\n    key: \"init\",\n    value: function init() {}\n    /**\n     * Required method to get current value from editable element.\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      throw Error('Editor getValue() method unimplemented');\n    }\n    /**\n     * Required method to set new value into editable element.\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue() {\n      throw Error('Editor setValue() method unimplemented');\n    }\n    /**\n     * Required method to open editor.\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      throw Error('Editor open() method unimplemented');\n    }\n    /**\n     * Required method to close editor.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      throw Error('Editor close() method unimplemented');\n    }\n    /**\n     * Prepares editor's meta data.\n     *\n     * @param {number} row The visual row index.\n     * @param {number} col The visual column index.\n     * @param {number|string} prop The column property (passed when datasource is an array of objects).\n     * @param {HTMLTableCellElement} td The rendered cell element.\n     * @param {*} value The rendered value.\n     * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n     */\n\n  }, {\n    key: \"prepare\",\n    value: function prepare(row, col, prop, td, value, cellProperties) {\n      this.TD = td;\n      this.row = row;\n      this.col = col;\n      this.prop = prop;\n      this.originalValue = value;\n      this.cellProperties = cellProperties;\n      this.state = EDITOR_STATE.VIRGIN;\n    }\n    /**\n     * Fallback method to provide extendable editors in ES5.\n     *\n     * @returns {Function}\n     */\n\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      return /*#__PURE__*/function (_this$constructor) {\n        _inherits(Editor, _this$constructor);\n\n        var _super = _createSuper(Editor);\n\n        function Editor() {\n          _classCallCheck(this, Editor);\n\n          return _super.apply(this, arguments);\n        }\n\n        return Editor;\n      }(this.constructor);\n    }\n    /**\n     * Saves value from editor into data storage.\n     *\n     * @param {*} value The editor value.\n     * @param {boolean} ctrlDown If `true`, applies value to each cell in the last selected range.\n     */\n\n  }, {\n    key: \"saveValue\",\n    value: function saveValue(value, ctrlDown) {\n      var visualRowFrom;\n      var visualColumnFrom;\n      var visualRowTo;\n      var visualColumnTo; // if ctrl+enter and multiple cells selected, behave like Excel (finish editing and apply to all cells)\n\n      if (ctrlDown) {\n        var selectedLast = this.hot.getSelectedLast();\n        visualRowFrom = Math.max(Math.min(selectedLast[0], selectedLast[2]), 0); // Math.max eliminate headers coords.\n\n        visualColumnFrom = Math.max(Math.min(selectedLast[1], selectedLast[3]), 0); // Math.max eliminate headers coords.\n\n        visualRowTo = Math.max(selectedLast[0], selectedLast[2]);\n        visualColumnTo = Math.max(selectedLast[1], selectedLast[3]);\n      } else {\n        var _ref = [this.row, this.col, null, null];\n        visualRowFrom = _ref[0];\n        visualColumnFrom = _ref[1];\n        visualRowTo = _ref[2];\n        visualColumnTo = _ref[3];\n      }\n\n      var modifiedCellCoords = this.hot.runHooks('modifyGetCellCoords', visualRowFrom, visualColumnFrom);\n\n      if (Array.isArray(modifiedCellCoords)) {\n        var _modifiedCellCoords = _slicedToArray(modifiedCellCoords, 2);\n\n        visualRowFrom = _modifiedCellCoords[0];\n        visualColumnFrom = _modifiedCellCoords[1];\n      } // Saving values using the modified coordinates.\n\n\n      this.hot.populateFromArray(visualRowFrom, visualColumnFrom, value, visualRowTo, visualColumnTo, 'edit');\n    }\n    /**\n     * Begins editing on a highlighted cell and hides fillHandle corner if was present.\n     *\n     * @param {*} newInitialValue The initial editor value.\n     * @param {Event} event The keyboard event object.\n     */\n\n  }, {\n    key: \"beginEditing\",\n    value: function beginEditing(newInitialValue, event) {\n      if (this.state !== EDITOR_STATE.VIRGIN) {\n        return;\n      }\n\n      var hotInstance = this.hot; // We have to convert visual indexes into renderable indexes\n      // due to hidden columns don't participate in the rendering process\n\n      var renderableRowIndex = hotInstance.rowIndexMapper.getRenderableFromVisualIndex(this.row);\n      var renderableColumnIndex = hotInstance.columnIndexMapper.getRenderableFromVisualIndex(this.col);\n      hotInstance.view.scrollViewport(new CellCoords(renderableRowIndex, renderableColumnIndex));\n      this.state = EDITOR_STATE.EDITING; // Set the editor value only in the full edit mode. In other mode the focusable element has to be empty,\n      // otherwise IME (editor for Asia users) doesn't work.\n\n      if (this.isInFullEditMode()) {\n        var stringifiedInitialValue = typeof newInitialValue === 'string' ? newInitialValue : stringify(this.originalValue);\n        this.setValue(stringifiedInitialValue);\n      }\n\n      this.open(event);\n      this._opened = true;\n      this.focus(); // only rerender the selections (FillHandle should disappear when beginediting is triggered)\n\n      hotInstance.view.render();\n      hotInstance.runHooks('afterBeginEditing', this.row, this.col);\n    }\n    /**\n     * Finishes editing and start saving or restoring process for editing cell or last selected range.\n     *\n     * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.\n     * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.\n     * @param {Function} callback The callback function, fired after editor closing.\n     */\n\n  }, {\n    key: \"finishEditing\",\n    value: function finishEditing(restoreOriginalValue, ctrlDown, callback) {\n      var _this = this;\n\n      var val;\n\n      if (callback) {\n        var previousCloseCallback = this._closeCallback;\n\n        this._closeCallback = function (result) {\n          if (previousCloseCallback) {\n            previousCloseCallback(result);\n          }\n\n          callback(result);\n\n          _this.hot.view.render();\n        };\n      }\n\n      if (this.isWaiting()) {\n        return;\n      }\n\n      if (this.state === EDITOR_STATE.VIRGIN) {\n        this.hot._registerTimeout(function () {\n          _this._fireCallbacks(true);\n        });\n\n        return;\n      }\n\n      if (this.state === EDITOR_STATE.EDITING) {\n        if (restoreOriginalValue) {\n          this.cancelChanges();\n          this.hot.view.render();\n          return;\n        }\n\n        var value = this.getValue();\n\n        if (this.hot.getSettings().trimWhitespace) {\n          // We trim only string values\n          val = [[typeof value === 'string' ? String.prototype.trim.call(value || '') : value]];\n        } else {\n          val = [[value]];\n        }\n\n        this.state = EDITOR_STATE.WAITING;\n        this.saveValue(val, ctrlDown);\n\n        if (this.hot.getCellValidator(this.cellProperties)) {\n          this.hot.addHookOnce('postAfterValidate', function (result) {\n            _this.state = EDITOR_STATE.FINISHED;\n\n            _this.discardEditor(result);\n          });\n        } else {\n          this.state = EDITOR_STATE.FINISHED;\n          this.discardEditor(true);\n        }\n      }\n    }\n    /**\n     * Finishes editing without singout saving value.\n     */\n\n  }, {\n    key: \"cancelChanges\",\n    value: function cancelChanges() {\n      this.state = EDITOR_STATE.FINISHED;\n      this.discardEditor();\n    }\n    /**\n     * Verifies result of validation or closes editor if user's cancelled changes.\n     *\n     * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,\n     *                                   then an editor won't be closed until validation is passed.\n     */\n\n  }, {\n    key: \"discardEditor\",\n    value: function discardEditor(result) {\n      if (this.state !== EDITOR_STATE.FINISHED) {\n        return;\n      } // validator was defined and failed\n\n\n      if (result === false && this.cellProperties.allowInvalid !== true) {\n        this.hot.selectCell(this.row, this.col);\n        this.focus();\n        this.state = EDITOR_STATE.EDITING;\n\n        this._fireCallbacks(false);\n      } else {\n        this.close();\n        this._opened = false;\n        this._fullEditMode = false;\n        this.state = EDITOR_STATE.VIRGIN;\n\n        this._fireCallbacks(true);\n      }\n    }\n    /**\n     * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated\n     * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.\n     */\n\n  }, {\n    key: \"enableFullEditMode\",\n    value: function enableFullEditMode() {\n      this._fullEditMode = true;\n    }\n    /**\n     * Checks if editor is in full edit mode.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isInFullEditMode\",\n    value: function isInFullEditMode() {\n      return this._fullEditMode;\n    }\n    /**\n     * Returns information whether the editor is open.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isOpened\",\n    value: function isOpened() {\n      return this._opened;\n    }\n    /**\n     * Returns information whether the editor is waiting, eg.: for async validation.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isWaiting\",\n    value: function isWaiting() {\n      return this.state === EDITOR_STATE.WAITING;\n    }\n    /**\n     * Gets className of the edited cell if exist.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getEditedCellsLayerClass\",\n    value: function getEditedCellsLayerClass() {\n      var editorSection = this.checkEditorSection();\n\n      switch (editorSection) {\n        case 'right':\n          return 'ht_clone_right';\n\n        case 'left':\n          return 'ht_clone_left';\n\n        case 'bottom':\n          return 'ht_clone_bottom';\n\n        case 'bottom-right-corner':\n          return 'ht_clone_bottom_right_corner';\n\n        case 'bottom-left-corner':\n          return 'ht_clone_bottom_left_corner';\n\n        case 'top':\n          return 'ht_clone_top';\n\n        case 'top-right-corner':\n          return 'ht_clone_top_right_corner';\n\n        case 'top-left-corner':\n          return 'ht_clone_top_left_corner';\n\n        default:\n          return 'ht_clone_master';\n      }\n    }\n    /**\n     * Gets HTMLTableCellElement of the edited cell if exist.\n     *\n     * @returns {HTMLTableCellElement|null}\n     */\n\n  }, {\n    key: \"getEditedCell\",\n    value: function getEditedCell() {\n      return this.hot.getCell(this.row, this.col, true);\n    }\n    /**\n     * Returns name of the overlay, where editor is placed.\n     *\n     * @private\n     * @returns {string}\n     */\n\n  }, {\n    key: \"checkEditorSection\",\n    value: function checkEditorSection() {\n      var totalRows = this.hot.countRows();\n      var section = '';\n\n      if (this.row < this.hot.getSettings().fixedRowsTop) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'top-left-corner';\n        } else {\n          section = 'top';\n        }\n      } else if (this.hot.getSettings().fixedRowsBottom && this.row >= totalRows - this.hot.getSettings().fixedRowsBottom) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'bottom-left-corner';\n        } else {\n          section = 'bottom';\n        }\n      } else if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n        section = 'left';\n      }\n\n      return section;\n    }\n  }], [{\n    key: \"EDITOR_TYPE\",\n    get: function get() {\n      return EDITOR_TYPE;\n    }\n  }]);\n\n  return BaseEditor;\n}();\nmixin(BaseEditor, hooksRefRegisterer);","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/editors/baseEditor/baseEditor.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","len","length","arr2","_i","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","_inherits","subClass","superClass","create","writable","configurable","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","defineProperty","key","_createClass","protoProps","staticProps","CellCoords","stringify","mixin","hooksRefRegisterer","EDITOR_TYPE","EDITOR_STATE","freeze","VIRGIN","EDITING","WAITING","FINISHED","BaseEditor","hot","state","_opened","_fullEditMode","_closeCallback","TD","row","col","prop","originalValue","cellProperties","init","_fireCallbacks","getValue","Error","setValue","open","close","prepare","td","extend","_this$constructor","Editor","_super","saveValue","ctrlDown","visualRowFrom","visualColumnFrom","visualRowTo","visualColumnTo","selectedLast","getSelectedLast","Math","max","min","_ref","modifiedCellCoords","runHooks","_modifiedCellCoords","populateFromArray","beginEditing","newInitialValue","event","hotInstance","renderableRowIndex","rowIndexMapper","getRenderableFromVisualIndex","renderableColumnIndex","columnIndexMapper","view","scrollViewport","isInFullEditMode","stringifiedInitialValue","focus","render","finishEditing","restoreOriginalValue","callback","_this","val","previousCloseCallback","isWaiting","_registerTimeout","cancelChanges","getSettings","trimWhitespace","String","trim","getCellValidator","addHookOnce","discardEditor","allowInvalid","selectCell","enableFullEditMode","isOpened","getEditedCellsLayerClass","editorSection","checkEditorSection","getEditedCell","getCell","totalRows","countRows","section","fixedRowsTop","fixedColumnsLeft","fixedRowsBottom","get"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport \"core-js/modules/es.object.freeze.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.object.set-prototype-of.js\";\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.reflect.construct.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport { CellCoords } from \"../../3rdparty/walkontable/src/index.mjs\";\nimport { stringify } from \"../../helpers/mixed.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport hooksRefRegisterer from \"../../mixins/hooksRefRegisterer.mjs\";\nexport var EDITOR_TYPE = 'base';\nexport var EDITOR_STATE = Object.freeze({\n  VIRGIN: 'STATE_VIRGIN',\n  // before editing\n  EDITING: 'STATE_EDITING',\n  WAITING: 'STATE_WAITING',\n  // waiting for async validation\n  FINISHED: 'STATE_FINISHED'\n});\n/**\n * @util\n * @class BaseEditor\n */\n\nexport var BaseEditor = /*#__PURE__*/function () {\n  /**\n   * @param {Handsontable} instance A reference to the source instance of the Handsontable.\n   */\n  function BaseEditor(instance) {\n    _classCallCheck(this, BaseEditor);\n\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = instance;\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @deprecated\n     *\n     * @type {Handsontable}\n     */\n\n    this.instance = instance;\n    /**\n     * Editor's state.\n     *\n     * @type {string}\n     */\n\n    this.state = EDITOR_STATE.VIRGIN;\n    /**\n     * Flag to store information about editor's opening status.\n     *\n     * @private\n     *\n     * @type {boolean}\n     */\n\n    this._opened = false;\n    /**\n     * Defines the editor's editing mode. When false, then an editor works in fast editing mode.\n     *\n     * @private\n     *\n     * @type {boolean}\n     */\n\n    this._fullEditMode = false;\n    /**\n     * Callback to call after closing editor.\n     *\n     * @type {Function}\n     */\n\n    this._closeCallback = null;\n    /**\n     * Currently rendered cell's TD element.\n     *\n     * @type {HTMLTableCellElement}\n     */\n\n    this.TD = null;\n    /**\n     * Visual row index.\n     *\n     * @type {number}\n     */\n\n    this.row = null;\n    /**\n     * Visual column index.\n     *\n     * @type {number}\n     */\n\n    this.col = null;\n    /**\n     * Column property name or a column index, if datasource is an array of arrays.\n     *\n     * @type {number|string}\n     */\n\n    this.prop = null;\n    /**\n     * Original cell's value.\n     *\n     * @type {*}\n     */\n\n    this.originalValue = null;\n    /**\n     * Object containing the cell's properties.\n     *\n     * @type {object}\n     */\n\n    this.cellProperties = null;\n    this.init();\n  }\n  /**\n   * Fires callback after closing editor.\n   *\n   * @private\n   * @param {boolean} result The editor value.\n   */\n\n\n  _createClass(BaseEditor, [{\n    key: \"_fireCallbacks\",\n    value: function _fireCallbacks(result) {\n      if (this._closeCallback) {\n        this._closeCallback(result);\n\n        this._closeCallback = null;\n      }\n    }\n    /**\n     * Initializes an editor's intance.\n     */\n\n  }, {\n    key: \"init\",\n    value: function init() {}\n    /**\n     * Required method to get current value from editable element.\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      throw Error('Editor getValue() method unimplemented');\n    }\n    /**\n     * Required method to set new value into editable element.\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue() {\n      throw Error('Editor setValue() method unimplemented');\n    }\n    /**\n     * Required method to open editor.\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      throw Error('Editor open() method unimplemented');\n    }\n    /**\n     * Required method to close editor.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      throw Error('Editor close() method unimplemented');\n    }\n    /**\n     * Prepares editor's meta data.\n     *\n     * @param {number} row The visual row index.\n     * @param {number} col The visual column index.\n     * @param {number|string} prop The column property (passed when datasource is an array of objects).\n     * @param {HTMLTableCellElement} td The rendered cell element.\n     * @param {*} value The rendered value.\n     * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n     */\n\n  }, {\n    key: \"prepare\",\n    value: function prepare(row, col, prop, td, value, cellProperties) {\n      this.TD = td;\n      this.row = row;\n      this.col = col;\n      this.prop = prop;\n      this.originalValue = value;\n      this.cellProperties = cellProperties;\n      this.state = EDITOR_STATE.VIRGIN;\n    }\n    /**\n     * Fallback method to provide extendable editors in ES5.\n     *\n     * @returns {Function}\n     */\n\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      return /*#__PURE__*/function (_this$constructor) {\n        _inherits(Editor, _this$constructor);\n\n        var _super = _createSuper(Editor);\n\n        function Editor() {\n          _classCallCheck(this, Editor);\n\n          return _super.apply(this, arguments);\n        }\n\n        return Editor;\n      }(this.constructor);\n    }\n    /**\n     * Saves value from editor into data storage.\n     *\n     * @param {*} value The editor value.\n     * @param {boolean} ctrlDown If `true`, applies value to each cell in the last selected range.\n     */\n\n  }, {\n    key: \"saveValue\",\n    value: function saveValue(value, ctrlDown) {\n      var visualRowFrom;\n      var visualColumnFrom;\n      var visualRowTo;\n      var visualColumnTo; // if ctrl+enter and multiple cells selected, behave like Excel (finish editing and apply to all cells)\n\n      if (ctrlDown) {\n        var selectedLast = this.hot.getSelectedLast();\n        visualRowFrom = Math.max(Math.min(selectedLast[0], selectedLast[2]), 0); // Math.max eliminate headers coords.\n\n        visualColumnFrom = Math.max(Math.min(selectedLast[1], selectedLast[3]), 0); // Math.max eliminate headers coords.\n\n        visualRowTo = Math.max(selectedLast[0], selectedLast[2]);\n        visualColumnTo = Math.max(selectedLast[1], selectedLast[3]);\n      } else {\n        var _ref = [this.row, this.col, null, null];\n        visualRowFrom = _ref[0];\n        visualColumnFrom = _ref[1];\n        visualRowTo = _ref[2];\n        visualColumnTo = _ref[3];\n      }\n\n      var modifiedCellCoords = this.hot.runHooks('modifyGetCellCoords', visualRowFrom, visualColumnFrom);\n\n      if (Array.isArray(modifiedCellCoords)) {\n        var _modifiedCellCoords = _slicedToArray(modifiedCellCoords, 2);\n\n        visualRowFrom = _modifiedCellCoords[0];\n        visualColumnFrom = _modifiedCellCoords[1];\n      } // Saving values using the modified coordinates.\n\n\n      this.hot.populateFromArray(visualRowFrom, visualColumnFrom, value, visualRowTo, visualColumnTo, 'edit');\n    }\n    /**\n     * Begins editing on a highlighted cell and hides fillHandle corner if was present.\n     *\n     * @param {*} newInitialValue The initial editor value.\n     * @param {Event} event The keyboard event object.\n     */\n\n  }, {\n    key: \"beginEditing\",\n    value: function beginEditing(newInitialValue, event) {\n      if (this.state !== EDITOR_STATE.VIRGIN) {\n        return;\n      }\n\n      var hotInstance = this.hot; // We have to convert visual indexes into renderable indexes\n      // due to hidden columns don't participate in the rendering process\n\n      var renderableRowIndex = hotInstance.rowIndexMapper.getRenderableFromVisualIndex(this.row);\n      var renderableColumnIndex = hotInstance.columnIndexMapper.getRenderableFromVisualIndex(this.col);\n      hotInstance.view.scrollViewport(new CellCoords(renderableRowIndex, renderableColumnIndex));\n      this.state = EDITOR_STATE.EDITING; // Set the editor value only in the full edit mode. In other mode the focusable element has to be empty,\n      // otherwise IME (editor for Asia users) doesn't work.\n\n      if (this.isInFullEditMode()) {\n        var stringifiedInitialValue = typeof newInitialValue === 'string' ? newInitialValue : stringify(this.originalValue);\n        this.setValue(stringifiedInitialValue);\n      }\n\n      this.open(event);\n      this._opened = true;\n      this.focus(); // only rerender the selections (FillHandle should disappear when beginediting is triggered)\n\n      hotInstance.view.render();\n      hotInstance.runHooks('afterBeginEditing', this.row, this.col);\n    }\n    /**\n     * Finishes editing and start saving or restoring process for editing cell or last selected range.\n     *\n     * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.\n     * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.\n     * @param {Function} callback The callback function, fired after editor closing.\n     */\n\n  }, {\n    key: \"finishEditing\",\n    value: function finishEditing(restoreOriginalValue, ctrlDown, callback) {\n      var _this = this;\n\n      var val;\n\n      if (callback) {\n        var previousCloseCallback = this._closeCallback;\n\n        this._closeCallback = function (result) {\n          if (previousCloseCallback) {\n            previousCloseCallback(result);\n          }\n\n          callback(result);\n\n          _this.hot.view.render();\n        };\n      }\n\n      if (this.isWaiting()) {\n        return;\n      }\n\n      if (this.state === EDITOR_STATE.VIRGIN) {\n        this.hot._registerTimeout(function () {\n          _this._fireCallbacks(true);\n        });\n\n        return;\n      }\n\n      if (this.state === EDITOR_STATE.EDITING) {\n        if (restoreOriginalValue) {\n          this.cancelChanges();\n          this.hot.view.render();\n          return;\n        }\n\n        var value = this.getValue();\n\n        if (this.hot.getSettings().trimWhitespace) {\n          // We trim only string values\n          val = [[typeof value === 'string' ? String.prototype.trim.call(value || '') : value]];\n        } else {\n          val = [[value]];\n        }\n\n        this.state = EDITOR_STATE.WAITING;\n        this.saveValue(val, ctrlDown);\n\n        if (this.hot.getCellValidator(this.cellProperties)) {\n          this.hot.addHookOnce('postAfterValidate', function (result) {\n            _this.state = EDITOR_STATE.FINISHED;\n\n            _this.discardEditor(result);\n          });\n        } else {\n          this.state = EDITOR_STATE.FINISHED;\n          this.discardEditor(true);\n        }\n      }\n    }\n    /**\n     * Finishes editing without singout saving value.\n     */\n\n  }, {\n    key: \"cancelChanges\",\n    value: function cancelChanges() {\n      this.state = EDITOR_STATE.FINISHED;\n      this.discardEditor();\n    }\n    /**\n     * Verifies result of validation or closes editor if user's cancelled changes.\n     *\n     * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,\n     *                                   then an editor won't be closed until validation is passed.\n     */\n\n  }, {\n    key: \"discardEditor\",\n    value: function discardEditor(result) {\n      if (this.state !== EDITOR_STATE.FINISHED) {\n        return;\n      } // validator was defined and failed\n\n\n      if (result === false && this.cellProperties.allowInvalid !== true) {\n        this.hot.selectCell(this.row, this.col);\n        this.focus();\n        this.state = EDITOR_STATE.EDITING;\n\n        this._fireCallbacks(false);\n      } else {\n        this.close();\n        this._opened = false;\n        this._fullEditMode = false;\n        this.state = EDITOR_STATE.VIRGIN;\n\n        this._fireCallbacks(true);\n      }\n    }\n    /**\n     * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated\n     * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.\n     */\n\n  }, {\n    key: \"enableFullEditMode\",\n    value: function enableFullEditMode() {\n      this._fullEditMode = true;\n    }\n    /**\n     * Checks if editor is in full edit mode.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isInFullEditMode\",\n    value: function isInFullEditMode() {\n      return this._fullEditMode;\n    }\n    /**\n     * Returns information whether the editor is open.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isOpened\",\n    value: function isOpened() {\n      return this._opened;\n    }\n    /**\n     * Returns information whether the editor is waiting, eg.: for async validation.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isWaiting\",\n    value: function isWaiting() {\n      return this.state === EDITOR_STATE.WAITING;\n    }\n    /**\n     * Gets className of the edited cell if exist.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getEditedCellsLayerClass\",\n    value: function getEditedCellsLayerClass() {\n      var editorSection = this.checkEditorSection();\n\n      switch (editorSection) {\n        case 'right':\n          return 'ht_clone_right';\n\n        case 'left':\n          return 'ht_clone_left';\n\n        case 'bottom':\n          return 'ht_clone_bottom';\n\n        case 'bottom-right-corner':\n          return 'ht_clone_bottom_right_corner';\n\n        case 'bottom-left-corner':\n          return 'ht_clone_bottom_left_corner';\n\n        case 'top':\n          return 'ht_clone_top';\n\n        case 'top-right-corner':\n          return 'ht_clone_top_right_corner';\n\n        case 'top-left-corner':\n          return 'ht_clone_top_left_corner';\n\n        default:\n          return 'ht_clone_master';\n      }\n    }\n    /**\n     * Gets HTMLTableCellElement of the edited cell if exist.\n     *\n     * @returns {HTMLTableCellElement|null}\n     */\n\n  }, {\n    key: \"getEditedCell\",\n    value: function getEditedCell() {\n      return this.hot.getCell(this.row, this.col, true);\n    }\n    /**\n     * Returns name of the overlay, where editor is placed.\n     *\n     * @private\n     * @returns {string}\n     */\n\n  }, {\n    key: \"checkEditorSection\",\n    value: function checkEditorSection() {\n      var totalRows = this.hot.countRows();\n      var section = '';\n\n      if (this.row < this.hot.getSettings().fixedRowsTop) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'top-left-corner';\n        } else {\n          section = 'top';\n        }\n      } else if (this.hot.getSettings().fixedRowsBottom && this.row >= totalRows - this.hot.getSettings().fixedRowsBottom) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'bottom-left-corner';\n        } else {\n          section = 'bottom';\n        }\n      } else if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n        section = 'left';\n      }\n\n      return section;\n    }\n  }], [{\n    key: \"EDITOR_TYPE\",\n    get: function get() {\n      return EDITOR_TYPE;\n    }\n  }]);\n\n  return BaseEditor;\n}();\nmixin(BaseEditor, hooksRefRegisterer);"]},"metadata":{},"sourceType":"module"}