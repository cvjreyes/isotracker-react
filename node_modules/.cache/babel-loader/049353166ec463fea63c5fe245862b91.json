{"ast":null,"code":"import { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport { empty, fastInnerText } from \"../../helpers/dom/element.mjs\";\nimport { stringify } from \"../../helpers/mixed.mjs\";\nexport var RENDERER_TYPE = 'text';\n/**\n * Default text renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\n\nexport function textRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  baseRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  var escaped = value;\n\n  if (!escaped && cellProperties.placeholder) {\n    escaped = cellProperties.placeholder;\n  }\n\n  escaped = stringify(escaped);\n\n  if (instance.getSettings().trimWhitespace) {\n    escaped = escaped.trim();\n  }\n\n  if (cellProperties.rendererTemplate) {\n    empty(TD);\n    var TEMPLATE = instance.rootDocument.createElement('TEMPLATE');\n    TEMPLATE.setAttribute('bind', '{{}}');\n    TEMPLATE.innerHTML = cellProperties.rendererTemplate;\n    HTMLTemplateElement.decorate(TEMPLATE);\n    TEMPLATE.model = instance.getSourceDataAtRow(row);\n    TD.appendChild(TEMPLATE);\n  } else {\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n    fastInnerText(TD, escaped);\n  }\n}\ntextRenderer.RENDERER_TYPE = RENDERER_TYPE;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/renderers/textRenderer/textRenderer.mjs"],"names":["baseRenderer","empty","fastInnerText","stringify","RENDERER_TYPE","textRenderer","instance","TD","row","col","prop","value","cellProperties","apply","escaped","placeholder","getSettings","trimWhitespace","trim","rendererTemplate","TEMPLATE","rootDocument","createElement","setAttribute","innerHTML","HTMLTemplateElement","decorate","model","getSourceDataAtRow","appendChild"],"mappings":"AACA,SAASA,YAAT,QAA6B,2BAA7B;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,+BAArC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,OAAO,IAAIC,aAAa,GAAG,MAApB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,EAAhC,EAAoCC,GAApC,EAAyCC,GAAzC,EAA8CC,IAA9C,EAAoDC,KAApD,EAA2DC,cAA3D,EAA2E;AAChFZ,EAAAA,YAAY,CAACa,KAAb,CAAmB,IAAnB,EAAyB,CAACP,QAAD,EAAWC,EAAX,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,cAAtC,CAAzB;AACA,MAAIE,OAAO,GAAGH,KAAd;;AAEA,MAAI,CAACG,OAAD,IAAYF,cAAc,CAACG,WAA/B,EAA4C;AAC1CD,IAAAA,OAAO,GAAGF,cAAc,CAACG,WAAzB;AACD;;AAEDD,EAAAA,OAAO,GAAGX,SAAS,CAACW,OAAD,CAAnB;;AAEA,MAAIR,QAAQ,CAACU,WAAT,GAAuBC,cAA3B,EAA2C;AACzCH,IAAAA,OAAO,GAAGA,OAAO,CAACI,IAAR,EAAV;AACD;;AAED,MAAIN,cAAc,CAACO,gBAAnB,EAAqC;AACnClB,IAAAA,KAAK,CAACM,EAAD,CAAL;AACA,QAAIa,QAAQ,GAAGd,QAAQ,CAACe,YAAT,CAAsBC,aAAtB,CAAoC,UAApC,CAAf;AACAF,IAAAA,QAAQ,CAACG,YAAT,CAAsB,MAAtB,EAA8B,MAA9B;AACAH,IAAAA,QAAQ,CAACI,SAAT,GAAqBZ,cAAc,CAACO,gBAApC;AACAM,IAAAA,mBAAmB,CAACC,QAApB,CAA6BN,QAA7B;AACAA,IAAAA,QAAQ,CAACO,KAAT,GAAiBrB,QAAQ,CAACsB,kBAAT,CAA4BpB,GAA5B,CAAjB;AACAD,IAAAA,EAAE,CAACsB,WAAH,CAAeT,QAAf;AACD,GARD,MAQO;AACL;AACAlB,IAAAA,aAAa,CAACK,EAAD,EAAKO,OAAL,CAAb;AACD;AACF;AACDT,YAAY,CAACD,aAAb,GAA6BA,aAA7B","sourcesContent":["import \"core-js/modules/es.string.trim.js\";\nimport { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport { empty, fastInnerText } from \"../../helpers/dom/element.mjs\";\nimport { stringify } from \"../../helpers/mixed.mjs\";\nexport var RENDERER_TYPE = 'text';\n/**\n * Default text renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\n\nexport function textRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  baseRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  var escaped = value;\n\n  if (!escaped && cellProperties.placeholder) {\n    escaped = cellProperties.placeholder;\n  }\n\n  escaped = stringify(escaped);\n\n  if (instance.getSettings().trimWhitespace) {\n    escaped = escaped.trim();\n  }\n\n  if (cellProperties.rendererTemplate) {\n    empty(TD);\n    var TEMPLATE = instance.rootDocument.createElement('TEMPLATE');\n    TEMPLATE.setAttribute('bind', '{{}}');\n    TEMPLATE.innerHTML = cellProperties.rendererTemplate;\n    HTMLTemplateElement.decorate(TEMPLATE);\n    TEMPLATE.model = instance.getSourceDataAtRow(row);\n    TD.appendChild(TEMPLATE);\n  } else {\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n    fastInnerText(TD, escaped);\n  }\n}\ntextRenderer.RENDERER_TYPE = RENDERER_TYPE;"]},"metadata":{},"sourceType":"module"}