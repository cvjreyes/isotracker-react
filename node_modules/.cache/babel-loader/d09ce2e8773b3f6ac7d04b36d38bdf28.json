{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\dragAndDrop\\\\dragAndDrop.js\";\n//Drag and drop para subir isometricas\nimport React, { useEffect } from 'react';\nimport 'antd/dist/antd.css';\nimport { Upload, message, Button } from 'antd';\nimport { InboxOutlined } from '@ant-design/icons';\nimport Alert from '@material-ui/lab/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DragAndDrop extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileList: [],\n      uploading: false,\n      clear: false,\n      success: false,\n      error: false,\n      fileName: null\n    };\n\n    this.handleUpload = () => {\n      this.state.fileList.forEach(file => {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        if (file.name.endsWith(\".pdf\")) {\n          console.log(\"Si\");\n          this.uploadFile(formData);\n        }\n      });\n    };\n  }\n\n  uploadFile(file) {\n    fetch('http://localhost:5000/upload', {\n      // content-type header should not be specified!\n      method: 'POST',\n      body: file\n    }).then(response => {\n      // Do something with the successful response\n      if (response.status === 200) {\n        for (var value of file.values()) {\n          this.setState({\n            success: true,\n            fileName: value.name\n          });\n        }\n      } else {\n        for (var value of file.values()) {\n          alert(\"The file \" + value.name + \" already exists!\");\n        }\n      }\n\n      this.setState({\n        fileList: []\n      });\n    }).catch(error => message.error(error));\n  }\n\n  render() {\n    const fileList = this.state.fileList;\n    const {\n      Dragger\n    } = Upload;\n    const props = {\n      name: 'file',\n      multiple: true,\n      action: 'http://localhost:5000/upload',\n      onRemove: file => {\n        this.setState(state => {\n          const index = state.fileList.indexOf(file);\n          const newFileList = state.fileList.slice();\n          newFileList.splice(index, 1);\n          return {\n            fileList: newFileList\n          };\n        });\n      },\n      beforeUpload: file => {\n        this.setState(state => ({\n          fileList: [...state.fileList, file]\n        }));\n        return false;\n      },\n      accept: \".pdf,.zip\",\n      fileList\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleUpload,\n        class: \"btn btn-info btn-lg\",\n        style: {\n          backgroundColor: \"#17a2b8\",\n          width: \"100%\"\n        },\n        children: \"Upload files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: this.state.success,\n        children: /*#__PURE__*/_jsxDEV(Alert, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Dragger, { ...props,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ant-upload-drag-icon\",\n          children: /*#__PURE__*/_jsxDEV(InboxOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ant-upload-text\",\n          children: \"Click or drag the isometrics to this area to upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ant-upload-hint\",\n          children: \"You can drop single or multiple isometrics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }, this), \",\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default DragAndDrop;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/dragAndDrop/dragAndDrop.js"],"names":["React","useEffect","Upload","message","Button","InboxOutlined","Alert","DragAndDrop","Component","state","fileList","uploading","clear","success","error","fileName","handleUpload","forEach","file","formData","FormData","append","name","endsWith","console","log","uploadFile","fetch","method","body","then","response","status","value","values","setState","alert","catch","render","Dragger","props","multiple","action","onRemove","index","indexOf","newFileList","slice","splice","beforeUpload","accept","backgroundColor","width"],"mappings":"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","sourcesContent":["//Drag and drop para subir isometricas\r\n\r\nimport React, { useEffect } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Upload, message , Button} from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\n\r\nclass DragAndDrop extends React.Component{\r\n\r\n  state = {\r\n    fileList: [],\r\n    uploading: false,\r\n    clear: false,\r\n    success: false,\r\n    error: false,\r\n    fileName: null\r\n  };\r\n\r\n  uploadFile(file) {\r\n    fetch('http://localhost:5000/upload', {\r\n      // content-type header should not be specified!\r\n      method: 'POST',\r\n      body: file,\r\n    })\r\n      .then(response => {\r\n        // Do something with the successful response\r\n        if (response.status === 200){\r\n          for (var value of file.values()) {\r\n            this.setState({\r\n              success : true,\r\n              fileName : value.name\r\n            })\r\n         }\r\n        }else{\r\n          for (var value of file.values()) {\r\n            alert(\"The file \" + value.name + \" already exists!\");\r\n         }\r\n        }\r\n        this.setState({\r\n          fileList: []\r\n        });\r\n      })\r\n      .catch(error => message.error(error)\r\n    );\r\n  }\r\n\r\n\r\n  handleUpload = () =>{\r\n    \r\n    this.state.fileList.forEach(file => {\r\n      \r\n      const formData  = new FormData();\r\n      formData.append('file', file);\r\n\r\n      if (file.name.endsWith(\".pdf\")){\r\n        console.log(\"Si\")\r\n        this.uploadFile(formData);\r\n      }\r\n    });    \r\n  }\r\n\r\nrender (){\r\n  \r\n  const fileList = this.state.fileList;\r\n  const { Dragger } = Upload;\r\n\r\n  const props = {\r\n    name: 'file',\r\n    multiple: true,\r\n    action: 'http://localhost:5000/upload',\r\n    onRemove: file => {\r\n      this.setState(state => {\r\n        const index = state.fileList.indexOf(file);\r\n        const newFileList = state.fileList.slice();\r\n        newFileList.splice(index, 1);\r\n        return {\r\n          fileList: newFileList,\r\n        };\r\n      });\r\n    },\r\n    beforeUpload: file => {\r\n      this.setState(state => ({\r\n        fileList: [...state.fileList, file],\r\n      }));\r\n\r\n      return false;\r\n      },\r\n    accept: \".pdf,.zip\",\r\n      fileList\r\n    };\r\n\r\n      return(\r\n          <div>\r\n            <button onClick={this.handleUpload} class=\"btn btn-info btn-lg\" style={{backgroundColor: \"#17a2b8\", width:\"100%\"}}>Upload files</button>\r\n            <Collapse in={this.state.success}>\r\n              <Alert\r\n              >\r\n                \r\n              </Alert>\r\n            </Collapse>\r\n              <Dragger {...props}>\r\n                \r\n                  <p className=\"ant-upload-drag-icon\">\r\n                    <InboxOutlined />\r\n                  </p>\r\n                  <p className=\"ant-upload-text\">Click or drag the isometrics to this area to upload</p>\r\n                  <p className=\"ant-upload-hint\">\r\n                    You can drop single or multiple isometrics\r\n                  </p>\r\n              </Dragger>,\r\n          </div>\r\n      );\r\n      }\r\n}\r\n\r\nexport default DragAndDrop;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}