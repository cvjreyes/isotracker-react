{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * Holder for current and next size (count of rendered and to render DOM elements) and offset.\n *\n * @class {ViewSize}\n */\n\n\nvar ViewSize = /*#__PURE__*/function () {\n  function ViewSize() {\n    _classCallCheck(this, ViewSize);\n    /**\n     * Current size of the rendered DOM elements.\n     *\n     * @type {number}\n     */\n\n\n    this.currentSize = 0;\n    /**\n     * Next size of the rendered DOM elements which should be fulfilled.\n     *\n     * @type {number}\n     */\n\n    this.nextSize = 0;\n    /**\n     * Current offset.\n     *\n     * @type {number}\n     */\n\n    this.currentOffset = 0;\n    /**\n     * Next ofset.\n     *\n     * @type {number}\n     */\n\n    this.nextOffset = 0;\n  }\n  /**\n   * Sets new size of the rendered DOM elements.\n   *\n   * @param {number} size The size.\n   */\n\n\n  _createClass(ViewSize, [{\n    key: \"setSize\",\n    value: function setSize(size) {\n      this.currentSize = this.nextSize;\n      this.nextSize = size;\n    }\n    /**\n     * Sets new offset.\n     *\n     * @param {number} offset The offset.\n     */\n\n  }, {\n    key: \"setOffset\",\n    value: function setOffset(offset) {\n      this.currentOffset = this.nextOffset;\n      this.nextOffset = offset;\n    }\n  }]);\n\n  return ViewSize;\n}();\n\nexport { ViewSize as default };","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/3rdparty/walkontable/src/utils/orderView/viewSize.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","ViewSize","currentSize","nextSize","currentOffset","nextOffset","value","setSize","size","setOffset","offset","default"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,MAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,KAAnC,EAA0C;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAE,QAAIE,UAAU,GAAGH,KAAK,CAACC,CAAD,CAAtB;AAA2BE,IAAAA,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;AAAwDD,IAAAA,UAAU,CAACE,YAAX,GAA0B,IAA1B;AAAgC,QAAI,WAAWF,UAAf,EAA2BA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AAA4BC,IAAAA,MAAM,CAACC,cAAP,CAAsBT,MAAtB,EAA8BI,UAAU,CAACM,GAAzC,EAA8CN,UAA9C;AAA4D;AAAE;;AAE7T,SAASO,YAAT,CAAsBd,WAAtB,EAAmCe,UAAnC,EAA+CC,WAA/C,EAA4D;AAAE,MAAID,UAAJ,EAAgBb,iBAAiB,CAACF,WAAW,CAACiB,SAAb,EAAwBF,UAAxB,CAAjB;AAAsD,MAAIC,WAAJ,EAAiBd,iBAAiB,CAACF,WAAD,EAAcgB,WAAd,CAAjB;AAA6C,SAAOhB,WAAP;AAAqB;AAEvN;AACA;AACA;AACA;AACA;;;AACA,IAAIkB,QAAQ,GAAG,aAAa,YAAY;AACtC,WAASA,QAAT,GAAoB;AAClBpB,IAAAA,eAAe,CAAC,IAAD,EAAOoB,QAAP,CAAf;AAEA;AACJ;AACA;AACA;AACA;;;AACI,SAAKC,WAAL,GAAmB,CAAnB;AACA;AACJ;AACA;AACA;AACA;;AAEI,SAAKC,QAAL,GAAgB,CAAhB;AACA;AACJ;AACA;AACA;AACA;;AAEI,SAAKC,aAAL,GAAqB,CAArB;AACA;AACJ;AACA;AACA;AACA;;AAEI,SAAKC,UAAL,GAAkB,CAAlB;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGER,EAAAA,YAAY,CAACI,QAAD,EAAW,CAAC;AACtBL,IAAAA,GAAG,EAAE,SADiB;AAEtBU,IAAAA,KAAK,EAAE,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AAC5B,WAAKN,WAAL,GAAmB,KAAKC,QAAxB;AACA,WAAKA,QAAL,GAAgBK,IAAhB;AACD;AACD;AACJ;AACA;AACA;AACA;;AAV0B,GAAD,EAYpB;AACDZ,IAAAA,GAAG,EAAE,WADJ;AAEDU,IAAAA,KAAK,EAAE,SAASG,SAAT,CAAmBC,MAAnB,EAA2B;AAChC,WAAKN,aAAL,GAAqB,KAAKC,UAA1B;AACA,WAAKA,UAAL,GAAkBK,MAAlB;AACD;AALA,GAZoB,CAAX,CAAZ;;AAoBA,SAAOT,QAAP;AACD,CA5D2B,EAA5B;;AA8DA,SAASA,QAAQ,IAAIU,OAArB","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Holder for current and next size (count of rendered and to render DOM elements) and offset.\n *\n * @class {ViewSize}\n */\nvar ViewSize = /*#__PURE__*/function () {\n  function ViewSize() {\n    _classCallCheck(this, ViewSize);\n\n    /**\n     * Current size of the rendered DOM elements.\n     *\n     * @type {number}\n     */\n    this.currentSize = 0;\n    /**\n     * Next size of the rendered DOM elements which should be fulfilled.\n     *\n     * @type {number}\n     */\n\n    this.nextSize = 0;\n    /**\n     * Current offset.\n     *\n     * @type {number}\n     */\n\n    this.currentOffset = 0;\n    /**\n     * Next ofset.\n     *\n     * @type {number}\n     */\n\n    this.nextOffset = 0;\n  }\n  /**\n   * Sets new size of the rendered DOM elements.\n   *\n   * @param {number} size The size.\n   */\n\n\n  _createClass(ViewSize, [{\n    key: \"setSize\",\n    value: function setSize(size) {\n      this.currentSize = this.nextSize;\n      this.nextSize = size;\n    }\n    /**\n     * Sets new offset.\n     *\n     * @param {number} offset The offset.\n     */\n\n  }, {\n    key: \"setOffset\",\n    value: function setOffset(offset) {\n      this.currentOffset = this.nextOffset;\n      this.nextOffset = offset;\n    }\n  }]);\n\n  return ViewSize;\n}();\n\nexport { ViewSize as default };"]},"metadata":{},"sourceType":"module"}