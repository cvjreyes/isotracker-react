{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar _excluded = [\"column\"],\n    _excluded2 = [\"column\"];\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nimport { addClass, removeClass } from \"../../helpers/dom/element.mjs\";\nimport { isUndefined, isDefined } from \"../../helpers/mixed.mjs\";\nimport { isObject } from \"../../helpers/object.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nimport { arrayMap } from \"../../helpers/array.mjs\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { IndexesSequence, PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { isPressedCtrlKey } from \"../../utils/keyStateObserver.mjs\";\nimport { ColumnStatesManager } from \"./columnStatesManager.mjs\";\nimport { getNextSortOrder, areValidSortStates, getHeaderSpanElement, isFirstLevelColumnHeader, wasHeaderClickedProperly } from \"./utils.mjs\";\nimport { getClassesToRemove, getClassesToAdd } from \"./domHelpers.mjs\";\nimport { rootComparator } from \"./rootComparator.mjs\";\nimport { registerRootComparator, sort } from \"./sortService/index.mjs\";\nexport var PLUGIN_KEY = 'columnSorting';\nexport var PLUGIN_PRIORITY = 50;\nvar APPEND_COLUMN_CONFIG_STRATEGY = 'append';\nvar REPLACE_COLUMN_CONFIG_STRATEGY = 'replace';\nregisterRootComparator(PLUGIN_KEY, rootComparator);\nHooks.getSingleton().register('beforeColumnSort');\nHooks.getSingleton().register('afterColumnSort'); // DIFF - MultiColumnSorting & ColumnSorting: changed configuration documentation.\n\n/**\n * @plugin ColumnSorting\n *\n * @description\n * This plugin sorts the view by columns (but does not sort the data source!). To enable the plugin, set the\n * {@link Options#columnSorting} property to the correct value (see the examples below).\n *\n * @example\n * ```js\n * // as boolean\n * columnSorting: true\n *\n * // as an object with initial sort config (sort ascending for column at index 1)\n * columnSorting: {\n *   initialConfig: {\n *     column: 1,\n *     sortOrder: 'asc'\n *   }\n * }\n *\n * // as an object which define specific sorting options for all columns\n * columnSorting: {\n *   sortEmptyCells: true, // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table (by default)\n *   indicator: true, // true = shows indicator for all columns (by default), false = don't show indicator for columns\n *   headerAction: true, // true = allow to click on the headers to sort (by default), false = turn off possibility to click on the headers to sort\n *   compareFunctionFactory: function(sortOrder, columnMeta) {\n *     return function(value, nextValue) {\n *       // Some value comparisons which will return -1, 0 or 1...\n *     }\n *   }\n * }\n *\n * // as an object passed to the `column` property, allows specifying a custom options for the desired column.\n * // please take a look at documentation of `column` property: https://handsontable.com/docs/Options.html#columns\n * columns: [{\n *   columnSorting: {\n *     indicator: false, // disable indicator for the first column,\n *     sortEmptyCells: true,\n *     headerAction: false, // clicks on the first column won't sort\n *     compareFunctionFactory: function(sortOrder, columnMeta) {\n *       return function(value, nextValue) {\n *         return 0; // Custom compare function for the first column (don't sort)\n *       }\n *     }\n *   }\n * }]```\n */\n\nexport var ColumnSorting = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(ColumnSorting, _BasePlugin);\n\n  var _super = _createSuper(ColumnSorting);\n\n  function ColumnSorting(hotInstance) {\n    var _this;\n\n    _classCallCheck(this, ColumnSorting);\n\n    _this = _super.call(this, hotInstance);\n    /**\n     * Instance of column state manager.\n     *\n     * @private\n     * @type {null|ColumnStatesManager}\n     */\n\n    _this.columnStatesManager = null;\n    /**\n     * Cached column properties from plugin like i.e. `indicator`, `headerAction`.\n     *\n     * @private\n     * @type {null|PhysicalIndexToValueMap}\n     */\n\n    _this.columnMetaCache = null;\n    /**\n     * Main settings key designed for the plugin.\n     *\n     * @private\n     * @type {string}\n     */\n\n    _this.pluginKey = PLUGIN_KEY;\n    /**\n     * Plugin indexes cache.\n     *\n     * @private\n     * @type {null|IndexesSequence}\n     */\n\n    _this.indexesSequenceCache = null;\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link ColumnSorting#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n\n\n  _createClass(ColumnSorting, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings()[this.pluginKey];\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      this.columnStatesManager = new ColumnStatesManager(this.hot, \"\".concat(this.pluginKey, \".sortingStates\"));\n      this.columnMetaCache = new IndexToValueMap(function (physicalIndex) {\n        var visualIndex = _this2.hot.toVisualColumn(physicalIndex);\n\n        if (visualIndex === null) {\n          visualIndex = physicalIndex;\n        }\n\n        return _this2.getMergedPluginSettings(visualIndex);\n      });\n      this.hot.columnIndexMapper.registerMap(\"\".concat(this.pluginKey, \".columnMeta\"), this.columnMetaCache);\n      this.addHook('afterGetColHeader', function (column, TH) {\n        return _this2.onAfterGetColHeader(column, TH);\n      });\n      this.addHook('beforeOnCellMouseDown', function (event, coords, TD, controller) {\n        return _this2.onBeforeOnCellMouseDown(event, coords, TD, controller);\n      });\n      this.addHook('afterOnCellMouseDown', function (event, target) {\n        return _this2.onAfterOnCellMouseDown(event, target);\n      });\n      this.addHook('afterInit', function () {\n        return _this2.loadOrSortBySettings();\n      });\n      this.addHook('afterLoadData', function (sourceData, initialLoad) {\n        return _this2.onAfterLoadData(initialLoad);\n      }); // TODO: Workaround? It should be refactored / described.\n\n      if (this.hot.view) {\n        this.loadOrSortBySettings();\n      }\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      var _this3 = this;\n\n      var clearColHeader = function clearColHeader(column, TH) {\n        var headerSpanElement = getHeaderSpanElement(TH);\n\n        if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n          return;\n        }\n\n        _this3.updateHeaderClasses(headerSpanElement);\n      }; // Changing header width and removing indicator.\n\n\n      this.hot.addHook('afterGetColHeader', clearColHeader);\n      this.hot.addHookOnce('afterRender', function () {\n        _this3.hot.removeHook('afterGetColHeader', clearColHeader);\n      });\n      this.hot.batchExecution(function () {\n        if (_this3.indexesSequenceCache !== null) {\n          _this3.hot.rowIndexMapper.setIndexesSequence(_this3.indexesSequenceCache.getValues());\n\n          _this3.hot.rowIndexMapper.unregisterMap(_this3.pluginKey);\n        }\n      }, true);\n      this.hot.columnIndexMapper.unregisterMap(\"\".concat(this.pluginKey, \".columnMeta\"));\n      this.columnStatesManager.destroy();\n      this.columnMetaCache = null;\n      this.columnStatesManager = null;\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"disablePlugin\", this).call(this);\n    } // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.\n\n    /**\n     * Sorts the table by chosen columns and orders.\n     *\n     * @param {undefined|object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.\n     * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).\n     *\n     * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.\n     *\n     * @example\n     * ```js\n     * // sort ascending first visual column\n     * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n     * ```\n     *\n     * @fires Hooks#beforeColumnSort\n     * @fires Hooks#afterColumnSort\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(sortConfig) {\n      var currentSortConfig = this.getSortConfig(); // We always pass configs defined as an array to `beforeColumnSort` and `afterColumnSort` hooks.\n\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n      var sortPossible = this.areValidSortConfigs(destinationSortConfigs);\n      var allowSort = this.hot.runHooks('beforeColumnSort', currentSortConfig, destinationSortConfigs, sortPossible);\n\n      if (allowSort === false) {\n        return;\n      }\n\n      if (currentSortConfig.length === 0 && this.indexesSequenceCache === null) {\n        this.indexesSequenceCache = this.hot.rowIndexMapper.registerMap(this.pluginKey, new IndexesSequence());\n        this.indexesSequenceCache.setValues(this.hot.rowIndexMapper.getIndexesSequence());\n      }\n\n      if (sortPossible) {\n        this.columnStatesManager.setSortStates(destinationSortConfigs);\n        this.sortByPresetSortStates(destinationSortConfigs);\n        this.saveAllSortSettings(destinationSortConfigs);\n      }\n\n      this.hot.runHooks('afterColumnSort', currentSortConfig, sortPossible ? destinationSortConfigs : currentSortConfig, sortPossible);\n\n      if (sortPossible) {\n        this.hot.render(); // TODO: Workaround? This triggers fast redraw. One test won't pass after removal.\n        // It should be refactored / described.\n\n        this.hot.forceFullRender = false;\n        this.hot.view.render();\n      }\n    }\n    /**\n     * Clear the sort performed on the table.\n     */\n\n  }, {\n    key: \"clearSort\",\n    value: function clearSort() {\n      this.sort([]);\n    }\n    /**\n     * Checks if the table is sorted (any column have to be sorted).\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isSorted\",\n    value: function isSorted() {\n      return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();\n    }\n    /**\n     * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.\n     *\n     * @param {number} [column] Visual column index.\n     * @returns {undefined|object|Array}\n     */\n\n  }, {\n    key: \"getSortConfig\",\n    value: function getSortConfig(column) {\n      if (isDefined(column)) {\n        return this.columnStatesManager.getColumnSortState(column);\n      }\n\n      return this.columnStatesManager.getSortStates();\n    }\n    /**\n     * @description\n     * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.\n     * Note: Please keep in mind that this method doesn't re-render the table.\n     *\n     * @example\n     * ```js\n     * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {\n     *   const columnSortPlugin = this.getPlugin('columnSorting');\n     *\n     *   columnSortPlugin.setSortConfig(destinationSortConfigs);\n     *\n     *   // const newData = ... // Calculated data set, ie. from an AJAX call.\n     *\n     *   this.loadData(newData); // Load new data set and re-render the table.\n     *\n     *   return false; // The blockade for the default sort action.\n     * }```\n     *\n     * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     */\n\n  }, {\n    key: \"setSortConfig\",\n    value: function setSortConfig(sortConfig) {\n      // We always set configs defined as an array.\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n\n      if (this.areValidSortConfigs(destinationSortConfigs)) {\n        this.columnStatesManager.setSortStates(destinationSortConfigs);\n      }\n    }\n    /**\n     * Get normalized sort configs.\n     *\n     * @private\n     * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getNormalizedSortConfigs\",\n    value: function getNormalizedSortConfigs() {\n      var sortConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (Array.isArray(sortConfig)) {\n        return sortConfig.slice(0, 1);\n      }\n\n      return [sortConfig];\n    }\n    /**\n     * Get if sort configs are valid.\n     *\n     * @private\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"areValidSortConfigs\",\n    value: function areValidSortConfigs(sortConfigs) {\n      var numberOfColumns = this.hot.countCols(); // We don't translate visual indexes to physical indexes.\n\n      return areValidSortStates(sortConfigs) && sortConfigs.every(function (_ref) {\n        var column = _ref.column;\n        return column <= numberOfColumns && column >= 0;\n      });\n    }\n    /**\n     * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.\n     *\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     *\n     * @private\n     * @fires Hooks#persistentStateSave\n     */\n\n  }, {\n    key: \"saveAllSortSettings\",\n    value: function saveAllSortSettings(sortConfigs) {\n      var _this4 = this;\n\n      var allSortSettings = this.columnStatesManager.getAllColumnsProperties();\n\n      var translateColumnToPhysical = function translateColumnToPhysical(_ref2) {\n        var visualColumn = _ref2.column,\n            restOfProperties = _objectWithoutProperties(_ref2, _excluded);\n\n        return _objectSpread({\n          column: _this4.hot.toPhysicalColumn(visualColumn)\n        }, restOfProperties);\n      };\n\n      allSortSettings.initialConfig = arrayMap(sortConfigs, translateColumnToPhysical);\n      this.hot.runHooks('persistentStateSave', 'columnSorting', allSortSettings);\n    }\n    /**\n     * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.\n     *\n     * @private\n     * @returns {object} Previously saved sort settings.\n     *\n     * @fires Hooks#persistentStateLoad\n     */\n\n  }, {\n    key: \"getAllSavedSortSettings\",\n    value: function getAllSavedSortSettings() {\n      var _this5 = this;\n\n      var storedAllSortSettings = {};\n      this.hot.runHooks('persistentStateLoad', 'columnSorting', storedAllSortSettings);\n      var allSortSettings = storedAllSortSettings.value;\n\n      var translateColumnToVisual = function translateColumnToVisual(_ref3) {\n        var physicalColumn = _ref3.column,\n            restOfProperties = _objectWithoutProperties(_ref3, _excluded2);\n\n        return _objectSpread({\n          column: _this5.hot.toVisualColumn(physicalColumn)\n        }, restOfProperties);\n      };\n\n      if (isDefined(allSortSettings) && Array.isArray(allSortSettings.initialConfig)) {\n        allSortSettings.initialConfig = arrayMap(allSortSettings.initialConfig, translateColumnToVisual);\n      }\n\n      return allSortSettings;\n    }\n    /**\n     * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @returns {undefined|object}\n     */\n\n  }, {\n    key: \"getColumnNextConfig\",\n    value: function getColumnNextConfig(column) {\n      var sortOrder = this.columnStatesManager.getSortOrderOfColumn(column);\n\n      if (isDefined(sortOrder)) {\n        var nextSortOrder = getNextSortOrder(sortOrder);\n\n        if (isDefined(nextSortOrder)) {\n          return {\n            column: column,\n            sortOrder: nextSortOrder\n          };\n        }\n\n        return;\n      }\n\n      var nrOfColumns = this.hot.countCols();\n\n      if (Number.isInteger(column) && column >= 0 && column < nrOfColumns) {\n        return {\n          column: column,\n          sortOrder: getNextSortOrder()\n        };\n      }\n    }\n    /**\n     * Get sort configuration with \"next order\" for particular column.\n     *\n     * @private\n     * @param {number} columnToChange Visual column index of column which order will be changed.\n     * @param {string} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one\n     * change order of particular column and change it's position in the sort queue to the last one. The second one\n     * just change order of particular column.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getNextSortConfig\",\n    value: function getNextSortConfig(columnToChange) {\n      var strategyId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : APPEND_COLUMN_CONFIG_STRATEGY;\n      var indexOfColumnToChange = this.columnStatesManager.getIndexOfColumnInSortQueue(columnToChange);\n      var isColumnSorted = indexOfColumnToChange !== -1;\n      var currentSortConfig = this.getSortConfig();\n      var nextColumnConfig = this.getColumnNextConfig(columnToChange);\n\n      if (isColumnSorted) {\n        if (isUndefined(nextColumnConfig)) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n\n        if (strategyId === APPEND_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)), [nextColumnConfig]);\n        } else if (strategyId === REPLACE_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), [nextColumnConfig], _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n      }\n\n      if (isDefined(nextColumnConfig)) {\n        return currentSortConfig.concat(nextColumnConfig);\n      }\n\n      return currentSortConfig;\n    }\n    /**\n     * Get plugin's column config for the specified column index.\n     *\n     * @private\n     * @param {object} columnConfig Configuration inside `columns` property for the specified column index.\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getPluginColumnConfig\",\n    value: function getPluginColumnConfig(columnConfig) {\n      if (isObject(columnConfig)) {\n        var pluginColumnConfig = columnConfig[this.pluginKey];\n\n        if (isObject(pluginColumnConfig)) {\n          return pluginColumnConfig;\n        }\n      }\n\n      return {};\n    }\n    /**\n     * Get plugin settings related properties, properly merged from cascade settings.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getMergedPluginSettings\",\n    value: function getMergedPluginSettings(column) {\n      var pluginMainSettings = this.hot.getSettings()[this.pluginKey];\n      var storedColumnProperties = this.columnStatesManager.getAllColumnsProperties();\n      var cellMeta = this.hot.getCellMeta(0, column);\n      var columnMeta = Object.getPrototypeOf(cellMeta);\n\n      if (Array.isArray(columnMeta.columns)) {\n        return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns[column]));\n      } else if (isFunction(columnMeta.columns)) {\n        return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns(column)));\n      }\n\n      return Object.assign(storedColumnProperties, pluginMainSettings);\n    }\n    /**\n     * Get copy of settings for first cell in the column.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @returns {object}\n     */\n    // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from column meta we call this function.\n    // TODO: Remove test named: \"should not break the dataset when inserted new row\" (#5431).\n\n  }, {\n    key: \"getFirstCellSettings\",\n    value: function getFirstCellSettings(column) {\n      var cellMeta = this.hot.getCellMeta(0, column);\n      var cellMetaCopy = Object.create(cellMeta);\n      cellMetaCopy[this.pluginKey] = this.columnMetaCache.getValueAtIndex(this.hot.toPhysicalColumn(column));\n      return cellMetaCopy;\n    }\n    /**\n     * Get number of rows which should be sorted.\n     *\n     * @private\n     * @param {number} numberOfRows Total number of displayed rows.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getNumberOfRowsToSort\",\n    value: function getNumberOfRowsToSort(numberOfRows) {\n      var settings = this.hot.getSettings(); // `maxRows` option doesn't take into account `minSpareRows` option in this case.\n\n      if (settings.maxRows <= numberOfRows) {\n        return settings.maxRows;\n      }\n\n      return numberOfRows - settings.minSpareRows;\n    }\n    /**\n     * Performs the sorting using a stable sort function basing on internal state of sorting.\n     *\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     * @private\n     */\n\n  }, {\n    key: \"sortByPresetSortStates\",\n    value: function sortByPresetSortStates(sortConfigs) {\n      var _this6 = this;\n\n      if (sortConfigs.length === 0) {\n        this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());\n        return;\n      }\n\n      var indexesWithData = [];\n      var numberOfRows = this.hot.countRows();\n\n      var getDataForSortedColumns = function getDataForSortedColumns(visualRowIndex) {\n        return arrayMap(sortConfigs, function (sortConfig) {\n          return _this6.hot.getDataAtCell(visualRowIndex, sortConfig.column);\n        });\n      };\n\n      for (var visualRowIndex = 0; visualRowIndex < this.getNumberOfRowsToSort(numberOfRows); visualRowIndex += 1) {\n        indexesWithData.push([this.hot.toPhysicalRow(visualRowIndex)].concat(getDataForSortedColumns(visualRowIndex)));\n      }\n\n      var indexesBefore = arrayMap(indexesWithData, function (indexWithData) {\n        return indexWithData[0];\n      });\n      sort(indexesWithData, this.pluginKey, arrayMap(sortConfigs, function (sortConfig) {\n        return sortConfig.sortOrder;\n      }), arrayMap(sortConfigs, function (sortConfig) {\n        return _this6.getFirstCellSettings(sortConfig.column);\n      })); // Append spareRows\n\n      for (var _visualRowIndex = indexesWithData.length; _visualRowIndex < numberOfRows; _visualRowIndex += 1) {\n        indexesWithData.push([_visualRowIndex].concat(getDataForSortedColumns(_visualRowIndex)));\n      }\n\n      var indexesAfter = arrayMap(indexesWithData, function (indexWithData) {\n        return indexWithData[0];\n      });\n      var indexMapping = new Map(arrayMap(indexesBefore, function (indexBefore, indexInsideArray) {\n        return [indexBefore, indexesAfter[indexInsideArray]];\n      }));\n      var newIndexesSequence = arrayMap(this.hot.rowIndexMapper.getIndexesSequence(), function (physicalIndex) {\n        if (indexMapping.has(physicalIndex)) {\n          return indexMapping.get(physicalIndex);\n        }\n\n        return physicalIndex;\n      });\n      this.hot.rowIndexMapper.setIndexesSequence(newIndexesSequence);\n    }\n    /**\n     * Load saved settings or sort by predefined plugin configuration.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"loadOrSortBySettings\",\n    value: function loadOrSortBySettings() {\n      var storedAllSortSettings = this.getAllSavedSortSettings();\n\n      if (isObject(storedAllSortSettings)) {\n        this.sortBySettings(storedAllSortSettings);\n      } else {\n        var allSortSettings = this.hot.getSettings()[this.pluginKey];\n        this.sortBySettings(allSortSettings);\n      }\n    }\n    /**\n     * Sort the table by provided configuration.\n     *\n     * @private\n     * @param {object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,\n     * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.\n     */\n\n  }, {\n    key: \"sortBySettings\",\n    value: function sortBySettings(allSortSettings) {\n      if (isObject(allSortSettings)) {\n        this.columnStatesManager.updateAllColumnsProperties(allSortSettings);\n        var initialConfig = allSortSettings.initialConfig;\n\n        if (Array.isArray(initialConfig) || isObject(initialConfig)) {\n          this.sort(initialConfig);\n        }\n      } else {\n        // Extra render for headers. Their width may change.\n        this.hot.render();\n      }\n    }\n    /**\n     * Callback for the `onAfterGetColHeader` hook. Adds column sorting CSS classes.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @param {Element} TH TH HTML element.\n     */\n\n  }, {\n    key: \"onAfterGetColHeader\",\n    value: function onAfterGetColHeader(column, TH) {\n      var headerSpanElement = getHeaderSpanElement(TH);\n\n      if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n        return;\n      }\n\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var showSortIndicator = pluginSettingsForColumn.indicator;\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      this.updateHeaderClasses(headerSpanElement, this.columnStatesManager, column, showSortIndicator, headerActionEnabled);\n    }\n    /**\n     * Update header classes.\n     *\n     * @private\n     * @param {HTMLElement} headerSpanElement Header span element.\n     * @param {...*} args Extra arguments for helpers.\n     */\n\n  }, {\n    key: \"updateHeaderClasses\",\n    value: function updateHeaderClasses(headerSpanElement) {\n      removeClass(headerSpanElement, getClassesToRemove(headerSpanElement));\n\n      if (this.enabled !== false) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        addClass(headerSpanElement, getClassesToAdd.apply(void 0, args));\n      }\n    }\n    /**\n     * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called\n     * for `updateSettings` in specific situations.\n     *\n     * @private\n     * @param {object} newSettings New settings object.\n     */\n\n  }, {\n    key: \"onUpdateSettings\",\n    value: function onUpdateSettings(newSettings) {\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"onUpdateSettings\", this).call(this);\n\n      if (this.columnMetaCache !== null) {\n        // Column meta cache base on settings, thus we should re-init the map.\n        this.columnMetaCache.init(this.hot.columnIndexMapper.getNumberOfIndexes());\n      }\n\n      if (isDefined(newSettings[this.pluginKey])) {\n        this.sortBySettings(newSettings[this.pluginKey]);\n      }\n    }\n    /**\n     * Callback for the `afterLoadData` hook.\n     *\n     * @private\n     * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.\n     */\n\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData(initialLoad) {\n      if (initialLoad === true) {\n        // TODO: Workaround? It should be refactored / described.\n        if (this.hot.view) {\n          this.loadOrSortBySettings();\n        }\n      }\n    }\n    /**\n     * Indicates if clickable header was clicked.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {number} column Visual column index.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"wasClickableHeaderClicked\",\n    value: function wasClickableHeaderClicked(event, column) {\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      return headerActionEnabled && event.target.nodeName === 'SPAN';\n    }\n    /**\n     * Changes the behavior of selection / dragging.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {CellCoords} coords Visual coordinates.\n     * @param {HTMLElement} TD The cell element.\n     * @param {object} blockCalculations A literal object which holds boolean values which controls\n     *                                   how the selection while selecting neighboring cells.\n     */\n\n  }, {\n    key: \"onBeforeOnCellMouseDown\",\n    value: function onBeforeOnCellMouseDown(event, coords, TD, blockCalculations) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n\n      if (this.wasClickableHeaderClicked(event, coords.col) && isPressedCtrlKey()) {\n        blockCalculations.column = true;\n      }\n    }\n    /**\n     * Callback for the `onAfterOnCellMouseDown` hook.\n     *\n     * @private\n     * @param {Event} event Event which are provided by hook.\n     * @param {CellCoords} coords Visual coords of the selected cell.\n     */\n\n  }, {\n    key: \"onAfterOnCellMouseDown\",\n    value: function onAfterOnCellMouseDown(event, coords) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n\n      if (this.wasClickableHeaderClicked(event, coords.col)) {\n        if (isPressedCtrlKey()) {\n          this.hot.deselectCell();\n          this.hot.selectColumns(coords.col);\n        }\n\n        this.sort(this.getColumnNextConfig(coords.col));\n      }\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this$columnStatesMan; // TODO: Probably not supported yet by ESLint: https://github.com/eslint/eslint/issues/11045\n      // eslint-disable-next-line no-unused-expressions\n\n\n      (_this$columnStatesMan = this.columnStatesManager) === null || _this$columnStatesMan === void 0 ? void 0 : _this$columnStatesMan.destroy();\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"destroy\", this).call(this);\n    }\n  }], [{\n    key: \"PLUGIN_KEY\",\n    get: function get() {\n      return PLUGIN_KEY;\n    }\n  }, {\n    key: \"PLUGIN_PRIORITY\",\n    get: function get() {\n      return PLUGIN_PRIORITY;\n    }\n  }]);\n\n  return ColumnSorting;\n}(BasePlugin);","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/columnSorting/columnSorting.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_excluded","_excluded2","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","iter","isArray","len","length","i","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","configurable","writable","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","_get","property","receiver","Reflect","get","base","_superPropBase","desc","hasOwnProperty","_getPrototypeOf","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","construct","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","addClass","removeClass","isUndefined","isDefined","isObject","isFunction","arrayMap","BasePlugin","IndexesSequence","PhysicalIndexToValueMap","IndexToValueMap","Hooks","isPressedCtrlKey","ColumnStatesManager","getNextSortOrder","areValidSortStates","getHeaderSpanElement","isFirstLevelColumnHeader","wasHeaderClickedProperly","getClassesToRemove","getClassesToAdd","rootComparator","registerRootComparator","sort","PLUGIN_KEY","PLUGIN_PRIORITY","APPEND_COLUMN_CONFIG_STRATEGY","REPLACE_COLUMN_CONFIG_STRATEGY","getSingleton","register","ColumnSorting","_BasePlugin","_super","hotInstance","_this","columnStatesManager","columnMetaCache","pluginKey","indexesSequenceCache","isEnabled","hot","getSettings","enablePlugin","_this2","enabled","concat","physicalIndex","visualIndex","toVisualColumn","getMergedPluginSettings","columnIndexMapper","registerMap","addHook","column","TH","onAfterGetColHeader","event","coords","TD","controller","onBeforeOnCellMouseDown","onAfterOnCellMouseDown","loadOrSortBySettings","sourceData","initialLoad","onAfterLoadData","view","disablePlugin","_this3","clearColHeader","headerSpanElement","updateHeaderClasses","addHookOnce","removeHook","batchExecution","rowIndexMapper","setIndexesSequence","getValues","unregisterMap","destroy","sortConfig","currentSortConfig","getSortConfig","destinationSortConfigs","getNormalizedSortConfigs","sortPossible","areValidSortConfigs","allowSort","runHooks","setValues","getIndexesSequence","setSortStates","sortByPresetSortStates","saveAllSortSettings","render","forceFullRender","clearSort","isSorted","isListOfSortedColumnsEmpty","getColumnSortState","getSortStates","setSortConfig","undefined","sortConfigs","numberOfColumns","countCols","every","_ref","_this4","allSortSettings","getAllColumnsProperties","translateColumnToPhysical","_ref2","visualColumn","restOfProperties","toPhysicalColumn","initialConfig","getAllSavedSortSettings","_this5","storedAllSortSettings","translateColumnToVisual","_ref3","physicalColumn","getColumnNextConfig","sortOrder","getSortOrderOfColumn","nextSortOrder","nrOfColumns","Number","isInteger","getNextSortConfig","columnToChange","strategyId","indexOfColumnToChange","getIndexOfColumnInSortQueue","isColumnSorted","nextColumnConfig","getPluginColumnConfig","columnConfig","pluginColumnConfig","pluginMainSettings","storedColumnProperties","cellMeta","getCellMeta","columnMeta","columns","assign","getFirstCellSettings","cellMetaCopy","getValueAtIndex","getNumberOfRowsToSort","numberOfRows","settings","maxRows","minSpareRows","_this6","indexesWithData","countRows","getDataForSortedColumns","visualRowIndex","getDataAtCell","toPhysicalRow","indexesBefore","indexWithData","_visualRowIndex","indexesAfter","indexMapping","Map","indexBefore","indexInsideArray","newIndexesSequence","has","sortBySettings","updateAllColumnsProperties","pluginSettingsForColumn","showSortIndicator","indicator","headerActionEnabled","headerAction","_len","args","_key","onUpdateSettings","newSettings","init","getNumberOfIndexes","wasClickableHeaderClicked","nodeName","blockCalculations","row","col","deselectCell","selectColumns","_this$columnStatesMan"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport \"core-js/modules/es.object.set-prototype-of.js\";\nimport \"core-js/modules/es.reflect.construct.js\";\nimport \"core-js/modules/es.reflect.get.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.function.name.js\";\nvar _excluded = [\"column\"],\n    _excluded2 = [\"column\"];\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.number.is-integer.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { addClass, removeClass } from \"../../helpers/dom/element.mjs\";\nimport { isUndefined, isDefined } from \"../../helpers/mixed.mjs\";\nimport { isObject } from \"../../helpers/object.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nimport { arrayMap } from \"../../helpers/array.mjs\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { IndexesSequence, PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { isPressedCtrlKey } from \"../../utils/keyStateObserver.mjs\";\nimport { ColumnStatesManager } from \"./columnStatesManager.mjs\";\nimport { getNextSortOrder, areValidSortStates, getHeaderSpanElement, isFirstLevelColumnHeader, wasHeaderClickedProperly } from \"./utils.mjs\";\nimport { getClassesToRemove, getClassesToAdd } from \"./domHelpers.mjs\";\nimport { rootComparator } from \"./rootComparator.mjs\";\nimport { registerRootComparator, sort } from \"./sortService/index.mjs\";\nexport var PLUGIN_KEY = 'columnSorting';\nexport var PLUGIN_PRIORITY = 50;\nvar APPEND_COLUMN_CONFIG_STRATEGY = 'append';\nvar REPLACE_COLUMN_CONFIG_STRATEGY = 'replace';\nregisterRootComparator(PLUGIN_KEY, rootComparator);\nHooks.getSingleton().register('beforeColumnSort');\nHooks.getSingleton().register('afterColumnSort'); // DIFF - MultiColumnSorting & ColumnSorting: changed configuration documentation.\n\n/**\n * @plugin ColumnSorting\n *\n * @description\n * This plugin sorts the view by columns (but does not sort the data source!). To enable the plugin, set the\n * {@link Options#columnSorting} property to the correct value (see the examples below).\n *\n * @example\n * ```js\n * // as boolean\n * columnSorting: true\n *\n * // as an object with initial sort config (sort ascending for column at index 1)\n * columnSorting: {\n *   initialConfig: {\n *     column: 1,\n *     sortOrder: 'asc'\n *   }\n * }\n *\n * // as an object which define specific sorting options for all columns\n * columnSorting: {\n *   sortEmptyCells: true, // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table (by default)\n *   indicator: true, // true = shows indicator for all columns (by default), false = don't show indicator for columns\n *   headerAction: true, // true = allow to click on the headers to sort (by default), false = turn off possibility to click on the headers to sort\n *   compareFunctionFactory: function(sortOrder, columnMeta) {\n *     return function(value, nextValue) {\n *       // Some value comparisons which will return -1, 0 or 1...\n *     }\n *   }\n * }\n *\n * // as an object passed to the `column` property, allows specifying a custom options for the desired column.\n * // please take a look at documentation of `column` property: https://handsontable.com/docs/Options.html#columns\n * columns: [{\n *   columnSorting: {\n *     indicator: false, // disable indicator for the first column,\n *     sortEmptyCells: true,\n *     headerAction: false, // clicks on the first column won't sort\n *     compareFunctionFactory: function(sortOrder, columnMeta) {\n *       return function(value, nextValue) {\n *         return 0; // Custom compare function for the first column (don't sort)\n *       }\n *     }\n *   }\n * }]```\n */\n\nexport var ColumnSorting = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(ColumnSorting, _BasePlugin);\n\n  var _super = _createSuper(ColumnSorting);\n\n  function ColumnSorting(hotInstance) {\n    var _this;\n\n    _classCallCheck(this, ColumnSorting);\n\n    _this = _super.call(this, hotInstance);\n    /**\n     * Instance of column state manager.\n     *\n     * @private\n     * @type {null|ColumnStatesManager}\n     */\n\n    _this.columnStatesManager = null;\n    /**\n     * Cached column properties from plugin like i.e. `indicator`, `headerAction`.\n     *\n     * @private\n     * @type {null|PhysicalIndexToValueMap}\n     */\n\n    _this.columnMetaCache = null;\n    /**\n     * Main settings key designed for the plugin.\n     *\n     * @private\n     * @type {string}\n     */\n\n    _this.pluginKey = PLUGIN_KEY;\n    /**\n     * Plugin indexes cache.\n     *\n     * @private\n     * @type {null|IndexesSequence}\n     */\n\n    _this.indexesSequenceCache = null;\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link ColumnSorting#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n\n\n  _createClass(ColumnSorting, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings()[this.pluginKey];\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      this.columnStatesManager = new ColumnStatesManager(this.hot, \"\".concat(this.pluginKey, \".sortingStates\"));\n      this.columnMetaCache = new IndexToValueMap(function (physicalIndex) {\n        var visualIndex = _this2.hot.toVisualColumn(physicalIndex);\n\n        if (visualIndex === null) {\n          visualIndex = physicalIndex;\n        }\n\n        return _this2.getMergedPluginSettings(visualIndex);\n      });\n      this.hot.columnIndexMapper.registerMap(\"\".concat(this.pluginKey, \".columnMeta\"), this.columnMetaCache);\n      this.addHook('afterGetColHeader', function (column, TH) {\n        return _this2.onAfterGetColHeader(column, TH);\n      });\n      this.addHook('beforeOnCellMouseDown', function (event, coords, TD, controller) {\n        return _this2.onBeforeOnCellMouseDown(event, coords, TD, controller);\n      });\n      this.addHook('afterOnCellMouseDown', function (event, target) {\n        return _this2.onAfterOnCellMouseDown(event, target);\n      });\n      this.addHook('afterInit', function () {\n        return _this2.loadOrSortBySettings();\n      });\n      this.addHook('afterLoadData', function (sourceData, initialLoad) {\n        return _this2.onAfterLoadData(initialLoad);\n      }); // TODO: Workaround? It should be refactored / described.\n\n      if (this.hot.view) {\n        this.loadOrSortBySettings();\n      }\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      var _this3 = this;\n\n      var clearColHeader = function clearColHeader(column, TH) {\n        var headerSpanElement = getHeaderSpanElement(TH);\n\n        if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n          return;\n        }\n\n        _this3.updateHeaderClasses(headerSpanElement);\n      }; // Changing header width and removing indicator.\n\n\n      this.hot.addHook('afterGetColHeader', clearColHeader);\n      this.hot.addHookOnce('afterRender', function () {\n        _this3.hot.removeHook('afterGetColHeader', clearColHeader);\n      });\n      this.hot.batchExecution(function () {\n        if (_this3.indexesSequenceCache !== null) {\n          _this3.hot.rowIndexMapper.setIndexesSequence(_this3.indexesSequenceCache.getValues());\n\n          _this3.hot.rowIndexMapper.unregisterMap(_this3.pluginKey);\n        }\n      }, true);\n      this.hot.columnIndexMapper.unregisterMap(\"\".concat(this.pluginKey, \".columnMeta\"));\n      this.columnStatesManager.destroy();\n      this.columnMetaCache = null;\n      this.columnStatesManager = null;\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"disablePlugin\", this).call(this);\n    } // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.\n\n    /**\n     * Sorts the table by chosen columns and orders.\n     *\n     * @param {undefined|object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.\n     * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).\n     *\n     * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.\n     *\n     * @example\n     * ```js\n     * // sort ascending first visual column\n     * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n     * ```\n     *\n     * @fires Hooks#beforeColumnSort\n     * @fires Hooks#afterColumnSort\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(sortConfig) {\n      var currentSortConfig = this.getSortConfig(); // We always pass configs defined as an array to `beforeColumnSort` and `afterColumnSort` hooks.\n\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n      var sortPossible = this.areValidSortConfigs(destinationSortConfigs);\n      var allowSort = this.hot.runHooks('beforeColumnSort', currentSortConfig, destinationSortConfigs, sortPossible);\n\n      if (allowSort === false) {\n        return;\n      }\n\n      if (currentSortConfig.length === 0 && this.indexesSequenceCache === null) {\n        this.indexesSequenceCache = this.hot.rowIndexMapper.registerMap(this.pluginKey, new IndexesSequence());\n        this.indexesSequenceCache.setValues(this.hot.rowIndexMapper.getIndexesSequence());\n      }\n\n      if (sortPossible) {\n        this.columnStatesManager.setSortStates(destinationSortConfigs);\n        this.sortByPresetSortStates(destinationSortConfigs);\n        this.saveAllSortSettings(destinationSortConfigs);\n      }\n\n      this.hot.runHooks('afterColumnSort', currentSortConfig, sortPossible ? destinationSortConfigs : currentSortConfig, sortPossible);\n\n      if (sortPossible) {\n        this.hot.render(); // TODO: Workaround? This triggers fast redraw. One test won't pass after removal.\n        // It should be refactored / described.\n\n        this.hot.forceFullRender = false;\n        this.hot.view.render();\n      }\n    }\n    /**\n     * Clear the sort performed on the table.\n     */\n\n  }, {\n    key: \"clearSort\",\n    value: function clearSort() {\n      this.sort([]);\n    }\n    /**\n     * Checks if the table is sorted (any column have to be sorted).\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isSorted\",\n    value: function isSorted() {\n      return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();\n    }\n    /**\n     * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.\n     *\n     * @param {number} [column] Visual column index.\n     * @returns {undefined|object|Array}\n     */\n\n  }, {\n    key: \"getSortConfig\",\n    value: function getSortConfig(column) {\n      if (isDefined(column)) {\n        return this.columnStatesManager.getColumnSortState(column);\n      }\n\n      return this.columnStatesManager.getSortStates();\n    }\n    /**\n     * @description\n     * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.\n     * Note: Please keep in mind that this method doesn't re-render the table.\n     *\n     * @example\n     * ```js\n     * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {\n     *   const columnSortPlugin = this.getPlugin('columnSorting');\n     *\n     *   columnSortPlugin.setSortConfig(destinationSortConfigs);\n     *\n     *   // const newData = ... // Calculated data set, ie. from an AJAX call.\n     *\n     *   this.loadData(newData); // Load new data set and re-render the table.\n     *\n     *   return false; // The blockade for the default sort action.\n     * }```\n     *\n     * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     */\n\n  }, {\n    key: \"setSortConfig\",\n    value: function setSortConfig(sortConfig) {\n      // We always set configs defined as an array.\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n\n      if (this.areValidSortConfigs(destinationSortConfigs)) {\n        this.columnStatesManager.setSortStates(destinationSortConfigs);\n      }\n    }\n    /**\n     * Get normalized sort configs.\n     *\n     * @private\n     * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getNormalizedSortConfigs\",\n    value: function getNormalizedSortConfigs() {\n      var sortConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (Array.isArray(sortConfig)) {\n        return sortConfig.slice(0, 1);\n      }\n\n      return [sortConfig];\n    }\n    /**\n     * Get if sort configs are valid.\n     *\n     * @private\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"areValidSortConfigs\",\n    value: function areValidSortConfigs(sortConfigs) {\n      var numberOfColumns = this.hot.countCols(); // We don't translate visual indexes to physical indexes.\n\n      return areValidSortStates(sortConfigs) && sortConfigs.every(function (_ref) {\n        var column = _ref.column;\n        return column <= numberOfColumns && column >= 0;\n      });\n    }\n    /**\n     * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.\n     *\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     *\n     * @private\n     * @fires Hooks#persistentStateSave\n     */\n\n  }, {\n    key: \"saveAllSortSettings\",\n    value: function saveAllSortSettings(sortConfigs) {\n      var _this4 = this;\n\n      var allSortSettings = this.columnStatesManager.getAllColumnsProperties();\n\n      var translateColumnToPhysical = function translateColumnToPhysical(_ref2) {\n        var visualColumn = _ref2.column,\n            restOfProperties = _objectWithoutProperties(_ref2, _excluded);\n\n        return _objectSpread({\n          column: _this4.hot.toPhysicalColumn(visualColumn)\n        }, restOfProperties);\n      };\n\n      allSortSettings.initialConfig = arrayMap(sortConfigs, translateColumnToPhysical);\n      this.hot.runHooks('persistentStateSave', 'columnSorting', allSortSettings);\n    }\n    /**\n     * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.\n     *\n     * @private\n     * @returns {object} Previously saved sort settings.\n     *\n     * @fires Hooks#persistentStateLoad\n     */\n\n  }, {\n    key: \"getAllSavedSortSettings\",\n    value: function getAllSavedSortSettings() {\n      var _this5 = this;\n\n      var storedAllSortSettings = {};\n      this.hot.runHooks('persistentStateLoad', 'columnSorting', storedAllSortSettings);\n      var allSortSettings = storedAllSortSettings.value;\n\n      var translateColumnToVisual = function translateColumnToVisual(_ref3) {\n        var physicalColumn = _ref3.column,\n            restOfProperties = _objectWithoutProperties(_ref3, _excluded2);\n\n        return _objectSpread({\n          column: _this5.hot.toVisualColumn(physicalColumn)\n        }, restOfProperties);\n      };\n\n      if (isDefined(allSortSettings) && Array.isArray(allSortSettings.initialConfig)) {\n        allSortSettings.initialConfig = arrayMap(allSortSettings.initialConfig, translateColumnToVisual);\n      }\n\n      return allSortSettings;\n    }\n    /**\n     * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @returns {undefined|object}\n     */\n\n  }, {\n    key: \"getColumnNextConfig\",\n    value: function getColumnNextConfig(column) {\n      var sortOrder = this.columnStatesManager.getSortOrderOfColumn(column);\n\n      if (isDefined(sortOrder)) {\n        var nextSortOrder = getNextSortOrder(sortOrder);\n\n        if (isDefined(nextSortOrder)) {\n          return {\n            column: column,\n            sortOrder: nextSortOrder\n          };\n        }\n\n        return;\n      }\n\n      var nrOfColumns = this.hot.countCols();\n\n      if (Number.isInteger(column) && column >= 0 && column < nrOfColumns) {\n        return {\n          column: column,\n          sortOrder: getNextSortOrder()\n        };\n      }\n    }\n    /**\n     * Get sort configuration with \"next order\" for particular column.\n     *\n     * @private\n     * @param {number} columnToChange Visual column index of column which order will be changed.\n     * @param {string} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one\n     * change order of particular column and change it's position in the sort queue to the last one. The second one\n     * just change order of particular column.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getNextSortConfig\",\n    value: function getNextSortConfig(columnToChange) {\n      var strategyId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : APPEND_COLUMN_CONFIG_STRATEGY;\n      var indexOfColumnToChange = this.columnStatesManager.getIndexOfColumnInSortQueue(columnToChange);\n      var isColumnSorted = indexOfColumnToChange !== -1;\n      var currentSortConfig = this.getSortConfig();\n      var nextColumnConfig = this.getColumnNextConfig(columnToChange);\n\n      if (isColumnSorted) {\n        if (isUndefined(nextColumnConfig)) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n\n        if (strategyId === APPEND_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)), [nextColumnConfig]);\n        } else if (strategyId === REPLACE_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), [nextColumnConfig], _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n      }\n\n      if (isDefined(nextColumnConfig)) {\n        return currentSortConfig.concat(nextColumnConfig);\n      }\n\n      return currentSortConfig;\n    }\n    /**\n     * Get plugin's column config for the specified column index.\n     *\n     * @private\n     * @param {object} columnConfig Configuration inside `columns` property for the specified column index.\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getPluginColumnConfig\",\n    value: function getPluginColumnConfig(columnConfig) {\n      if (isObject(columnConfig)) {\n        var pluginColumnConfig = columnConfig[this.pluginKey];\n\n        if (isObject(pluginColumnConfig)) {\n          return pluginColumnConfig;\n        }\n      }\n\n      return {};\n    }\n    /**\n     * Get plugin settings related properties, properly merged from cascade settings.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getMergedPluginSettings\",\n    value: function getMergedPluginSettings(column) {\n      var pluginMainSettings = this.hot.getSettings()[this.pluginKey];\n      var storedColumnProperties = this.columnStatesManager.getAllColumnsProperties();\n      var cellMeta = this.hot.getCellMeta(0, column);\n      var columnMeta = Object.getPrototypeOf(cellMeta);\n\n      if (Array.isArray(columnMeta.columns)) {\n        return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns[column]));\n      } else if (isFunction(columnMeta.columns)) {\n        return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns(column)));\n      }\n\n      return Object.assign(storedColumnProperties, pluginMainSettings);\n    }\n    /**\n     * Get copy of settings for first cell in the column.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @returns {object}\n     */\n    // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from column meta we call this function.\n    // TODO: Remove test named: \"should not break the dataset when inserted new row\" (#5431).\n\n  }, {\n    key: \"getFirstCellSettings\",\n    value: function getFirstCellSettings(column) {\n      var cellMeta = this.hot.getCellMeta(0, column);\n      var cellMetaCopy = Object.create(cellMeta);\n      cellMetaCopy[this.pluginKey] = this.columnMetaCache.getValueAtIndex(this.hot.toPhysicalColumn(column));\n      return cellMetaCopy;\n    }\n    /**\n     * Get number of rows which should be sorted.\n     *\n     * @private\n     * @param {number} numberOfRows Total number of displayed rows.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getNumberOfRowsToSort\",\n    value: function getNumberOfRowsToSort(numberOfRows) {\n      var settings = this.hot.getSettings(); // `maxRows` option doesn't take into account `minSpareRows` option in this case.\n\n      if (settings.maxRows <= numberOfRows) {\n        return settings.maxRows;\n      }\n\n      return numberOfRows - settings.minSpareRows;\n    }\n    /**\n     * Performs the sorting using a stable sort function basing on internal state of sorting.\n     *\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     * @private\n     */\n\n  }, {\n    key: \"sortByPresetSortStates\",\n    value: function sortByPresetSortStates(sortConfigs) {\n      var _this6 = this;\n\n      if (sortConfigs.length === 0) {\n        this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());\n        return;\n      }\n\n      var indexesWithData = [];\n      var numberOfRows = this.hot.countRows();\n\n      var getDataForSortedColumns = function getDataForSortedColumns(visualRowIndex) {\n        return arrayMap(sortConfigs, function (sortConfig) {\n          return _this6.hot.getDataAtCell(visualRowIndex, sortConfig.column);\n        });\n      };\n\n      for (var visualRowIndex = 0; visualRowIndex < this.getNumberOfRowsToSort(numberOfRows); visualRowIndex += 1) {\n        indexesWithData.push([this.hot.toPhysicalRow(visualRowIndex)].concat(getDataForSortedColumns(visualRowIndex)));\n      }\n\n      var indexesBefore = arrayMap(indexesWithData, function (indexWithData) {\n        return indexWithData[0];\n      });\n      sort(indexesWithData, this.pluginKey, arrayMap(sortConfigs, function (sortConfig) {\n        return sortConfig.sortOrder;\n      }), arrayMap(sortConfigs, function (sortConfig) {\n        return _this6.getFirstCellSettings(sortConfig.column);\n      })); // Append spareRows\n\n      for (var _visualRowIndex = indexesWithData.length; _visualRowIndex < numberOfRows; _visualRowIndex += 1) {\n        indexesWithData.push([_visualRowIndex].concat(getDataForSortedColumns(_visualRowIndex)));\n      }\n\n      var indexesAfter = arrayMap(indexesWithData, function (indexWithData) {\n        return indexWithData[0];\n      });\n      var indexMapping = new Map(arrayMap(indexesBefore, function (indexBefore, indexInsideArray) {\n        return [indexBefore, indexesAfter[indexInsideArray]];\n      }));\n      var newIndexesSequence = arrayMap(this.hot.rowIndexMapper.getIndexesSequence(), function (physicalIndex) {\n        if (indexMapping.has(physicalIndex)) {\n          return indexMapping.get(physicalIndex);\n        }\n\n        return physicalIndex;\n      });\n      this.hot.rowIndexMapper.setIndexesSequence(newIndexesSequence);\n    }\n    /**\n     * Load saved settings or sort by predefined plugin configuration.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"loadOrSortBySettings\",\n    value: function loadOrSortBySettings() {\n      var storedAllSortSettings = this.getAllSavedSortSettings();\n\n      if (isObject(storedAllSortSettings)) {\n        this.sortBySettings(storedAllSortSettings);\n      } else {\n        var allSortSettings = this.hot.getSettings()[this.pluginKey];\n        this.sortBySettings(allSortSettings);\n      }\n    }\n    /**\n     * Sort the table by provided configuration.\n     *\n     * @private\n     * @param {object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,\n     * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.\n     */\n\n  }, {\n    key: \"sortBySettings\",\n    value: function sortBySettings(allSortSettings) {\n      if (isObject(allSortSettings)) {\n        this.columnStatesManager.updateAllColumnsProperties(allSortSettings);\n        var initialConfig = allSortSettings.initialConfig;\n\n        if (Array.isArray(initialConfig) || isObject(initialConfig)) {\n          this.sort(initialConfig);\n        }\n      } else {\n        // Extra render for headers. Their width may change.\n        this.hot.render();\n      }\n    }\n    /**\n     * Callback for the `onAfterGetColHeader` hook. Adds column sorting CSS classes.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @param {Element} TH TH HTML element.\n     */\n\n  }, {\n    key: \"onAfterGetColHeader\",\n    value: function onAfterGetColHeader(column, TH) {\n      var headerSpanElement = getHeaderSpanElement(TH);\n\n      if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n        return;\n      }\n\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var showSortIndicator = pluginSettingsForColumn.indicator;\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      this.updateHeaderClasses(headerSpanElement, this.columnStatesManager, column, showSortIndicator, headerActionEnabled);\n    }\n    /**\n     * Update header classes.\n     *\n     * @private\n     * @param {HTMLElement} headerSpanElement Header span element.\n     * @param {...*} args Extra arguments for helpers.\n     */\n\n  }, {\n    key: \"updateHeaderClasses\",\n    value: function updateHeaderClasses(headerSpanElement) {\n      removeClass(headerSpanElement, getClassesToRemove(headerSpanElement));\n\n      if (this.enabled !== false) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        addClass(headerSpanElement, getClassesToAdd.apply(void 0, args));\n      }\n    }\n    /**\n     * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called\n     * for `updateSettings` in specific situations.\n     *\n     * @private\n     * @param {object} newSettings New settings object.\n     */\n\n  }, {\n    key: \"onUpdateSettings\",\n    value: function onUpdateSettings(newSettings) {\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"onUpdateSettings\", this).call(this);\n\n      if (this.columnMetaCache !== null) {\n        // Column meta cache base on settings, thus we should re-init the map.\n        this.columnMetaCache.init(this.hot.columnIndexMapper.getNumberOfIndexes());\n      }\n\n      if (isDefined(newSettings[this.pluginKey])) {\n        this.sortBySettings(newSettings[this.pluginKey]);\n      }\n    }\n    /**\n     * Callback for the `afterLoadData` hook.\n     *\n     * @private\n     * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.\n     */\n\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData(initialLoad) {\n      if (initialLoad === true) {\n        // TODO: Workaround? It should be refactored / described.\n        if (this.hot.view) {\n          this.loadOrSortBySettings();\n        }\n      }\n    }\n    /**\n     * Indicates if clickable header was clicked.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {number} column Visual column index.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"wasClickableHeaderClicked\",\n    value: function wasClickableHeaderClicked(event, column) {\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      return headerActionEnabled && event.target.nodeName === 'SPAN';\n    }\n    /**\n     * Changes the behavior of selection / dragging.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {CellCoords} coords Visual coordinates.\n     * @param {HTMLElement} TD The cell element.\n     * @param {object} blockCalculations A literal object which holds boolean values which controls\n     *                                   how the selection while selecting neighboring cells.\n     */\n\n  }, {\n    key: \"onBeforeOnCellMouseDown\",\n    value: function onBeforeOnCellMouseDown(event, coords, TD, blockCalculations) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n\n      if (this.wasClickableHeaderClicked(event, coords.col) && isPressedCtrlKey()) {\n        blockCalculations.column = true;\n      }\n    }\n    /**\n     * Callback for the `onAfterOnCellMouseDown` hook.\n     *\n     * @private\n     * @param {Event} event Event which are provided by hook.\n     * @param {CellCoords} coords Visual coords of the selected cell.\n     */\n\n  }, {\n    key: \"onAfterOnCellMouseDown\",\n    value: function onAfterOnCellMouseDown(event, coords) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n\n      if (this.wasClickableHeaderClicked(event, coords.col)) {\n        if (isPressedCtrlKey()) {\n          this.hot.deselectCell();\n          this.hot.selectColumns(coords.col);\n        }\n\n        this.sort(this.getColumnNextConfig(coords.col));\n      }\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this$columnStatesMan;\n\n      // TODO: Probably not supported yet by ESLint: https://github.com/eslint/eslint/issues/11045\n      // eslint-disable-next-line no-unused-expressions\n      (_this$columnStatesMan = this.columnStatesManager) === null || _this$columnStatesMan === void 0 ? void 0 : _this$columnStatesMan.destroy();\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"destroy\", this).call(this);\n    }\n  }], [{\n    key: \"PLUGIN_KEY\",\n    get: function get() {\n      return PLUGIN_KEY;\n    }\n  }, {\n    key: \"PLUGIN_PRIORITY\",\n    get: function get() {\n      return PLUGIN_PRIORITY;\n    }\n  }]);\n\n  return ColumnSorting;\n}(BasePlugin);"]},"metadata":{},"sourceType":"module"}