{"ast":null,"code":";\n\n(function (root, factory, undef) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\", \"./cipher-core\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  /**\r\n   * Output Feedback block mode.\r\n   */\n  CryptoJS.mode.OFB = function () {\n    var OFB = CryptoJS.lib.BlockCipherMode.extend();\n    var Encryptor = OFB.Encryptor = OFB.extend({\n      processBlock: function (words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n        var iv = this._iv;\n        var keystream = this._keystream; // Generate keystream\n\n        if (iv) {\n          keystream = this._keystream = iv.slice(0); // Remove IV for subsequent blocks\n\n          this._iv = undefined;\n        }\n\n        cipher.encryptBlock(keystream, 0); // Encrypt\n\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= keystream[i];\n        }\n      }\n    });\n    OFB.Decryptor = Encryptor;\n    return OFB;\n  }();\n\n  return CryptoJS.mode.OFB;\n});","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/crypto-js/mode-ofb.js"],"names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","mode","OFB","lib","BlockCipherMode","extend","Encryptor","processBlock","words","offset","cipher","_cipher","blockSize","iv","_iv","keystream","_keystream","slice","undefined","encryptBlock","i","Decryptor"],"mappings":"AAAA;;AAAE,WAAUA,IAAV,EAAgBC,OAAhB,EAAyBC,KAAzB,EAAgC;AACjC,MAAI,OAAOC,OAAP,KAAmB,QAAvB,EAAiC;AAChC;AACAC,IAAAA,MAAM,CAACD,OAAP,GAAiBA,OAAO,GAAGF,OAAO,CAACI,OAAO,CAAC,QAAD,CAAR,EAAoBA,OAAO,CAAC,eAAD,CAA3B,CAAlC;AACA,GAHD,MAIK,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AACpD;AACAD,IAAAA,MAAM,CAAC,CAAC,QAAD,EAAW,eAAX,CAAD,EAA8BL,OAA9B,CAAN;AACA,GAHI,MAIA;AACJ;AACAA,IAAAA,OAAO,CAACD,IAAI,CAACQ,QAAN,CAAP;AACA;AACD,CAbC,EAaA,IAbA,EAaM,UAAUA,QAAV,EAAoB;AAE3B;AACD;AACA;AACCA,EAAAA,QAAQ,CAACC,IAAT,CAAcC,GAAd,GAAqB,YAAY;AAC7B,QAAIA,GAAG,GAAGF,QAAQ,CAACG,GAAT,CAAaC,eAAb,CAA6BC,MAA7B,EAAV;AAEA,QAAIC,SAAS,GAAGJ,GAAG,CAACI,SAAJ,GAAgBJ,GAAG,CAACG,MAAJ,CAAW;AACvCE,MAAAA,YAAY,EAAE,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AACnC;AACA,YAAIC,MAAM,GAAG,KAAKC,OAAlB;AACA,YAAIC,SAAS,GAAGF,MAAM,CAACE,SAAvB;AACA,YAAIC,EAAE,GAAG,KAAKC,GAAd;AACA,YAAIC,SAAS,GAAG,KAAKC,UAArB,CALmC,CAOnC;;AACA,YAAIH,EAAJ,EAAQ;AACJE,UAAAA,SAAS,GAAG,KAAKC,UAAL,GAAkBH,EAAE,CAACI,KAAH,CAAS,CAAT,CAA9B,CADI,CAGJ;;AACA,eAAKH,GAAL,GAAWI,SAAX;AACH;;AACDR,QAAAA,MAAM,CAACS,YAAP,CAAoBJ,SAApB,EAA+B,CAA/B,EAdmC,CAgBnC;;AACA,aAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,SAApB,EAA+BQ,CAAC,EAAhC,EAAoC;AAChCZ,UAAAA,KAAK,CAACC,MAAM,GAAGW,CAAV,CAAL,IAAqBL,SAAS,CAACK,CAAD,CAA9B;AACH;AACJ;AArBsC,KAAX,CAAhC;AAwBAlB,IAAAA,GAAG,CAACmB,SAAJ,GAAgBf,SAAhB;AAEA,WAAOJ,GAAP;AACH,GA9BoB,EAArB;;AAiCA,SAAOF,QAAQ,CAACC,IAAT,CAAcC,GAArB;AAEA,CArDC,CAAD","sourcesContent":[";(function (root, factory, undef) {\r\n\tif (typeof exports === \"object\") {\r\n\t\t// CommonJS\r\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\r\n\t}\r\n\telse if (typeof define === \"function\" && define.amd) {\r\n\t\t// AMD\r\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\r\n\t}\r\n\telse {\r\n\t\t// Global (browser)\r\n\t\tfactory(root.CryptoJS);\r\n\t}\r\n}(this, function (CryptoJS) {\r\n\r\n\t/**\r\n\t * Output Feedback block mode.\r\n\t */\r\n\tCryptoJS.mode.OFB = (function () {\r\n\t    var OFB = CryptoJS.lib.BlockCipherMode.extend();\r\n\r\n\t    var Encryptor = OFB.Encryptor = OFB.extend({\r\n\t        processBlock: function (words, offset) {\r\n\t            // Shortcuts\r\n\t            var cipher = this._cipher\r\n\t            var blockSize = cipher.blockSize;\r\n\t            var iv = this._iv;\r\n\t            var keystream = this._keystream;\r\n\r\n\t            // Generate keystream\r\n\t            if (iv) {\r\n\t                keystream = this._keystream = iv.slice(0);\r\n\r\n\t                // Remove IV for subsequent blocks\r\n\t                this._iv = undefined;\r\n\t            }\r\n\t            cipher.encryptBlock(keystream, 0);\r\n\r\n\t            // Encrypt\r\n\t            for (var i = 0; i < blockSize; i++) {\r\n\t                words[offset + i] ^= keystream[i];\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    OFB.Decryptor = Encryptor;\r\n\r\n\t    return OFB;\r\n\t}());\r\n\r\n\r\n\treturn CryptoJS.mode.OFB;\r\n\r\n}));"]},"metadata":{},"sourceType":"script"}