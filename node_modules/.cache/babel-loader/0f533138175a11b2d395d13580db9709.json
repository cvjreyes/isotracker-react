{"ast":null,"code":"import { getComparisonFunction } from \"../../helpers/feature.mjs\";\nimport { arrayUnique, arrayEach } from \"../../helpers/array.mjs\";\nvar sortCompare = getComparisonFunction();\n/**\r\n * Comparison function for sorting purposes.\r\n *\r\n * @param {*} a The first value to compare.\r\n * @param {*} b The second value to compare.\r\n * @returns {number} Returns number from -1 to 1.\r\n */\n\nexport function sortComparison(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  }\n\n  return sortCompare(a, b);\n}\n/**\r\n * Convert raw value into visual value.\r\n *\r\n * @param {*} value The value to convert.\r\n * @param {string} defaultEmptyValue Default value for empty cells.\r\n * @returns {*}\r\n */\n\nexport function toVisualValue(value, defaultEmptyValue) {\n  var visualValue = value;\n\n  if (visualValue === '') {\n    visualValue = \"(\".concat(defaultEmptyValue, \")\");\n  }\n\n  return visualValue;\n}\nvar SUPPORT_SET_CONSTRUCTOR = new Set([1]).has(1);\nvar SUPPORT_FAST_DEDUPE = SUPPORT_SET_CONSTRUCTOR && typeof Array.from === 'function';\n/**\r\n * Create an array assertion to compare if an element exists in that array (in a more efficient way than .indexOf).\r\n *\r\n * @param {Array} initialData Values to compare.\r\n * @returns {Function}\r\n */\n\nexport function createArrayAssertion(initialData) {\n  var dataset = initialData;\n\n  if (SUPPORT_SET_CONSTRUCTOR) {\n    dataset = new Set(dataset);\n  }\n\n  return function (value) {\n    var result;\n\n    if (SUPPORT_SET_CONSTRUCTOR) {\n      result = dataset.has(value);\n    } else {\n      /* eslint-disable no-bitwise */\n      result = !!~dataset.indexOf(value);\n    }\n\n    return result;\n  };\n}\n/**\r\n * Convert empty-ish values like null and undefined to an empty string.\r\n *\r\n * @param {*} value Value to check.\r\n * @returns {string}\r\n */\n\nexport function toEmptyString(value) {\n  return value === null || value === void 0 ? '' : value;\n}\n/**\r\n * Unify column values (replace `null` and `undefined` values into empty string, unique values and sort them).\r\n *\r\n * @param {Array} values An array of values.\r\n * @returns {Array}\r\n */\n\nexport function unifyColumnValues(values) {\n  var unifiedValues = values;\n\n  if (SUPPORT_FAST_DEDUPE) {\n    unifiedValues = Array.from(new Set(unifiedValues));\n  } else {\n    unifiedValues = arrayUnique(unifiedValues);\n  }\n\n  unifiedValues = unifiedValues.sort(function (a, b) {\n    if (typeof a === 'number' && typeof b === 'number') {\n      return a - b;\n    }\n\n    if (a === b) {\n      return 0;\n    }\n\n    return a > b ? 1 : -1;\n  });\n  return unifiedValues;\n}\n/**\r\n * Intersect 'base' values with 'selected' values and return an array of object.\r\n *\r\n * @param {Array} base An array of base values.\r\n * @param {Array} selected An array of selected values.\r\n * @param {string} defaultEmptyValue Default value for empty cells.\r\n * @param {Function} [callback] A callback function which is invoked for every item in an array.\r\n * @returns {Array}\r\n */\n\nexport function intersectValues(base, selected, defaultEmptyValue, callback) {\n  var result = [];\n  var same = base === selected;\n  var selectedItemsAssertion;\n\n  if (!same) {\n    selectedItemsAssertion = createArrayAssertion(selected);\n  }\n\n  arrayEach(base, function (value) {\n    var checked = false;\n\n    if (same || selectedItemsAssertion(value)) {\n      checked = true;\n    }\n\n    var item = {\n      checked: checked,\n      value: value,\n      visualValue: toVisualValue(value, defaultEmptyValue)\n    };\n\n    if (callback) {\n      callback(item);\n    }\n\n    result.push(item);\n  });\n  return result;\n}","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/plugins/filters/utils.mjs"],"names":["getComparisonFunction","arrayUnique","arrayEach","sortCompare","sortComparison","a","b","toVisualValue","value","defaultEmptyValue","visualValue","concat","SUPPORT_SET_CONSTRUCTOR","Set","has","SUPPORT_FAST_DEDUPE","Array","from","createArrayAssertion","initialData","dataset","result","indexOf","toEmptyString","unifyColumnValues","values","unifiedValues","sort","intersectValues","base","selected","callback","same","selectedItemsAssertion","checked","item","push"],"mappings":"AAQA,SAASA,qBAAT,QAAsC,2BAAtC;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,yBAAvC;AACA,IAAIC,WAAW,GAAGH,qBAAqB,EAAvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASI,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AACnC,MAAI,OAAOD,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;AAClD,WAAOD,CAAC,GAAGC,CAAX;AACD;;AAED,SAAOH,WAAW,CAACE,CAAD,EAAIC,CAAJ,CAAlB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,iBAA9B,EAAiD;AACtD,MAAIC,WAAW,GAAGF,KAAlB;;AAEA,MAAIE,WAAW,KAAK,EAApB,EAAwB;AACtBA,IAAAA,WAAW,GAAG,IAAIC,MAAJ,CAAWF,iBAAX,EAA8B,GAA9B,CAAd;AACD;;AAED,SAAOC,WAAP;AACD;AACD,IAAIE,uBAAuB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,CAAD,CAAR,EAAaC,GAAb,CAAiB,CAAjB,CAA9B;AACA,IAAIC,mBAAmB,GAAGH,uBAAuB,IAAI,OAAOI,KAAK,CAACC,IAAb,KAAsB,UAA3E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,oBAAT,CAA8BC,WAA9B,EAA2C;AAChD,MAAIC,OAAO,GAAGD,WAAd;;AAEA,MAAIP,uBAAJ,EAA6B;AAC3BQ,IAAAA,OAAO,GAAG,IAAIP,GAAJ,CAAQO,OAAR,CAAV;AACD;;AAED,SAAO,UAAUZ,KAAV,EAAiB;AACtB,QAAIa,MAAJ;;AAEA,QAAIT,uBAAJ,EAA6B;AAC3BS,MAAAA,MAAM,GAAGD,OAAO,CAACN,GAAR,CAAYN,KAAZ,CAAT;AACD,KAFD,MAEO;AACL;AACAa,MAAAA,MAAM,GAAG,CAAC,CAAC,CAACD,OAAO,CAACE,OAAR,CAAgBd,KAAhB,CAAZ;AACD;;AAED,WAAOa,MAAP;AACD,GAXD;AAYD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,aAAT,CAAuBf,KAAvB,EAA8B;AACnC,SAAOA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,EAArC,GAA0CA,KAAjD;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASgB,iBAAT,CAA2BC,MAA3B,EAAmC;AACxC,MAAIC,aAAa,GAAGD,MAApB;;AAEA,MAAIV,mBAAJ,EAAyB;AACvBW,IAAAA,aAAa,GAAGV,KAAK,CAACC,IAAN,CAAW,IAAIJ,GAAJ,CAAQa,aAAR,CAAX,CAAhB;AACD,GAFD,MAEO;AACLA,IAAAA,aAAa,GAAGzB,WAAW,CAACyB,aAAD,CAA3B;AACD;;AAEDA,EAAAA,aAAa,GAAGA,aAAa,CAACC,IAAd,CAAmB,UAAUtB,CAAV,EAAaC,CAAb,EAAgB;AACjD,QAAI,OAAOD,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;AAClD,aAAOD,CAAC,GAAGC,CAAX;AACD;;AAED,QAAID,CAAC,KAAKC,CAAV,EAAa;AACX,aAAO,CAAP;AACD;;AAED,WAAOD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAApB;AACD,GAVe,CAAhB;AAWA,SAAOoB,aAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,eAAT,CAAyBC,IAAzB,EAA+BC,QAA/B,EAAyCrB,iBAAzC,EAA4DsB,QAA5D,EAAsE;AAC3E,MAAIV,MAAM,GAAG,EAAb;AACA,MAAIW,IAAI,GAAGH,IAAI,KAAKC,QAApB;AACA,MAAIG,sBAAJ;;AAEA,MAAI,CAACD,IAAL,EAAW;AACTC,IAAAA,sBAAsB,GAAGf,oBAAoB,CAACY,QAAD,CAA7C;AACD;;AAED5B,EAAAA,SAAS,CAAC2B,IAAD,EAAO,UAAUrB,KAAV,EAAiB;AAC/B,QAAI0B,OAAO,GAAG,KAAd;;AAEA,QAAIF,IAAI,IAAIC,sBAAsB,CAACzB,KAAD,CAAlC,EAA2C;AACzC0B,MAAAA,OAAO,GAAG,IAAV;AACD;;AAED,QAAIC,IAAI,GAAG;AACTD,MAAAA,OAAO,EAAEA,OADA;AAET1B,MAAAA,KAAK,EAAEA,KAFE;AAGTE,MAAAA,WAAW,EAAEH,aAAa,CAACC,KAAD,EAAQC,iBAAR;AAHjB,KAAX;;AAMA,QAAIsB,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACI,IAAD,CAAR;AACD;;AAEDd,IAAAA,MAAM,CAACe,IAAP,CAAYD,IAAZ;AACD,GAlBQ,CAAT;AAmBA,SAAOd,MAAP;AACD","sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.set.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\nimport \"core-js/modules/es.array.from.js\";\r\nimport \"core-js/modules/es.array.index-of.js\";\r\nimport \"core-js/modules/es.array.sort.js\";\r\nimport { getComparisonFunction } from \"../../helpers/feature.mjs\";\r\nimport { arrayUnique, arrayEach } from \"../../helpers/array.mjs\";\r\nvar sortCompare = getComparisonFunction();\r\n/**\r\n * Comparison function for sorting purposes.\r\n *\r\n * @param {*} a The first value to compare.\r\n * @param {*} b The second value to compare.\r\n * @returns {number} Returns number from -1 to 1.\r\n */\r\n\r\nexport function sortComparison(a, b) {\r\n  if (typeof a === 'number' && typeof b === 'number') {\r\n    return a - b;\r\n  }\r\n\r\n  return sortCompare(a, b);\r\n}\r\n/**\r\n * Convert raw value into visual value.\r\n *\r\n * @param {*} value The value to convert.\r\n * @param {string} defaultEmptyValue Default value for empty cells.\r\n * @returns {*}\r\n */\r\n\r\nexport function toVisualValue(value, defaultEmptyValue) {\r\n  var visualValue = value;\r\n\r\n  if (visualValue === '') {\r\n    visualValue = \"(\".concat(defaultEmptyValue, \")\");\r\n  }\r\n\r\n  return visualValue;\r\n}\r\nvar SUPPORT_SET_CONSTRUCTOR = new Set([1]).has(1);\r\nvar SUPPORT_FAST_DEDUPE = SUPPORT_SET_CONSTRUCTOR && typeof Array.from === 'function';\r\n/**\r\n * Create an array assertion to compare if an element exists in that array (in a more efficient way than .indexOf).\r\n *\r\n * @param {Array} initialData Values to compare.\r\n * @returns {Function}\r\n */\r\n\r\nexport function createArrayAssertion(initialData) {\r\n  var dataset = initialData;\r\n\r\n  if (SUPPORT_SET_CONSTRUCTOR) {\r\n    dataset = new Set(dataset);\r\n  }\r\n\r\n  return function (value) {\r\n    var result;\r\n\r\n    if (SUPPORT_SET_CONSTRUCTOR) {\r\n      result = dataset.has(value);\r\n    } else {\r\n      /* eslint-disable no-bitwise */\r\n      result = !!~dataset.indexOf(value);\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n/**\r\n * Convert empty-ish values like null and undefined to an empty string.\r\n *\r\n * @param {*} value Value to check.\r\n * @returns {string}\r\n */\r\n\r\nexport function toEmptyString(value) {\r\n  return value === null || value === void 0 ? '' : value;\r\n}\r\n/**\r\n * Unify column values (replace `null` and `undefined` values into empty string, unique values and sort them).\r\n *\r\n * @param {Array} values An array of values.\r\n * @returns {Array}\r\n */\r\n\r\nexport function unifyColumnValues(values) {\r\n  var unifiedValues = values;\r\n\r\n  if (SUPPORT_FAST_DEDUPE) {\r\n    unifiedValues = Array.from(new Set(unifiedValues));\r\n  } else {\r\n    unifiedValues = arrayUnique(unifiedValues);\r\n  }\r\n\r\n  unifiedValues = unifiedValues.sort(function (a, b) {\r\n    if (typeof a === 'number' && typeof b === 'number') {\r\n      return a - b;\r\n    }\r\n\r\n    if (a === b) {\r\n      return 0;\r\n    }\r\n\r\n    return a > b ? 1 : -1;\r\n  });\r\n  return unifiedValues;\r\n}\r\n/**\r\n * Intersect 'base' values with 'selected' values and return an array of object.\r\n *\r\n * @param {Array} base An array of base values.\r\n * @param {Array} selected An array of selected values.\r\n * @param {string} defaultEmptyValue Default value for empty cells.\r\n * @param {Function} [callback] A callback function which is invoked for every item in an array.\r\n * @returns {Array}\r\n */\r\n\r\nexport function intersectValues(base, selected, defaultEmptyValue, callback) {\r\n  var result = [];\r\n  var same = base === selected;\r\n  var selectedItemsAssertion;\r\n\r\n  if (!same) {\r\n    selectedItemsAssertion = createArrayAssertion(selected);\r\n  }\r\n\r\n  arrayEach(base, function (value) {\r\n    var checked = false;\r\n\r\n    if (same || selectedItemsAssertion(value)) {\r\n      checked = true;\r\n    }\r\n\r\n    var item = {\r\n      checked: checked,\r\n      value: value,\r\n      visualValue: toVisualValue(value, defaultEmptyValue)\r\n    };\r\n\r\n    if (callback) {\r\n      callback(item);\r\n    }\r\n\r\n    result.push(item);\r\n  });\r\n  return result;\r\n}"]},"metadata":{},"sourceType":"module"}