{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ssaez1\\\\technip-repositories\\\\isotracker\\\\isotracker-react\\\\src\\\\components\\\\progressPlotEquipments\\\\progressPlotEquipments.js\";\nimport React from 'react';\nimport { CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const data = [[\"Year\", \"Sales\", \"Expenses\"], [\"2004\", 1000, 400], [\"2005\", 1170, 460], [\"2006\", 660, 1120], [\"2007\", 1030, 540]];\nexport const options = {\n  title: \"Company Performance\",\n  curveType: \"function\",\n  legend: {\n    position: \"bottom\"\n  }\n};\nexport default class ProgressPlotEquipments extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: []\n    };\n  }\n\n  async componentDidMount() {\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/gequips\", options).then(response => response.json()).then(async json => {\n      let weeks = [];\n\n      for (let i = 0; i < json.rows.length; i++) {\n        weeks.push({\n          name: \"W\" + json.rows[i].week,\n          estimated: json.rows[i].estimated,\n          progress: json.rows[i].progress\n        });\n      }\n\n      await this.setState({\n        data: weeks\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Chart, {\n      chartType: \"LineChart\",\n      width: \"100%\",\n      height: \"400px\",\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }, this)\n    /*<ResponsiveContainer width=\"90%\" height=\"90%\">\r\n      <LineChart\r\n    \twidth={500}\r\n    \theight={400}\r\n    \tdata={this.state.data}\r\n    \tmargin={{\r\n    \t  top: 35,\r\n    \t  right: 30,\r\n    \t  left: 20,\r\n    \t  bottom: -15,\r\n    \t}}\r\n      >\r\n    \t<CartesianGrid strokeDasharray=\"3 3\" />\r\n    \t<XAxis dataKey=\"name\" />\r\n    \t<YAxis label={{ value: \"Progress(%)\", position: \"insideLeft\", angle: -90,   dy: 30}} />\r\n    \t<Tooltip />\r\n    \t<Legend />\r\n    \t<Line type=\"monotone\" dataKey=\"progress\" stroke=\"blue\" activeDot={{ r: 8 }} />\r\n    \t<Line type=\"monotone\" dataKey=\"estimated\" stroke=\"red\" />\r\n      </LineChart>\r\n    </ResponsiveContainer>*/\n    ;\n  }\n\n}\nProgressPlotEquipments.demoUrl = 'https://codesandbox.io/s/simple-line-chart-kec3v';","map":{"version":3,"sources":["C:/Users/ssaez1/technip-repositories/isotracker/isotracker-react/src/components/progressPlotEquipments/progressPlotEquipments.js"],"names":["React","CartesianGrid","Legend","Line","LineChart","ResponsiveContainer","Tooltip","XAxis","YAxis","Chart","data","options","title","curveType","legend","position","ProgressPlotEquipments","PureComponent","state","componentDidMount","method","headers","fetch","process","env","REACT_APP_SERVER","REACT_APP_NODE_PORT","then","response","json","weeks","i","rows","length","push","name","week","estimated","progress","setState","render","demoUrl"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,IAAhC,EAAsCC,SAAtC,EAAiDC,mBAAjD,EAAsEC,OAAtE,EAA+EC,KAA/E,EAAsFC,KAAtF,QAAmG,UAAnG;AACA,SAASC,KAAT,QAAsB,qBAAtB;;AAEC,OAAO,MAAMC,IAAI,GAAG,CACnB,CAAC,MAAD,EAAS,OAAT,EAAkB,UAAlB,CADmB,EAEnB,CAAC,MAAD,EAAS,IAAT,EAAe,GAAf,CAFmB,EAGnB,CAAC,MAAD,EAAS,IAAT,EAAe,GAAf,CAHmB,EAInB,CAAC,MAAD,EAAS,GAAT,EAAc,IAAd,CAJmB,EAKnB,CAAC,MAAD,EAAS,IAAT,EAAe,GAAf,CALmB,CAAb;AAQP,OAAO,MAAMC,OAAO,GAAG;AACtBC,EAAAA,KAAK,EAAE,qBADe;AAEtBC,EAAAA,SAAS,EAAE,UAFW;AAGtBC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ;AAHc,CAAhB;AAMN,eAAe,MAAMC,sBAAN,SAAqChB,KAAK,CAACiB,aAA3C,CAAyD;AAAA;AAAA;AAAA,SAIzEC,KAJyE,GAIjE;AACPR,MAAAA,IAAI,EAAE;AADC,KAJiE;AAAA;;AAUlD,QAAjBS,iBAAiB,GAAG;AAEzB,UAAMR,OAAO,GAAG;AACfS,MAAAA,MAAM,EAAE,KADO;AAEfC,MAAAA,OAAO,EAAE;AACR,wBAAgB;AADR;AAFM,KAAhB;AAOA,UAAMC,KAAK,CAAC,YAAUC,OAAO,CAACC,GAAR,CAAYC,gBAAtB,GAAuC,GAAvC,GAA2CF,OAAO,CAACC,GAAR,CAAYE,mBAAvD,GAA2E,UAA5E,EAAwFf,OAAxF,CAAL,CACLgB,IADK,CACAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADZ,EAELF,IAFK,CAEA,MAAME,IAAN,IAAY;AACjB,UAAIC,KAAK,GAAG,EAAZ;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,IAAI,CAACG,IAAL,CAAUC,MAA7B,EAAqCF,CAAC,EAAtC,EAAyC;AACxCD,QAAAA,KAAK,CAACI,IAAN,CAAW;AAACC,UAAAA,IAAI,EAAE,MAAIN,IAAI,CAACG,IAAL,CAAUD,CAAV,EAAaK,IAAxB;AAA8BC,UAAAA,SAAS,EAAER,IAAI,CAACG,IAAL,CAAUD,CAAV,EAAaM,SAAtD;AAAiEC,UAAAA,QAAQ,EAAET,IAAI,CAACG,IAAL,CAAUD,CAAV,EAAaO;AAAxF,SAAX;AACA;;AACD,YAAM,KAAKC,QAAL,CAAc;AAAC7B,QAAAA,IAAI,EAAEoB;AAAP,OAAd,CAAN;AACA,KARK,CAAN;AASA;;AAIDU,EAAAA,MAAM,GAAG;AACP,wBAED,QAAC,KAAD;AACC,MAAA,SAAS,EAAC,WADX;AAEC,MAAA,KAAK,EAAC,MAFP;AAGC,MAAA,MAAM,EAAC,OAHR;AAIC,MAAA,IAAI,EAAE9B,IAJP;AAKC,MAAA,OAAO,EAAEC;AALV;AAAA;AAAA;AAAA;AAAA;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BG;AA+BD;;AAhEwE;AAAnDK,sB,CACfyB,O,GAAU,kD","sourcesContent":["import React from 'react';\r\nimport { CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\r\nimport { Chart } from \"react-google-charts\";\r\n\r\n\texport const data = [\r\n\t\t[\"Year\", \"Sales\", \"Expenses\"],\r\n\t\t[\"2004\", 1000, 400],\r\n\t\t[\"2005\", 1170, 460],\r\n\t\t[\"2006\", 660, 1120],\r\n\t\t[\"2007\", 1030, 540],\r\n\t];\r\n\t\t\r\n\texport const options = {\r\n\t\ttitle: \"Company Performance\",\r\n\t\tcurveType: \"function\",\r\n\t\tlegend: { position: \"bottom\" },\r\n\t};\r\n\r\n  export default class ProgressPlotEquipments extends React.PureComponent {\r\n\tstatic demoUrl = 'https://codesandbox.io/s/simple-line-chart-kec3v';\r\n\t\r\n\r\n\tstate = {\r\n\t\tdata: []\r\n\t  };\r\n\r\n\t\r\n\r\n\tasync componentDidMount (){\r\n\r\n\t\tconst options = {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tawait fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/gequips\", options)\r\n\t\t.then(response => response.json())\r\n\t\t.then(async json=>{\r\n\t\t\tlet weeks = []\r\n\t\t\tfor(let i = 0; i < json.rows.length; i++){\r\n\t\t\t\tweeks.push({name: \"W\"+json.rows[i].week, estimated: json.rows[i].estimated, progress: json.rows[i].progress})\r\n\t\t\t}\r\n\t\t\tawait this.setState({data: weeks})\r\n\t\t})\r\n\t}\r\n\r\n\t\r\n\r\n\trender() {\r\n\t  return (\r\n\r\n\t\t<Chart\r\n\t\t\tchartType=\"LineChart\"\r\n\t\t\twidth=\"100%\"\r\n\t\t\theight=\"400px\"\r\n\t\t\tdata={data}\r\n\t\t\toptions={options}\r\n\t\t/>\r\n\t\t/*<ResponsiveContainer width=\"90%\" height=\"90%\">\r\n\t\t  <LineChart\r\n\t\t\twidth={500}\r\n\t\t\theight={400}\r\n\t\t\tdata={this.state.data}\r\n\t\t\tmargin={{\r\n\t\t\t  top: 35,\r\n\t\t\t  right: 30,\r\n\t\t\t  left: 20,\r\n\t\t\t  bottom: -15,\r\n\t\t\t}}\r\n\t\t  >\r\n\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\r\n\t\t\t<XAxis dataKey=\"name\" />\r\n\t\t\t<YAxis label={{ value: \"Progress(%)\", position: \"insideLeft\", angle: -90,   dy: 30}} />\r\n\t\t\t<Tooltip />\r\n\t\t\t<Legend />\r\n\t\t\t<Line type=\"monotone\" dataKey=\"progress\" stroke=\"blue\" activeDot={{ r: 8 }} />\r\n\t\t\t<Line type=\"monotone\" dataKey=\"estimated\" stroke=\"red\" />\r\n\t\t  </LineChart>\r\n\t\t</ResponsiveContainer>*/\r\n\t  );\r\n\t}\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}