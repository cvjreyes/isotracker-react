{"ast":null,"code":"const RenderHelper = {\n  drawMarker: function (x, y, ctx, markerType, markerSize, markerColor, markerBorderColor, markerBorderThickness) {\n    if (!ctx) return;\n    var alpha = 1;\n    ctx.fillStyle = markerColor ? markerColor : \"#000000\";\n    ctx.strokeStyle = markerBorderColor ? markerBorderColor : \"#000000\";\n    ctx.lineWidth = markerBorderThickness ? markerBorderThickness : 0;\n\n    if (markerType === \"circle\") {\n      ctx.moveTo(x, y);\n      ctx.beginPath(); //return;\n\n      ctx.arc(x, y, markerSize / 2, 0, Math.PI * 2, false);\n      if (markerColor) ctx.fill();\n\n      if (markerBorderThickness) {\n        if (!markerBorderColor) {\n          alpha = ctx.globalAlpha;\n          ctx.globalAlpha = .15;\n          ctx.strokeStyle = \"black\";\n          ctx.stroke();\n          ctx.globalAlpha = alpha;\n        } else ctx.stroke();\n      }\n    } else if (markerType === \"square\") {\n      //ctx.moveTo(x - markerSize / 2, y - markerSize / 2);\n      ctx.beginPath();\n      ctx.rect(x - markerSize / 2, y - markerSize / 2, markerSize, markerSize);\n      if (markerColor) ctx.fill();\n\n      if (markerBorderThickness) {\n        if (!markerBorderColor) {\n          alpha = ctx.globalAlpha;\n          ctx.globalAlpha = .15;\n          ctx.strokeStyle = \"black\";\n          ctx.stroke();\n          ctx.globalAlpha = alpha;\n        } else ctx.stroke();\n      }\n    } else if (markerType === \"triangle\") {\n      ctx.beginPath();\n      ctx.moveTo(x - markerSize / 2, y + markerSize / 2);\n      ctx.lineTo(x + markerSize / 2, y + markerSize / 2);\n      ctx.lineTo(x, y - markerSize / 2);\n      ctx.closePath();\n      if (markerColor) ctx.fill();\n\n      if (markerBorderThickness) {\n        if (!markerBorderColor) {\n          alpha = ctx.globalAlpha;\n          ctx.globalAlpha = .15;\n          ctx.strokeStyle = \"black\";\n          ctx.stroke();\n          ctx.globalAlpha = alpha;\n        } else ctx.stroke();\n      }\n\n      ctx.beginPath();\n    } else if (markerType === \"cross\") {\n      ctx.strokeStyle = markerColor;\n      markerBorderThickness = markerSize / 4;\n      ctx.lineWidth = markerBorderThickness;\n      ctx.beginPath();\n      ctx.moveTo(x - markerSize / 2, y - markerSize / 2);\n      ctx.lineTo(x + markerSize / 2, y + markerSize / 2);\n      ctx.stroke();\n      ctx.moveTo(x + markerSize / 2, y - markerSize / 2);\n      ctx.lineTo(x - markerSize / 2, y + markerSize / 2);\n      ctx.stroke();\n    }\n  },\n  drawMarkers: function (markers) {\n    for (var i = 0; i < markers.length; i++) {\n      var marker = markers[i];\n      RenderHelper.drawMarker(marker.x, marker.y, marker.ctx, marker.type, marker.size, marker.color, marker.borderColor, marker.borderThickness);\n    }\n  } //,\n  //draw1pxLine: function (x1, y1, x2, y2, color, ctx) {\n  //\tctx.beginPath();\n  //\tctx.drawRect(x1, y1, x2 - x1, y2 - y1);\n  //\tctx.stroke();\n  //}\n\n};\nexport default RenderHelper;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/canvasjs/src/helpers/render.js"],"names":["RenderHelper","drawMarker","x","y","ctx","markerType","markerSize","markerColor","markerBorderColor","markerBorderThickness","alpha","fillStyle","strokeStyle","lineWidth","moveTo","beginPath","arc","Math","PI","fill","globalAlpha","stroke","rect","lineTo","closePath","drawMarkers","markers","i","length","marker","type","size","color","borderColor","borderThickness"],"mappings":"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","sourcesContent":["const RenderHelper = {\r\n\r\n  drawMarker: function (x, y, ctx, markerType, markerSize, markerColor, markerBorderColor, markerBorderThickness) {\r\n\r\n    if (!ctx)\r\n      return;\r\n\r\n    var alpha = 1;\r\n\r\n    ctx.fillStyle = markerColor ? markerColor : \"#000000\";\r\n    ctx.strokeStyle = markerBorderColor ? markerBorderColor : \"#000000\";\r\n    ctx.lineWidth = markerBorderThickness ? markerBorderThickness : 0;\r\n\r\n\r\n    if (markerType === \"circle\") {\r\n\r\n      ctx.moveTo(x, y);\r\n      ctx.beginPath();\r\n      //return;\r\n\r\n      ctx.arc(x, y, markerSize / 2, 0, Math.PI * 2, false);\r\n\r\n      if (markerColor)\r\n        ctx.fill();\r\n\r\n      if (markerBorderThickness) {\r\n\r\n        if (!markerBorderColor) {\r\n          alpha = ctx.globalAlpha;\r\n          ctx.globalAlpha = .15;\r\n          ctx.strokeStyle = \"black\";\r\n          ctx.stroke();\r\n          ctx.globalAlpha = alpha;\r\n        } else\r\n          ctx.stroke();\r\n\r\n      }\r\n    }\r\n    else if (markerType === \"square\") {\r\n\r\n      //ctx.moveTo(x - markerSize / 2, y - markerSize / 2);\r\n      ctx.beginPath();\r\n      ctx.rect(x - markerSize / 2, y - markerSize / 2, markerSize, markerSize);\r\n\r\n      if (markerColor)\r\n        ctx.fill();\r\n\r\n      if (markerBorderThickness) {\r\n\r\n        if (!markerBorderColor) {\r\n          alpha = ctx.globalAlpha;\r\n          ctx.globalAlpha = .15;\r\n          ctx.strokeStyle = \"black\";\r\n          ctx.stroke();\r\n          ctx.globalAlpha = alpha;\r\n        } else\r\n          ctx.stroke();\r\n\r\n      }\r\n    } else if (markerType === \"triangle\") {\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(x - markerSize / 2, y + markerSize / 2);\r\n      ctx.lineTo(x + markerSize / 2, y + markerSize / 2);\r\n      ctx.lineTo(x, y - markerSize / 2);\r\n      ctx.closePath();\r\n\r\n      if (markerColor)\r\n        ctx.fill();\r\n\r\n      if (markerBorderThickness) {\r\n\r\n        if (!markerBorderColor) {\r\n          alpha = ctx.globalAlpha;\r\n          ctx.globalAlpha = .15;\r\n          ctx.strokeStyle = \"black\";\r\n          ctx.stroke();\r\n          ctx.globalAlpha = alpha;\r\n        } else\r\n          ctx.stroke();\r\n\r\n      }\r\n      ctx.beginPath();\r\n    } else if (markerType === \"cross\") {\r\n\r\n      ctx.strokeStyle = markerColor;\r\n      markerBorderThickness = markerSize / 4;\r\n      ctx.lineWidth = markerBorderThickness;\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(x - markerSize / 2, y - markerSize / 2);\r\n      ctx.lineTo(x + markerSize / 2, y + markerSize / 2);\r\n      ctx.stroke();\r\n\r\n      ctx.moveTo(x + markerSize / 2, y - markerSize / 2);\r\n      ctx.lineTo(x - markerSize / 2, y + markerSize / 2);\r\n      ctx.stroke();\r\n\r\n    }\r\n\r\n\r\n  },\r\n  drawMarkers: function (markers) {\r\n    for (var i = 0; i < markers.length; i++) {\r\n      var marker = markers[i];\r\n\r\n      RenderHelper.drawMarker(marker.x, marker.y, marker.ctx, marker.type, marker.size, marker.color, marker.borderColor, marker.borderThickness);\r\n    }\r\n  }\r\n  //,\r\n  //draw1pxLine: function (x1, y1, x2, y2, color, ctx) {\r\n  //\tctx.beginPath();\r\n  //\tctx.drawRect(x1, y1, x2 - x1, y2 - y1);\r\n  //\tctx.stroke();\r\n  //}\r\n}\r\n\r\nexport default RenderHelper;\r\n"]},"metadata":{},"sourceType":"module"}