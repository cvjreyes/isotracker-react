{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\r\n * TableRenderer class collects all renderers and properties necessary for table creation. It's\r\n * responsible for adjusting and rendering each renderer.\r\n *\r\n * Below is a diagram of the renderers together with an indication of what they are responisble for.\r\n *   <table>\r\n *     <colgroup>  \\ (root node)\r\n *       <col>      \\\r\n *       <col>       \\___ ColGroupRenderer\r\n *       <col>       /\r\n *       <col>      /\r\n *     </colgroup> /\r\n *     <thead>     \\ (root node)\r\n *       <tr>       \\\r\n *         <th>      \\\r\n *         <th>       \\____ ColumnHeadersRenderer\r\n *         <th>       /\r\n *         <th>      /\r\n *       </tr>      /\r\n *     </thead>    /\r\n *     <tbody>   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\ (root node)\r\n *       <tr>   (root node)          \\\r\n *         <th>  --- RowHeadersRenderer\r\n *         <td>  \\                     \\\r\n *         <td>   -- CellsRenderer      \\\r\n *         <td>  /                       \\\r\n *       </tr>                            \\\r\n *       <tr>   (root node)                \\\r\n *         <th>  --- RowHeadersRenderer     \\\r\n *         <td>  \\                           \\___ RowsRenderer\r\n *         <td>   -- CellsRenderer           /\r\n *         <td>  /                          /\r\n *       </tr>                             /\r\n *       <tr>   (root node)               /\r\n *         <th>  --- RowHeadersRenderer  /\r\n *         <td>  \\                      /\r\n *         <td>   -- CellsRenderer     /\r\n *         <td>  /                    /\r\n *       </tr>                       /\r\n *     </tbody>  ___________________/\r\n *   </table>.\r\n *\r\n * @class {RowsRenderer}\r\n */\n\n\nvar TableRenderer = /*#__PURE__*/function () {\n  function TableRenderer(rootNode) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        cellRenderer = _ref.cellRenderer;\n\n    _classCallCheck(this, TableRenderer);\n    /**\r\n     * Table element which will be used to render the children element.\r\n     *\r\n     * @type {HTMLTableElement}\r\n     */\n\n\n    this.rootNode = rootNode;\n    /**\r\n     * Document owner of the root node.\r\n     *\r\n     * @type {HTMLDocument}\r\n     */\n\n    this.rootDocument = this.rootNode.ownerDocument;\n    /**\r\n     * Renderer class responsible for rendering row headers.\r\n     *\r\n     * @type {RowsRenderer}\r\n     */\n\n    this.rowHeaders = null;\n    /**\r\n     * Renderer class responsible for rendering column headers.\r\n     *\r\n     * @type {ColumnHeadersRenderer}\r\n     */\n\n    this.columnHeaders = null;\n    /**\r\n     * Renderer class responsible for rendering col in colgroup.\r\n     *\r\n     * @type {ColGroupRenderer}\r\n     */\n\n    this.colGroup = null;\n    /**\r\n     * Renderer class responsible for rendering rows in tbody.\r\n     *\r\n     * @type {RowsRenderer}\r\n     */\n\n    this.rows = null;\n    /**\r\n     * Renderer class responsible for rendering cells.\r\n     *\r\n     * @type {CellsRenderer}\r\n     */\n\n    this.cells = null;\n    /**\r\n     * Row filter which contains all necessary information about row index transformation.\r\n     *\r\n     * @type {RowFilter}\r\n     */\n\n    this.rowFilter = null;\n    /**\r\n     * Column filter which contains all necessary information about column index transformation.\r\n     *\r\n     * @type {ColumnFilter}\r\n     */\n\n    this.columnFilter = null;\n    /**\r\n     * Row utils class which contains all necessary information about sizes of the rows.\r\n     *\r\n     * @type {RowUtils}\r\n     */\n\n    this.rowUtils = null;\n    /**\r\n     * Column utils class which contains all necessary information about sizes of the columns.\r\n     *\r\n     * @type {ColumnUtils}\r\n     */\n\n    this.columnUtils = null;\n    /**\r\n     * Indicates how much rows should be rendered to fill whole table viewport.\r\n     *\r\n     * @type {number}\r\n     */\n\n    this.rowsToRender = 0;\n    /**\r\n     * Indicates how much columns should be rendered to fill whole table viewport.\r\n     *\r\n     * @type {number}\r\n     */\n\n    this.columnsToRender = 0;\n    /**\r\n     * An array of functions to be used as a content factory to row headers.\r\n     *\r\n     * @type {Function[]}\r\n     */\n\n    this.rowHeaderFunctions = [];\n    /**\r\n     * Count of the function used to render row headers.\r\n     *\r\n     * @type {number}\r\n     */\n\n    this.rowHeadersCount = 0;\n    /**\r\n     * An array of functions to be used as a content factory to column headers.\r\n     *\r\n     * @type {Function[]}\r\n     */\n\n    this.columnHeaderFunctions = [];\n    /**\r\n     * Count of the function used to render column headers.\r\n     *\r\n     * @type {number}\r\n     */\n\n    this.columnHeadersCount = 0;\n    /**\r\n     * Cell renderer used to render cells content.\r\n     *\r\n     * @type {Function}\r\n     */\n\n    this.cellRenderer = cellRenderer;\n  }\n  /**\r\n   * Set row and column util classes.\r\n   *\r\n   * @param {RowUtils} rowUtils RowUtils instance which provides useful methods related to row sizes.\r\n   * @param {ColumnUtils} columnUtils ColumnUtils instance which provides useful methods related to row sizes.\r\n   */\n\n\n  _createClass(TableRenderer, [{\n    key: \"setAxisUtils\",\n    value: function setAxisUtils(rowUtils, columnUtils) {\n      this.rowUtils = rowUtils;\n      this.columnUtils = columnUtils;\n    }\n    /**\r\n     * Sets viewport size of the table.\r\n     *\r\n     * @param {number} rowsCount An amount of rows to render.\r\n     * @param {number} columnsCount An amount of columns to render.\r\n     */\n\n  }, {\n    key: \"setViewportSize\",\n    value: function setViewportSize(rowsCount, columnsCount) {\n      this.rowsToRender = rowsCount;\n      this.columnsToRender = columnsCount;\n    }\n    /**\r\n     * Sets row and column filter instances.\r\n     *\r\n     * @param {RowFilter} rowFilter Row filter instance which contains all necessary information about row index transformation.\r\n     * @param {ColumnFilter} columnFilter Cokumn filter instance  which contains all necessary information about row index transformation.\r\n     */\n\n  }, {\n    key: \"setFilters\",\n    value: function setFilters(rowFilter, columnFilter) {\n      this.rowFilter = rowFilter;\n      this.columnFilter = columnFilter;\n    }\n    /**\r\n     * Sets row and column header functions.\r\n     *\r\n     * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.\r\n     * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.\r\n     */\n\n  }, {\n    key: \"setHeaderContentRenderers\",\n    value: function setHeaderContentRenderers(rowHeaders, columnHeaders) {\n      this.rowHeaderFunctions = rowHeaders;\n      this.rowHeadersCount = rowHeaders.length;\n      this.columnHeaderFunctions = columnHeaders;\n      this.columnHeadersCount = columnHeaders.length;\n    }\n    /**\r\n     * Sets table renderers.\r\n     *\r\n     * @param {renderers} renderers The renderer units.\r\n     * @param {RowHeadersRenderer} renderers.rowHeaders Row headers renderer.\r\n     * @param {ColumnHeadersRenderer} renderers.columnHeaders Column headers renderer.\r\n     * @param {ColGroupRenderer} renderers.colGroup Col group renderer.\r\n     * @param {RowsRenderer} renderers.rows Rows renderer.\r\n     * @param {CellsRenderer} renderers.cells Cells renderer.\r\n     */\n\n  }, {\n    key: \"setRenderers\",\n    value: function setRenderers() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          rowHeaders = _ref2.rowHeaders,\n          columnHeaders = _ref2.columnHeaders,\n          colGroup = _ref2.colGroup,\n          rows = _ref2.rows,\n          cells = _ref2.cells;\n\n      rowHeaders.setTable(this);\n      columnHeaders.setTable(this);\n      colGroup.setTable(this);\n      rows.setTable(this);\n      cells.setTable(this);\n      this.rowHeaders = rowHeaders;\n      this.columnHeaders = columnHeaders;\n      this.colGroup = colGroup;\n      this.rows = rows;\n      this.cells = cells;\n    }\n    /**\r\n     * Transforms visual/rendered row index to source index.\r\n     *\r\n     * @param {number} rowIndex Rendered index.\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"renderedRowToSource\",\n    value: function renderedRowToSource(rowIndex) {\n      return this.rowFilter.renderedToSource(rowIndex);\n    }\n    /**\r\n     * Transforms visual/rendered column index to source index.\r\n     *\r\n     * @param {number} columnIndex Rendered index.\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"renderedColumnToSource\",\n    value: function renderedColumnToSource(columnIndex) {\n      return this.columnFilter.renderedToSource(columnIndex);\n    }\n    /**\r\n     * Renders the table.\r\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.colGroup.adjust();\n      this.columnHeaders.adjust();\n      this.rows.adjust();\n      this.rowHeaders.adjust();\n      this.columnHeaders.render();\n      this.rows.render();\n      this.rowHeaders.render();\n      this.cells.render(); // After the cells are rendered calculate columns width (or columns stretch width) to prepare proper values\n      // for colGroup renderer (which renders COL elements).\n\n      this.columnUtils.calculateWidths();\n      this.colGroup.render();\n      var rowsToRender = this.rowsToRender,\n          rows = this.rows; // Fix for multi-line content and for supporting `rowHeights` option.\n\n      for (var visibleRowIndex = 0; visibleRowIndex < rowsToRender; visibleRowIndex++) {\n        var TR = rows.getRenderedNode(visibleRowIndex);\n\n        if (TR.firstChild) {\n          var sourceRowIndex = this.renderedRowToSource(visibleRowIndex);\n          var rowHeight = this.rowUtils.getHeight(sourceRowIndex);\n\n          if (rowHeight) {\n            // Decrease height. 1 pixel will be \"replaced\" by 1px border top\n            TR.firstChild.style.height = \"\".concat(rowHeight - 1, \"px\");\n          } else {\n            TR.firstChild.style.height = '';\n          }\n        }\n      }\n    }\n  }]);\n\n  return TableRenderer;\n}();\n\nexport { TableRenderer as default };","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/3rdparty/walkontable/src/renderer/table.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","TableRenderer","rootNode","_ref","arguments","undefined","cellRenderer","rootDocument","ownerDocument","rowHeaders","columnHeaders","colGroup","rows","cells","rowFilter","columnFilter","rowUtils","columnUtils","rowsToRender","columnsToRender","rowHeaderFunctions","rowHeadersCount","columnHeaderFunctions","columnHeadersCount","value","setAxisUtils","setViewportSize","rowsCount","columnsCount","setFilters","setHeaderContentRenderers","setRenderers","_ref2","setTable","renderedRowToSource","rowIndex","renderedToSource","renderedColumnToSource","columnIndex","render","adjust","calculateWidths","visibleRowIndex","TR","getRenderedNode","firstChild","sourceRowIndex","rowHeight","getHeight","style","height","concat","default"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\n/**\r\n * TableRenderer class collects all renderers and properties necessary for table creation. It's\r\n * responsible for adjusting and rendering each renderer.\r\n *\r\n * Below is a diagram of the renderers together with an indication of what they are responisble for.\r\n *   <table>\r\n *     <colgroup>  \\ (root node)\r\n *       <col>      \\\r\n *       <col>       \\___ ColGroupRenderer\r\n *       <col>       /\r\n *       <col>      /\r\n *     </colgroup> /\r\n *     <thead>     \\ (root node)\r\n *       <tr>       \\\r\n *         <th>      \\\r\n *         <th>       \\____ ColumnHeadersRenderer\r\n *         <th>       /\r\n *         <th>      /\r\n *       </tr>      /\r\n *     </thead>    /\r\n *     <tbody>   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\ (root node)\r\n *       <tr>   (root node)          \\\r\n *         <th>  --- RowHeadersRenderer\r\n *         <td>  \\                     \\\r\n *         <td>   -- CellsRenderer      \\\r\n *         <td>  /                       \\\r\n *       </tr>                            \\\r\n *       <tr>   (root node)                \\\r\n *         <th>  --- RowHeadersRenderer     \\\r\n *         <td>  \\                           \\___ RowsRenderer\r\n *         <td>   -- CellsRenderer           /\r\n *         <td>  /                          /\r\n *       </tr>                             /\r\n *       <tr>   (root node)               /\r\n *         <th>  --- RowHeadersRenderer  /\r\n *         <td>  \\                      /\r\n *         <td>   -- CellsRenderer     /\r\n *         <td>  /                    /\r\n *       </tr>                       /\r\n *     </tbody>  ___________________/\r\n *   </table>.\r\n *\r\n * @class {RowsRenderer}\r\n */\r\nvar TableRenderer = /*#__PURE__*/function () {\r\n  function TableRenderer(rootNode) {\r\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n        cellRenderer = _ref.cellRenderer;\r\n\r\n    _classCallCheck(this, TableRenderer);\r\n\r\n    /**\r\n     * Table element which will be used to render the children element.\r\n     *\r\n     * @type {HTMLTableElement}\r\n     */\r\n    this.rootNode = rootNode;\r\n    /**\r\n     * Document owner of the root node.\r\n     *\r\n     * @type {HTMLDocument}\r\n     */\r\n\r\n    this.rootDocument = this.rootNode.ownerDocument;\r\n    /**\r\n     * Renderer class responsible for rendering row headers.\r\n     *\r\n     * @type {RowsRenderer}\r\n     */\r\n\r\n    this.rowHeaders = null;\r\n    /**\r\n     * Renderer class responsible for rendering column headers.\r\n     *\r\n     * @type {ColumnHeadersRenderer}\r\n     */\r\n\r\n    this.columnHeaders = null;\r\n    /**\r\n     * Renderer class responsible for rendering col in colgroup.\r\n     *\r\n     * @type {ColGroupRenderer}\r\n     */\r\n\r\n    this.colGroup = null;\r\n    /**\r\n     * Renderer class responsible for rendering rows in tbody.\r\n     *\r\n     * @type {RowsRenderer}\r\n     */\r\n\r\n    this.rows = null;\r\n    /**\r\n     * Renderer class responsible for rendering cells.\r\n     *\r\n     * @type {CellsRenderer}\r\n     */\r\n\r\n    this.cells = null;\r\n    /**\r\n     * Row filter which contains all necessary information about row index transformation.\r\n     *\r\n     * @type {RowFilter}\r\n     */\r\n\r\n    this.rowFilter = null;\r\n    /**\r\n     * Column filter which contains all necessary information about column index transformation.\r\n     *\r\n     * @type {ColumnFilter}\r\n     */\r\n\r\n    this.columnFilter = null;\r\n    /**\r\n     * Row utils class which contains all necessary information about sizes of the rows.\r\n     *\r\n     * @type {RowUtils}\r\n     */\r\n\r\n    this.rowUtils = null;\r\n    /**\r\n     * Column utils class which contains all necessary information about sizes of the columns.\r\n     *\r\n     * @type {ColumnUtils}\r\n     */\r\n\r\n    this.columnUtils = null;\r\n    /**\r\n     * Indicates how much rows should be rendered to fill whole table viewport.\r\n     *\r\n     * @type {number}\r\n     */\r\n\r\n    this.rowsToRender = 0;\r\n    /**\r\n     * Indicates how much columns should be rendered to fill whole table viewport.\r\n     *\r\n     * @type {number}\r\n     */\r\n\r\n    this.columnsToRender = 0;\r\n    /**\r\n     * An array of functions to be used as a content factory to row headers.\r\n     *\r\n     * @type {Function[]}\r\n     */\r\n\r\n    this.rowHeaderFunctions = [];\r\n    /**\r\n     * Count of the function used to render row headers.\r\n     *\r\n     * @type {number}\r\n     */\r\n\r\n    this.rowHeadersCount = 0;\r\n    /**\r\n     * An array of functions to be used as a content factory to column headers.\r\n     *\r\n     * @type {Function[]}\r\n     */\r\n\r\n    this.columnHeaderFunctions = [];\r\n    /**\r\n     * Count of the function used to render column headers.\r\n     *\r\n     * @type {number}\r\n     */\r\n\r\n    this.columnHeadersCount = 0;\r\n    /**\r\n     * Cell renderer used to render cells content.\r\n     *\r\n     * @type {Function}\r\n     */\r\n\r\n    this.cellRenderer = cellRenderer;\r\n  }\r\n  /**\r\n   * Set row and column util classes.\r\n   *\r\n   * @param {RowUtils} rowUtils RowUtils instance which provides useful methods related to row sizes.\r\n   * @param {ColumnUtils} columnUtils ColumnUtils instance which provides useful methods related to row sizes.\r\n   */\r\n\r\n\r\n  _createClass(TableRenderer, [{\r\n    key: \"setAxisUtils\",\r\n    value: function setAxisUtils(rowUtils, columnUtils) {\r\n      this.rowUtils = rowUtils;\r\n      this.columnUtils = columnUtils;\r\n    }\r\n    /**\r\n     * Sets viewport size of the table.\r\n     *\r\n     * @param {number} rowsCount An amount of rows to render.\r\n     * @param {number} columnsCount An amount of columns to render.\r\n     */\r\n\r\n  }, {\r\n    key: \"setViewportSize\",\r\n    value: function setViewportSize(rowsCount, columnsCount) {\r\n      this.rowsToRender = rowsCount;\r\n      this.columnsToRender = columnsCount;\r\n    }\r\n    /**\r\n     * Sets row and column filter instances.\r\n     *\r\n     * @param {RowFilter} rowFilter Row filter instance which contains all necessary information about row index transformation.\r\n     * @param {ColumnFilter} columnFilter Cokumn filter instance  which contains all necessary information about row index transformation.\r\n     */\r\n\r\n  }, {\r\n    key: \"setFilters\",\r\n    value: function setFilters(rowFilter, columnFilter) {\r\n      this.rowFilter = rowFilter;\r\n      this.columnFilter = columnFilter;\r\n    }\r\n    /**\r\n     * Sets row and column header functions.\r\n     *\r\n     * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.\r\n     * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.\r\n     */\r\n\r\n  }, {\r\n    key: \"setHeaderContentRenderers\",\r\n    value: function setHeaderContentRenderers(rowHeaders, columnHeaders) {\r\n      this.rowHeaderFunctions = rowHeaders;\r\n      this.rowHeadersCount = rowHeaders.length;\r\n      this.columnHeaderFunctions = columnHeaders;\r\n      this.columnHeadersCount = columnHeaders.length;\r\n    }\r\n    /**\r\n     * Sets table renderers.\r\n     *\r\n     * @param {renderers} renderers The renderer units.\r\n     * @param {RowHeadersRenderer} renderers.rowHeaders Row headers renderer.\r\n     * @param {ColumnHeadersRenderer} renderers.columnHeaders Column headers renderer.\r\n     * @param {ColGroupRenderer} renderers.colGroup Col group renderer.\r\n     * @param {RowsRenderer} renderers.rows Rows renderer.\r\n     * @param {CellsRenderer} renderers.cells Cells renderer.\r\n     */\r\n\r\n  }, {\r\n    key: \"setRenderers\",\r\n    value: function setRenderers() {\r\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\r\n          rowHeaders = _ref2.rowHeaders,\r\n          columnHeaders = _ref2.columnHeaders,\r\n          colGroup = _ref2.colGroup,\r\n          rows = _ref2.rows,\r\n          cells = _ref2.cells;\r\n\r\n      rowHeaders.setTable(this);\r\n      columnHeaders.setTable(this);\r\n      colGroup.setTable(this);\r\n      rows.setTable(this);\r\n      cells.setTable(this);\r\n      this.rowHeaders = rowHeaders;\r\n      this.columnHeaders = columnHeaders;\r\n      this.colGroup = colGroup;\r\n      this.rows = rows;\r\n      this.cells = cells;\r\n    }\r\n    /**\r\n     * Transforms visual/rendered row index to source index.\r\n     *\r\n     * @param {number} rowIndex Rendered index.\r\n     * @returns {number}\r\n     */\r\n\r\n  }, {\r\n    key: \"renderedRowToSource\",\r\n    value: function renderedRowToSource(rowIndex) {\r\n      return this.rowFilter.renderedToSource(rowIndex);\r\n    }\r\n    /**\r\n     * Transforms visual/rendered column index to source index.\r\n     *\r\n     * @param {number} columnIndex Rendered index.\r\n     * @returns {number}\r\n     */\r\n\r\n  }, {\r\n    key: \"renderedColumnToSource\",\r\n    value: function renderedColumnToSource(columnIndex) {\r\n      return this.columnFilter.renderedToSource(columnIndex);\r\n    }\r\n    /**\r\n     * Renders the table.\r\n     */\r\n\r\n  }, {\r\n    key: \"render\",\r\n    value: function render() {\r\n      this.colGroup.adjust();\r\n      this.columnHeaders.adjust();\r\n      this.rows.adjust();\r\n      this.rowHeaders.adjust();\r\n      this.columnHeaders.render();\r\n      this.rows.render();\r\n      this.rowHeaders.render();\r\n      this.cells.render(); // After the cells are rendered calculate columns width (or columns stretch width) to prepare proper values\r\n      // for colGroup renderer (which renders COL elements).\r\n\r\n      this.columnUtils.calculateWidths();\r\n      this.colGroup.render();\r\n      var rowsToRender = this.rowsToRender,\r\n          rows = this.rows; // Fix for multi-line content and for supporting `rowHeights` option.\r\n\r\n      for (var visibleRowIndex = 0; visibleRowIndex < rowsToRender; visibleRowIndex++) {\r\n        var TR = rows.getRenderedNode(visibleRowIndex);\r\n\r\n        if (TR.firstChild) {\r\n          var sourceRowIndex = this.renderedRowToSource(visibleRowIndex);\r\n          var rowHeight = this.rowUtils.getHeight(sourceRowIndex);\r\n\r\n          if (rowHeight) {\r\n            // Decrease height. 1 pixel will be \"replaced\" by 1px border top\r\n            TR.firstChild.style.height = \"\".concat(rowHeight - 1, \"px\");\r\n          } else {\r\n            TR.firstChild.style.height = '';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }]);\r\n\r\n  return TableRenderer;\r\n}();\r\n\r\nexport { TableRenderer as default };"]},"metadata":{},"sourceType":"module"}