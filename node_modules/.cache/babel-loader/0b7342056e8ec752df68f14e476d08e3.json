{"ast":null,"code":"import { loadAsync } from 'jszip';\n/**\r\n * Reads XLSX file in a browser.\r\n * @param  {file} file - A file being uploaded in the browser.\r\n * @return {Promise} Resolves to an object holding XLSX file entries.\r\n */\n\nexport default function unpackXlsxFile(file) {\n  var files = {};\n  return loadAsync(file).then(function (zip) {\n    var files = [];\n    zip.forEach(function (relativePath, zipEntry) {\n      if (!zipEntry.dir) {\n        files.push(zipEntry.name);\n      }\n    });\n    var entries = {};\n    return Promise.all(files.map(function (file) {\n      return zip.file(file).async('string').then(function (content) {\n        return entries[file] = content;\n      });\n    })).then(function () {\n      return entries;\n    });\n  });\n}","map":{"version":3,"sources":["../source/unpackXlsxFileBrowser.js"],"names":["files","zip","zipEntry","entries"],"mappings":"AAAA,SAAA,SAAA,QAAA,OAAA;AAEA;;;;;;AAKA,eAAe,SAAA,cAAA,CAAA,IAAA,EAA8B;AAC5C,MAAMA,KAAAA,GAAN,EAAA;AAEA,SAAO,SAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAqB,UAAA,GAAA,EAAS;AACpC,QAAMA,KAAAA,GAAN,EAAA;AACAC,IAAAA,GAAAA,CAAAA,OAAAA,CAAY,UAAA,YAAA,EAAA,QAAA,EAA4B;AACvC,UAAI,CAACC,QAAAA,CAAL,GAAA,EAAmB;AAClBF,QAAAA,KAAAA,CAAAA,IAAAA,CAAWE,QAAAA,CAAXF,IAAAA;AACA;AAHFC,KAAAA;AAMA,QAAME,OAAAA,GAAN,EAAA;AACA,WAAO,OAAA,CAAA,GAAA,CAAY,KAAA,CAAA,GAAA,CAAU,UAAA,IAAA,EAAU;AACtC,aAAO,GAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,QAAA,EAAA,IAAA,CAAoC,UAAA,OAAA,EAAA;AAAA,eAAWA,OAAAA,CAAAA,IAAAA,CAAAA,GAAX,OAAA;AAA3C,OAAO,CAAP;AADM,KAAY,CAAZ,EAAA,IAAA,CAGD,YAAA;AAAA,aAAA,OAAA;AAHN,KAAO,CAAP;AATD,GAAO,CAAP;AAcA","sourcesContent":["import { loadAsync } from 'jszip'\r\n\r\n/**\r\n * Reads XLSX file in a browser.\r\n * @param  {file} file - A file being uploaded in the browser.\r\n * @return {Promise} Resolves to an object holding XLSX file entries.\r\n */\r\nexport default function unpackXlsxFile(file) {\r\n\tconst files = {}\r\n\r\n\treturn loadAsync(file).then((zip) => {\r\n\t\tconst files = []\r\n\t\tzip.forEach((relativePath, zipEntry) => {\r\n\t\t\tif (!zipEntry.dir) {\r\n\t\t\t\tfiles.push(zipEntry.name)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tconst entries = {}\r\n\t\treturn Promise.all(files.map((file) => {\r\n\t\t\treturn zip.file(file).async('string').then(content => entries[file] = content)\r\n\t\t}))\r\n\t\t.then(() => entries)\r\n\t})\r\n}"]},"metadata":{},"sourceType":"module"}