{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\isotracker-dev\\\\isotracker-react\\\\src\\\\components\\\\qtrackerViewDataTable\\\\qtrackerViewDataTable.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Table } from 'antd';\nimport QtrackerNWCSpecPopUp from '../qtrackerNWCSpecPopUp/qtrackerNWCSpecPopUp';\nimport QtrackerNVNSpecPopUp from '../qtrackerNVNSpecPopUp/qtrackerNVNSpecPopUp';\nimport QtrackerNRISpecPopUp from '../qtrackerNRISpecPopUp/qtrackerNRISpecPopUp';\nimport QtrackerNRBSpecPopUp from '../qtrackerNRBSpecPopUp/qtrackerNRBSpecPopUp';\nimport QtrackerNRIDSSpecPopUp from '../qtrackerNRIDSSpecPopUp/qtrackerNRIDSSpecPopUp';\nimport QtrackerRPSpecPopUp from '../qtrackerRPSpecPopUp/qtrackerRPSpecPopUp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CryptoJS = require(\"crypto-js\");\n\nconst SecureStorage = require(\"secure-web-storage\");\n\nvar SECRET_KEY = 'sanud2ha8shd72h';\nvar secureStorage = new SecureStorage(localStorage, {\n  hash: function hash(key) {\n    key = CryptoJS.SHA256(key, SECRET_KEY);\n    return key.toString();\n  },\n  encrypt: function encrypt(data) {\n    data = CryptoJS.AES.encrypt(data, SECRET_KEY);\n    data = data.toString();\n    return data;\n  },\n  decrypt: function decrypt(data) {\n    data = CryptoJS.AES.decrypt(data, SECRET_KEY);\n    data = data.toString(CryptoJS.enc.Utf8);\n    return data;\n  }\n});\n\nclass QTrackerViewDataTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchText: '',\n      searchedColumn: '',\n      data: [],\n      tab: this.props.currentTab,\n      selectedRows: [],\n      selectedRowsKeys: [],\n      updateData: this.props.updateData,\n      username: \"\",\n      acronyms: null,\n      steps: []\n    };\n\n    this.getColumnSearchProps = dataIndex => ({\n      render: text => text\n    });\n\n    this.handleReset = clearFilters => {\n      clearFilters();\n      this.setState({\n        searchText: ''\n      });\n    };\n\n    this.onSelectChange = (selectedRowKeys, selectedRows) => {\n      let ids = [];\n\n      for (let i = 0; i < selectedRows.length; i++) {\n        ids.push(selectedRows[i].id.props.children);\n      }\n\n      this.setState({\n        selectedRowsKeys: selectedRowKeys,\n        selectedRows: selectedRows\n      }); //this.setState({ selectedRows: selectedRows });\n\n      this.props.onChange(ids);\n    };\n  }\n\n  async accept(id) {\n    const body = {\n      id: id,\n      email: secureStorage.getItem(\"user\")\n    };\n    const options = {\n      method: \"POst\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/acceptRequest\", options).then(response => response.json()).then(json => {\n      this.props.updateDataMethod();\n    });\n  }\n\n  async reject(id) {\n    const body = {\n      id: id,\n      email: secureStorage.getItem(\"user\")\n    };\n    const options = {\n      method: \"POst\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/rejectRequest\", options).then(response => response.json()).then(json => {\n      this.props.updateDataMethod();\n    });\n  }\n\n  async componentDidMount() {\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/qtracker/getNWC\", options).then(response => response.json()).then(async json => {\n      var rows = [];\n      var row = null;\n\n      for (let i = 0; i < json.rows.length; i++) {\n        row = {\n          incidence_number: json.rows[i].incidence_number,\n          user: json.rows[i].user,\n          created_at: json.rows[i].created_at.toString().substring(0, 10) + \" \" + json.rows[i].created_at.toString().substring(11, 19),\n          specifications: /*#__PURE__*/_jsxDEV(QtrackerNWCSpecPopUp, {\n            incidence_number: json.rows[i].incidence_number,\n            spref: json.rows[i].spref,\n            description: json.rows[i].description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 237\n          }, this)\n        };\n\n        if (json.rows[i].status === 0) {\n          row.status = \"PENDING\";\n          row.color = \"#www\";\n        } else if (json.rows[i].status === 1) {\n          row.status = \"IN PROGRESS\";\n          row.color = \"#yyy\";\n        } else if (json.rows[i].status === 2) {\n          row.status = \"READY\";\n          row.color = \"#ggg\";\n        } else {\n          row.status = \"REJECTED\";\n          row.color = \"#rrr\";\n        }\n\n        rows.push(row);\n      }\n\n      await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/qtracker/getNVN\", options).then(response => response.json()).then(async json => {\n        var row = null;\n\n        for (let i = 0; i < json.rows.length; i++) {\n          row = {\n            incidence_number: json.rows[i].incidence_number,\n            user: json.rows[i].user,\n            created_at: json.rows[i].created_at.toString().substring(0, 10) + \" \" + json.rows[i].created_at.toString().substring(11, 19),\n            specifications: /*#__PURE__*/_jsxDEV(QtrackerNVNSpecPopUp, {\n              incidence_number: json.rows[i].incidence_number,\n              name: json.rows[i].name,\n              description: json.rows[i].description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 241\n            }, this)\n          };\n\n          if (json.rows[i].status === 0) {\n            row.status = \"PENDING\";\n            row.color = \"#www\";\n          } else if (json.rows[i].status === 1) {\n            row.status = \"IN PROGRESS\";\n            row.color = \"#yyy\";\n          } else if (json.rows[i].status === 2) {\n            row.status = \"READY\";\n            row.color = \"#ggg\";\n          } else {\n            row.status = \"REJECTED\";\n            row.color = \"#rrr\";\n          }\n\n          rows.push(row);\n        }\n\n        await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/qtracker/getNRI\", options).then(response => response.json()).then(async json => {\n          var row = null;\n\n          for (let i = 0; i < json.rows.length; i++) {\n            row = {\n              incidence_number: json.rows[i].incidence_number,\n              user: json.rows[i].user,\n              created_at: json.rows[i].created_at.toString().substring(0, 10) + \" \" + json.rows[i].created_at.toString().substring(11, 19),\n              specifications: /*#__PURE__*/_jsxDEV(QtrackerNRISpecPopUp, {\n                incidence_number: json.rows[i].incidence_number,\n                pipe: json.rows[i].pipe,\n                description: json.rows[i].description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 245\n              }, this)\n            };\n\n            if (json.rows[i].status === 0) {\n              row.status = \"PENDING\";\n              row.color = \"#www\";\n            } else if (json.rows[i].status === 1) {\n              row.status = \"IN PROGRESS\";\n              row.color = \"#yyy\";\n            } else if (json.rows[i].status === 2) {\n              row.status = \"READY\";\n              row.color = \"#ggg\";\n            } else {\n              row.status = \"REJECTED\";\n              row.color = \"#rrr\";\n            }\n\n            rows.push(row);\n          }\n\n          await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/qtracker/getNRB\", options).then(response => response.json()).then(async json => {\n            var row = null;\n\n            for (let i = 0; i < json.rows.length; i++) {\n              row = {\n                incidence_number: json.rows[i].incidence_number,\n                user: json.rows[i].user,\n                created_at: json.rows[i].created_at.toString().substring(0, 10) + \" \" + json.rows[i].created_at.toString().substring(11, 19),\n                specifications: /*#__PURE__*/_jsxDEV(QtrackerNRBSpecPopUp, {\n                  incidence_number: json.rows[i].incidence_number,\n                  pipe: json.rows[i].pipe,\n                  description: json.rows[i].description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 249\n                }, this)\n              };\n\n              if (json.rows[i].status === 0) {\n                row.status = \"PENDING\";\n                row.color = \"#www\";\n              } else if (json.rows[i].status === 1) {\n                row.status = \"IN PROGRESS\";\n                row.color = \"#yyy\";\n              } else if (json.rows[i].status === 2) {\n                row.status = \"READY\";\n                row.color = \"#ggg\";\n              } else {\n                row.status = \"REJECTED\";\n                row.color = \"#rrr\";\n              }\n\n              rows.push(row);\n            }\n\n            await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/qtracker/getNRIDS\", options).then(response => response.json()).then(async json => {\n              var row = null;\n\n              for (let i = 0; i < json.rows.length; i++) {\n                row = {\n                  incidence_number: json.rows[i].incidence_number,\n                  user: json.rows[i].user,\n                  created_at: json.rows[i].created_at.toString().substring(0, 10) + \" \" + json.rows[i].created_at.toString().substring(11, 19),\n                  specifications: /*#__PURE__*/_jsxDEV(QtrackerNRIDSSpecPopUp, {\n                    incidence_number: json.rows[i].incidence_number,\n                    name: json.rows[i].name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 191,\n                    columnNumber: 253\n                  }, this)\n                };\n\n                if (json.rows[i].status === 0) {\n                  row.status = \"PENDING\";\n                  row.color = \"#www\";\n                } else if (json.rows[i].status === 1) {\n                  row.status = \"IN PROGRESS\";\n                  row.color = \"#yyy\";\n                } else if (json.rows[i].status === 2) {\n                  row.status = \"READY\";\n                  row.color = \"#ggg\";\n                } else {\n                  row.status = \"REJECTED\";\n                  row.color = \"#rrr\";\n                }\n\n                rows.push(row);\n              }\n\n              await fetch(\"http://\" + process.env.REACT_APP_SERVER + \":\" + process.env.REACT_APP_NODE_PORT + \"/qtracker/getRP\", options).then(response => response.json()).then(async json => {\n                var row = null;\n\n                for (let i = 0; i < json.rows.length; i++) {\n                  row = {\n                    incidence_number: json.rows[i].incidence_number,\n                    user: json.rows[i].user,\n                    created_at: json.rows[i].created_at.toString().substring(0, 10) + \" \" + json.rows[i].created_at.toString().substring(11, 19),\n                    specifications: /*#__PURE__*/_jsxDEV(QtrackerRPSpecPopUp, {\n                      incidence_number: json.rows[i].incidence_number,\n                      items: json.rows[i].items_to_report,\n                      scope: json.rows[i].scope,\n                      description: json.rows[i].description\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 213,\n                      columnNumber: 257\n                    }, this)\n                  };\n\n                  if (json.rows[i].status === 0) {\n                    row.status = \"PENDING\";\n                    row.color = \"#www\";\n                  } else if (json.rows[i].status === 1) {\n                    row.status = \"IN PROGRESS\";\n                    row.color = \"#yyy\";\n                  } else if (json.rows[i].status === 2) {\n                    row.status = \"READY\";\n                    row.color = \"#ggg\";\n                  } else {\n                    row.status = \"REJECTED\";\n                    row.color = \"#rrr\";\n                  }\n\n                  rows.push(row);\n                }\n\n                await this.setState({\n                  data: rows\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    if (prevProps !== this.props) {\n      const options = {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n    }\n  }\n\n  render() {\n    const columns = [{\n      title: /*#__PURE__*/_jsxDEV(\"center\", {\n        className: \"dataTable__header__text\",\n        children: \"Reference\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'incidence_number',\n      key: 'incidence_number',\n      ...this.getColumnSearchProps('incidence_number'),\n      sorter: {\n        compare: (a, b) => a.incidence_number.localeCompare(b.incidence_number)\n      }\n    }, {\n      title: /*#__PURE__*/_jsxDEV(\"center\", {\n        className: \"dataTable__header__text\",\n        children: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'user',\n      key: 'user',\n      ...this.getColumnSearchProps('user'),\n      sorter: {\n        compare: (a, b) => a.user.localeCompare(b.user)\n      }\n    }, {\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dataTable__header__text\",\n        children: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      ...this.getColumnSearchProps('created_at'),\n      sorter: {\n        compare: (a, b) => {\n          return a.created_at.localeCompare(b.created_at);\n        },\n        sortOrder: asc\n      }\n    }, {\n      title: /*#__PURE__*/_jsxDEV(\"center\", {\n        className: \"dataTable__header__text\",\n        children: \"Actions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'specifications',\n      key: 'specifications',\n      ...this.getColumnSearchProps('specifications'),\n      width: \"101px\"\n    }, {\n      title: /*#__PURE__*/_jsxDEV(\"center\", {\n        className: \"dataTable__header__text\",\n        children: \"Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 16\n      }, this),\n      dataIndex: 'status',\n      key: 'status',\n      ...this.getColumnSearchProps('status'),\n      sorter: {\n        compare: (a, b) => a.status.localeCompare(b.status)\n      }\n    }];\n    var totalElements = null;\n\n    if (this.state.data.length === 0) {\n      totalElements = null;\n    } else {\n      totalElements = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          bottom: 25,\n          left: 0\n        },\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\"Total elements: \", this.state.data.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 24\n      }, this);\n    }\n\n    console.log(this.state.data);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.updateData, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"estimatedDataTable__container\",\n        style: {\n          width: \"auto\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Table, {\n          className: \"customTable\",\n          bordered: true,\n          columns: columns,\n          dataSource: this.state.data,\n          scroll: {\n            y: 437\n          },\n          pagination: {\n            disabled: true,\n            defaultPageSize: 5000\n          },\n          size: \"small\",\n          rowClassName: record => record.color.replace('#', '')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 9\n        }, this), totalElements]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default QTrackerViewDataTable;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/src/components/qtrackerViewDataTable/qtrackerViewDataTable.js"],"names":["React","Table","QtrackerNWCSpecPopUp","QtrackerNVNSpecPopUp","QtrackerNRISpecPopUp","QtrackerNRBSpecPopUp","QtrackerNRIDSSpecPopUp","QtrackerRPSpecPopUp","CryptoJS","require","SecureStorage","SECRET_KEY","secureStorage","localStorage","hash","key","SHA256","toString","encrypt","data","AES","decrypt","enc","Utf8","QTrackerViewDataTable","Component","state","searchText","searchedColumn","tab","props","currentTab","selectedRows","selectedRowsKeys","updateData","username","acronyms","steps","getColumnSearchProps","dataIndex","render","text","handleReset","clearFilters","setState","onSelectChange","selectedRowKeys","ids","i","length","push","id","children","onChange","accept","body","email","getItem","options","method","headers","JSON","stringify","fetch","process","env","REACT_APP_SERVER","REACT_APP_NODE_PORT","then","response","json","updateDataMethod","reject","componentDidMount","rows","row","incidence_number","user","created_at","substring","specifications","spref","description","status","color","name","pipe","items_to_report","scope","componentDidUpdate","prevProps","prevState","columns","title","sorter","compare","a","b","localeCompare","sortOrder","asc","width","totalElements","position","bottom","left","console","log","y","disabled","defaultPageSize","record","replace"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Table } from 'antd';\r\nimport QtrackerNWCSpecPopUp from '../qtrackerNWCSpecPopUp/qtrackerNWCSpecPopUp';\r\nimport QtrackerNVNSpecPopUp from '../qtrackerNVNSpecPopUp/qtrackerNVNSpecPopUp';\r\nimport QtrackerNRISpecPopUp from '../qtrackerNRISpecPopUp/qtrackerNRISpecPopUp';\r\nimport QtrackerNRBSpecPopUp from '../qtrackerNRBSpecPopUp/qtrackerNRBSpecPopUp';\r\nimport QtrackerNRIDSSpecPopUp from '../qtrackerNRIDSSpecPopUp/qtrackerNRIDSSpecPopUp';\r\nimport QtrackerRPSpecPopUp from '../qtrackerRPSpecPopUp/qtrackerRPSpecPopUp';\r\n\r\nconst CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n\r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\nclass QTrackerViewDataTable extends React.Component{\r\n  state = {\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    data: [],\r\n    tab: this.props.currentTab,\r\n    selectedRows: [],\r\n    selectedRowsKeys: [],\r\n    updateData: this.props.updateData,\r\n    username: \"\",\r\n    acronyms : null,\r\n    steps: []\r\n  };\r\n\r\n  async accept(id){\r\n    const body = {\r\n      id: id,\r\n      email: secureStorage.getItem(\"user\")\r\n    }\r\n    const options = {\r\n      method: \"POst\",\r\n      headers: {\r\n          \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/acceptRequest\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n      this.props.updateDataMethod()\r\n    })\r\n  }\r\n\r\n  async reject(id){\r\n    const body = {\r\n      id: id,\r\n      email: secureStorage.getItem(\"user\")\r\n    }\r\n    const options = {\r\n      method: \"POst\",\r\n      headers: {\r\n          \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    }\r\n    fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/rejectRequest\", options)\r\n    .then(response => response.json())\r\n    .then(json =>{\r\n      this.props.updateDataMethod()\r\n    })\r\n  }\r\n\r\n  async componentDidMount(){\r\n\r\n    const options = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n    }\r\n\r\n    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNWC\", options)\r\n        .then(response => response.json())\r\n        .then(async json => {\r\n          var rows = []\r\n          var row = null\r\n            for(let i = 0; i < json.rows.length; i++){\r\n                row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNWCSpecPopUp incidence_number={json.rows[i].incidence_number} spref={json.rows[i].spref} description={json.rows[i].description}/>}\r\n                if(json.rows[i].status === 0){\r\n                    row.status = \"PENDING\"\r\n                    row.color = \"#www\"\r\n                }else if(json.rows[i].status === 1){\r\n                    row.status = \"IN PROGRESS\"\r\n                    row.color = \"#yyy\"\r\n                }else if(json.rows[i].status === 2){\r\n                    row.status = \"READY\"\r\n                    row.color = \"#ggg\"\r\n                }else{\r\n                    row.status = \"REJECTED\"\r\n                    row.color = \"#rrr\"\r\n                }\r\n                rows.push(row)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNVN\", options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n            var row = null\r\n                for(let i = 0; i < json.rows.length; i++){\r\n                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNVNSpecPopUp incidence_number={json.rows[i].incidence_number} name={json.rows[i].name} description={json.rows[i].description}/>}\r\n                    if(json.rows[i].status === 0){\r\n                        row.status = \"PENDING\"\r\n                        row.color = \"#www\"\r\n                    }else if(json.rows[i].status === 1){\r\n                        row.status = \"IN PROGRESS\"\r\n                        row.color = \"#yyy\"\r\n                    }else if(json.rows[i].status === 2){\r\n                        row.status = \"READY\"\r\n                        row.color = \"#ggg\"\r\n                    }else{\r\n                        row.status = \"REJECTED\"\r\n                        row.color = \"#rrr\"\r\n                    }\r\n                    rows.push(row)\r\n                }\r\n                \r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNRI\", options)\r\n                .then(response => response.json())\r\n                .then(async json => {\r\n                var row = null\r\n                    for(let i = 0; i < json.rows.length; i++){\r\n                        row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNRISpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/>}\r\n                        if(json.rows[i].status === 0){\r\n                            row.status = \"PENDING\"\r\n                            row.color = \"#www\"\r\n                        }else if(json.rows[i].status === 1){\r\n                            row.status = \"IN PROGRESS\"\r\n                            row.color = \"#yyy\"\r\n                        }else if(json.rows[i].status === 2){\r\n                            row.status = \"READY\"\r\n                            row.color = \"#ggg\"\r\n                        }else{\r\n                            row.status = \"REJECTED\"\r\n                            row.color = \"#rrr\"\r\n                        }\r\n                        rows.push(row)\r\n                    }\r\n                    \r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNRB\", options)\r\n                    .then(response => response.json())\r\n                    .then(async json => {\r\n                    var row = null\r\n                        for(let i = 0; i < json.rows.length; i++){\r\n                            row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNRBSpecPopUp incidence_number={json.rows[i].incidence_number} pipe={json.rows[i].pipe} description={json.rows[i].description}/>}\r\n                            if(json.rows[i].status === 0){\r\n                                row.status = \"PENDING\"\r\n                                row.color = \"#www\"\r\n                            }else if(json.rows[i].status === 1){\r\n                                row.status = \"IN PROGRESS\"\r\n                                row.color = \"#yyy\"\r\n                            }else if(json.rows[i].status === 2){\r\n                                row.status = \"READY\"\r\n                                row.color = \"#ggg\"\r\n                            }else{\r\n                                row.status = \"REJECTED\"\r\n                                row.color = \"#rrr\"\r\n                            }\r\n                            rows.push(row)\r\n                        }\r\n                        \r\n                        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getNRIDS\", options)\r\n                        .then(response => response.json())\r\n                        .then(async json => {\r\n                        var row = null\r\n                            for(let i = 0; i < json.rows.length; i++){\r\n                                row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerNRIDSSpecPopUp incidence_number={json.rows[i].incidence_number} name={json.rows[i].name}/>}\r\n                                if(json.rows[i].status === 0){\r\n                                    row.status = \"PENDING\"\r\n                                    row.color = \"#www\"\r\n                                }else if(json.rows[i].status === 1){\r\n                                    row.status = \"IN PROGRESS\"\r\n                                    row.color = \"#yyy\"\r\n                                }else if(json.rows[i].status === 2){\r\n                                    row.status = \"READY\"\r\n                                    row.color = \"#ggg\"\r\n                                }else{\r\n                                    row.status = \"REJECTED\"\r\n                                    row.color = \"#rrr\"\r\n                                }\r\n                                rows.push(row)\r\n                            }\r\n                            \r\n                            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/qtracker/getRP\", options)\r\n                            .then(response => response.json())\r\n                            .then(async json => {\r\n                            var row = null\r\n                                for(let i = 0; i < json.rows.length; i++){\r\n                                    row = {incidence_number: json.rows[i].incidence_number, user: json.rows[i].user, created_at: json.rows[i].created_at.toString().substring(0,10) + \" \"+ json.rows[i].created_at.toString().substring(11,19), specifications: <QtrackerRPSpecPopUp incidence_number={json.rows[i].incidence_number} items={json.rows[i].items_to_report} scope={json.rows[i].scope} description={json.rows[i].description}/>}\r\n                                    if(json.rows[i].status === 0){\r\n                                        row.status = \"PENDING\"\r\n                                        row.color = \"#www\"\r\n                                    }else if(json.rows[i].status === 1){\r\n                                        row.status = \"IN PROGRESS\"\r\n                                        row.color = \"#yyy\"\r\n                                    }else if(json.rows[i].status === 2){\r\n                                        row.status = \"READY\"\r\n                                        row.color = \"#ggg\"\r\n                                    }else{\r\n                                        row.status = \"REJECTED\"\r\n                                        row.color = \"#rrr\"\r\n                                    }\r\n                                    rows.push(row)\r\n                                }\r\n                                \r\n                                await this.setState({data: rows})\r\n\r\n                            })\r\n\r\n                        })\r\n\r\n                    })\r\n\r\n                })\r\n\r\n            })\r\n            \r\n        })\r\n\r\n    \r\n\r\n\r\n  }\r\n\r\n\r\n  async componentDidUpdate(prevProps, prevState){\r\n    \r\n    if(prevProps !== this.props){\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }\r\n    }\r\n\r\n  }\r\n  \r\n\r\n  \r\n  getColumnSearchProps = dataIndex => ({\r\n    \r\n    render: text => \r\n      \r\n      text\r\n    \r\n      \r\n  });\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys, selectedRows) => {\r\n    let ids = []\r\n    for(let i = 0; i < selectedRows.length; i++){\r\n      ids.push(selectedRows[i].id.props.children)\r\n    }\r\n    this.setState({\r\n      selectedRowsKeys: selectedRowKeys,\r\n      selectedRows: selectedRows\r\n    })\r\n    //this.setState({ selectedRows: selectedRows });\r\n    this.props.onChange(ids);\r\n    \r\n  };\r\n  \r\n\r\n  render() {\r\n\r\n    const columns = [\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Reference</center>,\r\n        dataIndex: 'incidence_number',\r\n        key: 'incidence_number',\r\n        ...this.getColumnSearchProps('incidence_number'),\r\n        sorter:{\r\n          compare: (a, b) => a.incidence_number.localeCompare(b.incidence_number),\r\n        },\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">User</center>,\r\n        dataIndex: 'user',\r\n        key: 'user',\r\n        ...this.getColumnSearchProps('user'),\r\n        sorter:{\r\n          compare: (a, b) => a.user.localeCompare(b.user),\r\n        },\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">Date</div>,\r\n        dataIndex: 'created_at',\r\n        key: 'created_at',\r\n        ...this.getColumnSearchProps('created_at'),\r\n        sorter: {\r\n          compare: (a, b) => { return a.created_at.localeCompare(b.created_at)},\r\n          sortOrder: asc\r\n        },\r\n        \r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Actions</center>,\r\n        dataIndex: 'specifications',\r\n        key: 'specifications',\r\n        ...this.getColumnSearchProps('specifications'),\r\n        width: \"101px\"\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Status</center>,\r\n        dataIndex: 'status',\r\n        key: 'status',\r\n        ...this.getColumnSearchProps('status'),\r\n        sorter:{\r\n          compare: (a, b) => a.status.localeCompare(b.status),\r\n        },\r\n      },\r\n    ]\r\n\r\n    var totalElements = null;\r\n    if (this.state.data.length === 0){\r\n      totalElements = null;\r\n    }else{\r\n      totalElements = (<div style={{position: \"absolute\", bottom: 25, left:0}}>\r\n      <b>Total elements: {this.state.data.length}</b>\r\n     </div>);\r\n    }\r\n    console.log(this.state.data)\r\n    return (\r\n      <div>\r\n        {this.state.updateData}\r\n        <div className=\"estimatedDataTable__container\" style={{width:\"auto\"}}>\r\n        <Table className=\"customTable\" bordered = {true} columns={columns} dataSource={this.state.data} scroll={{y:437}} pagination={{disabled:true, defaultPageSize:5000}} size=\"small\"\r\n         rowClassName= {(record) => record.color.replace('#', '')}/>\r\n          {totalElements}\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QTrackerViewDataTable;"]},"metadata":{},"sourceType":"module"}