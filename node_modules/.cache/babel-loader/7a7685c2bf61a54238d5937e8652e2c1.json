{"ast":null,"code":"import { createCanvas, getMouseCoordinates, isCanvasSupported } from '../helpers/utils';\n\nfunction EventManager(chart) {\n  this.chart = chart;\n  this.lastObjectId = 0;\n\n  var _this = this;\n\n  this.objectMap = [];\n  this.rectangularRegionEventSubscriptions = [];\n  this.previousDataPointEventObject = null; //this.previousDataSeriesEventObject = null;\n\n  this.ghostCanvas = createCanvas(this.chart.width, this.chart.height); //this.ghostCanvas.width = this.chart.width;\n  //this.ghostCanvas.height = this.chart.height;\n\n  this.ghostCtx = this.ghostCanvas.getContext(\"2d\");\n\n  var eventHandler = function (ev) {\n    _this.mouseEventHandler.call(_this, ev);\n  };\n\n  this.mouseoveredObjectMaps = []; //this.chart.canvas.addEventListener(\"mouseover\", eventHandler);\n  //this.chart.canvas.addEventListener(\"mousemove\", eventHandler);\n  //this.chart.canvas.addEventListener(\"mouseout\", eventHandler);\n  //this.chart.canvas.addEventListener(\"click\", eventHandler);\n}\n\nEventManager.prototype.reset = function () {\n  this.lastObjectId = 0;\n  this.objectMap = [];\n  this.rectangularRegionEventSubscriptions = [];\n  this.previousDataPointEventObject = null;\n  this.eventObjects = []; //this.ghostCanvas.width = this.chart.width;\n  //this.ghostCanvas.height = this.chart.height;\n\n  if (isCanvasSupported) {\n    this.ghostCtx.clearRect(0, 0, this.chart.width, this.chart.height);\n    this.ghostCtx.beginPath();\n  }\n};\n\nEventManager.prototype.getNewObjectTrackingId = function () {\n  return ++this.lastObjectId;\n};\n\nEventManager.prototype.mouseEventHandler = function (ev) {\n  if (ev.type !== \"mousemove\" && ev.type !== \"click\") return;\n  var eventObjectMaps = [];\n  var xy = getMouseCoordinates(ev);\n  var id = null; //var dataPointInfo = this.chart.getDataPointAtXY(xy.x, xy.y, false);\n  //if (dataPointInfo) {\n  //\tid = dataPointInfo.dataSeries.dataPointIds[dataPointInfo.dataPointIndex];\n  //} else if (isCanvasSupported) {//IE9+\n  //\tid = getObjectId(xy.x, xy.y, this.ghostCtx);\n  //}\n\n  id = this.chart.getObjectAtXY(xy.x, xy.y, false);\n\n  if (id && typeof this.objectMap[id] !== \"undefined\") {\n    var eventObjectMap = this.objectMap[id];\n\n    if (eventObjectMap.objectType === \"dataPoint\") {\n      var dataSeries = this.chart.data[eventObjectMap.dataSeriesIndex];\n      var dataPoint = dataSeries.dataPoints[eventObjectMap.dataPointIndex];\n      var dataPointIndex = eventObjectMap.dataPointIndex; //Event Parameter should not contain reference to dataSeries directly. But to its options.\n\n      eventObjectMap.eventParameter = {\n        x: xy.x,\n        y: xy.y,\n        dataPoint: dataPoint,\n        dataSeries: dataSeries._options,\n        dataPointIndex: dataPointIndex,\n        dataSeriesIndex: dataSeries.index,\n        chart: this.chart._publicChartReference\n      };\n      eventObjectMap.eventContext = {\n        context: dataPoint,\n        userContext: dataPoint,\n        mouseover: \"mouseover\",\n        mousemove: \"mousemove\",\n        mouseout: \"mouseout\",\n        click: \"click\"\n      };\n      eventObjectMaps.push(eventObjectMap); //Add Dataseries too because mouse event on dataPoint also means there is an event on dataSeries. DataSeries is not present on ghost canvas\n\n      eventObjectMap = this.objectMap[dataSeries.id]; //Event Parameter should not contain reference to dataSeries directly. But to its options.\n\n      eventObjectMap.eventParameter = {\n        x: xy.x,\n        y: xy.y,\n        dataPoint: dataPoint,\n        dataSeries: dataSeries._options,\n        dataPointIndex: dataPointIndex,\n        dataSeriesIndex: dataSeries.index,\n        chart: this.chart._publicChartReference\n      };\n      eventObjectMap.eventContext = {\n        context: dataSeries,\n        userContext: dataSeries._options,\n        mouseover: \"mouseover\",\n        mousemove: \"mousemove\",\n        mouseout: \"mouseout\",\n        click: \"click\"\n      };\n      eventObjectMaps.push(this.objectMap[dataSeries.id]);\n    } //else if (eventObjectMap.objectType === \"stripLine\") {\n    //\t//Event Parameter should not contain reference to stripLine directly. But to its options.\n    //\teventObjectMap.eventParameter = { x: xy.x, y: xy.y, stripLine: eventObjectMap.stripLine._options, axis: eventObjectMap.axis._options, stripLineIndex: eventObjectMap.stripLineIndex };\n    //\teventObjectMap.eventContext = { context: eventObjectMap.stripLine, userContext: eventObjectMap.stripLine._options, mouseover: \"mouseover\", mousemove: \"mousemove\", mouseout: \"mouseout\", click: \"click\" };\n    //\teventObjectMaps.push(eventObjectMap);\n    //}\n    else if (eventObjectMap.objectType === \"legendItem\") {\n        var dataSeries = this.chart.data[eventObjectMap.dataSeriesIndex];\n        var dataPoint = eventObjectMap.dataPointIndex !== null ? dataSeries.dataPoints[eventObjectMap.dataPointIndex] : null; //Event Parameter should not contain reference to DataSeries directly. But to its options.\n\n        eventObjectMap.eventParameter = {\n          x: xy.x,\n          y: xy.y,\n          dataSeries: dataSeries._options,\n          dataPoint: dataPoint,\n          dataPointIndex: eventObjectMap.dataPointIndex,\n          dataSeriesIndex: eventObjectMap.dataSeriesIndex,\n          chart: this.chart._publicChartReference\n        };\n        eventObjectMap.eventContext = {\n          context: this.chart.legend,\n          userContext: this.chart.legend._options,\n          mouseover: \"itemmouseover\",\n          mousemove: \"itemmousemove\",\n          mouseout: \"itemmouseout\",\n          click: \"itemclick\"\n        };\n        eventObjectMaps.push(eventObjectMap);\n      }\n  } //Fire mouseout if existing mouseovered objects are not present in the objectmap.\n\n\n  var mouseOutObjectMapsExcluded = [];\n\n  for (var i = 0; i < this.mouseoveredObjectMaps.length; i++) {\n    var mouseOut = true;\n\n    for (var j = 0; j < eventObjectMaps.length; j++) {\n      if (eventObjectMaps[j].id === this.mouseoveredObjectMaps[i].id) {\n        mouseOut = false;\n        break;\n      }\n    }\n\n    if (mouseOut) {\n      this.fireEvent(this.mouseoveredObjectMaps[i], \"mouseout\", ev);\n    } else {\n      mouseOutObjectMapsExcluded.push(this.mouseoveredObjectMaps[i]);\n    }\n  }\n\n  this.mouseoveredObjectMaps = mouseOutObjectMapsExcluded; //Process new eventObectMaps\n  //If they already don't exist, add them and fire mouseover\n  //If ev.type is mousemove, then just fire mousemove\n  //If ev.type is click, then fire two events - click followed by mousemove\n\n  for (var i = 0; i < eventObjectMaps.length; i++) {\n    var existing = false;\n\n    for (var j = 0; j < this.mouseoveredObjectMaps.length; j++) {\n      if (eventObjectMaps[i].id === this.mouseoveredObjectMaps[j].id) {\n        existing = true;\n        break;\n      }\n    }\n\n    if (!existing) {\n      this.fireEvent(eventObjectMaps[i], \"mouseover\", ev);\n      this.mouseoveredObjectMaps.push(eventObjectMaps[i]);\n    }\n\n    if (ev.type === \"click\") {\n      this.fireEvent(eventObjectMaps[i], \"click\", ev);\n    } else if (ev.type === \"mousemove\") {\n      this.fireEvent(eventObjectMaps[i], \"mousemove\", ev);\n    }\n  }\n};\n\nEventManager.prototype.fireEvent = function (eventObjectMap, eventType, ev) {\n  if (!eventObjectMap || !eventType) return;\n  var eventParameter = eventObjectMap.eventParameter;\n  var eventContext = eventObjectMap.eventContext; //var context = eventObjectMap.eventContext.context;\n\n  var userContext = eventObjectMap.eventContext.userContext;\n  if (userContext && eventContext && userContext[eventContext[eventType]]) userContext[eventContext[eventType]].call(userContext, eventParameter);\n\n  if (eventType !== \"mouseout\") {\n    if (userContext.cursor && userContext.cursor !== ev.target.style.cursor) {\n      ev.target.style.cursor = userContext.cursor;\n    }\n  } else {\n    ev.target.style.cursor = this.chart._defaultCursor;\n    delete eventObjectMap.eventParameter; // reference no longer required.\n\n    delete eventObjectMap.eventContext; // reference no longer required.\n  } //This is just a quick fix. Need to find a better way of calling internal event handlers.\n\n\n  if (eventType === \"click\" && eventObjectMap.objectType === \"dataPoint\" && this.chart.pieDoughnutClickHandler) {\n    this.chart.pieDoughnutClickHandler.call(this.chart.data[eventObjectMap.dataSeriesIndex], eventParameter);\n  }\n};\n\nexport default EventManager;","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/canvasjs/src/core/event_manager.js"],"names":["createCanvas","getMouseCoordinates","isCanvasSupported","EventManager","chart","lastObjectId","_this","objectMap","rectangularRegionEventSubscriptions","previousDataPointEventObject","ghostCanvas","width","height","ghostCtx","getContext","eventHandler","ev","mouseEventHandler","call","mouseoveredObjectMaps","prototype","reset","eventObjects","clearRect","beginPath","getNewObjectTrackingId","type","eventObjectMaps","xy","id","getObjectAtXY","x","y","eventObjectMap","objectType","dataSeries","data","dataSeriesIndex","dataPoint","dataPoints","dataPointIndex","eventParameter","_options","index","_publicChartReference","eventContext","context","userContext","mouseover","mousemove","mouseout","click","push","legend","mouseOutObjectMapsExcluded","i","length","mouseOut","j","fireEvent","existing","eventType","cursor","target","style","_defaultCursor","pieDoughnutClickHandler"],"mappings":"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","sourcesContent":["\r\nimport {createCanvas, getMouseCoordinates, isCanvasSupported} from '../helpers/utils';\r\n\r\nfunction EventManager(chart) {\r\n  this.chart = chart;\r\n  this.lastObjectId = 0;\r\n  var _this = this;\r\n  this.objectMap = [];\r\n  this.rectangularRegionEventSubscriptions = [];\r\n  this.previousDataPointEventObject = null;\r\n  //this.previousDataSeriesEventObject = null;\r\n\r\n  this.ghostCanvas = createCanvas(this.chart.width, this.chart.height);\r\n  //this.ghostCanvas.width = this.chart.width;\r\n  //this.ghostCanvas.height = this.chart.height;\r\n\r\n  this.ghostCtx = this.ghostCanvas.getContext(\"2d\");\r\n\r\n  var eventHandler = function (ev) {\r\n    _this.mouseEventHandler.call(_this, ev);\r\n  };\r\n\r\n  this.mouseoveredObjectMaps = [];\r\n  //this.chart.canvas.addEventListener(\"mouseover\", eventHandler);\r\n  //this.chart.canvas.addEventListener(\"mousemove\", eventHandler);\r\n  //this.chart.canvas.addEventListener(\"mouseout\", eventHandler);\r\n  //this.chart.canvas.addEventListener(\"click\", eventHandler);\r\n}\r\n\r\nEventManager.prototype.reset = function () {\r\n  this.lastObjectId = 0;\r\n  this.objectMap = [];\r\n  this.rectangularRegionEventSubscriptions = [];\r\n  this.previousDataPointEventObject = null;\r\n\r\n  this.eventObjects = [];\r\n  //this.ghostCanvas.width = this.chart.width;\r\n  //this.ghostCanvas.height = this.chart.height;\r\n\r\n  if (isCanvasSupported) {\r\n    this.ghostCtx.clearRect(0, 0, this.chart.width, this.chart.height);\r\n    this.ghostCtx.beginPath();\r\n  }\r\n}\r\n\r\nEventManager.prototype.getNewObjectTrackingId = function () {\r\n  return ++this.lastObjectId;\r\n}\r\n\r\nEventManager.prototype.mouseEventHandler = function (ev) {\r\n\r\n  if (ev.type !== \"mousemove\" && ev.type !== \"click\")\r\n    return;\r\n\r\n  var eventObjectMaps = [];\r\n  var xy = getMouseCoordinates(ev);\r\n  var id = null;\r\n\r\n  //var dataPointInfo = this.chart.getDataPointAtXY(xy.x, xy.y, false);\r\n\r\n  //if (dataPointInfo) {\r\n  //\tid = dataPointInfo.dataSeries.dataPointIds[dataPointInfo.dataPointIndex];\r\n  //} else if (isCanvasSupported) {//IE9+\r\n  //\tid = getObjectId(xy.x, xy.y, this.ghostCtx);\r\n  //}\r\n  id = this.chart.getObjectAtXY(xy.x, xy.y, false);\r\n\r\n  if (id && typeof (this.objectMap[id]) !== \"undefined\") {\r\n\r\n    var eventObjectMap = this.objectMap[id];\r\n\r\n    if (eventObjectMap.objectType === \"dataPoint\") {\r\n      var dataSeries = this.chart.data[eventObjectMap.dataSeriesIndex];\r\n      var dataPoint = dataSeries.dataPoints[eventObjectMap.dataPointIndex];\r\n      var dataPointIndex = eventObjectMap.dataPointIndex;\r\n\r\n      //Event Parameter should not contain reference to dataSeries directly. But to its options.\r\n      eventObjectMap.eventParameter = {\r\n        x: xy.x, y: xy.y, dataPoint: dataPoint,\r\n        dataSeries: dataSeries._options, dataPointIndex: dataPointIndex, dataSeriesIndex: dataSeries.index,\r\n        chart: this.chart._publicChartReference\r\n      };\r\n      eventObjectMap.eventContext = {\r\n        context: dataPoint, userContext: dataPoint, mouseover: \"mouseover\", mousemove: \"mousemove\", mouseout: \"mouseout\", click: \"click\"\r\n      };\r\n      eventObjectMaps.push(eventObjectMap);\r\n\r\n      //Add Dataseries too because mouse event on dataPoint also means there is an event on dataSeries. DataSeries is not present on ghost canvas\r\n      eventObjectMap = this.objectMap[dataSeries.id];\r\n\r\n      //Event Parameter should not contain reference to dataSeries directly. But to its options.\r\n      eventObjectMap.eventParameter = {\r\n        x: xy.x, y: xy.y,\r\n        dataPoint: dataPoint, dataSeries: dataSeries._options, dataPointIndex: dataPointIndex, dataSeriesIndex: dataSeries.index,\r\n        chart: this.chart._publicChartReference\r\n      };\r\n\r\n      eventObjectMap.eventContext = {\r\n        context: dataSeries, userContext: dataSeries._options, mouseover: \"mouseover\", mousemove: \"mousemove\", mouseout: \"mouseout\", click: \"click\"\r\n      };\r\n      eventObjectMaps.push(this.objectMap[dataSeries.id]);\r\n    }\r\n      //else if (eventObjectMap.objectType === \"stripLine\") {\r\n\r\n      //\t//Event Parameter should not contain reference to stripLine directly. But to its options.\r\n      //\teventObjectMap.eventParameter = { x: xy.x, y: xy.y, stripLine: eventObjectMap.stripLine._options, axis: eventObjectMap.axis._options, stripLineIndex: eventObjectMap.stripLineIndex };\r\n      //\teventObjectMap.eventContext = { context: eventObjectMap.stripLine, userContext: eventObjectMap.stripLine._options, mouseover: \"mouseover\", mousemove: \"mousemove\", mouseout: \"mouseout\", click: \"click\" };\r\n\r\n      //\teventObjectMaps.push(eventObjectMap);\r\n      //}\r\n    else if (eventObjectMap.objectType === \"legendItem\") {\r\n\r\n      var dataSeries = this.chart.data[eventObjectMap.dataSeriesIndex];\r\n      var dataPoint = eventObjectMap.dataPointIndex !== null ? dataSeries.dataPoints[eventObjectMap.dataPointIndex] : null;\r\n\r\n      //Event Parameter should not contain reference to DataSeries directly. But to its options.\r\n      eventObjectMap.eventParameter = {\r\n        x: xy.x, y: xy.y,\r\n        dataSeries: dataSeries._options, dataPoint: dataPoint, dataPointIndex: eventObjectMap.dataPointIndex, dataSeriesIndex: eventObjectMap.dataSeriesIndex,\r\n        chart: this.chart._publicChartReference\r\n      };\r\n      eventObjectMap.eventContext = {\r\n        context: this.chart.legend, userContext: this.chart.legend._options, mouseover: \"itemmouseover\", mousemove: \"itemmousemove\", mouseout: \"itemmouseout\", click: \"itemclick\"\r\n      };\r\n      eventObjectMaps.push(eventObjectMap);\r\n    }\r\n  }\r\n\r\n  //Fire mouseout if existing mouseovered objects are not present in the objectmap.\r\n  var mouseOutObjectMapsExcluded = [];\r\n  for (var i = 0; i < this.mouseoveredObjectMaps.length; i++) {\r\n    var mouseOut = true;\r\n\r\n    for (var j = 0; j < eventObjectMaps.length; j++) {\r\n      if (eventObjectMaps[j].id === this.mouseoveredObjectMaps[i].id) {\r\n        mouseOut = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (mouseOut) {\r\n      this.fireEvent(this.mouseoveredObjectMaps[i], \"mouseout\", ev);\r\n    } else {\r\n      mouseOutObjectMapsExcluded.push(this.mouseoveredObjectMaps[i]);\r\n    }\r\n  }\r\n\r\n  this.mouseoveredObjectMaps = mouseOutObjectMapsExcluded;\r\n\r\n  //Process new eventObectMaps\r\n  //If they already don't exist, add them and fire mouseover\r\n  //If ev.type is mousemove, then just fire mousemove\r\n  //If ev.type is click, then fire two events - click followed by mousemove\r\n  for (var i = 0; i < eventObjectMaps.length; i++) {\r\n\r\n    var existing = false;\r\n\r\n    for (var j = 0; j < this.mouseoveredObjectMaps.length; j++) {\r\n      if (eventObjectMaps[i].id === this.mouseoveredObjectMaps[j].id) {\r\n        existing = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!existing) {\r\n      this.fireEvent(eventObjectMaps[i], \"mouseover\", ev);\r\n      this.mouseoveredObjectMaps.push(eventObjectMaps[i]);\r\n    }\r\n\r\n    if (ev.type === \"click\") {\r\n      this.fireEvent(eventObjectMaps[i], \"click\", ev);\r\n    } else if (ev.type === \"mousemove\") {\r\n      this.fireEvent(eventObjectMaps[i], \"mousemove\", ev);\r\n    }\r\n  }\r\n}\r\n\r\nEventManager.prototype.fireEvent = function (eventObjectMap, eventType, ev) {\r\n\r\n  if (!eventObjectMap || !eventType)\r\n    return;\r\n\r\n  var eventParameter = eventObjectMap.eventParameter;\r\n  var eventContext = eventObjectMap.eventContext;\r\n  //var context = eventObjectMap.eventContext.context;\r\n  var userContext = eventObjectMap.eventContext.userContext\r\n\r\n  if (userContext && eventContext && userContext[eventContext[eventType]])\r\n    userContext[eventContext[eventType]].call(userContext, eventParameter);\r\n\r\n  if (eventType !== \"mouseout\") {\r\n    if (userContext.cursor && userContext.cursor !== ev.target.style.cursor) {\r\n      ev.target.style.cursor = userContext.cursor;\r\n    }\r\n  } else {\r\n    ev.target.style.cursor = this.chart._defaultCursor;\r\n    delete eventObjectMap.eventParameter; // reference no longer required.\r\n    delete eventObjectMap.eventContext; // reference no longer required.\r\n  }\r\n\r\n  //This is just a quick fix. Need to find a better way of calling internal event handlers.\r\n  if (eventType === \"click\" && eventObjectMap.objectType === \"dataPoint\" && this.chart.pieDoughnutClickHandler) {\r\n    this.chart.pieDoughnutClickHandler.call(this.chart.data[eventObjectMap.dataSeriesIndex], eventParameter);\r\n  }\r\n}\r\n\r\nexport default EventManager;\r\n"]},"metadata":{},"sourceType":"module"}