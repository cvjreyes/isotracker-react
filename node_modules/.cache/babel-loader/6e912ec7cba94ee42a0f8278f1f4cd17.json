{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { expandMetaType, assert, isUnsignedNumber } from \"../utils.mjs\";\nimport LazyFactoryMap from \"../lazyFactoryMap.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\r\n * @class CellMeta\r\n *\r\n * The cell meta object is a root of all settings defined for the specific cell rendered by the\r\n * Handsontable. Each cell meta inherits settings from higher layers. When a property doesn't\r\n * exist in that layer, it is looked up through a prototype to the highest layer. Starting\r\n * from CellMeta -> ColumnMeta and ending to GlobalMeta, which stores default settings. Adding,\r\n * removing, or changing property in that object has no direct reflection on any other layers.\r\n *\r\n * +-------------+\r\n * │ GlobalMeta  │\r\n * │ (prototype) │\r\n * +-------------+\\\r\n *       │         \\\r\n *       │          \\\r\n *      \\│/         _\\|\r\n * +-------------+    +-------------+\r\n * │ TableMeta   │    │ ColumnMeta  │\r\n * │ (instance)  │    │ (prototype) │\r\n * +-------------+    +-------------+\r\n *                         │\r\n *                         │\r\n *                        \\│/\r\n *                    +-------------+\r\n *                    │  CellMeta   │\r\n *                    │ (instance)  │\r\n *                    +-------------+\r\n */\n\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\nvar CellMeta = /*#__PURE__*/function () {\n  function CellMeta(columnMeta) {\n    var _this = this;\n\n    _classCallCheck(this, CellMeta);\n    /**\r\n     * Reference to the ColumnMeta layer. While creating new cell meta objects, all new objects\r\n     * inherit properties from the ColumnMeta layer.\r\n     *\r\n     * @type {ColumnMeta}\r\n     */\n\n\n    this.columnMeta = columnMeta;\n    /**\r\n     * Holder for cell meta objects, organized as a grid of LazyFactoryMap of LazyFactoryMaps.\r\n     * The access to the cell meta object is done through access to the row defined by the physical\r\n     * row index and then by accessing the second LazyFactory Map under the physical column index.\r\n     *\r\n     * @type {LazyFactoryMap<number, LazyFactoryMap<number, object>>}\r\n     */\n\n    this.metas = new LazyFactoryMap(function () {\n      return _this._createRow();\n    });\n  }\n  /**\r\n   * Updates cell meta object by merging settings with the current state.\r\n   *\r\n   * @param {number} physicalRow The physical row index which points what cell meta object is updated.\r\n   * @param {number} physicalColumn The physical column index which points what cell meta object is updated.\r\n   * @param {object} settings An object to merge with.\r\n   */\n\n\n  _createClass(CellMeta, [{\n    key: \"updateMeta\",\n    value: function updateMeta(physicalRow, physicalColumn, settings) {\n      var meta = this.getMeta(physicalRow, physicalColumn);\n      extend(meta, settings);\n      extend(meta, expandMetaType(settings.type, meta));\n    }\n    /**\r\n     * Creates one or more rows at specific position.\r\n     *\r\n     * @param {number} physicalRow The physical row index which points from what position the row is added.\r\n     * @param {number} amount An amount of rows to add.\r\n     */\n\n  }, {\n    key: \"createRow\",\n    value: function createRow(physicalRow, amount) {\n      this.metas.insert(physicalRow, amount);\n    }\n    /**\r\n     * Creates one or more columns at specific position.\r\n     *\r\n     * @param {number} physicalColumn The physical column index which points from what position the column is added.\r\n     * @param {number} amount An amount of columns to add.\r\n     */\n\n  }, {\n    key: \"createColumn\",\n    value: function createColumn(physicalColumn, amount) {\n      for (var i = 0; i < this.metas.size(); i++) {\n        this.metas.obtain(i).insert(physicalColumn, amount);\n      }\n    }\n    /**\r\n     * Removes one or more rows from the collection.\r\n     *\r\n     * @param {number} physicalRow The physical row index which points from what position the row is removed.\r\n     * @param {number} amount An amount of rows to remove.\r\n     */\n\n  }, {\n    key: \"removeRow\",\n    value: function removeRow(physicalRow, amount) {\n      this.metas.remove(physicalRow, amount);\n    }\n    /**\r\n     * Removes one or more columns from the collection.\r\n     *\r\n     * @param {number} physicalColumn The physical column index which points from what position the column is removed.\r\n     * @param {number} amount An amount of columns to remove.\r\n     */\n\n  }, {\n    key: \"removeColumn\",\n    value: function removeColumn(physicalColumn, amount) {\n      for (var i = 0; i < this.metas.size(); i++) {\n        this.metas.obtain(i).remove(physicalColumn, amount);\n      }\n    }\n    /**\r\n     * Gets settings object for this layer.\r\n     *\r\n     * @param {number} physicalRow The physical row index.\r\n     * @param {number} physicalColumn The physical column index.\r\n     * @param {string} [key] If the key exists its value will be returned, otherwise the whole cell meta object.\r\n     * @returns {object}\r\n     */\n\n  }, {\n    key: \"getMeta\",\n    value: function getMeta(physicalRow, physicalColumn, key) {\n      var cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\n\n      if (key === void 0) {\n        return cellMeta;\n      }\n\n      return cellMeta[key];\n    }\n    /**\r\n     * Sets settings object for this layer defined by \"key\" property.\r\n     *\r\n     * @param {number} physicalRow The physical row index.\r\n     * @param {number} physicalColumn The physical column index.\r\n     * @param {string} key The property name to set.\r\n     * @param {*} value Value to save.\r\n     */\n\n  }, {\n    key: \"setMeta\",\n    value: function setMeta(physicalRow, physicalColumn, key, value) {\n      var cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\n      cellMeta[key] = value;\n    }\n    /**\r\n     * Removes a property defined by the \"key\" argument from the cell meta object.\r\n     *\r\n     * @param {number} physicalRow The physical row index.\r\n     * @param {number} physicalColumn The physical column index.\r\n     * @param {string} key The property name to remove.\r\n     */\n\n  }, {\n    key: \"removeMeta\",\n    value: function removeMeta(physicalRow, physicalColumn, key) {\n      var cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\n      delete cellMeta[key];\n    }\n    /**\r\n     * Returns all cell meta objects that were created during the Handsontable operation. As cell meta\r\n     * objects are created lazy, the length of the returned collection depends on how and when the\r\n     * table has asked for access to that meta objects.\r\n     *\r\n     * @returns {object[]}\r\n     */\n\n  }, {\n    key: \"getMetas\",\n    value: function getMetas() {\n      var metas = [];\n      var rows = Array.from(this.metas.values());\n\n      for (var row = 0; row < rows.length; row++) {\n        metas.push.apply(metas, _toConsumableArray(rows[row].values()));\n      }\n\n      return metas;\n    }\n    /**\r\n     * Returns all cell meta objects that were created during the Handsontable operation but for\r\n     * specyfic row index.\r\n     *\r\n     * @param {number} physicalRow The physical row index.\r\n     * @returns {object[]}\r\n     */\n\n  }, {\n    key: \"getMetasAtRow\",\n    value: function getMetasAtRow(physicalRow) {\n      assert(function () {\n        return isUnsignedNumber(physicalRow);\n      }, 'Expecting an unsigned number.');\n      var rowsMeta = new Map(this.metas);\n      return rowsMeta.has(physicalRow) ? Array.from(rowsMeta.get(physicalRow).values()) : [];\n    }\n    /**\r\n     * Clears all saved cell meta objects.\r\n     */\n\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this.metas.clear();\n    }\n    /**\r\n     * Creates and returns new structure for cell meta objects stored in columnar axis.\r\n     *\r\n     * @private\r\n     * @returns {object}\r\n     */\n\n  }, {\n    key: \"_createRow\",\n    value: function _createRow() {\n      var _this2 = this;\n\n      return new LazyFactoryMap(function (physicalColumn) {\n        return _this2._createMeta(physicalColumn);\n      });\n    }\n    /**\r\n     * Creates and returns new cell meta object with properties inherited from the column meta layer.\r\n     *\r\n     * @private\r\n     * @param {number} physicalColumn The physical column index.\r\n     * @returns {object}\r\n     */\n\n  }, {\n    key: \"_createMeta\",\n    value: function _createMeta(physicalColumn) {\n      var ColumnMeta = this.columnMeta.getMetaConstructor(physicalColumn);\n      return new ColumnMeta();\n    }\n  }]);\n\n  return CellMeta;\n}();\n\nexport { CellMeta as default };","map":{"version":3,"sources":["C:/xampp/htdocs/isotracker-dev/isotracker-react/node_modules/handsontable/dataMap/metaManager/metaLayers/cellMeta.mjs"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","extend","expandMetaType","assert","isUnsignedNumber","LazyFactoryMap","CellMeta","columnMeta","_this","metas","_createRow","value","updateMeta","physicalRow","physicalColumn","settings","meta","getMeta","type","createRow","amount","insert","createColumn","size","obtain","removeRow","remove","removeColumn","cellMeta","setMeta","removeMeta","getMetas","rows","values","row","push","apply","getMetasAtRow","rowsMeta","Map","has","get","clearCache","clear","_this2","_createMeta","ColumnMeta","getMetaConstructor","default"],"mappings":"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","sourcesContent":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\r\n\r\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\r\n\r\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\r\n\r\nimport \"core-js/modules/es.array.from.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\nimport \"core-js/modules/es.map.js\";\r\nimport \"core-js/modules/es.symbol.js\";\r\nimport \"core-js/modules/es.symbol.description.js\";\r\nimport \"core-js/modules/es.symbol.iterator.js\";\r\nimport \"core-js/modules/es.array.slice.js\";\r\nimport \"core-js/modules/es.function.name.js\";\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nimport { extend } from \"../../../helpers/object.mjs\";\r\nimport { expandMetaType, assert, isUnsignedNumber } from \"../utils.mjs\";\r\nimport LazyFactoryMap from \"../lazyFactoryMap.mjs\";\r\n/* eslint-disable jsdoc/require-description-complete-sentence */\r\n\r\n/**\r\n * @class CellMeta\r\n *\r\n * The cell meta object is a root of all settings defined for the specific cell rendered by the\r\n * Handsontable. Each cell meta inherits settings from higher layers. When a property doesn't\r\n * exist in that layer, it is looked up through a prototype to the highest layer. Starting\r\n * from CellMeta -> ColumnMeta and ending to GlobalMeta, which stores default settings. Adding,\r\n * removing, or changing property in that object has no direct reflection on any other layers.\r\n *\r\n * +-------------+\r\n * │ GlobalMeta  │\r\n * │ (prototype) │\r\n * +-------------+\\\r\n *       │         \\\r\n *       │          \\\r\n *      \\│/         _\\|\r\n * +-------------+    +-------------+\r\n * │ TableMeta   │    │ ColumnMeta  │\r\n * │ (instance)  │    │ (prototype) │\r\n * +-------------+    +-------------+\r\n *                         │\r\n *                         │\r\n *                        \\│/\r\n *                    +-------------+\r\n *                    │  CellMeta   │\r\n *                    │ (instance)  │\r\n *                    +-------------+\r\n */\r\n\r\n/* eslint-enable jsdoc/require-description-complete-sentence */\r\n\r\nvar CellMeta = /*#__PURE__*/function () {\r\n  function CellMeta(columnMeta) {\r\n    var _this = this;\r\n\r\n    _classCallCheck(this, CellMeta);\r\n\r\n    /**\r\n     * Reference to the ColumnMeta layer. While creating new cell meta objects, all new objects\r\n     * inherit properties from the ColumnMeta layer.\r\n     *\r\n     * @type {ColumnMeta}\r\n     */\r\n    this.columnMeta = columnMeta;\r\n    /**\r\n     * Holder for cell meta objects, organized as a grid of LazyFactoryMap of LazyFactoryMaps.\r\n     * The access to the cell meta object is done through access to the row defined by the physical\r\n     * row index and then by accessing the second LazyFactory Map under the physical column index.\r\n     *\r\n     * @type {LazyFactoryMap<number, LazyFactoryMap<number, object>>}\r\n     */\r\n\r\n    this.metas = new LazyFactoryMap(function () {\r\n      return _this._createRow();\r\n    });\r\n  }\r\n  /**\r\n   * Updates cell meta object by merging settings with the current state.\r\n   *\r\n   * @param {number} physicalRow The physical row index which points what cell meta object is updated.\r\n   * @param {number} physicalColumn The physical column index which points what cell meta object is updated.\r\n   * @param {object} settings An object to merge with.\r\n   */\r\n\r\n\r\n  _createClass(CellMeta, [{\r\n    key: \"updateMeta\",\r\n    value: function updateMeta(physicalRow, physicalColumn, settings) {\r\n      var meta = this.getMeta(physicalRow, physicalColumn);\r\n      extend(meta, settings);\r\n      extend(meta, expandMetaType(settings.type, meta));\r\n    }\r\n    /**\r\n     * Creates one or more rows at specific position.\r\n     *\r\n     * @param {number} physicalRow The physical row index which points from what position the row is added.\r\n     * @param {number} amount An amount of rows to add.\r\n     */\r\n\r\n  }, {\r\n    key: \"createRow\",\r\n    value: function createRow(physicalRow, amount) {\r\n      this.metas.insert(physicalRow, amount);\r\n    }\r\n    /**\r\n     * Creates one or more columns at specific position.\r\n     *\r\n     * @param {number} physicalColumn The physical column index which points from what position the column is added.\r\n     * @param {number} amount An amount of columns to add.\r\n     */\r\n\r\n  }, {\r\n    key: \"createColumn\",\r\n    value: function createColumn(physicalColumn, amount) {\r\n      for (var i = 0; i < this.metas.size(); i++) {\r\n        this.metas.obtain(i).insert(physicalColumn, amount);\r\n      }\r\n    }\r\n    /**\r\n     * Removes one or more rows from the collection.\r\n     *\r\n     * @param {number} physicalRow The physical row index which points from what position the row is removed.\r\n     * @param {number} amount An amount of rows to remove.\r\n     */\r\n\r\n  }, {\r\n    key: \"removeRow\",\r\n    value: function removeRow(physicalRow, amount) {\r\n      this.metas.remove(physicalRow, amount);\r\n    }\r\n    /**\r\n     * Removes one or more columns from the collection.\r\n     *\r\n     * @param {number} physicalColumn The physical column index which points from what position the column is removed.\r\n     * @param {number} amount An amount of columns to remove.\r\n     */\r\n\r\n  }, {\r\n    key: \"removeColumn\",\r\n    value: function removeColumn(physicalColumn, amount) {\r\n      for (var i = 0; i < this.metas.size(); i++) {\r\n        this.metas.obtain(i).remove(physicalColumn, amount);\r\n      }\r\n    }\r\n    /**\r\n     * Gets settings object for this layer.\r\n     *\r\n     * @param {number} physicalRow The physical row index.\r\n     * @param {number} physicalColumn The physical column index.\r\n     * @param {string} [key] If the key exists its value will be returned, otherwise the whole cell meta object.\r\n     * @returns {object}\r\n     */\r\n\r\n  }, {\r\n    key: \"getMeta\",\r\n    value: function getMeta(physicalRow, physicalColumn, key) {\r\n      var cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\r\n\r\n      if (key === void 0) {\r\n        return cellMeta;\r\n      }\r\n\r\n      return cellMeta[key];\r\n    }\r\n    /**\r\n     * Sets settings object for this layer defined by \"key\" property.\r\n     *\r\n     * @param {number} physicalRow The physical row index.\r\n     * @param {number} physicalColumn The physical column index.\r\n     * @param {string} key The property name to set.\r\n     * @param {*} value Value to save.\r\n     */\r\n\r\n  }, {\r\n    key: \"setMeta\",\r\n    value: function setMeta(physicalRow, physicalColumn, key, value) {\r\n      var cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\r\n      cellMeta[key] = value;\r\n    }\r\n    /**\r\n     * Removes a property defined by the \"key\" argument from the cell meta object.\r\n     *\r\n     * @param {number} physicalRow The physical row index.\r\n     * @param {number} physicalColumn The physical column index.\r\n     * @param {string} key The property name to remove.\r\n     */\r\n\r\n  }, {\r\n    key: \"removeMeta\",\r\n    value: function removeMeta(physicalRow, physicalColumn, key) {\r\n      var cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\r\n      delete cellMeta[key];\r\n    }\r\n    /**\r\n     * Returns all cell meta objects that were created during the Handsontable operation. As cell meta\r\n     * objects are created lazy, the length of the returned collection depends on how and when the\r\n     * table has asked for access to that meta objects.\r\n     *\r\n     * @returns {object[]}\r\n     */\r\n\r\n  }, {\r\n    key: \"getMetas\",\r\n    value: function getMetas() {\r\n      var metas = [];\r\n      var rows = Array.from(this.metas.values());\r\n\r\n      for (var row = 0; row < rows.length; row++) {\r\n        metas.push.apply(metas, _toConsumableArray(rows[row].values()));\r\n      }\r\n\r\n      return metas;\r\n    }\r\n    /**\r\n     * Returns all cell meta objects that were created during the Handsontable operation but for\r\n     * specyfic row index.\r\n     *\r\n     * @param {number} physicalRow The physical row index.\r\n     * @returns {object[]}\r\n     */\r\n\r\n  }, {\r\n    key: \"getMetasAtRow\",\r\n    value: function getMetasAtRow(physicalRow) {\r\n      assert(function () {\r\n        return isUnsignedNumber(physicalRow);\r\n      }, 'Expecting an unsigned number.');\r\n      var rowsMeta = new Map(this.metas);\r\n      return rowsMeta.has(physicalRow) ? Array.from(rowsMeta.get(physicalRow).values()) : [];\r\n    }\r\n    /**\r\n     * Clears all saved cell meta objects.\r\n     */\r\n\r\n  }, {\r\n    key: \"clearCache\",\r\n    value: function clearCache() {\r\n      this.metas.clear();\r\n    }\r\n    /**\r\n     * Creates and returns new structure for cell meta objects stored in columnar axis.\r\n     *\r\n     * @private\r\n     * @returns {object}\r\n     */\r\n\r\n  }, {\r\n    key: \"_createRow\",\r\n    value: function _createRow() {\r\n      var _this2 = this;\r\n\r\n      return new LazyFactoryMap(function (physicalColumn) {\r\n        return _this2._createMeta(physicalColumn);\r\n      });\r\n    }\r\n    /**\r\n     * Creates and returns new cell meta object with properties inherited from the column meta layer.\r\n     *\r\n     * @private\r\n     * @param {number} physicalColumn The physical column index.\r\n     * @returns {object}\r\n     */\r\n\r\n  }, {\r\n    key: \"_createMeta\",\r\n    value: function _createMeta(physicalColumn) {\r\n      var ColumnMeta = this.columnMeta.getMetaConstructor(physicalColumn);\r\n      return new ColumnMeta();\r\n    }\r\n  }]);\r\n\r\n  return CellMeta;\r\n}();\r\n\r\nexport { CellMeta as default };"]},"metadata":{},"sourceType":"module"}